
GPSRecorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bd5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017d0  0801be20  0801be20  0002be20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d5f0  0801d5f0  00030428  2**0
                  CONTENTS
  4 .ARM          00000000  0801d5f0  0801d5f0  00030428  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d5f0  0801d5f0  00030428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d5f0  0801d5f0  0002d5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d5f4  0801d5f4  0002d5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000428  20000000  0801d5f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d0  20000428  0801da20  00030428  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200019f8  0801da20  000319f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a98  00000000  00000000  00030450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bce  00000000  00000000  00051ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  00056ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a70  00000000  00000000  00058460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211d8  00000000  00000000  00059ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214c7  00000000  00000000  0007b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3dca  00000000  00000000  0009c56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007720  00000000  00000000  0014038c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000428 	.word	0x20000428
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801be04 	.word	0x0801be04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000042c 	.word	0x2000042c
 8000104:	0801be04 	.word	0x0801be04

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f000 ffd5 	bl	8001400 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 ff25 	bl	80012b0 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffc7 	bl	8001400 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffbd 	bl	8001400 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff4d 	bl	8001334 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 ff43 	bl	8001334 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__clzsi2>:
 80004bc:	211c      	movs	r1, #28
 80004be:	2301      	movs	r3, #1
 80004c0:	041b      	lsls	r3, r3, #16
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0xe>
 80004c6:	0c00      	lsrs	r0, r0, #16
 80004c8:	3910      	subs	r1, #16
 80004ca:	0a1b      	lsrs	r3, r3, #8
 80004cc:	4298      	cmp	r0, r3
 80004ce:	d301      	bcc.n	80004d4 <__clzsi2+0x18>
 80004d0:	0a00      	lsrs	r0, r0, #8
 80004d2:	3908      	subs	r1, #8
 80004d4:	091b      	lsrs	r3, r3, #4
 80004d6:	4298      	cmp	r0, r3
 80004d8:	d301      	bcc.n	80004de <__clzsi2+0x22>
 80004da:	0900      	lsrs	r0, r0, #4
 80004dc:	3904      	subs	r1, #4
 80004de:	a202      	add	r2, pc, #8	; (adr r2, 80004e8 <__clzsi2+0x2c>)
 80004e0:	5c10      	ldrb	r0, [r2, r0]
 80004e2:	1840      	adds	r0, r0, r1
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	02020304 	.word	0x02020304
 80004ec:	01010101 	.word	0x01010101
	...

080004f8 <__ctzsi2>:
 80004f8:	4241      	negs	r1, r0
 80004fa:	4008      	ands	r0, r1
 80004fc:	211c      	movs	r1, #28
 80004fe:	2301      	movs	r3, #1
 8000500:	041b      	lsls	r3, r3, #16
 8000502:	4298      	cmp	r0, r3
 8000504:	d301      	bcc.n	800050a <__ctzsi2+0x12>
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	3910      	subs	r1, #16
 800050a:	0a1b      	lsrs	r3, r3, #8
 800050c:	4298      	cmp	r0, r3
 800050e:	d301      	bcc.n	8000514 <__ctzsi2+0x1c>
 8000510:	0a00      	lsrs	r0, r0, #8
 8000512:	3908      	subs	r1, #8
 8000514:	091b      	lsrs	r3, r3, #4
 8000516:	4298      	cmp	r0, r3
 8000518:	d301      	bcc.n	800051e <__ctzsi2+0x26>
 800051a:	0900      	lsrs	r0, r0, #4
 800051c:	3904      	subs	r1, #4
 800051e:	a202      	add	r2, pc, #8	; (adr r2, 8000528 <__ctzsi2+0x30>)
 8000520:	5c10      	ldrb	r0, [r2, r0]
 8000522:	1a40      	subs	r0, r0, r1
 8000524:	4770      	bx	lr
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	1d1d1c1b 	.word	0x1d1d1c1b
 800052c:	1e1e1e1e 	.word	0x1e1e1e1e
 8000530:	1f1f1f1f 	.word	0x1f1f1f1f
 8000534:	1f1f1f1f 	.word	0x1f1f1f1f

08000538 <__popcountsi2>:
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <__popcountsi2+0x28>)
 800053a:	0843      	lsrs	r3, r0, #1
 800053c:	4013      	ands	r3, r2
 800053e:	1ac0      	subs	r0, r0, r3
 8000540:	0003      	movs	r3, r0
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <__popcountsi2+0x2c>)
 8000544:	0880      	lsrs	r0, r0, #2
 8000546:	4010      	ands	r0, r2
 8000548:	4013      	ands	r3, r2
 800054a:	181b      	adds	r3, r3, r0
 800054c:	0918      	lsrs	r0, r3, #4
 800054e:	18c0      	adds	r0, r0, r3
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <__popcountsi2+0x30>)
 8000552:	4003      	ands	r3, r0
 8000554:	0218      	lsls	r0, r3, #8
 8000556:	18c0      	adds	r0, r0, r3
 8000558:	0403      	lsls	r3, r0, #16
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	0e00      	lsrs	r0, r0, #24
 800055e:	4770      	bx	lr
 8000560:	55555555 	.word	0x55555555
 8000564:	33333333 	.word	0x33333333
 8000568:	0f0f0f0f 	.word	0x0f0f0f0f

0800056c <__aeabi_d2uiz>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	2200      	movs	r2, #0
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <__aeabi_d2uiz+0x38>)
 8000572:	0004      	movs	r4, r0
 8000574:	000d      	movs	r5, r1
 8000576:	f7ff ff97 	bl	80004a8 <__aeabi_dcmpge>
 800057a:	2800      	cmp	r0, #0
 800057c:	d104      	bne.n	8000588 <__aeabi_d2uiz+0x1c>
 800057e:	0020      	movs	r0, r4
 8000580:	0029      	movs	r1, r5
 8000582:	f001 fdbd 	bl	8002100 <__aeabi_d2iz>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <__aeabi_d2uiz+0x38>)
 800058a:	2200      	movs	r2, #0
 800058c:	0020      	movs	r0, r4
 800058e:	0029      	movs	r1, r5
 8000590:	f001 fa06 	bl	80019a0 <__aeabi_dsub>
 8000594:	f001 fdb4 	bl	8002100 <__aeabi_d2iz>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	061b      	lsls	r3, r3, #24
 800059c:	469c      	mov	ip, r3
 800059e:	4460      	add	r0, ip
 80005a0:	e7f1      	b.n	8000586 <__aeabi_d2uiz+0x1a>
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	41e00000 	.word	0x41e00000

080005a8 <__aeabi_d2lz>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	0005      	movs	r5, r0
 80005ac:	000c      	movs	r4, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	0028      	movs	r0, r5
 80005b4:	0021      	movs	r1, r4
 80005b6:	f7ff ff59 	bl	800046c <__aeabi_dcmplt>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d108      	bne.n	80005d0 <__aeabi_d2lz+0x28>
 80005be:	0028      	movs	r0, r5
 80005c0:	0021      	movs	r1, r4
 80005c2:	f000 f80f 	bl	80005e4 <__aeabi_d2ulz>
 80005c6:	0002      	movs	r2, r0
 80005c8:	000b      	movs	r3, r1
 80005ca:	0010      	movs	r0, r2
 80005cc:	0019      	movs	r1, r3
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	061b      	lsls	r3, r3, #24
 80005d4:	18e1      	adds	r1, r4, r3
 80005d6:	0028      	movs	r0, r5
 80005d8:	f000 f804 	bl	80005e4 <__aeabi_d2ulz>
 80005dc:	2300      	movs	r3, #0
 80005de:	4242      	negs	r2, r0
 80005e0:	418b      	sbcs	r3, r1
 80005e2:	e7f2      	b.n	80005ca <__aeabi_d2lz+0x22>

080005e4 <__aeabi_d2ulz>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <__aeabi_d2ulz+0x34>)
 80005ea:	000d      	movs	r5, r1
 80005ec:	0004      	movs	r4, r0
 80005ee:	f000 ff6b 	bl	80014c8 <__aeabi_dmul>
 80005f2:	f7ff ffbb 	bl	800056c <__aeabi_d2uiz>
 80005f6:	0006      	movs	r6, r0
 80005f8:	f001 fde8 	bl	80021cc <__aeabi_ui2d>
 80005fc:	2200      	movs	r2, #0
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <__aeabi_d2ulz+0x38>)
 8000600:	f000 ff62 	bl	80014c8 <__aeabi_dmul>
 8000604:	0002      	movs	r2, r0
 8000606:	000b      	movs	r3, r1
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f001 f9c8 	bl	80019a0 <__aeabi_dsub>
 8000610:	f7ff ffac 	bl	800056c <__aeabi_d2uiz>
 8000614:	0031      	movs	r1, r6
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	3df00000 	.word	0x3df00000
 800061c:	41f00000 	.word	0x41f00000

08000620 <__aeabi_l2d>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	0006      	movs	r6, r0
 8000624:	0008      	movs	r0, r1
 8000626:	f001 fda1 	bl	800216c <__aeabi_i2d>
 800062a:	2200      	movs	r2, #0
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <__aeabi_l2d+0x28>)
 800062e:	f000 ff4b 	bl	80014c8 <__aeabi_dmul>
 8000632:	000d      	movs	r5, r1
 8000634:	0004      	movs	r4, r0
 8000636:	0030      	movs	r0, r6
 8000638:	f001 fdc8 	bl	80021cc <__aeabi_ui2d>
 800063c:	002b      	movs	r3, r5
 800063e:	0022      	movs	r2, r4
 8000640:	f000 f804 	bl	800064c <__aeabi_dadd>
 8000644:	bd70      	pop	{r4, r5, r6, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	41f00000 	.word	0x41f00000

0800064c <__aeabi_dadd>:
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	464f      	mov	r7, r9
 8000650:	4646      	mov	r6, r8
 8000652:	46d6      	mov	lr, sl
 8000654:	000d      	movs	r5, r1
 8000656:	0004      	movs	r4, r0
 8000658:	b5c0      	push	{r6, r7, lr}
 800065a:	001f      	movs	r7, r3
 800065c:	0011      	movs	r1, r2
 800065e:	0328      	lsls	r0, r5, #12
 8000660:	0f62      	lsrs	r2, r4, #29
 8000662:	0a40      	lsrs	r0, r0, #9
 8000664:	4310      	orrs	r0, r2
 8000666:	007a      	lsls	r2, r7, #1
 8000668:	0d52      	lsrs	r2, r2, #21
 800066a:	00e3      	lsls	r3, r4, #3
 800066c:	033c      	lsls	r4, r7, #12
 800066e:	4691      	mov	r9, r2
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	0ffa      	lsrs	r2, r7, #31
 8000674:	0f4f      	lsrs	r7, r1, #29
 8000676:	006e      	lsls	r6, r5, #1
 8000678:	4327      	orrs	r7, r4
 800067a:	4692      	mov	sl, r2
 800067c:	46b8      	mov	r8, r7
 800067e:	0d76      	lsrs	r6, r6, #21
 8000680:	0fed      	lsrs	r5, r5, #31
 8000682:	00c9      	lsls	r1, r1, #3
 8000684:	4295      	cmp	r5, r2
 8000686:	d100      	bne.n	800068a <__aeabi_dadd+0x3e>
 8000688:	e099      	b.n	80007be <__aeabi_dadd+0x172>
 800068a:	464c      	mov	r4, r9
 800068c:	1b34      	subs	r4, r6, r4
 800068e:	46a4      	mov	ip, r4
 8000690:	2c00      	cmp	r4, #0
 8000692:	dc00      	bgt.n	8000696 <__aeabi_dadd+0x4a>
 8000694:	e07c      	b.n	8000790 <__aeabi_dadd+0x144>
 8000696:	464a      	mov	r2, r9
 8000698:	2a00      	cmp	r2, #0
 800069a:	d100      	bne.n	800069e <__aeabi_dadd+0x52>
 800069c:	e0b8      	b.n	8000810 <__aeabi_dadd+0x1c4>
 800069e:	4ac5      	ldr	r2, [pc, #788]	; (80009b4 <__aeabi_dadd+0x368>)
 80006a0:	4296      	cmp	r6, r2
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x5a>
 80006a4:	e11c      	b.n	80008e0 <__aeabi_dadd+0x294>
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	003c      	movs	r4, r7
 80006aa:	0412      	lsls	r2, r2, #16
 80006ac:	4314      	orrs	r4, r2
 80006ae:	46a0      	mov	r8, r4
 80006b0:	4662      	mov	r2, ip
 80006b2:	2a38      	cmp	r2, #56	; 0x38
 80006b4:	dd00      	ble.n	80006b8 <__aeabi_dadd+0x6c>
 80006b6:	e161      	b.n	800097c <__aeabi_dadd+0x330>
 80006b8:	2a1f      	cmp	r2, #31
 80006ba:	dd00      	ble.n	80006be <__aeabi_dadd+0x72>
 80006bc:	e1cc      	b.n	8000a58 <__aeabi_dadd+0x40c>
 80006be:	4664      	mov	r4, ip
 80006c0:	2220      	movs	r2, #32
 80006c2:	1b12      	subs	r2, r2, r4
 80006c4:	4644      	mov	r4, r8
 80006c6:	4094      	lsls	r4, r2
 80006c8:	000f      	movs	r7, r1
 80006ca:	46a1      	mov	r9, r4
 80006cc:	4664      	mov	r4, ip
 80006ce:	4091      	lsls	r1, r2
 80006d0:	40e7      	lsrs	r7, r4
 80006d2:	464c      	mov	r4, r9
 80006d4:	1e4a      	subs	r2, r1, #1
 80006d6:	4191      	sbcs	r1, r2
 80006d8:	433c      	orrs	r4, r7
 80006da:	4642      	mov	r2, r8
 80006dc:	4321      	orrs	r1, r4
 80006de:	4664      	mov	r4, ip
 80006e0:	40e2      	lsrs	r2, r4
 80006e2:	1a80      	subs	r0, r0, r2
 80006e4:	1a5c      	subs	r4, r3, r1
 80006e6:	42a3      	cmp	r3, r4
 80006e8:	419b      	sbcs	r3, r3
 80006ea:	425f      	negs	r7, r3
 80006ec:	1bc7      	subs	r7, r0, r7
 80006ee:	023b      	lsls	r3, r7, #8
 80006f0:	d400      	bmi.n	80006f4 <__aeabi_dadd+0xa8>
 80006f2:	e0d0      	b.n	8000896 <__aeabi_dadd+0x24a>
 80006f4:	027f      	lsls	r7, r7, #9
 80006f6:	0a7f      	lsrs	r7, r7, #9
 80006f8:	2f00      	cmp	r7, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0xb2>
 80006fc:	e0ff      	b.n	80008fe <__aeabi_dadd+0x2b2>
 80006fe:	0038      	movs	r0, r7
 8000700:	f7ff fedc 	bl	80004bc <__clzsi2>
 8000704:	0001      	movs	r1, r0
 8000706:	3908      	subs	r1, #8
 8000708:	2320      	movs	r3, #32
 800070a:	0022      	movs	r2, r4
 800070c:	1a5b      	subs	r3, r3, r1
 800070e:	408f      	lsls	r7, r1
 8000710:	40da      	lsrs	r2, r3
 8000712:	408c      	lsls	r4, r1
 8000714:	4317      	orrs	r7, r2
 8000716:	42b1      	cmp	r1, r6
 8000718:	da00      	bge.n	800071c <__aeabi_dadd+0xd0>
 800071a:	e0ff      	b.n	800091c <__aeabi_dadd+0x2d0>
 800071c:	1b89      	subs	r1, r1, r6
 800071e:	1c4b      	adds	r3, r1, #1
 8000720:	2b1f      	cmp	r3, #31
 8000722:	dd00      	ble.n	8000726 <__aeabi_dadd+0xda>
 8000724:	e0a8      	b.n	8000878 <__aeabi_dadd+0x22c>
 8000726:	2220      	movs	r2, #32
 8000728:	0039      	movs	r1, r7
 800072a:	1ad2      	subs	r2, r2, r3
 800072c:	0020      	movs	r0, r4
 800072e:	4094      	lsls	r4, r2
 8000730:	4091      	lsls	r1, r2
 8000732:	40d8      	lsrs	r0, r3
 8000734:	1e62      	subs	r2, r4, #1
 8000736:	4194      	sbcs	r4, r2
 8000738:	40df      	lsrs	r7, r3
 800073a:	2600      	movs	r6, #0
 800073c:	4301      	orrs	r1, r0
 800073e:	430c      	orrs	r4, r1
 8000740:	0763      	lsls	r3, r4, #29
 8000742:	d009      	beq.n	8000758 <__aeabi_dadd+0x10c>
 8000744:	230f      	movs	r3, #15
 8000746:	4023      	ands	r3, r4
 8000748:	2b04      	cmp	r3, #4
 800074a:	d005      	beq.n	8000758 <__aeabi_dadd+0x10c>
 800074c:	1d23      	adds	r3, r4, #4
 800074e:	42a3      	cmp	r3, r4
 8000750:	41a4      	sbcs	r4, r4
 8000752:	4264      	negs	r4, r4
 8000754:	193f      	adds	r7, r7, r4
 8000756:	001c      	movs	r4, r3
 8000758:	023b      	lsls	r3, r7, #8
 800075a:	d400      	bmi.n	800075e <__aeabi_dadd+0x112>
 800075c:	e09e      	b.n	800089c <__aeabi_dadd+0x250>
 800075e:	4b95      	ldr	r3, [pc, #596]	; (80009b4 <__aeabi_dadd+0x368>)
 8000760:	3601      	adds	r6, #1
 8000762:	429e      	cmp	r6, r3
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x11c>
 8000766:	e0b7      	b.n	80008d8 <__aeabi_dadd+0x28c>
 8000768:	4a93      	ldr	r2, [pc, #588]	; (80009b8 <__aeabi_dadd+0x36c>)
 800076a:	08e4      	lsrs	r4, r4, #3
 800076c:	4017      	ands	r7, r2
 800076e:	077b      	lsls	r3, r7, #29
 8000770:	0571      	lsls	r1, r6, #21
 8000772:	027f      	lsls	r7, r7, #9
 8000774:	4323      	orrs	r3, r4
 8000776:	0b3f      	lsrs	r7, r7, #12
 8000778:	0d4a      	lsrs	r2, r1, #21
 800077a:	0512      	lsls	r2, r2, #20
 800077c:	433a      	orrs	r2, r7
 800077e:	07ed      	lsls	r5, r5, #31
 8000780:	432a      	orrs	r2, r5
 8000782:	0018      	movs	r0, r3
 8000784:	0011      	movs	r1, r2
 8000786:	bce0      	pop	{r5, r6, r7}
 8000788:	46ba      	mov	sl, r7
 800078a:	46b1      	mov	r9, r6
 800078c:	46a8      	mov	r8, r5
 800078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000790:	2c00      	cmp	r4, #0
 8000792:	d04b      	beq.n	800082c <__aeabi_dadd+0x1e0>
 8000794:	464c      	mov	r4, r9
 8000796:	1ba4      	subs	r4, r4, r6
 8000798:	46a4      	mov	ip, r4
 800079a:	2e00      	cmp	r6, #0
 800079c:	d000      	beq.n	80007a0 <__aeabi_dadd+0x154>
 800079e:	e123      	b.n	80009e8 <__aeabi_dadd+0x39c>
 80007a0:	0004      	movs	r4, r0
 80007a2:	431c      	orrs	r4, r3
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x15c>
 80007a6:	e1af      	b.n	8000b08 <__aeabi_dadd+0x4bc>
 80007a8:	4662      	mov	r2, ip
 80007aa:	1e54      	subs	r4, r2, #1
 80007ac:	2a01      	cmp	r2, #1
 80007ae:	d100      	bne.n	80007b2 <__aeabi_dadd+0x166>
 80007b0:	e215      	b.n	8000bde <__aeabi_dadd+0x592>
 80007b2:	4d80      	ldr	r5, [pc, #512]	; (80009b4 <__aeabi_dadd+0x368>)
 80007b4:	45ac      	cmp	ip, r5
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0x16e>
 80007b8:	e1c8      	b.n	8000b4c <__aeabi_dadd+0x500>
 80007ba:	46a4      	mov	ip, r4
 80007bc:	e11b      	b.n	80009f6 <__aeabi_dadd+0x3aa>
 80007be:	464a      	mov	r2, r9
 80007c0:	1ab2      	subs	r2, r6, r2
 80007c2:	4694      	mov	ip, r2
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_dadd+0x17e>
 80007c8:	e0ac      	b.n	8000924 <__aeabi_dadd+0x2d8>
 80007ca:	464a      	mov	r2, r9
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	d043      	beq.n	8000858 <__aeabi_dadd+0x20c>
 80007d0:	4a78      	ldr	r2, [pc, #480]	; (80009b4 <__aeabi_dadd+0x368>)
 80007d2:	4296      	cmp	r6, r2
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x18c>
 80007d6:	e1af      	b.n	8000b38 <__aeabi_dadd+0x4ec>
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	003c      	movs	r4, r7
 80007dc:	0412      	lsls	r2, r2, #16
 80007de:	4314      	orrs	r4, r2
 80007e0:	46a0      	mov	r8, r4
 80007e2:	4662      	mov	r2, ip
 80007e4:	2a38      	cmp	r2, #56	; 0x38
 80007e6:	dc67      	bgt.n	80008b8 <__aeabi_dadd+0x26c>
 80007e8:	2a1f      	cmp	r2, #31
 80007ea:	dc00      	bgt.n	80007ee <__aeabi_dadd+0x1a2>
 80007ec:	e15f      	b.n	8000aae <__aeabi_dadd+0x462>
 80007ee:	4647      	mov	r7, r8
 80007f0:	3a20      	subs	r2, #32
 80007f2:	40d7      	lsrs	r7, r2
 80007f4:	4662      	mov	r2, ip
 80007f6:	2a20      	cmp	r2, #32
 80007f8:	d005      	beq.n	8000806 <__aeabi_dadd+0x1ba>
 80007fa:	4664      	mov	r4, ip
 80007fc:	2240      	movs	r2, #64	; 0x40
 80007fe:	1b12      	subs	r2, r2, r4
 8000800:	4644      	mov	r4, r8
 8000802:	4094      	lsls	r4, r2
 8000804:	4321      	orrs	r1, r4
 8000806:	1e4a      	subs	r2, r1, #1
 8000808:	4191      	sbcs	r1, r2
 800080a:	000c      	movs	r4, r1
 800080c:	433c      	orrs	r4, r7
 800080e:	e057      	b.n	80008c0 <__aeabi_dadd+0x274>
 8000810:	003a      	movs	r2, r7
 8000812:	430a      	orrs	r2, r1
 8000814:	d100      	bne.n	8000818 <__aeabi_dadd+0x1cc>
 8000816:	e105      	b.n	8000a24 <__aeabi_dadd+0x3d8>
 8000818:	0022      	movs	r2, r4
 800081a:	3a01      	subs	r2, #1
 800081c:	2c01      	cmp	r4, #1
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x1d6>
 8000820:	e182      	b.n	8000b28 <__aeabi_dadd+0x4dc>
 8000822:	4c64      	ldr	r4, [pc, #400]	; (80009b4 <__aeabi_dadd+0x368>)
 8000824:	45a4      	cmp	ip, r4
 8000826:	d05b      	beq.n	80008e0 <__aeabi_dadd+0x294>
 8000828:	4694      	mov	ip, r2
 800082a:	e741      	b.n	80006b0 <__aeabi_dadd+0x64>
 800082c:	4c63      	ldr	r4, [pc, #396]	; (80009bc <__aeabi_dadd+0x370>)
 800082e:	1c77      	adds	r7, r6, #1
 8000830:	4227      	tst	r7, r4
 8000832:	d000      	beq.n	8000836 <__aeabi_dadd+0x1ea>
 8000834:	e0c4      	b.n	80009c0 <__aeabi_dadd+0x374>
 8000836:	0004      	movs	r4, r0
 8000838:	431c      	orrs	r4, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d000      	beq.n	8000840 <__aeabi_dadd+0x1f4>
 800083e:	e169      	b.n	8000b14 <__aeabi_dadd+0x4c8>
 8000840:	2c00      	cmp	r4, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x1fa>
 8000844:	e1bf      	b.n	8000bc6 <__aeabi_dadd+0x57a>
 8000846:	4644      	mov	r4, r8
 8000848:	430c      	orrs	r4, r1
 800084a:	d000      	beq.n	800084e <__aeabi_dadd+0x202>
 800084c:	e1d0      	b.n	8000bf0 <__aeabi_dadd+0x5a4>
 800084e:	0742      	lsls	r2, r0, #29
 8000850:	08db      	lsrs	r3, r3, #3
 8000852:	4313      	orrs	r3, r2
 8000854:	08c0      	lsrs	r0, r0, #3
 8000856:	e029      	b.n	80008ac <__aeabi_dadd+0x260>
 8000858:	003a      	movs	r2, r7
 800085a:	430a      	orrs	r2, r1
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x214>
 800085e:	e170      	b.n	8000b42 <__aeabi_dadd+0x4f6>
 8000860:	4662      	mov	r2, ip
 8000862:	4664      	mov	r4, ip
 8000864:	3a01      	subs	r2, #1
 8000866:	2c01      	cmp	r4, #1
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x220>
 800086a:	e0e0      	b.n	8000a2e <__aeabi_dadd+0x3e2>
 800086c:	4c51      	ldr	r4, [pc, #324]	; (80009b4 <__aeabi_dadd+0x368>)
 800086e:	45a4      	cmp	ip, r4
 8000870:	d100      	bne.n	8000874 <__aeabi_dadd+0x228>
 8000872:	e161      	b.n	8000b38 <__aeabi_dadd+0x4ec>
 8000874:	4694      	mov	ip, r2
 8000876:	e7b4      	b.n	80007e2 <__aeabi_dadd+0x196>
 8000878:	003a      	movs	r2, r7
 800087a:	391f      	subs	r1, #31
 800087c:	40ca      	lsrs	r2, r1
 800087e:	0011      	movs	r1, r2
 8000880:	2b20      	cmp	r3, #32
 8000882:	d003      	beq.n	800088c <__aeabi_dadd+0x240>
 8000884:	2240      	movs	r2, #64	; 0x40
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	409f      	lsls	r7, r3
 800088a:	433c      	orrs	r4, r7
 800088c:	1e63      	subs	r3, r4, #1
 800088e:	419c      	sbcs	r4, r3
 8000890:	2700      	movs	r7, #0
 8000892:	2600      	movs	r6, #0
 8000894:	430c      	orrs	r4, r1
 8000896:	0763      	lsls	r3, r4, #29
 8000898:	d000      	beq.n	800089c <__aeabi_dadd+0x250>
 800089a:	e753      	b.n	8000744 <__aeabi_dadd+0xf8>
 800089c:	46b4      	mov	ip, r6
 800089e:	08e4      	lsrs	r4, r4, #3
 80008a0:	077b      	lsls	r3, r7, #29
 80008a2:	4323      	orrs	r3, r4
 80008a4:	08f8      	lsrs	r0, r7, #3
 80008a6:	4a43      	ldr	r2, [pc, #268]	; (80009b4 <__aeabi_dadd+0x368>)
 80008a8:	4594      	cmp	ip, r2
 80008aa:	d01d      	beq.n	80008e8 <__aeabi_dadd+0x29c>
 80008ac:	4662      	mov	r2, ip
 80008ae:	0307      	lsls	r7, r0, #12
 80008b0:	0552      	lsls	r2, r2, #21
 80008b2:	0b3f      	lsrs	r7, r7, #12
 80008b4:	0d52      	lsrs	r2, r2, #21
 80008b6:	e760      	b.n	800077a <__aeabi_dadd+0x12e>
 80008b8:	4644      	mov	r4, r8
 80008ba:	430c      	orrs	r4, r1
 80008bc:	1e62      	subs	r2, r4, #1
 80008be:	4194      	sbcs	r4, r2
 80008c0:	18e4      	adds	r4, r4, r3
 80008c2:	429c      	cmp	r4, r3
 80008c4:	419b      	sbcs	r3, r3
 80008c6:	425f      	negs	r7, r3
 80008c8:	183f      	adds	r7, r7, r0
 80008ca:	023b      	lsls	r3, r7, #8
 80008cc:	d5e3      	bpl.n	8000896 <__aeabi_dadd+0x24a>
 80008ce:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <__aeabi_dadd+0x368>)
 80008d0:	3601      	adds	r6, #1
 80008d2:	429e      	cmp	r6, r3
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x28c>
 80008d6:	e0b5      	b.n	8000a44 <__aeabi_dadd+0x3f8>
 80008d8:	0032      	movs	r2, r6
 80008da:	2700      	movs	r7, #0
 80008dc:	2300      	movs	r3, #0
 80008de:	e74c      	b.n	800077a <__aeabi_dadd+0x12e>
 80008e0:	0742      	lsls	r2, r0, #29
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	08c0      	lsrs	r0, r0, #3
 80008e8:	001a      	movs	r2, r3
 80008ea:	4302      	orrs	r2, r0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x2a4>
 80008ee:	e1e1      	b.n	8000cb4 <__aeabi_dadd+0x668>
 80008f0:	2780      	movs	r7, #128	; 0x80
 80008f2:	033f      	lsls	r7, r7, #12
 80008f4:	4307      	orrs	r7, r0
 80008f6:	033f      	lsls	r7, r7, #12
 80008f8:	4a2e      	ldr	r2, [pc, #184]	; (80009b4 <__aeabi_dadd+0x368>)
 80008fa:	0b3f      	lsrs	r7, r7, #12
 80008fc:	e73d      	b.n	800077a <__aeabi_dadd+0x12e>
 80008fe:	0020      	movs	r0, r4
 8000900:	f7ff fddc 	bl	80004bc <__clzsi2>
 8000904:	0001      	movs	r1, r0
 8000906:	3118      	adds	r1, #24
 8000908:	291f      	cmp	r1, #31
 800090a:	dc00      	bgt.n	800090e <__aeabi_dadd+0x2c2>
 800090c:	e6fc      	b.n	8000708 <__aeabi_dadd+0xbc>
 800090e:	3808      	subs	r0, #8
 8000910:	4084      	lsls	r4, r0
 8000912:	0027      	movs	r7, r4
 8000914:	2400      	movs	r4, #0
 8000916:	42b1      	cmp	r1, r6
 8000918:	db00      	blt.n	800091c <__aeabi_dadd+0x2d0>
 800091a:	e6ff      	b.n	800071c <__aeabi_dadd+0xd0>
 800091c:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <__aeabi_dadd+0x36c>)
 800091e:	1a76      	subs	r6, r6, r1
 8000920:	4017      	ands	r7, r2
 8000922:	e70d      	b.n	8000740 <__aeabi_dadd+0xf4>
 8000924:	2a00      	cmp	r2, #0
 8000926:	d02f      	beq.n	8000988 <__aeabi_dadd+0x33c>
 8000928:	464a      	mov	r2, r9
 800092a:	1b92      	subs	r2, r2, r6
 800092c:	4694      	mov	ip, r2
 800092e:	2e00      	cmp	r6, #0
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x2e8>
 8000932:	e0ad      	b.n	8000a90 <__aeabi_dadd+0x444>
 8000934:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <__aeabi_dadd+0x368>)
 8000936:	4591      	cmp	r9, r2
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x2f0>
 800093a:	e10f      	b.n	8000b5c <__aeabi_dadd+0x510>
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	0412      	lsls	r2, r2, #16
 8000940:	4310      	orrs	r0, r2
 8000942:	4662      	mov	r2, ip
 8000944:	2a38      	cmp	r2, #56	; 0x38
 8000946:	dd00      	ble.n	800094a <__aeabi_dadd+0x2fe>
 8000948:	e10f      	b.n	8000b6a <__aeabi_dadd+0x51e>
 800094a:	2a1f      	cmp	r2, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x304>
 800094e:	e180      	b.n	8000c52 <__aeabi_dadd+0x606>
 8000950:	4664      	mov	r4, ip
 8000952:	2220      	movs	r2, #32
 8000954:	001e      	movs	r6, r3
 8000956:	1b12      	subs	r2, r2, r4
 8000958:	4667      	mov	r7, ip
 800095a:	0004      	movs	r4, r0
 800095c:	4093      	lsls	r3, r2
 800095e:	4094      	lsls	r4, r2
 8000960:	40fe      	lsrs	r6, r7
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	4193      	sbcs	r3, r2
 8000966:	40f8      	lsrs	r0, r7
 8000968:	4334      	orrs	r4, r6
 800096a:	431c      	orrs	r4, r3
 800096c:	4480      	add	r8, r0
 800096e:	1864      	adds	r4, r4, r1
 8000970:	428c      	cmp	r4, r1
 8000972:	41bf      	sbcs	r7, r7
 8000974:	427f      	negs	r7, r7
 8000976:	464e      	mov	r6, r9
 8000978:	4447      	add	r7, r8
 800097a:	e7a6      	b.n	80008ca <__aeabi_dadd+0x27e>
 800097c:	4642      	mov	r2, r8
 800097e:	430a      	orrs	r2, r1
 8000980:	0011      	movs	r1, r2
 8000982:	1e4a      	subs	r2, r1, #1
 8000984:	4191      	sbcs	r1, r2
 8000986:	e6ad      	b.n	80006e4 <__aeabi_dadd+0x98>
 8000988:	4c0c      	ldr	r4, [pc, #48]	; (80009bc <__aeabi_dadd+0x370>)
 800098a:	1c72      	adds	r2, r6, #1
 800098c:	4222      	tst	r2, r4
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x346>
 8000990:	e0a1      	b.n	8000ad6 <__aeabi_dadd+0x48a>
 8000992:	0002      	movs	r2, r0
 8000994:	431a      	orrs	r2, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d000      	beq.n	800099c <__aeabi_dadd+0x350>
 800099a:	e0fa      	b.n	8000b92 <__aeabi_dadd+0x546>
 800099c:	2a00      	cmp	r2, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x356>
 80009a0:	e145      	b.n	8000c2e <__aeabi_dadd+0x5e2>
 80009a2:	003a      	movs	r2, r7
 80009a4:	430a      	orrs	r2, r1
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x35e>
 80009a8:	e146      	b.n	8000c38 <__aeabi_dadd+0x5ec>
 80009aa:	0742      	lsls	r2, r0, #29
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	08c0      	lsrs	r0, r0, #3
 80009b2:	e77b      	b.n	80008ac <__aeabi_dadd+0x260>
 80009b4:	000007ff 	.word	0x000007ff
 80009b8:	ff7fffff 	.word	0xff7fffff
 80009bc:	000007fe 	.word	0x000007fe
 80009c0:	4647      	mov	r7, r8
 80009c2:	1a5c      	subs	r4, r3, r1
 80009c4:	1bc2      	subs	r2, r0, r7
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	41bf      	sbcs	r7, r7
 80009ca:	427f      	negs	r7, r7
 80009cc:	46b9      	mov	r9, r7
 80009ce:	0017      	movs	r7, r2
 80009d0:	464a      	mov	r2, r9
 80009d2:	1abf      	subs	r7, r7, r2
 80009d4:	023a      	lsls	r2, r7, #8
 80009d6:	d500      	bpl.n	80009da <__aeabi_dadd+0x38e>
 80009d8:	e08d      	b.n	8000af6 <__aeabi_dadd+0x4aa>
 80009da:	0023      	movs	r3, r4
 80009dc:	433b      	orrs	r3, r7
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x396>
 80009e0:	e68a      	b.n	80006f8 <__aeabi_dadd+0xac>
 80009e2:	2000      	movs	r0, #0
 80009e4:	2500      	movs	r5, #0
 80009e6:	e761      	b.n	80008ac <__aeabi_dadd+0x260>
 80009e8:	4cb4      	ldr	r4, [pc, #720]	; (8000cbc <__aeabi_dadd+0x670>)
 80009ea:	45a1      	cmp	r9, r4
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x3a4>
 80009ee:	e0ad      	b.n	8000b4c <__aeabi_dadd+0x500>
 80009f0:	2480      	movs	r4, #128	; 0x80
 80009f2:	0424      	lsls	r4, r4, #16
 80009f4:	4320      	orrs	r0, r4
 80009f6:	4664      	mov	r4, ip
 80009f8:	2c38      	cmp	r4, #56	; 0x38
 80009fa:	dc3d      	bgt.n	8000a78 <__aeabi_dadd+0x42c>
 80009fc:	4662      	mov	r2, ip
 80009fe:	2c1f      	cmp	r4, #31
 8000a00:	dd00      	ble.n	8000a04 <__aeabi_dadd+0x3b8>
 8000a02:	e0b7      	b.n	8000b74 <__aeabi_dadd+0x528>
 8000a04:	2520      	movs	r5, #32
 8000a06:	001e      	movs	r6, r3
 8000a08:	1b2d      	subs	r5, r5, r4
 8000a0a:	0004      	movs	r4, r0
 8000a0c:	40ab      	lsls	r3, r5
 8000a0e:	40ac      	lsls	r4, r5
 8000a10:	40d6      	lsrs	r6, r2
 8000a12:	40d0      	lsrs	r0, r2
 8000a14:	4642      	mov	r2, r8
 8000a16:	1e5d      	subs	r5, r3, #1
 8000a18:	41ab      	sbcs	r3, r5
 8000a1a:	4334      	orrs	r4, r6
 8000a1c:	1a12      	subs	r2, r2, r0
 8000a1e:	4690      	mov	r8, r2
 8000a20:	4323      	orrs	r3, r4
 8000a22:	e02c      	b.n	8000a7e <__aeabi_dadd+0x432>
 8000a24:	0742      	lsls	r2, r0, #29
 8000a26:	08db      	lsrs	r3, r3, #3
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	08c0      	lsrs	r0, r0, #3
 8000a2c:	e73b      	b.n	80008a6 <__aeabi_dadd+0x25a>
 8000a2e:	185c      	adds	r4, r3, r1
 8000a30:	429c      	cmp	r4, r3
 8000a32:	419b      	sbcs	r3, r3
 8000a34:	4440      	add	r0, r8
 8000a36:	425b      	negs	r3, r3
 8000a38:	18c7      	adds	r7, r0, r3
 8000a3a:	2601      	movs	r6, #1
 8000a3c:	023b      	lsls	r3, r7, #8
 8000a3e:	d400      	bmi.n	8000a42 <__aeabi_dadd+0x3f6>
 8000a40:	e729      	b.n	8000896 <__aeabi_dadd+0x24a>
 8000a42:	2602      	movs	r6, #2
 8000a44:	4a9e      	ldr	r2, [pc, #632]	; (8000cc0 <__aeabi_dadd+0x674>)
 8000a46:	0863      	lsrs	r3, r4, #1
 8000a48:	4017      	ands	r7, r2
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4014      	ands	r4, r2
 8000a4e:	431c      	orrs	r4, r3
 8000a50:	07fb      	lsls	r3, r7, #31
 8000a52:	431c      	orrs	r4, r3
 8000a54:	087f      	lsrs	r7, r7, #1
 8000a56:	e673      	b.n	8000740 <__aeabi_dadd+0xf4>
 8000a58:	4644      	mov	r4, r8
 8000a5a:	3a20      	subs	r2, #32
 8000a5c:	40d4      	lsrs	r4, r2
 8000a5e:	4662      	mov	r2, ip
 8000a60:	2a20      	cmp	r2, #32
 8000a62:	d005      	beq.n	8000a70 <__aeabi_dadd+0x424>
 8000a64:	4667      	mov	r7, ip
 8000a66:	2240      	movs	r2, #64	; 0x40
 8000a68:	1bd2      	subs	r2, r2, r7
 8000a6a:	4647      	mov	r7, r8
 8000a6c:	4097      	lsls	r7, r2
 8000a6e:	4339      	orrs	r1, r7
 8000a70:	1e4a      	subs	r2, r1, #1
 8000a72:	4191      	sbcs	r1, r2
 8000a74:	4321      	orrs	r1, r4
 8000a76:	e635      	b.n	80006e4 <__aeabi_dadd+0x98>
 8000a78:	4303      	orrs	r3, r0
 8000a7a:	1e58      	subs	r0, r3, #1
 8000a7c:	4183      	sbcs	r3, r0
 8000a7e:	1acc      	subs	r4, r1, r3
 8000a80:	42a1      	cmp	r1, r4
 8000a82:	41bf      	sbcs	r7, r7
 8000a84:	4643      	mov	r3, r8
 8000a86:	427f      	negs	r7, r7
 8000a88:	4655      	mov	r5, sl
 8000a8a:	464e      	mov	r6, r9
 8000a8c:	1bdf      	subs	r7, r3, r7
 8000a8e:	e62e      	b.n	80006ee <__aeabi_dadd+0xa2>
 8000a90:	0002      	movs	r2, r0
 8000a92:	431a      	orrs	r2, r3
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x44c>
 8000a96:	e0bd      	b.n	8000c14 <__aeabi_dadd+0x5c8>
 8000a98:	4662      	mov	r2, ip
 8000a9a:	4664      	mov	r4, ip
 8000a9c:	3a01      	subs	r2, #1
 8000a9e:	2c01      	cmp	r4, #1
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x458>
 8000aa2:	e0e5      	b.n	8000c70 <__aeabi_dadd+0x624>
 8000aa4:	4c85      	ldr	r4, [pc, #532]	; (8000cbc <__aeabi_dadd+0x670>)
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	d058      	beq.n	8000b5c <__aeabi_dadd+0x510>
 8000aaa:	4694      	mov	ip, r2
 8000aac:	e749      	b.n	8000942 <__aeabi_dadd+0x2f6>
 8000aae:	4664      	mov	r4, ip
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	1b12      	subs	r2, r2, r4
 8000ab4:	4644      	mov	r4, r8
 8000ab6:	4094      	lsls	r4, r2
 8000ab8:	000f      	movs	r7, r1
 8000aba:	46a1      	mov	r9, r4
 8000abc:	4664      	mov	r4, ip
 8000abe:	4091      	lsls	r1, r2
 8000ac0:	40e7      	lsrs	r7, r4
 8000ac2:	464c      	mov	r4, r9
 8000ac4:	1e4a      	subs	r2, r1, #1
 8000ac6:	4191      	sbcs	r1, r2
 8000ac8:	433c      	orrs	r4, r7
 8000aca:	4642      	mov	r2, r8
 8000acc:	430c      	orrs	r4, r1
 8000ace:	4661      	mov	r1, ip
 8000ad0:	40ca      	lsrs	r2, r1
 8000ad2:	1880      	adds	r0, r0, r2
 8000ad4:	e6f4      	b.n	80008c0 <__aeabi_dadd+0x274>
 8000ad6:	4c79      	ldr	r4, [pc, #484]	; (8000cbc <__aeabi_dadd+0x670>)
 8000ad8:	42a2      	cmp	r2, r4
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x492>
 8000adc:	e6fd      	b.n	80008da <__aeabi_dadd+0x28e>
 8000ade:	1859      	adds	r1, r3, r1
 8000ae0:	4299      	cmp	r1, r3
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	4440      	add	r0, r8
 8000ae6:	425f      	negs	r7, r3
 8000ae8:	19c7      	adds	r7, r0, r7
 8000aea:	07fc      	lsls	r4, r7, #31
 8000aec:	0849      	lsrs	r1, r1, #1
 8000aee:	0016      	movs	r6, r2
 8000af0:	430c      	orrs	r4, r1
 8000af2:	087f      	lsrs	r7, r7, #1
 8000af4:	e6cf      	b.n	8000896 <__aeabi_dadd+0x24a>
 8000af6:	1acc      	subs	r4, r1, r3
 8000af8:	42a1      	cmp	r1, r4
 8000afa:	41bf      	sbcs	r7, r7
 8000afc:	4643      	mov	r3, r8
 8000afe:	427f      	negs	r7, r7
 8000b00:	1a18      	subs	r0, r3, r0
 8000b02:	4655      	mov	r5, sl
 8000b04:	1bc7      	subs	r7, r0, r7
 8000b06:	e5f7      	b.n	80006f8 <__aeabi_dadd+0xac>
 8000b08:	08c9      	lsrs	r1, r1, #3
 8000b0a:	077b      	lsls	r3, r7, #29
 8000b0c:	4655      	mov	r5, sl
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	08f8      	lsrs	r0, r7, #3
 8000b12:	e6c8      	b.n	80008a6 <__aeabi_dadd+0x25a>
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d000      	beq.n	8000b1a <__aeabi_dadd+0x4ce>
 8000b18:	e081      	b.n	8000c1e <__aeabi_dadd+0x5d2>
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	d115      	bne.n	8000b4c <__aeabi_dadd+0x500>
 8000b20:	2080      	movs	r0, #128	; 0x80
 8000b22:	2500      	movs	r5, #0
 8000b24:	0300      	lsls	r0, r0, #12
 8000b26:	e6e3      	b.n	80008f0 <__aeabi_dadd+0x2a4>
 8000b28:	1a5c      	subs	r4, r3, r1
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	419b      	sbcs	r3, r3
 8000b2e:	1bc7      	subs	r7, r0, r7
 8000b30:	425b      	negs	r3, r3
 8000b32:	2601      	movs	r6, #1
 8000b34:	1aff      	subs	r7, r7, r3
 8000b36:	e5da      	b.n	80006ee <__aeabi_dadd+0xa2>
 8000b38:	0742      	lsls	r2, r0, #29
 8000b3a:	08db      	lsrs	r3, r3, #3
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	08c0      	lsrs	r0, r0, #3
 8000b40:	e6d2      	b.n	80008e8 <__aeabi_dadd+0x29c>
 8000b42:	0742      	lsls	r2, r0, #29
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	08c0      	lsrs	r0, r0, #3
 8000b4a:	e6ac      	b.n	80008a6 <__aeabi_dadd+0x25a>
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	4642      	mov	r2, r8
 8000b50:	08c9      	lsrs	r1, r1, #3
 8000b52:	075b      	lsls	r3, r3, #29
 8000b54:	4655      	mov	r5, sl
 8000b56:	430b      	orrs	r3, r1
 8000b58:	08d0      	lsrs	r0, r2, #3
 8000b5a:	e6c5      	b.n	80008e8 <__aeabi_dadd+0x29c>
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	4642      	mov	r2, r8
 8000b60:	075b      	lsls	r3, r3, #29
 8000b62:	08c9      	lsrs	r1, r1, #3
 8000b64:	430b      	orrs	r3, r1
 8000b66:	08d0      	lsrs	r0, r2, #3
 8000b68:	e6be      	b.n	80008e8 <__aeabi_dadd+0x29c>
 8000b6a:	4303      	orrs	r3, r0
 8000b6c:	001c      	movs	r4, r3
 8000b6e:	1e63      	subs	r3, r4, #1
 8000b70:	419c      	sbcs	r4, r3
 8000b72:	e6fc      	b.n	800096e <__aeabi_dadd+0x322>
 8000b74:	0002      	movs	r2, r0
 8000b76:	3c20      	subs	r4, #32
 8000b78:	40e2      	lsrs	r2, r4
 8000b7a:	0014      	movs	r4, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	2a20      	cmp	r2, #32
 8000b80:	d003      	beq.n	8000b8a <__aeabi_dadd+0x53e>
 8000b82:	2540      	movs	r5, #64	; 0x40
 8000b84:	1aad      	subs	r5, r5, r2
 8000b86:	40a8      	lsls	r0, r5
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	1e58      	subs	r0, r3, #1
 8000b8c:	4183      	sbcs	r3, r0
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	e775      	b.n	8000a7e <__aeabi_dadd+0x432>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d0e2      	beq.n	8000b5c <__aeabi_dadd+0x510>
 8000b96:	003a      	movs	r2, r7
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	d0cd      	beq.n	8000b38 <__aeabi_dadd+0x4ec>
 8000b9c:	0742      	lsls	r2, r0, #29
 8000b9e:	08db      	lsrs	r3, r3, #3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	08c0      	lsrs	r0, r0, #3
 8000ba6:	0312      	lsls	r2, r2, #12
 8000ba8:	4210      	tst	r0, r2
 8000baa:	d006      	beq.n	8000bba <__aeabi_dadd+0x56e>
 8000bac:	08fc      	lsrs	r4, r7, #3
 8000bae:	4214      	tst	r4, r2
 8000bb0:	d103      	bne.n	8000bba <__aeabi_dadd+0x56e>
 8000bb2:	0020      	movs	r0, r4
 8000bb4:	08cb      	lsrs	r3, r1, #3
 8000bb6:	077a      	lsls	r2, r7, #29
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	0f5a      	lsrs	r2, r3, #29
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	0752      	lsls	r2, r2, #29
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	e690      	b.n	80008e8 <__aeabi_dadd+0x29c>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x582>
 8000bcc:	e709      	b.n	80009e2 <__aeabi_dadd+0x396>
 8000bce:	4643      	mov	r3, r8
 8000bd0:	4642      	mov	r2, r8
 8000bd2:	08c9      	lsrs	r1, r1, #3
 8000bd4:	075b      	lsls	r3, r3, #29
 8000bd6:	4655      	mov	r5, sl
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	08d0      	lsrs	r0, r2, #3
 8000bdc:	e666      	b.n	80008ac <__aeabi_dadd+0x260>
 8000bde:	1acc      	subs	r4, r1, r3
 8000be0:	42a1      	cmp	r1, r4
 8000be2:	4189      	sbcs	r1, r1
 8000be4:	1a3f      	subs	r7, r7, r0
 8000be6:	4249      	negs	r1, r1
 8000be8:	4655      	mov	r5, sl
 8000bea:	2601      	movs	r6, #1
 8000bec:	1a7f      	subs	r7, r7, r1
 8000bee:	e57e      	b.n	80006ee <__aeabi_dadd+0xa2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1a5c      	subs	r4, r3, r1
 8000bf4:	1a87      	subs	r7, r0, r2
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	4192      	sbcs	r2, r2
 8000bfa:	4252      	negs	r2, r2
 8000bfc:	1abf      	subs	r7, r7, r2
 8000bfe:	023a      	lsls	r2, r7, #8
 8000c00:	d53d      	bpl.n	8000c7e <__aeabi_dadd+0x632>
 8000c02:	1acc      	subs	r4, r1, r3
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	4189      	sbcs	r1, r1
 8000c08:	4643      	mov	r3, r8
 8000c0a:	4249      	negs	r1, r1
 8000c0c:	1a1f      	subs	r7, r3, r0
 8000c0e:	4655      	mov	r5, sl
 8000c10:	1a7f      	subs	r7, r7, r1
 8000c12:	e595      	b.n	8000740 <__aeabi_dadd+0xf4>
 8000c14:	077b      	lsls	r3, r7, #29
 8000c16:	08c9      	lsrs	r1, r1, #3
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	08f8      	lsrs	r0, r7, #3
 8000c1c:	e643      	b.n	80008a6 <__aeabi_dadd+0x25a>
 8000c1e:	4644      	mov	r4, r8
 8000c20:	08db      	lsrs	r3, r3, #3
 8000c22:	430c      	orrs	r4, r1
 8000c24:	d130      	bne.n	8000c88 <__aeabi_dadd+0x63c>
 8000c26:	0742      	lsls	r2, r0, #29
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	08c0      	lsrs	r0, r0, #3
 8000c2c:	e65c      	b.n	80008e8 <__aeabi_dadd+0x29c>
 8000c2e:	077b      	lsls	r3, r7, #29
 8000c30:	08c9      	lsrs	r1, r1, #3
 8000c32:	430b      	orrs	r3, r1
 8000c34:	08f8      	lsrs	r0, r7, #3
 8000c36:	e639      	b.n	80008ac <__aeabi_dadd+0x260>
 8000c38:	185c      	adds	r4, r3, r1
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	419b      	sbcs	r3, r3
 8000c3e:	4440      	add	r0, r8
 8000c40:	425b      	negs	r3, r3
 8000c42:	18c7      	adds	r7, r0, r3
 8000c44:	023b      	lsls	r3, r7, #8
 8000c46:	d400      	bmi.n	8000c4a <__aeabi_dadd+0x5fe>
 8000c48:	e625      	b.n	8000896 <__aeabi_dadd+0x24a>
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <__aeabi_dadd+0x674>)
 8000c4c:	2601      	movs	r6, #1
 8000c4e:	401f      	ands	r7, r3
 8000c50:	e621      	b.n	8000896 <__aeabi_dadd+0x24a>
 8000c52:	0004      	movs	r4, r0
 8000c54:	3a20      	subs	r2, #32
 8000c56:	40d4      	lsrs	r4, r2
 8000c58:	4662      	mov	r2, ip
 8000c5a:	2a20      	cmp	r2, #32
 8000c5c:	d004      	beq.n	8000c68 <__aeabi_dadd+0x61c>
 8000c5e:	2240      	movs	r2, #64	; 0x40
 8000c60:	4666      	mov	r6, ip
 8000c62:	1b92      	subs	r2, r2, r6
 8000c64:	4090      	lsls	r0, r2
 8000c66:	4303      	orrs	r3, r0
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	4193      	sbcs	r3, r2
 8000c6c:	431c      	orrs	r4, r3
 8000c6e:	e67e      	b.n	800096e <__aeabi_dadd+0x322>
 8000c70:	185c      	adds	r4, r3, r1
 8000c72:	428c      	cmp	r4, r1
 8000c74:	4189      	sbcs	r1, r1
 8000c76:	4440      	add	r0, r8
 8000c78:	4249      	negs	r1, r1
 8000c7a:	1847      	adds	r7, r0, r1
 8000c7c:	e6dd      	b.n	8000a3a <__aeabi_dadd+0x3ee>
 8000c7e:	0023      	movs	r3, r4
 8000c80:	433b      	orrs	r3, r7
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dadd+0x63a>
 8000c84:	e6ad      	b.n	80009e2 <__aeabi_dadd+0x396>
 8000c86:	e606      	b.n	8000896 <__aeabi_dadd+0x24a>
 8000c88:	0744      	lsls	r4, r0, #29
 8000c8a:	4323      	orrs	r3, r4
 8000c8c:	2480      	movs	r4, #128	; 0x80
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	0324      	lsls	r4, r4, #12
 8000c92:	4220      	tst	r0, r4
 8000c94:	d008      	beq.n	8000ca8 <__aeabi_dadd+0x65c>
 8000c96:	4642      	mov	r2, r8
 8000c98:	08d6      	lsrs	r6, r2, #3
 8000c9a:	4226      	tst	r6, r4
 8000c9c:	d104      	bne.n	8000ca8 <__aeabi_dadd+0x65c>
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	0030      	movs	r0, r6
 8000ca2:	08cb      	lsrs	r3, r1, #3
 8000ca4:	0751      	lsls	r1, r2, #29
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	0f5a      	lsrs	r2, r3, #29
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	0752      	lsls	r2, r2, #29
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	e619      	b.n	80008e8 <__aeabi_dadd+0x29c>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4a01      	ldr	r2, [pc, #4]	; (8000cbc <__aeabi_dadd+0x670>)
 8000cb8:	001f      	movs	r7, r3
 8000cba:	e55e      	b.n	800077a <__aeabi_dadd+0x12e>
 8000cbc:	000007ff 	.word	0x000007ff
 8000cc0:	ff7fffff 	.word	0xff7fffff

08000cc4 <__aeabi_ddiv>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	4657      	mov	r7, sl
 8000cc8:	464e      	mov	r6, r9
 8000cca:	4645      	mov	r5, r8
 8000ccc:	46de      	mov	lr, fp
 8000cce:	b5e0      	push	{r5, r6, r7, lr}
 8000cd0:	4681      	mov	r9, r0
 8000cd2:	0005      	movs	r5, r0
 8000cd4:	030c      	lsls	r4, r1, #12
 8000cd6:	0048      	lsls	r0, r1, #1
 8000cd8:	4692      	mov	sl, r2
 8000cda:	001f      	movs	r7, r3
 8000cdc:	b085      	sub	sp, #20
 8000cde:	0b24      	lsrs	r4, r4, #12
 8000ce0:	0d40      	lsrs	r0, r0, #21
 8000ce2:	0fce      	lsrs	r6, r1, #31
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d100      	bne.n	8000cea <__aeabi_ddiv+0x26>
 8000ce8:	e156      	b.n	8000f98 <__aeabi_ddiv+0x2d4>
 8000cea:	4bd4      	ldr	r3, [pc, #848]	; (800103c <__aeabi_ddiv+0x378>)
 8000cec:	4298      	cmp	r0, r3
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_ddiv+0x2e>
 8000cf0:	e172      	b.n	8000fd8 <__aeabi_ddiv+0x314>
 8000cf2:	0f6b      	lsrs	r3, r5, #29
 8000cf4:	00e4      	lsls	r4, r4, #3
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	4698      	mov	r8, r3
 8000d00:	4bcf      	ldr	r3, [pc, #828]	; (8001040 <__aeabi_ddiv+0x37c>)
 8000d02:	00ed      	lsls	r5, r5, #3
 8000d04:	469b      	mov	fp, r3
 8000d06:	2300      	movs	r3, #0
 8000d08:	4699      	mov	r9, r3
 8000d0a:	4483      	add	fp, r0
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	033c      	lsls	r4, r7, #12
 8000d10:	007b      	lsls	r3, r7, #1
 8000d12:	4650      	mov	r0, sl
 8000d14:	0b24      	lsrs	r4, r4, #12
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	0fff      	lsrs	r7, r7, #31
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_ddiv+0x5c>
 8000d1e:	e11f      	b.n	8000f60 <__aeabi_ddiv+0x29c>
 8000d20:	4ac6      	ldr	r2, [pc, #792]	; (800103c <__aeabi_ddiv+0x378>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d100      	bne.n	8000d28 <__aeabi_ddiv+0x64>
 8000d26:	e162      	b.n	8000fee <__aeabi_ddiv+0x32a>
 8000d28:	49c5      	ldr	r1, [pc, #788]	; (8001040 <__aeabi_ddiv+0x37c>)
 8000d2a:	0f42      	lsrs	r2, r0, #29
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	00e4      	lsls	r4, r4, #3
 8000d30:	4659      	mov	r1, fp
 8000d32:	4314      	orrs	r4, r2
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	4463      	add	r3, ip
 8000d38:	0412      	lsls	r2, r2, #16
 8000d3a:	1acb      	subs	r3, r1, r3
 8000d3c:	4314      	orrs	r4, r2
 8000d3e:	469b      	mov	fp, r3
 8000d40:	00c2      	lsls	r2, r0, #3
 8000d42:	2000      	movs	r0, #0
 8000d44:	0033      	movs	r3, r6
 8000d46:	407b      	eors	r3, r7
 8000d48:	469a      	mov	sl, r3
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d827      	bhi.n	8000da0 <__aeabi_ddiv+0xdc>
 8000d50:	49bc      	ldr	r1, [pc, #752]	; (8001044 <__aeabi_ddiv+0x380>)
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	58cb      	ldr	r3, [r1, r3]
 8000d56:	469f      	mov	pc, r3
 8000d58:	46b2      	mov	sl, r6
 8000d5a:	9b00      	ldr	r3, [sp, #0]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d016      	beq.n	8000d8e <__aeabi_ddiv+0xca>
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d100      	bne.n	8000d66 <__aeabi_ddiv+0xa2>
 8000d64:	e28e      	b.n	8001284 <__aeabi_ddiv+0x5c0>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d000      	beq.n	8000d6c <__aeabi_ddiv+0xa8>
 8000d6a:	e0d9      	b.n	8000f20 <__aeabi_ddiv+0x25c>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2400      	movs	r4, #0
 8000d70:	2500      	movs	r5, #0
 8000d72:	4652      	mov	r2, sl
 8000d74:	051b      	lsls	r3, r3, #20
 8000d76:	4323      	orrs	r3, r4
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	0019      	movs	r1, r3
 8000d80:	b005      	add	sp, #20
 8000d82:	bcf0      	pop	{r4, r5, r6, r7}
 8000d84:	46bb      	mov	fp, r7
 8000d86:	46b2      	mov	sl, r6
 8000d88:	46a9      	mov	r9, r5
 8000d8a:	46a0      	mov	r8, r4
 8000d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8e:	2400      	movs	r4, #0
 8000d90:	2500      	movs	r5, #0
 8000d92:	4baa      	ldr	r3, [pc, #680]	; (800103c <__aeabi_ddiv+0x378>)
 8000d94:	e7ed      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8000d96:	46ba      	mov	sl, r7
 8000d98:	46a0      	mov	r8, r4
 8000d9a:	0015      	movs	r5, r2
 8000d9c:	9000      	str	r0, [sp, #0]
 8000d9e:	e7dc      	b.n	8000d5a <__aeabi_ddiv+0x96>
 8000da0:	4544      	cmp	r4, r8
 8000da2:	d200      	bcs.n	8000da6 <__aeabi_ddiv+0xe2>
 8000da4:	e1c7      	b.n	8001136 <__aeabi_ddiv+0x472>
 8000da6:	d100      	bne.n	8000daa <__aeabi_ddiv+0xe6>
 8000da8:	e1c2      	b.n	8001130 <__aeabi_ddiv+0x46c>
 8000daa:	2301      	movs	r3, #1
 8000dac:	425b      	negs	r3, r3
 8000dae:	469c      	mov	ip, r3
 8000db0:	002e      	movs	r6, r5
 8000db2:	4640      	mov	r0, r8
 8000db4:	2500      	movs	r5, #0
 8000db6:	44e3      	add	fp, ip
 8000db8:	0223      	lsls	r3, r4, #8
 8000dba:	0e14      	lsrs	r4, r2, #24
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	0c1b      	lsrs	r3, r3, #16
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	0423      	lsls	r3, r4, #16
 8000dc4:	0c1f      	lsrs	r7, r3, #16
 8000dc6:	0212      	lsls	r2, r2, #8
 8000dc8:	4649      	mov	r1, r9
 8000dca:	9200      	str	r2, [sp, #0]
 8000dcc:	9701      	str	r7, [sp, #4]
 8000dce:	f7ff fa47 	bl	8000260 <__aeabi_uidivmod>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	437a      	muls	r2, r7
 8000dd6:	040b      	lsls	r3, r1, #16
 8000dd8:	0c31      	lsrs	r1, r6, #16
 8000dda:	4680      	mov	r8, r0
 8000ddc:	4319      	orrs	r1, r3
 8000dde:	428a      	cmp	r2, r1
 8000de0:	d907      	bls.n	8000df2 <__aeabi_ddiv+0x12e>
 8000de2:	2301      	movs	r3, #1
 8000de4:	425b      	negs	r3, r3
 8000de6:	469c      	mov	ip, r3
 8000de8:	1909      	adds	r1, r1, r4
 8000dea:	44e0      	add	r8, ip
 8000dec:	428c      	cmp	r4, r1
 8000dee:	d800      	bhi.n	8000df2 <__aeabi_ddiv+0x12e>
 8000df0:	e207      	b.n	8001202 <__aeabi_ddiv+0x53e>
 8000df2:	1a88      	subs	r0, r1, r2
 8000df4:	4649      	mov	r1, r9
 8000df6:	f7ff fa33 	bl	8000260 <__aeabi_uidivmod>
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	468c      	mov	ip, r1
 8000dfe:	0431      	lsls	r1, r6, #16
 8000e00:	4666      	mov	r6, ip
 8000e02:	9a01      	ldr	r2, [sp, #4]
 8000e04:	0c09      	lsrs	r1, r1, #16
 8000e06:	4342      	muls	r2, r0
 8000e08:	0003      	movs	r3, r0
 8000e0a:	4331      	orrs	r1, r6
 8000e0c:	428a      	cmp	r2, r1
 8000e0e:	d904      	bls.n	8000e1a <__aeabi_ddiv+0x156>
 8000e10:	1909      	adds	r1, r1, r4
 8000e12:	3b01      	subs	r3, #1
 8000e14:	428c      	cmp	r4, r1
 8000e16:	d800      	bhi.n	8000e1a <__aeabi_ddiv+0x156>
 8000e18:	e1ed      	b.n	80011f6 <__aeabi_ddiv+0x532>
 8000e1a:	1a88      	subs	r0, r1, r2
 8000e1c:	4642      	mov	r2, r8
 8000e1e:	0412      	lsls	r2, r2, #16
 8000e20:	431a      	orrs	r2, r3
 8000e22:	4690      	mov	r8, r2
 8000e24:	4641      	mov	r1, r8
 8000e26:	9b00      	ldr	r3, [sp, #0]
 8000e28:	040e      	lsls	r6, r1, #16
 8000e2a:	0c1b      	lsrs	r3, r3, #16
 8000e2c:	001f      	movs	r7, r3
 8000e2e:	9302      	str	r3, [sp, #8]
 8000e30:	9b00      	ldr	r3, [sp, #0]
 8000e32:	0c36      	lsrs	r6, r6, #16
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	0c19      	lsrs	r1, r3, #16
 8000e38:	000b      	movs	r3, r1
 8000e3a:	4373      	muls	r3, r6
 8000e3c:	0c12      	lsrs	r2, r2, #16
 8000e3e:	437e      	muls	r6, r7
 8000e40:	9103      	str	r1, [sp, #12]
 8000e42:	4351      	muls	r1, r2
 8000e44:	437a      	muls	r2, r7
 8000e46:	0c1f      	lsrs	r7, r3, #16
 8000e48:	46bc      	mov	ip, r7
 8000e4a:	1876      	adds	r6, r6, r1
 8000e4c:	4466      	add	r6, ip
 8000e4e:	42b1      	cmp	r1, r6
 8000e50:	d903      	bls.n	8000e5a <__aeabi_ddiv+0x196>
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	0249      	lsls	r1, r1, #9
 8000e56:	468c      	mov	ip, r1
 8000e58:	4462      	add	r2, ip
 8000e5a:	0c31      	lsrs	r1, r6, #16
 8000e5c:	188a      	adds	r2, r1, r2
 8000e5e:	0431      	lsls	r1, r6, #16
 8000e60:	041e      	lsls	r6, r3, #16
 8000e62:	0c36      	lsrs	r6, r6, #16
 8000e64:	198e      	adds	r6, r1, r6
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d302      	bcc.n	8000e70 <__aeabi_ddiv+0x1ac>
 8000e6a:	d112      	bne.n	8000e92 <__aeabi_ddiv+0x1ce>
 8000e6c:	42b5      	cmp	r5, r6
 8000e6e:	d210      	bcs.n	8000e92 <__aeabi_ddiv+0x1ce>
 8000e70:	4643      	mov	r3, r8
 8000e72:	1e59      	subs	r1, r3, #1
 8000e74:	9b00      	ldr	r3, [sp, #0]
 8000e76:	469c      	mov	ip, r3
 8000e78:	4465      	add	r5, ip
 8000e7a:	001f      	movs	r7, r3
 8000e7c:	429d      	cmp	r5, r3
 8000e7e:	419b      	sbcs	r3, r3
 8000e80:	425b      	negs	r3, r3
 8000e82:	191b      	adds	r3, r3, r4
 8000e84:	18c0      	adds	r0, r0, r3
 8000e86:	4284      	cmp	r4, r0
 8000e88:	d200      	bcs.n	8000e8c <__aeabi_ddiv+0x1c8>
 8000e8a:	e1a0      	b.n	80011ce <__aeabi_ddiv+0x50a>
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_ddiv+0x1cc>
 8000e8e:	e19b      	b.n	80011c8 <__aeabi_ddiv+0x504>
 8000e90:	4688      	mov	r8, r1
 8000e92:	1bae      	subs	r6, r5, r6
 8000e94:	42b5      	cmp	r5, r6
 8000e96:	41ad      	sbcs	r5, r5
 8000e98:	1a80      	subs	r0, r0, r2
 8000e9a:	426d      	negs	r5, r5
 8000e9c:	1b40      	subs	r0, r0, r5
 8000e9e:	4284      	cmp	r4, r0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x1e0>
 8000ea2:	e1d5      	b.n	8001250 <__aeabi_ddiv+0x58c>
 8000ea4:	4649      	mov	r1, r9
 8000ea6:	f7ff f9db 	bl	8000260 <__aeabi_uidivmod>
 8000eaa:	9a01      	ldr	r2, [sp, #4]
 8000eac:	040b      	lsls	r3, r1, #16
 8000eae:	4342      	muls	r2, r0
 8000eb0:	0c31      	lsrs	r1, r6, #16
 8000eb2:	0005      	movs	r5, r0
 8000eb4:	4319      	orrs	r1, r3
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	d900      	bls.n	8000ebc <__aeabi_ddiv+0x1f8>
 8000eba:	e16c      	b.n	8001196 <__aeabi_ddiv+0x4d2>
 8000ebc:	1a88      	subs	r0, r1, r2
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	f7ff f9ce 	bl	8000260 <__aeabi_uidivmod>
 8000ec4:	9a01      	ldr	r2, [sp, #4]
 8000ec6:	0436      	lsls	r6, r6, #16
 8000ec8:	4342      	muls	r2, r0
 8000eca:	0409      	lsls	r1, r1, #16
 8000ecc:	0c36      	lsrs	r6, r6, #16
 8000ece:	0003      	movs	r3, r0
 8000ed0:	430e      	orrs	r6, r1
 8000ed2:	42b2      	cmp	r2, r6
 8000ed4:	d900      	bls.n	8000ed8 <__aeabi_ddiv+0x214>
 8000ed6:	e153      	b.n	8001180 <__aeabi_ddiv+0x4bc>
 8000ed8:	9803      	ldr	r0, [sp, #12]
 8000eda:	1ab6      	subs	r6, r6, r2
 8000edc:	0002      	movs	r2, r0
 8000ede:	042d      	lsls	r5, r5, #16
 8000ee0:	431d      	orrs	r5, r3
 8000ee2:	9f02      	ldr	r7, [sp, #8]
 8000ee4:	042b      	lsls	r3, r5, #16
 8000ee6:	0c1b      	lsrs	r3, r3, #16
 8000ee8:	435a      	muls	r2, r3
 8000eea:	437b      	muls	r3, r7
 8000eec:	469c      	mov	ip, r3
 8000eee:	0c29      	lsrs	r1, r5, #16
 8000ef0:	4348      	muls	r0, r1
 8000ef2:	0c13      	lsrs	r3, r2, #16
 8000ef4:	4484      	add	ip, r0
 8000ef6:	4463      	add	r3, ip
 8000ef8:	4379      	muls	r1, r7
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d903      	bls.n	8000f06 <__aeabi_ddiv+0x242>
 8000efe:	2080      	movs	r0, #128	; 0x80
 8000f00:	0240      	lsls	r0, r0, #9
 8000f02:	4684      	mov	ip, r0
 8000f04:	4461      	add	r1, ip
 8000f06:	0c18      	lsrs	r0, r3, #16
 8000f08:	0412      	lsls	r2, r2, #16
 8000f0a:	041b      	lsls	r3, r3, #16
 8000f0c:	0c12      	lsrs	r2, r2, #16
 8000f0e:	1841      	adds	r1, r0, r1
 8000f10:	189b      	adds	r3, r3, r2
 8000f12:	428e      	cmp	r6, r1
 8000f14:	d200      	bcs.n	8000f18 <__aeabi_ddiv+0x254>
 8000f16:	e0ff      	b.n	8001118 <__aeabi_ddiv+0x454>
 8000f18:	d100      	bne.n	8000f1c <__aeabi_ddiv+0x258>
 8000f1a:	e0fa      	b.n	8001112 <__aeabi_ddiv+0x44e>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	431d      	orrs	r5, r3
 8000f20:	4a49      	ldr	r2, [pc, #292]	; (8001048 <__aeabi_ddiv+0x384>)
 8000f22:	445a      	add	r2, fp
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_ddiv+0x266>
 8000f28:	e0aa      	b.n	8001080 <__aeabi_ddiv+0x3bc>
 8000f2a:	076b      	lsls	r3, r5, #29
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_ddiv+0x26c>
 8000f2e:	e13d      	b.n	80011ac <__aeabi_ddiv+0x4e8>
 8000f30:	08ed      	lsrs	r5, r5, #3
 8000f32:	4643      	mov	r3, r8
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	d506      	bpl.n	8000f46 <__aeabi_ddiv+0x282>
 8000f38:	4642      	mov	r2, r8
 8000f3a:	4b44      	ldr	r3, [pc, #272]	; (800104c <__aeabi_ddiv+0x388>)
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	4690      	mov	r8, r2
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	00d2      	lsls	r2, r2, #3
 8000f44:	445a      	add	r2, fp
 8000f46:	4b42      	ldr	r3, [pc, #264]	; (8001050 <__aeabi_ddiv+0x38c>)
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dd00      	ble.n	8000f4e <__aeabi_ddiv+0x28a>
 8000f4c:	e71f      	b.n	8000d8e <__aeabi_ddiv+0xca>
 8000f4e:	4643      	mov	r3, r8
 8000f50:	075b      	lsls	r3, r3, #29
 8000f52:	431d      	orrs	r5, r3
 8000f54:	4643      	mov	r3, r8
 8000f56:	0552      	lsls	r2, r2, #21
 8000f58:	025c      	lsls	r4, r3, #9
 8000f5a:	0b24      	lsrs	r4, r4, #12
 8000f5c:	0d53      	lsrs	r3, r2, #21
 8000f5e:	e708      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8000f60:	4652      	mov	r2, sl
 8000f62:	4322      	orrs	r2, r4
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x2a4>
 8000f66:	e07b      	b.n	8001060 <__aeabi_ddiv+0x39c>
 8000f68:	2c00      	cmp	r4, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_ddiv+0x2aa>
 8000f6c:	e0fa      	b.n	8001164 <__aeabi_ddiv+0x4a0>
 8000f6e:	0020      	movs	r0, r4
 8000f70:	f7ff faa4 	bl	80004bc <__clzsi2>
 8000f74:	0002      	movs	r2, r0
 8000f76:	3a0b      	subs	r2, #11
 8000f78:	231d      	movs	r3, #29
 8000f7a:	0001      	movs	r1, r0
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	4652      	mov	r2, sl
 8000f80:	3908      	subs	r1, #8
 8000f82:	40da      	lsrs	r2, r3
 8000f84:	408c      	lsls	r4, r1
 8000f86:	4314      	orrs	r4, r2
 8000f88:	4652      	mov	r2, sl
 8000f8a:	408a      	lsls	r2, r1
 8000f8c:	4b31      	ldr	r3, [pc, #196]	; (8001054 <__aeabi_ddiv+0x390>)
 8000f8e:	4458      	add	r0, fp
 8000f90:	469b      	mov	fp, r3
 8000f92:	4483      	add	fp, r0
 8000f94:	2000      	movs	r0, #0
 8000f96:	e6d5      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8000f98:	464b      	mov	r3, r9
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	4698      	mov	r8, r3
 8000f9e:	d044      	beq.n	800102a <__aeabi_ddiv+0x366>
 8000fa0:	2c00      	cmp	r4, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_ddiv+0x2e2>
 8000fa4:	e0ce      	b.n	8001144 <__aeabi_ddiv+0x480>
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f7ff fa88 	bl	80004bc <__clzsi2>
 8000fac:	0001      	movs	r1, r0
 8000fae:	0002      	movs	r2, r0
 8000fb0:	390b      	subs	r1, #11
 8000fb2:	231d      	movs	r3, #29
 8000fb4:	1a5b      	subs	r3, r3, r1
 8000fb6:	4649      	mov	r1, r9
 8000fb8:	0010      	movs	r0, r2
 8000fba:	40d9      	lsrs	r1, r3
 8000fbc:	3808      	subs	r0, #8
 8000fbe:	4084      	lsls	r4, r0
 8000fc0:	000b      	movs	r3, r1
 8000fc2:	464d      	mov	r5, r9
 8000fc4:	4323      	orrs	r3, r4
 8000fc6:	4698      	mov	r8, r3
 8000fc8:	4085      	lsls	r5, r0
 8000fca:	4823      	ldr	r0, [pc, #140]	; (8001058 <__aeabi_ddiv+0x394>)
 8000fcc:	1a83      	subs	r3, r0, r2
 8000fce:	469b      	mov	fp, r3
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	e69a      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8000fd8:	464b      	mov	r3, r9
 8000fda:	4323      	orrs	r3, r4
 8000fdc:	4698      	mov	r8, r3
 8000fde:	d11d      	bne.n	800101c <__aeabi_ddiv+0x358>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4699      	mov	r9, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	4683      	mov	fp, r0
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	e68f      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8000fee:	4652      	mov	r2, sl
 8000ff0:	4322      	orrs	r2, r4
 8000ff2:	d109      	bne.n	8001008 <__aeabi_ddiv+0x344>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	4319      	orrs	r1, r3
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <__aeabi_ddiv+0x398>)
 8000ffc:	4689      	mov	r9, r1
 8000ffe:	469c      	mov	ip, r3
 8001000:	2400      	movs	r4, #0
 8001002:	2002      	movs	r0, #2
 8001004:	44e3      	add	fp, ip
 8001006:	e69d      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8001008:	2303      	movs	r3, #3
 800100a:	464a      	mov	r2, r9
 800100c:	431a      	orrs	r2, r3
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <__aeabi_ddiv+0x398>)
 8001010:	4691      	mov	r9, r2
 8001012:	469c      	mov	ip, r3
 8001014:	4652      	mov	r2, sl
 8001016:	2003      	movs	r0, #3
 8001018:	44e3      	add	fp, ip
 800101a:	e693      	b.n	8000d44 <__aeabi_ddiv+0x80>
 800101c:	230c      	movs	r3, #12
 800101e:	4699      	mov	r9, r3
 8001020:	3b09      	subs	r3, #9
 8001022:	46a0      	mov	r8, r4
 8001024:	4683      	mov	fp, r0
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	e671      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 800102a:	2304      	movs	r3, #4
 800102c:	4699      	mov	r9, r3
 800102e:	2300      	movs	r3, #0
 8001030:	469b      	mov	fp, r3
 8001032:	3301      	adds	r3, #1
 8001034:	2500      	movs	r5, #0
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	e669      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	000007ff 	.word	0x000007ff
 8001040:	fffffc01 	.word	0xfffffc01
 8001044:	0801cda8 	.word	0x0801cda8
 8001048:	000003ff 	.word	0x000003ff
 800104c:	feffffff 	.word	0xfeffffff
 8001050:	000007fe 	.word	0x000007fe
 8001054:	000003f3 	.word	0x000003f3
 8001058:	fffffc0d 	.word	0xfffffc0d
 800105c:	fffff801 	.word	0xfffff801
 8001060:	4649      	mov	r1, r9
 8001062:	2301      	movs	r3, #1
 8001064:	4319      	orrs	r1, r3
 8001066:	4689      	mov	r9, r1
 8001068:	2400      	movs	r4, #0
 800106a:	2001      	movs	r0, #1
 800106c:	e66a      	b.n	8000d44 <__aeabi_ddiv+0x80>
 800106e:	2300      	movs	r3, #0
 8001070:	2480      	movs	r4, #128	; 0x80
 8001072:	469a      	mov	sl, r3
 8001074:	2500      	movs	r5, #0
 8001076:	4b8a      	ldr	r3, [pc, #552]	; (80012a0 <__aeabi_ddiv+0x5dc>)
 8001078:	0324      	lsls	r4, r4, #12
 800107a:	e67a      	b.n	8000d72 <__aeabi_ddiv+0xae>
 800107c:	2501      	movs	r5, #1
 800107e:	426d      	negs	r5, r5
 8001080:	2301      	movs	r3, #1
 8001082:	1a9b      	subs	r3, r3, r2
 8001084:	2b38      	cmp	r3, #56	; 0x38
 8001086:	dd00      	ble.n	800108a <__aeabi_ddiv+0x3c6>
 8001088:	e670      	b.n	8000d6c <__aeabi_ddiv+0xa8>
 800108a:	2b1f      	cmp	r3, #31
 800108c:	dc00      	bgt.n	8001090 <__aeabi_ddiv+0x3cc>
 800108e:	e0bf      	b.n	8001210 <__aeabi_ddiv+0x54c>
 8001090:	211f      	movs	r1, #31
 8001092:	4249      	negs	r1, r1
 8001094:	1a8a      	subs	r2, r1, r2
 8001096:	4641      	mov	r1, r8
 8001098:	40d1      	lsrs	r1, r2
 800109a:	000a      	movs	r2, r1
 800109c:	2b20      	cmp	r3, #32
 800109e:	d004      	beq.n	80010aa <__aeabi_ddiv+0x3e6>
 80010a0:	4641      	mov	r1, r8
 80010a2:	4b80      	ldr	r3, [pc, #512]	; (80012a4 <__aeabi_ddiv+0x5e0>)
 80010a4:	445b      	add	r3, fp
 80010a6:	4099      	lsls	r1, r3
 80010a8:	430d      	orrs	r5, r1
 80010aa:	1e6b      	subs	r3, r5, #1
 80010ac:	419d      	sbcs	r5, r3
 80010ae:	2307      	movs	r3, #7
 80010b0:	432a      	orrs	r2, r5
 80010b2:	001d      	movs	r5, r3
 80010b4:	2400      	movs	r4, #0
 80010b6:	4015      	ands	r5, r2
 80010b8:	4213      	tst	r3, r2
 80010ba:	d100      	bne.n	80010be <__aeabi_ddiv+0x3fa>
 80010bc:	e0d4      	b.n	8001268 <__aeabi_ddiv+0x5a4>
 80010be:	210f      	movs	r1, #15
 80010c0:	2300      	movs	r3, #0
 80010c2:	4011      	ands	r1, r2
 80010c4:	2904      	cmp	r1, #4
 80010c6:	d100      	bne.n	80010ca <__aeabi_ddiv+0x406>
 80010c8:	e0cb      	b.n	8001262 <__aeabi_ddiv+0x59e>
 80010ca:	1d11      	adds	r1, r2, #4
 80010cc:	4291      	cmp	r1, r2
 80010ce:	4192      	sbcs	r2, r2
 80010d0:	4252      	negs	r2, r2
 80010d2:	189b      	adds	r3, r3, r2
 80010d4:	000a      	movs	r2, r1
 80010d6:	0219      	lsls	r1, r3, #8
 80010d8:	d400      	bmi.n	80010dc <__aeabi_ddiv+0x418>
 80010da:	e0c2      	b.n	8001262 <__aeabi_ddiv+0x59e>
 80010dc:	2301      	movs	r3, #1
 80010de:	2400      	movs	r4, #0
 80010e0:	2500      	movs	r5, #0
 80010e2:	e646      	b.n	8000d72 <__aeabi_ddiv+0xae>
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	4641      	mov	r1, r8
 80010e8:	031b      	lsls	r3, r3, #12
 80010ea:	4219      	tst	r1, r3
 80010ec:	d008      	beq.n	8001100 <__aeabi_ddiv+0x43c>
 80010ee:	421c      	tst	r4, r3
 80010f0:	d106      	bne.n	8001100 <__aeabi_ddiv+0x43c>
 80010f2:	431c      	orrs	r4, r3
 80010f4:	0324      	lsls	r4, r4, #12
 80010f6:	46ba      	mov	sl, r7
 80010f8:	0015      	movs	r5, r2
 80010fa:	4b69      	ldr	r3, [pc, #420]	; (80012a0 <__aeabi_ddiv+0x5dc>)
 80010fc:	0b24      	lsrs	r4, r4, #12
 80010fe:	e638      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	4643      	mov	r3, r8
 8001104:	0324      	lsls	r4, r4, #12
 8001106:	431c      	orrs	r4, r3
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	46b2      	mov	sl, r6
 800110c:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <__aeabi_ddiv+0x5dc>)
 800110e:	0b24      	lsrs	r4, r4, #12
 8001110:	e62f      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x454>
 8001116:	e703      	b.n	8000f20 <__aeabi_ddiv+0x25c>
 8001118:	19a6      	adds	r6, r4, r6
 800111a:	1e68      	subs	r0, r5, #1
 800111c:	42a6      	cmp	r6, r4
 800111e:	d200      	bcs.n	8001122 <__aeabi_ddiv+0x45e>
 8001120:	e08d      	b.n	800123e <__aeabi_ddiv+0x57a>
 8001122:	428e      	cmp	r6, r1
 8001124:	d200      	bcs.n	8001128 <__aeabi_ddiv+0x464>
 8001126:	e0a3      	b.n	8001270 <__aeabi_ddiv+0x5ac>
 8001128:	d100      	bne.n	800112c <__aeabi_ddiv+0x468>
 800112a:	e0b3      	b.n	8001294 <__aeabi_ddiv+0x5d0>
 800112c:	0005      	movs	r5, r0
 800112e:	e6f5      	b.n	8000f1c <__aeabi_ddiv+0x258>
 8001130:	42aa      	cmp	r2, r5
 8001132:	d900      	bls.n	8001136 <__aeabi_ddiv+0x472>
 8001134:	e639      	b.n	8000daa <__aeabi_ddiv+0xe6>
 8001136:	4643      	mov	r3, r8
 8001138:	07de      	lsls	r6, r3, #31
 800113a:	0858      	lsrs	r0, r3, #1
 800113c:	086b      	lsrs	r3, r5, #1
 800113e:	431e      	orrs	r6, r3
 8001140:	07ed      	lsls	r5, r5, #31
 8001142:	e639      	b.n	8000db8 <__aeabi_ddiv+0xf4>
 8001144:	4648      	mov	r0, r9
 8001146:	f7ff f9b9 	bl	80004bc <__clzsi2>
 800114a:	0001      	movs	r1, r0
 800114c:	0002      	movs	r2, r0
 800114e:	3115      	adds	r1, #21
 8001150:	3220      	adds	r2, #32
 8001152:	291c      	cmp	r1, #28
 8001154:	dc00      	bgt.n	8001158 <__aeabi_ddiv+0x494>
 8001156:	e72c      	b.n	8000fb2 <__aeabi_ddiv+0x2ee>
 8001158:	464b      	mov	r3, r9
 800115a:	3808      	subs	r0, #8
 800115c:	4083      	lsls	r3, r0
 800115e:	2500      	movs	r5, #0
 8001160:	4698      	mov	r8, r3
 8001162:	e732      	b.n	8000fca <__aeabi_ddiv+0x306>
 8001164:	f7ff f9aa 	bl	80004bc <__clzsi2>
 8001168:	0003      	movs	r3, r0
 800116a:	001a      	movs	r2, r3
 800116c:	3215      	adds	r2, #21
 800116e:	3020      	adds	r0, #32
 8001170:	2a1c      	cmp	r2, #28
 8001172:	dc00      	bgt.n	8001176 <__aeabi_ddiv+0x4b2>
 8001174:	e700      	b.n	8000f78 <__aeabi_ddiv+0x2b4>
 8001176:	4654      	mov	r4, sl
 8001178:	3b08      	subs	r3, #8
 800117a:	2200      	movs	r2, #0
 800117c:	409c      	lsls	r4, r3
 800117e:	e705      	b.n	8000f8c <__aeabi_ddiv+0x2c8>
 8001180:	1936      	adds	r6, r6, r4
 8001182:	3b01      	subs	r3, #1
 8001184:	42b4      	cmp	r4, r6
 8001186:	d900      	bls.n	800118a <__aeabi_ddiv+0x4c6>
 8001188:	e6a6      	b.n	8000ed8 <__aeabi_ddiv+0x214>
 800118a:	42b2      	cmp	r2, r6
 800118c:	d800      	bhi.n	8001190 <__aeabi_ddiv+0x4cc>
 800118e:	e6a3      	b.n	8000ed8 <__aeabi_ddiv+0x214>
 8001190:	1e83      	subs	r3, r0, #2
 8001192:	1936      	adds	r6, r6, r4
 8001194:	e6a0      	b.n	8000ed8 <__aeabi_ddiv+0x214>
 8001196:	1909      	adds	r1, r1, r4
 8001198:	3d01      	subs	r5, #1
 800119a:	428c      	cmp	r4, r1
 800119c:	d900      	bls.n	80011a0 <__aeabi_ddiv+0x4dc>
 800119e:	e68d      	b.n	8000ebc <__aeabi_ddiv+0x1f8>
 80011a0:	428a      	cmp	r2, r1
 80011a2:	d800      	bhi.n	80011a6 <__aeabi_ddiv+0x4e2>
 80011a4:	e68a      	b.n	8000ebc <__aeabi_ddiv+0x1f8>
 80011a6:	1e85      	subs	r5, r0, #2
 80011a8:	1909      	adds	r1, r1, r4
 80011aa:	e687      	b.n	8000ebc <__aeabi_ddiv+0x1f8>
 80011ac:	230f      	movs	r3, #15
 80011ae:	402b      	ands	r3, r5
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d100      	bne.n	80011b6 <__aeabi_ddiv+0x4f2>
 80011b4:	e6bc      	b.n	8000f30 <__aeabi_ddiv+0x26c>
 80011b6:	2305      	movs	r3, #5
 80011b8:	425b      	negs	r3, r3
 80011ba:	42ab      	cmp	r3, r5
 80011bc:	419b      	sbcs	r3, r3
 80011be:	3504      	adds	r5, #4
 80011c0:	425b      	negs	r3, r3
 80011c2:	08ed      	lsrs	r5, r5, #3
 80011c4:	4498      	add	r8, r3
 80011c6:	e6b4      	b.n	8000f32 <__aeabi_ddiv+0x26e>
 80011c8:	42af      	cmp	r7, r5
 80011ca:	d900      	bls.n	80011ce <__aeabi_ddiv+0x50a>
 80011cc:	e660      	b.n	8000e90 <__aeabi_ddiv+0x1cc>
 80011ce:	4282      	cmp	r2, r0
 80011d0:	d804      	bhi.n	80011dc <__aeabi_ddiv+0x518>
 80011d2:	d000      	beq.n	80011d6 <__aeabi_ddiv+0x512>
 80011d4:	e65c      	b.n	8000e90 <__aeabi_ddiv+0x1cc>
 80011d6:	42ae      	cmp	r6, r5
 80011d8:	d800      	bhi.n	80011dc <__aeabi_ddiv+0x518>
 80011da:	e659      	b.n	8000e90 <__aeabi_ddiv+0x1cc>
 80011dc:	2302      	movs	r3, #2
 80011de:	425b      	negs	r3, r3
 80011e0:	469c      	mov	ip, r3
 80011e2:	9b00      	ldr	r3, [sp, #0]
 80011e4:	44e0      	add	r8, ip
 80011e6:	469c      	mov	ip, r3
 80011e8:	4465      	add	r5, ip
 80011ea:	429d      	cmp	r5, r3
 80011ec:	419b      	sbcs	r3, r3
 80011ee:	425b      	negs	r3, r3
 80011f0:	191b      	adds	r3, r3, r4
 80011f2:	18c0      	adds	r0, r0, r3
 80011f4:	e64d      	b.n	8000e92 <__aeabi_ddiv+0x1ce>
 80011f6:	428a      	cmp	r2, r1
 80011f8:	d800      	bhi.n	80011fc <__aeabi_ddiv+0x538>
 80011fa:	e60e      	b.n	8000e1a <__aeabi_ddiv+0x156>
 80011fc:	1e83      	subs	r3, r0, #2
 80011fe:	1909      	adds	r1, r1, r4
 8001200:	e60b      	b.n	8000e1a <__aeabi_ddiv+0x156>
 8001202:	428a      	cmp	r2, r1
 8001204:	d800      	bhi.n	8001208 <__aeabi_ddiv+0x544>
 8001206:	e5f4      	b.n	8000df2 <__aeabi_ddiv+0x12e>
 8001208:	1e83      	subs	r3, r0, #2
 800120a:	4698      	mov	r8, r3
 800120c:	1909      	adds	r1, r1, r4
 800120e:	e5f0      	b.n	8000df2 <__aeabi_ddiv+0x12e>
 8001210:	4925      	ldr	r1, [pc, #148]	; (80012a8 <__aeabi_ddiv+0x5e4>)
 8001212:	0028      	movs	r0, r5
 8001214:	4459      	add	r1, fp
 8001216:	408d      	lsls	r5, r1
 8001218:	4642      	mov	r2, r8
 800121a:	408a      	lsls	r2, r1
 800121c:	1e69      	subs	r1, r5, #1
 800121e:	418d      	sbcs	r5, r1
 8001220:	4641      	mov	r1, r8
 8001222:	40d8      	lsrs	r0, r3
 8001224:	40d9      	lsrs	r1, r3
 8001226:	4302      	orrs	r2, r0
 8001228:	432a      	orrs	r2, r5
 800122a:	000b      	movs	r3, r1
 800122c:	0751      	lsls	r1, r2, #29
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0x56e>
 8001230:	e751      	b.n	80010d6 <__aeabi_ddiv+0x412>
 8001232:	210f      	movs	r1, #15
 8001234:	4011      	ands	r1, r2
 8001236:	2904      	cmp	r1, #4
 8001238:	d000      	beq.n	800123c <__aeabi_ddiv+0x578>
 800123a:	e746      	b.n	80010ca <__aeabi_ddiv+0x406>
 800123c:	e74b      	b.n	80010d6 <__aeabi_ddiv+0x412>
 800123e:	0005      	movs	r5, r0
 8001240:	428e      	cmp	r6, r1
 8001242:	d000      	beq.n	8001246 <__aeabi_ddiv+0x582>
 8001244:	e66a      	b.n	8000f1c <__aeabi_ddiv+0x258>
 8001246:	9a00      	ldr	r2, [sp, #0]
 8001248:	4293      	cmp	r3, r2
 800124a:	d000      	beq.n	800124e <__aeabi_ddiv+0x58a>
 800124c:	e666      	b.n	8000f1c <__aeabi_ddiv+0x258>
 800124e:	e667      	b.n	8000f20 <__aeabi_ddiv+0x25c>
 8001250:	4a16      	ldr	r2, [pc, #88]	; (80012ac <__aeabi_ddiv+0x5e8>)
 8001252:	445a      	add	r2, fp
 8001254:	2a00      	cmp	r2, #0
 8001256:	dc00      	bgt.n	800125a <__aeabi_ddiv+0x596>
 8001258:	e710      	b.n	800107c <__aeabi_ddiv+0x3b8>
 800125a:	2301      	movs	r3, #1
 800125c:	2500      	movs	r5, #0
 800125e:	4498      	add	r8, r3
 8001260:	e667      	b.n	8000f32 <__aeabi_ddiv+0x26e>
 8001262:	075d      	lsls	r5, r3, #29
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	0b1c      	lsrs	r4, r3, #12
 8001268:	08d2      	lsrs	r2, r2, #3
 800126a:	2300      	movs	r3, #0
 800126c:	4315      	orrs	r5, r2
 800126e:	e580      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001270:	9800      	ldr	r0, [sp, #0]
 8001272:	3d02      	subs	r5, #2
 8001274:	0042      	lsls	r2, r0, #1
 8001276:	4282      	cmp	r2, r0
 8001278:	41bf      	sbcs	r7, r7
 800127a:	427f      	negs	r7, r7
 800127c:	193c      	adds	r4, r7, r4
 800127e:	1936      	adds	r6, r6, r4
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	e7dd      	b.n	8001240 <__aeabi_ddiv+0x57c>
 8001284:	2480      	movs	r4, #128	; 0x80
 8001286:	4643      	mov	r3, r8
 8001288:	0324      	lsls	r4, r4, #12
 800128a:	431c      	orrs	r4, r3
 800128c:	0324      	lsls	r4, r4, #12
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <__aeabi_ddiv+0x5dc>)
 8001290:	0b24      	lsrs	r4, r4, #12
 8001292:	e56e      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001294:	9a00      	ldr	r2, [sp, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3ea      	bcc.n	8001270 <__aeabi_ddiv+0x5ac>
 800129a:	0005      	movs	r5, r0
 800129c:	e7d3      	b.n	8001246 <__aeabi_ddiv+0x582>
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	000007ff 	.word	0x000007ff
 80012a4:	0000043e 	.word	0x0000043e
 80012a8:	0000041e 	.word	0x0000041e
 80012ac:	000003ff 	.word	0x000003ff

080012b0 <__eqdf2>:
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	464e      	mov	r6, r9
 80012b4:	4645      	mov	r5, r8
 80012b6:	46de      	mov	lr, fp
 80012b8:	4657      	mov	r7, sl
 80012ba:	4690      	mov	r8, r2
 80012bc:	b5e0      	push	{r5, r6, r7, lr}
 80012be:	0017      	movs	r7, r2
 80012c0:	031a      	lsls	r2, r3, #12
 80012c2:	0b12      	lsrs	r2, r2, #12
 80012c4:	0005      	movs	r5, r0
 80012c6:	4684      	mov	ip, r0
 80012c8:	4819      	ldr	r0, [pc, #100]	; (8001330 <__eqdf2+0x80>)
 80012ca:	030e      	lsls	r6, r1, #12
 80012cc:	004c      	lsls	r4, r1, #1
 80012ce:	4691      	mov	r9, r2
 80012d0:	005a      	lsls	r2, r3, #1
 80012d2:	0fdb      	lsrs	r3, r3, #31
 80012d4:	469b      	mov	fp, r3
 80012d6:	0b36      	lsrs	r6, r6, #12
 80012d8:	0d64      	lsrs	r4, r4, #21
 80012da:	0fc9      	lsrs	r1, r1, #31
 80012dc:	0d52      	lsrs	r2, r2, #21
 80012de:	4284      	cmp	r4, r0
 80012e0:	d019      	beq.n	8001316 <__eqdf2+0x66>
 80012e2:	4282      	cmp	r2, r0
 80012e4:	d010      	beq.n	8001308 <__eqdf2+0x58>
 80012e6:	2001      	movs	r0, #1
 80012e8:	4294      	cmp	r4, r2
 80012ea:	d10e      	bne.n	800130a <__eqdf2+0x5a>
 80012ec:	454e      	cmp	r6, r9
 80012ee:	d10c      	bne.n	800130a <__eqdf2+0x5a>
 80012f0:	2001      	movs	r0, #1
 80012f2:	45c4      	cmp	ip, r8
 80012f4:	d109      	bne.n	800130a <__eqdf2+0x5a>
 80012f6:	4559      	cmp	r1, fp
 80012f8:	d017      	beq.n	800132a <__eqdf2+0x7a>
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d105      	bne.n	800130a <__eqdf2+0x5a>
 80012fe:	0030      	movs	r0, r6
 8001300:	4328      	orrs	r0, r5
 8001302:	1e43      	subs	r3, r0, #1
 8001304:	4198      	sbcs	r0, r3
 8001306:	e000      	b.n	800130a <__eqdf2+0x5a>
 8001308:	2001      	movs	r0, #1
 800130a:	bcf0      	pop	{r4, r5, r6, r7}
 800130c:	46bb      	mov	fp, r7
 800130e:	46b2      	mov	sl, r6
 8001310:	46a9      	mov	r9, r5
 8001312:	46a0      	mov	r8, r4
 8001314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001316:	0033      	movs	r3, r6
 8001318:	2001      	movs	r0, #1
 800131a:	432b      	orrs	r3, r5
 800131c:	d1f5      	bne.n	800130a <__eqdf2+0x5a>
 800131e:	42a2      	cmp	r2, r4
 8001320:	d1f3      	bne.n	800130a <__eqdf2+0x5a>
 8001322:	464b      	mov	r3, r9
 8001324:	433b      	orrs	r3, r7
 8001326:	d1f0      	bne.n	800130a <__eqdf2+0x5a>
 8001328:	e7e2      	b.n	80012f0 <__eqdf2+0x40>
 800132a:	2000      	movs	r0, #0
 800132c:	e7ed      	b.n	800130a <__eqdf2+0x5a>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff

08001334 <__gedf2>:
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	4647      	mov	r7, r8
 8001338:	46ce      	mov	lr, r9
 800133a:	0004      	movs	r4, r0
 800133c:	0018      	movs	r0, r3
 800133e:	0016      	movs	r6, r2
 8001340:	031b      	lsls	r3, r3, #12
 8001342:	0b1b      	lsrs	r3, r3, #12
 8001344:	4d2d      	ldr	r5, [pc, #180]	; (80013fc <__gedf2+0xc8>)
 8001346:	004a      	lsls	r2, r1, #1
 8001348:	4699      	mov	r9, r3
 800134a:	b580      	push	{r7, lr}
 800134c:	0043      	lsls	r3, r0, #1
 800134e:	030f      	lsls	r7, r1, #12
 8001350:	46a4      	mov	ip, r4
 8001352:	46b0      	mov	r8, r6
 8001354:	0b3f      	lsrs	r7, r7, #12
 8001356:	0d52      	lsrs	r2, r2, #21
 8001358:	0fc9      	lsrs	r1, r1, #31
 800135a:	0d5b      	lsrs	r3, r3, #21
 800135c:	0fc0      	lsrs	r0, r0, #31
 800135e:	42aa      	cmp	r2, r5
 8001360:	d021      	beq.n	80013a6 <__gedf2+0x72>
 8001362:	42ab      	cmp	r3, r5
 8001364:	d013      	beq.n	800138e <__gedf2+0x5a>
 8001366:	2a00      	cmp	r2, #0
 8001368:	d122      	bne.n	80013b0 <__gedf2+0x7c>
 800136a:	433c      	orrs	r4, r7
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <__gedf2+0x42>
 8001370:	464d      	mov	r5, r9
 8001372:	432e      	orrs	r6, r5
 8001374:	d022      	beq.n	80013bc <__gedf2+0x88>
 8001376:	2c00      	cmp	r4, #0
 8001378:	d010      	beq.n	800139c <__gedf2+0x68>
 800137a:	4281      	cmp	r1, r0
 800137c:	d022      	beq.n	80013c4 <__gedf2+0x90>
 800137e:	2002      	movs	r0, #2
 8001380:	3901      	subs	r1, #1
 8001382:	4008      	ands	r0, r1
 8001384:	3801      	subs	r0, #1
 8001386:	bcc0      	pop	{r6, r7}
 8001388:	46b9      	mov	r9, r7
 800138a:	46b0      	mov	r8, r6
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138e:	464d      	mov	r5, r9
 8001390:	432e      	orrs	r6, r5
 8001392:	d129      	bne.n	80013e8 <__gedf2+0xb4>
 8001394:	2a00      	cmp	r2, #0
 8001396:	d1f0      	bne.n	800137a <__gedf2+0x46>
 8001398:	433c      	orrs	r4, r7
 800139a:	d1ee      	bne.n	800137a <__gedf2+0x46>
 800139c:	2800      	cmp	r0, #0
 800139e:	d1f2      	bne.n	8001386 <__gedf2+0x52>
 80013a0:	2001      	movs	r0, #1
 80013a2:	4240      	negs	r0, r0
 80013a4:	e7ef      	b.n	8001386 <__gedf2+0x52>
 80013a6:	003d      	movs	r5, r7
 80013a8:	4325      	orrs	r5, r4
 80013aa:	d11d      	bne.n	80013e8 <__gedf2+0xb4>
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d0ee      	beq.n	800138e <__gedf2+0x5a>
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1e2      	bne.n	800137a <__gedf2+0x46>
 80013b4:	464c      	mov	r4, r9
 80013b6:	4326      	orrs	r6, r4
 80013b8:	d1df      	bne.n	800137a <__gedf2+0x46>
 80013ba:	e7e0      	b.n	800137e <__gedf2+0x4a>
 80013bc:	2000      	movs	r0, #0
 80013be:	2c00      	cmp	r4, #0
 80013c0:	d0e1      	beq.n	8001386 <__gedf2+0x52>
 80013c2:	e7dc      	b.n	800137e <__gedf2+0x4a>
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dc0a      	bgt.n	80013de <__gedf2+0xaa>
 80013c8:	dbe8      	blt.n	800139c <__gedf2+0x68>
 80013ca:	454f      	cmp	r7, r9
 80013cc:	d8d7      	bhi.n	800137e <__gedf2+0x4a>
 80013ce:	d00e      	beq.n	80013ee <__gedf2+0xba>
 80013d0:	2000      	movs	r0, #0
 80013d2:	454f      	cmp	r7, r9
 80013d4:	d2d7      	bcs.n	8001386 <__gedf2+0x52>
 80013d6:	2900      	cmp	r1, #0
 80013d8:	d0e2      	beq.n	80013a0 <__gedf2+0x6c>
 80013da:	0008      	movs	r0, r1
 80013dc:	e7d3      	b.n	8001386 <__gedf2+0x52>
 80013de:	4243      	negs	r3, r0
 80013e0:	4158      	adcs	r0, r3
 80013e2:	0040      	lsls	r0, r0, #1
 80013e4:	3801      	subs	r0, #1
 80013e6:	e7ce      	b.n	8001386 <__gedf2+0x52>
 80013e8:	2002      	movs	r0, #2
 80013ea:	4240      	negs	r0, r0
 80013ec:	e7cb      	b.n	8001386 <__gedf2+0x52>
 80013ee:	45c4      	cmp	ip, r8
 80013f0:	d8c5      	bhi.n	800137e <__gedf2+0x4a>
 80013f2:	2000      	movs	r0, #0
 80013f4:	45c4      	cmp	ip, r8
 80013f6:	d2c6      	bcs.n	8001386 <__gedf2+0x52>
 80013f8:	e7ed      	b.n	80013d6 <__gedf2+0xa2>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	000007ff 	.word	0x000007ff

08001400 <__ledf2>:
 8001400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001402:	4647      	mov	r7, r8
 8001404:	46ce      	mov	lr, r9
 8001406:	0004      	movs	r4, r0
 8001408:	0018      	movs	r0, r3
 800140a:	0016      	movs	r6, r2
 800140c:	031b      	lsls	r3, r3, #12
 800140e:	0b1b      	lsrs	r3, r3, #12
 8001410:	4d2c      	ldr	r5, [pc, #176]	; (80014c4 <__ledf2+0xc4>)
 8001412:	004a      	lsls	r2, r1, #1
 8001414:	4699      	mov	r9, r3
 8001416:	b580      	push	{r7, lr}
 8001418:	0043      	lsls	r3, r0, #1
 800141a:	030f      	lsls	r7, r1, #12
 800141c:	46a4      	mov	ip, r4
 800141e:	46b0      	mov	r8, r6
 8001420:	0b3f      	lsrs	r7, r7, #12
 8001422:	0d52      	lsrs	r2, r2, #21
 8001424:	0fc9      	lsrs	r1, r1, #31
 8001426:	0d5b      	lsrs	r3, r3, #21
 8001428:	0fc0      	lsrs	r0, r0, #31
 800142a:	42aa      	cmp	r2, r5
 800142c:	d00d      	beq.n	800144a <__ledf2+0x4a>
 800142e:	42ab      	cmp	r3, r5
 8001430:	d010      	beq.n	8001454 <__ledf2+0x54>
 8001432:	2a00      	cmp	r2, #0
 8001434:	d127      	bne.n	8001486 <__ledf2+0x86>
 8001436:	433c      	orrs	r4, r7
 8001438:	2b00      	cmp	r3, #0
 800143a:	d111      	bne.n	8001460 <__ledf2+0x60>
 800143c:	464d      	mov	r5, r9
 800143e:	432e      	orrs	r6, r5
 8001440:	d10e      	bne.n	8001460 <__ledf2+0x60>
 8001442:	2000      	movs	r0, #0
 8001444:	2c00      	cmp	r4, #0
 8001446:	d015      	beq.n	8001474 <__ledf2+0x74>
 8001448:	e00e      	b.n	8001468 <__ledf2+0x68>
 800144a:	003d      	movs	r5, r7
 800144c:	4325      	orrs	r5, r4
 800144e:	d110      	bne.n	8001472 <__ledf2+0x72>
 8001450:	4293      	cmp	r3, r2
 8001452:	d118      	bne.n	8001486 <__ledf2+0x86>
 8001454:	464d      	mov	r5, r9
 8001456:	432e      	orrs	r6, r5
 8001458:	d10b      	bne.n	8001472 <__ledf2+0x72>
 800145a:	2a00      	cmp	r2, #0
 800145c:	d102      	bne.n	8001464 <__ledf2+0x64>
 800145e:	433c      	orrs	r4, r7
 8001460:	2c00      	cmp	r4, #0
 8001462:	d00b      	beq.n	800147c <__ledf2+0x7c>
 8001464:	4281      	cmp	r1, r0
 8001466:	d014      	beq.n	8001492 <__ledf2+0x92>
 8001468:	2002      	movs	r0, #2
 800146a:	3901      	subs	r1, #1
 800146c:	4008      	ands	r0, r1
 800146e:	3801      	subs	r0, #1
 8001470:	e000      	b.n	8001474 <__ledf2+0x74>
 8001472:	2002      	movs	r0, #2
 8001474:	bcc0      	pop	{r6, r7}
 8001476:	46b9      	mov	r9, r7
 8001478:	46b0      	mov	r8, r6
 800147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800147c:	2800      	cmp	r0, #0
 800147e:	d1f9      	bne.n	8001474 <__ledf2+0x74>
 8001480:	2001      	movs	r0, #1
 8001482:	4240      	negs	r0, r0
 8001484:	e7f6      	b.n	8001474 <__ledf2+0x74>
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ec      	bne.n	8001464 <__ledf2+0x64>
 800148a:	464c      	mov	r4, r9
 800148c:	4326      	orrs	r6, r4
 800148e:	d1e9      	bne.n	8001464 <__ledf2+0x64>
 8001490:	e7ea      	b.n	8001468 <__ledf2+0x68>
 8001492:	429a      	cmp	r2, r3
 8001494:	dd04      	ble.n	80014a0 <__ledf2+0xa0>
 8001496:	4243      	negs	r3, r0
 8001498:	4158      	adcs	r0, r3
 800149a:	0040      	lsls	r0, r0, #1
 800149c:	3801      	subs	r0, #1
 800149e:	e7e9      	b.n	8001474 <__ledf2+0x74>
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbeb      	blt.n	800147c <__ledf2+0x7c>
 80014a4:	454f      	cmp	r7, r9
 80014a6:	d8df      	bhi.n	8001468 <__ledf2+0x68>
 80014a8:	d006      	beq.n	80014b8 <__ledf2+0xb8>
 80014aa:	2000      	movs	r0, #0
 80014ac:	454f      	cmp	r7, r9
 80014ae:	d2e1      	bcs.n	8001474 <__ledf2+0x74>
 80014b0:	2900      	cmp	r1, #0
 80014b2:	d0e5      	beq.n	8001480 <__ledf2+0x80>
 80014b4:	0008      	movs	r0, r1
 80014b6:	e7dd      	b.n	8001474 <__ledf2+0x74>
 80014b8:	45c4      	cmp	ip, r8
 80014ba:	d8d5      	bhi.n	8001468 <__ledf2+0x68>
 80014bc:	2000      	movs	r0, #0
 80014be:	45c4      	cmp	ip, r8
 80014c0:	d2d8      	bcs.n	8001474 <__ledf2+0x74>
 80014c2:	e7f5      	b.n	80014b0 <__ledf2+0xb0>
 80014c4:	000007ff 	.word	0x000007ff

080014c8 <__aeabi_dmul>:
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	4657      	mov	r7, sl
 80014cc:	464e      	mov	r6, r9
 80014ce:	4645      	mov	r5, r8
 80014d0:	46de      	mov	lr, fp
 80014d2:	b5e0      	push	{r5, r6, r7, lr}
 80014d4:	4698      	mov	r8, r3
 80014d6:	030c      	lsls	r4, r1, #12
 80014d8:	004b      	lsls	r3, r1, #1
 80014da:	0006      	movs	r6, r0
 80014dc:	4692      	mov	sl, r2
 80014de:	b087      	sub	sp, #28
 80014e0:	0b24      	lsrs	r4, r4, #12
 80014e2:	0d5b      	lsrs	r3, r3, #21
 80014e4:	0fcf      	lsrs	r7, r1, #31
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dmul+0x24>
 80014ea:	e15c      	b.n	80017a6 <__aeabi_dmul+0x2de>
 80014ec:	4ad9      	ldr	r2, [pc, #868]	; (8001854 <__aeabi_dmul+0x38c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dmul+0x2c>
 80014f2:	e175      	b.n	80017e0 <__aeabi_dmul+0x318>
 80014f4:	0f42      	lsrs	r2, r0, #29
 80014f6:	00e4      	lsls	r4, r4, #3
 80014f8:	4314      	orrs	r4, r2
 80014fa:	2280      	movs	r2, #128	; 0x80
 80014fc:	0412      	lsls	r2, r2, #16
 80014fe:	4314      	orrs	r4, r2
 8001500:	4ad5      	ldr	r2, [pc, #852]	; (8001858 <__aeabi_dmul+0x390>)
 8001502:	00c5      	lsls	r5, r0, #3
 8001504:	4694      	mov	ip, r2
 8001506:	4463      	add	r3, ip
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2300      	movs	r3, #0
 800150c:	4699      	mov	r9, r3
 800150e:	469b      	mov	fp, r3
 8001510:	4643      	mov	r3, r8
 8001512:	4642      	mov	r2, r8
 8001514:	031e      	lsls	r6, r3, #12
 8001516:	0fd2      	lsrs	r2, r2, #31
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4650      	mov	r0, sl
 800151c:	4690      	mov	r8, r2
 800151e:	0b36      	lsrs	r6, r6, #12
 8001520:	0d5b      	lsrs	r3, r3, #21
 8001522:	d100      	bne.n	8001526 <__aeabi_dmul+0x5e>
 8001524:	e120      	b.n	8001768 <__aeabi_dmul+0x2a0>
 8001526:	4acb      	ldr	r2, [pc, #812]	; (8001854 <__aeabi_dmul+0x38c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d100      	bne.n	800152e <__aeabi_dmul+0x66>
 800152c:	e162      	b.n	80017f4 <__aeabi_dmul+0x32c>
 800152e:	49ca      	ldr	r1, [pc, #808]	; (8001858 <__aeabi_dmul+0x390>)
 8001530:	0f42      	lsrs	r2, r0, #29
 8001532:	468c      	mov	ip, r1
 8001534:	9900      	ldr	r1, [sp, #0]
 8001536:	4463      	add	r3, ip
 8001538:	00f6      	lsls	r6, r6, #3
 800153a:	468c      	mov	ip, r1
 800153c:	4316      	orrs	r6, r2
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	449c      	add	ip, r3
 8001542:	0412      	lsls	r2, r2, #16
 8001544:	4663      	mov	r3, ip
 8001546:	4316      	orrs	r6, r2
 8001548:	00c2      	lsls	r2, r0, #3
 800154a:	2000      	movs	r0, #0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	9900      	ldr	r1, [sp, #0]
 8001550:	4643      	mov	r3, r8
 8001552:	3101      	adds	r1, #1
 8001554:	468c      	mov	ip, r1
 8001556:	4649      	mov	r1, r9
 8001558:	407b      	eors	r3, r7
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	290f      	cmp	r1, #15
 800155e:	d826      	bhi.n	80015ae <__aeabi_dmul+0xe6>
 8001560:	4bbe      	ldr	r3, [pc, #760]	; (800185c <__aeabi_dmul+0x394>)
 8001562:	0089      	lsls	r1, r1, #2
 8001564:	5859      	ldr	r1, [r3, r1]
 8001566:	468f      	mov	pc, r1
 8001568:	4643      	mov	r3, r8
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	0034      	movs	r4, r6
 800156e:	0015      	movs	r5, r2
 8001570:	4683      	mov	fp, r0
 8001572:	465b      	mov	r3, fp
 8001574:	2b02      	cmp	r3, #2
 8001576:	d016      	beq.n	80015a6 <__aeabi_dmul+0xde>
 8001578:	2b03      	cmp	r3, #3
 800157a:	d100      	bne.n	800157e <__aeabi_dmul+0xb6>
 800157c:	e203      	b.n	8001986 <__aeabi_dmul+0x4be>
 800157e:	2b01      	cmp	r3, #1
 8001580:	d000      	beq.n	8001584 <__aeabi_dmul+0xbc>
 8001582:	e0cd      	b.n	8001720 <__aeabi_dmul+0x258>
 8001584:	2200      	movs	r2, #0
 8001586:	2400      	movs	r4, #0
 8001588:	2500      	movs	r5, #0
 800158a:	9b01      	ldr	r3, [sp, #4]
 800158c:	0512      	lsls	r2, r2, #20
 800158e:	4322      	orrs	r2, r4
 8001590:	07db      	lsls	r3, r3, #31
 8001592:	431a      	orrs	r2, r3
 8001594:	0028      	movs	r0, r5
 8001596:	0011      	movs	r1, r2
 8001598:	b007      	add	sp, #28
 800159a:	bcf0      	pop	{r4, r5, r6, r7}
 800159c:	46bb      	mov	fp, r7
 800159e:	46b2      	mov	sl, r6
 80015a0:	46a9      	mov	r9, r5
 80015a2:	46a0      	mov	r8, r4
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a6:	2400      	movs	r4, #0
 80015a8:	2500      	movs	r5, #0
 80015aa:	4aaa      	ldr	r2, [pc, #680]	; (8001854 <__aeabi_dmul+0x38c>)
 80015ac:	e7ed      	b.n	800158a <__aeabi_dmul+0xc2>
 80015ae:	0c28      	lsrs	r0, r5, #16
 80015b0:	042d      	lsls	r5, r5, #16
 80015b2:	0c2d      	lsrs	r5, r5, #16
 80015b4:	002b      	movs	r3, r5
 80015b6:	0c11      	lsrs	r1, r2, #16
 80015b8:	0412      	lsls	r2, r2, #16
 80015ba:	0c12      	lsrs	r2, r2, #16
 80015bc:	4353      	muls	r3, r2
 80015be:	4698      	mov	r8, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	002f      	movs	r7, r5
 80015c4:	4343      	muls	r3, r0
 80015c6:	4699      	mov	r9, r3
 80015c8:	434f      	muls	r7, r1
 80015ca:	444f      	add	r7, r9
 80015cc:	46bb      	mov	fp, r7
 80015ce:	4647      	mov	r7, r8
 80015d0:	000b      	movs	r3, r1
 80015d2:	0c3f      	lsrs	r7, r7, #16
 80015d4:	46ba      	mov	sl, r7
 80015d6:	4343      	muls	r3, r0
 80015d8:	44da      	add	sl, fp
 80015da:	9302      	str	r3, [sp, #8]
 80015dc:	45d1      	cmp	r9, sl
 80015de:	d904      	bls.n	80015ea <__aeabi_dmul+0x122>
 80015e0:	2780      	movs	r7, #128	; 0x80
 80015e2:	027f      	lsls	r7, r7, #9
 80015e4:	46b9      	mov	r9, r7
 80015e6:	444b      	add	r3, r9
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	4653      	mov	r3, sl
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	469b      	mov	fp, r3
 80015f0:	4653      	mov	r3, sl
 80015f2:	041f      	lsls	r7, r3, #16
 80015f4:	4643      	mov	r3, r8
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	4698      	mov	r8, r3
 80015fc:	003b      	movs	r3, r7
 80015fe:	4443      	add	r3, r8
 8001600:	9304      	str	r3, [sp, #16]
 8001602:	0c33      	lsrs	r3, r6, #16
 8001604:	0436      	lsls	r6, r6, #16
 8001606:	0c36      	lsrs	r6, r6, #16
 8001608:	4698      	mov	r8, r3
 800160a:	0033      	movs	r3, r6
 800160c:	4343      	muls	r3, r0
 800160e:	4699      	mov	r9, r3
 8001610:	4643      	mov	r3, r8
 8001612:	4343      	muls	r3, r0
 8001614:	002f      	movs	r7, r5
 8001616:	469a      	mov	sl, r3
 8001618:	4643      	mov	r3, r8
 800161a:	4377      	muls	r7, r6
 800161c:	435d      	muls	r5, r3
 800161e:	0c38      	lsrs	r0, r7, #16
 8001620:	444d      	add	r5, r9
 8001622:	1945      	adds	r5, r0, r5
 8001624:	45a9      	cmp	r9, r5
 8001626:	d903      	bls.n	8001630 <__aeabi_dmul+0x168>
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	025b      	lsls	r3, r3, #9
 800162c:	4699      	mov	r9, r3
 800162e:	44ca      	add	sl, r9
 8001630:	043f      	lsls	r7, r7, #16
 8001632:	0c28      	lsrs	r0, r5, #16
 8001634:	0c3f      	lsrs	r7, r7, #16
 8001636:	042d      	lsls	r5, r5, #16
 8001638:	19ed      	adds	r5, r5, r7
 800163a:	0c27      	lsrs	r7, r4, #16
 800163c:	0424      	lsls	r4, r4, #16
 800163e:	0c24      	lsrs	r4, r4, #16
 8001640:	0003      	movs	r3, r0
 8001642:	0020      	movs	r0, r4
 8001644:	4350      	muls	r0, r2
 8001646:	437a      	muls	r2, r7
 8001648:	4691      	mov	r9, r2
 800164a:	003a      	movs	r2, r7
 800164c:	4453      	add	r3, sl
 800164e:	9305      	str	r3, [sp, #20]
 8001650:	0c03      	lsrs	r3, r0, #16
 8001652:	469a      	mov	sl, r3
 8001654:	434a      	muls	r2, r1
 8001656:	4361      	muls	r1, r4
 8001658:	4449      	add	r1, r9
 800165a:	4451      	add	r1, sl
 800165c:	44ab      	add	fp, r5
 800165e:	4589      	cmp	r9, r1
 8001660:	d903      	bls.n	800166a <__aeabi_dmul+0x1a2>
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	025b      	lsls	r3, r3, #9
 8001666:	4699      	mov	r9, r3
 8001668:	444a      	add	r2, r9
 800166a:	0400      	lsls	r0, r0, #16
 800166c:	0c0b      	lsrs	r3, r1, #16
 800166e:	0c00      	lsrs	r0, r0, #16
 8001670:	0409      	lsls	r1, r1, #16
 8001672:	1809      	adds	r1, r1, r0
 8001674:	0020      	movs	r0, r4
 8001676:	4699      	mov	r9, r3
 8001678:	4643      	mov	r3, r8
 800167a:	4370      	muls	r0, r6
 800167c:	435c      	muls	r4, r3
 800167e:	437e      	muls	r6, r7
 8001680:	435f      	muls	r7, r3
 8001682:	0c03      	lsrs	r3, r0, #16
 8001684:	4698      	mov	r8, r3
 8001686:	19a4      	adds	r4, r4, r6
 8001688:	4444      	add	r4, r8
 800168a:	444a      	add	r2, r9
 800168c:	9703      	str	r7, [sp, #12]
 800168e:	42a6      	cmp	r6, r4
 8001690:	d904      	bls.n	800169c <__aeabi_dmul+0x1d4>
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4698      	mov	r8, r3
 8001698:	4447      	add	r7, r8
 800169a:	9703      	str	r7, [sp, #12]
 800169c:	0423      	lsls	r3, r4, #16
 800169e:	9e02      	ldr	r6, [sp, #8]
 80016a0:	469a      	mov	sl, r3
 80016a2:	9b05      	ldr	r3, [sp, #20]
 80016a4:	445e      	add	r6, fp
 80016a6:	4698      	mov	r8, r3
 80016a8:	42ae      	cmp	r6, r5
 80016aa:	41ad      	sbcs	r5, r5
 80016ac:	1876      	adds	r6, r6, r1
 80016ae:	428e      	cmp	r6, r1
 80016b0:	4189      	sbcs	r1, r1
 80016b2:	0400      	lsls	r0, r0, #16
 80016b4:	0c00      	lsrs	r0, r0, #16
 80016b6:	4450      	add	r0, sl
 80016b8:	4440      	add	r0, r8
 80016ba:	426d      	negs	r5, r5
 80016bc:	1947      	adds	r7, r0, r5
 80016be:	46b8      	mov	r8, r7
 80016c0:	4693      	mov	fp, r2
 80016c2:	4249      	negs	r1, r1
 80016c4:	4689      	mov	r9, r1
 80016c6:	44c3      	add	fp, r8
 80016c8:	44d9      	add	r9, fp
 80016ca:	4298      	cmp	r0, r3
 80016cc:	4180      	sbcs	r0, r0
 80016ce:	45a8      	cmp	r8, r5
 80016d0:	41ad      	sbcs	r5, r5
 80016d2:	4593      	cmp	fp, r2
 80016d4:	4192      	sbcs	r2, r2
 80016d6:	4589      	cmp	r9, r1
 80016d8:	4189      	sbcs	r1, r1
 80016da:	426d      	negs	r5, r5
 80016dc:	4240      	negs	r0, r0
 80016de:	4328      	orrs	r0, r5
 80016e0:	0c24      	lsrs	r4, r4, #16
 80016e2:	4252      	negs	r2, r2
 80016e4:	4249      	negs	r1, r1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	9b03      	ldr	r3, [sp, #12]
 80016ea:	1900      	adds	r0, r0, r4
 80016ec:	1880      	adds	r0, r0, r2
 80016ee:	18c7      	adds	r7, r0, r3
 80016f0:	464b      	mov	r3, r9
 80016f2:	0ddc      	lsrs	r4, r3, #23
 80016f4:	9b04      	ldr	r3, [sp, #16]
 80016f6:	0275      	lsls	r5, r6, #9
 80016f8:	431d      	orrs	r5, r3
 80016fa:	1e6a      	subs	r2, r5, #1
 80016fc:	4195      	sbcs	r5, r2
 80016fe:	464b      	mov	r3, r9
 8001700:	0df6      	lsrs	r6, r6, #23
 8001702:	027f      	lsls	r7, r7, #9
 8001704:	4335      	orrs	r5, r6
 8001706:	025a      	lsls	r2, r3, #9
 8001708:	433c      	orrs	r4, r7
 800170a:	4315      	orrs	r5, r2
 800170c:	01fb      	lsls	r3, r7, #7
 800170e:	d400      	bmi.n	8001712 <__aeabi_dmul+0x24a>
 8001710:	e11c      	b.n	800194c <__aeabi_dmul+0x484>
 8001712:	2101      	movs	r1, #1
 8001714:	086a      	lsrs	r2, r5, #1
 8001716:	400d      	ands	r5, r1
 8001718:	4315      	orrs	r5, r2
 800171a:	07e2      	lsls	r2, r4, #31
 800171c:	4315      	orrs	r5, r2
 800171e:	0864      	lsrs	r4, r4, #1
 8001720:	494f      	ldr	r1, [pc, #316]	; (8001860 <__aeabi_dmul+0x398>)
 8001722:	4461      	add	r1, ip
 8001724:	2900      	cmp	r1, #0
 8001726:	dc00      	bgt.n	800172a <__aeabi_dmul+0x262>
 8001728:	e0b0      	b.n	800188c <__aeabi_dmul+0x3c4>
 800172a:	076b      	lsls	r3, r5, #29
 800172c:	d009      	beq.n	8001742 <__aeabi_dmul+0x27a>
 800172e:	220f      	movs	r2, #15
 8001730:	402a      	ands	r2, r5
 8001732:	2a04      	cmp	r2, #4
 8001734:	d005      	beq.n	8001742 <__aeabi_dmul+0x27a>
 8001736:	1d2a      	adds	r2, r5, #4
 8001738:	42aa      	cmp	r2, r5
 800173a:	41ad      	sbcs	r5, r5
 800173c:	426d      	negs	r5, r5
 800173e:	1964      	adds	r4, r4, r5
 8001740:	0015      	movs	r5, r2
 8001742:	01e3      	lsls	r3, r4, #7
 8001744:	d504      	bpl.n	8001750 <__aeabi_dmul+0x288>
 8001746:	2180      	movs	r1, #128	; 0x80
 8001748:	4a46      	ldr	r2, [pc, #280]	; (8001864 <__aeabi_dmul+0x39c>)
 800174a:	00c9      	lsls	r1, r1, #3
 800174c:	4014      	ands	r4, r2
 800174e:	4461      	add	r1, ip
 8001750:	4a45      	ldr	r2, [pc, #276]	; (8001868 <__aeabi_dmul+0x3a0>)
 8001752:	4291      	cmp	r1, r2
 8001754:	dd00      	ble.n	8001758 <__aeabi_dmul+0x290>
 8001756:	e726      	b.n	80015a6 <__aeabi_dmul+0xde>
 8001758:	0762      	lsls	r2, r4, #29
 800175a:	08ed      	lsrs	r5, r5, #3
 800175c:	0264      	lsls	r4, r4, #9
 800175e:	0549      	lsls	r1, r1, #21
 8001760:	4315      	orrs	r5, r2
 8001762:	0b24      	lsrs	r4, r4, #12
 8001764:	0d4a      	lsrs	r2, r1, #21
 8001766:	e710      	b.n	800158a <__aeabi_dmul+0xc2>
 8001768:	4652      	mov	r2, sl
 800176a:	4332      	orrs	r2, r6
 800176c:	d100      	bne.n	8001770 <__aeabi_dmul+0x2a8>
 800176e:	e07f      	b.n	8001870 <__aeabi_dmul+0x3a8>
 8001770:	2e00      	cmp	r6, #0
 8001772:	d100      	bne.n	8001776 <__aeabi_dmul+0x2ae>
 8001774:	e0dc      	b.n	8001930 <__aeabi_dmul+0x468>
 8001776:	0030      	movs	r0, r6
 8001778:	f7fe fea0 	bl	80004bc <__clzsi2>
 800177c:	0002      	movs	r2, r0
 800177e:	3a0b      	subs	r2, #11
 8001780:	231d      	movs	r3, #29
 8001782:	0001      	movs	r1, r0
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	4652      	mov	r2, sl
 8001788:	3908      	subs	r1, #8
 800178a:	40da      	lsrs	r2, r3
 800178c:	408e      	lsls	r6, r1
 800178e:	4316      	orrs	r6, r2
 8001790:	4652      	mov	r2, sl
 8001792:	408a      	lsls	r2, r1
 8001794:	9b00      	ldr	r3, [sp, #0]
 8001796:	4935      	ldr	r1, [pc, #212]	; (800186c <__aeabi_dmul+0x3a4>)
 8001798:	1a18      	subs	r0, r3, r0
 800179a:	0003      	movs	r3, r0
 800179c:	468c      	mov	ip, r1
 800179e:	4463      	add	r3, ip
 80017a0:	2000      	movs	r0, #0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	e6d3      	b.n	800154e <__aeabi_dmul+0x86>
 80017a6:	0025      	movs	r5, r4
 80017a8:	4305      	orrs	r5, r0
 80017aa:	d04a      	beq.n	8001842 <__aeabi_dmul+0x37a>
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dmul+0x2ea>
 80017b0:	e0b0      	b.n	8001914 <__aeabi_dmul+0x44c>
 80017b2:	0020      	movs	r0, r4
 80017b4:	f7fe fe82 	bl	80004bc <__clzsi2>
 80017b8:	0001      	movs	r1, r0
 80017ba:	0002      	movs	r2, r0
 80017bc:	390b      	subs	r1, #11
 80017be:	231d      	movs	r3, #29
 80017c0:	0010      	movs	r0, r2
 80017c2:	1a5b      	subs	r3, r3, r1
 80017c4:	0031      	movs	r1, r6
 80017c6:	0035      	movs	r5, r6
 80017c8:	3808      	subs	r0, #8
 80017ca:	4084      	lsls	r4, r0
 80017cc:	40d9      	lsrs	r1, r3
 80017ce:	4085      	lsls	r5, r0
 80017d0:	430c      	orrs	r4, r1
 80017d2:	4826      	ldr	r0, [pc, #152]	; (800186c <__aeabi_dmul+0x3a4>)
 80017d4:	1a83      	subs	r3, r0, r2
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	4699      	mov	r9, r3
 80017dc:	469b      	mov	fp, r3
 80017de:	e697      	b.n	8001510 <__aeabi_dmul+0x48>
 80017e0:	0005      	movs	r5, r0
 80017e2:	4325      	orrs	r5, r4
 80017e4:	d126      	bne.n	8001834 <__aeabi_dmul+0x36c>
 80017e6:	2208      	movs	r2, #8
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2302      	movs	r3, #2
 80017ec:	2400      	movs	r4, #0
 80017ee:	4691      	mov	r9, r2
 80017f0:	469b      	mov	fp, r3
 80017f2:	e68d      	b.n	8001510 <__aeabi_dmul+0x48>
 80017f4:	4652      	mov	r2, sl
 80017f6:	9b00      	ldr	r3, [sp, #0]
 80017f8:	4332      	orrs	r2, r6
 80017fa:	d110      	bne.n	800181e <__aeabi_dmul+0x356>
 80017fc:	4915      	ldr	r1, [pc, #84]	; (8001854 <__aeabi_dmul+0x38c>)
 80017fe:	2600      	movs	r6, #0
 8001800:	468c      	mov	ip, r1
 8001802:	4463      	add	r3, ip
 8001804:	4649      	mov	r1, r9
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2302      	movs	r3, #2
 800180a:	4319      	orrs	r1, r3
 800180c:	4689      	mov	r9, r1
 800180e:	2002      	movs	r0, #2
 8001810:	e69d      	b.n	800154e <__aeabi_dmul+0x86>
 8001812:	465b      	mov	r3, fp
 8001814:	9701      	str	r7, [sp, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d000      	beq.n	800181c <__aeabi_dmul+0x354>
 800181a:	e6ad      	b.n	8001578 <__aeabi_dmul+0xb0>
 800181c:	e6c3      	b.n	80015a6 <__aeabi_dmul+0xde>
 800181e:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <__aeabi_dmul+0x38c>)
 8001820:	2003      	movs	r0, #3
 8001822:	4694      	mov	ip, r2
 8001824:	4463      	add	r3, ip
 8001826:	464a      	mov	r2, r9
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2303      	movs	r3, #3
 800182c:	431a      	orrs	r2, r3
 800182e:	4691      	mov	r9, r2
 8001830:	4652      	mov	r2, sl
 8001832:	e68c      	b.n	800154e <__aeabi_dmul+0x86>
 8001834:	220c      	movs	r2, #12
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2303      	movs	r3, #3
 800183a:	0005      	movs	r5, r0
 800183c:	4691      	mov	r9, r2
 800183e:	469b      	mov	fp, r3
 8001840:	e666      	b.n	8001510 <__aeabi_dmul+0x48>
 8001842:	2304      	movs	r3, #4
 8001844:	4699      	mov	r9, r3
 8001846:	2300      	movs	r3, #0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	2400      	movs	r4, #0
 800184e:	469b      	mov	fp, r3
 8001850:	e65e      	b.n	8001510 <__aeabi_dmul+0x48>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	fffffc01 	.word	0xfffffc01
 800185c:	0801cde8 	.word	0x0801cde8
 8001860:	000003ff 	.word	0x000003ff
 8001864:	feffffff 	.word	0xfeffffff
 8001868:	000007fe 	.word	0x000007fe
 800186c:	fffffc0d 	.word	0xfffffc0d
 8001870:	4649      	mov	r1, r9
 8001872:	2301      	movs	r3, #1
 8001874:	4319      	orrs	r1, r3
 8001876:	4689      	mov	r9, r1
 8001878:	2600      	movs	r6, #0
 800187a:	2001      	movs	r0, #1
 800187c:	e667      	b.n	800154e <__aeabi_dmul+0x86>
 800187e:	2300      	movs	r3, #0
 8001880:	2480      	movs	r4, #128	; 0x80
 8001882:	2500      	movs	r5, #0
 8001884:	4a43      	ldr	r2, [pc, #268]	; (8001994 <__aeabi_dmul+0x4cc>)
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	0324      	lsls	r4, r4, #12
 800188a:	e67e      	b.n	800158a <__aeabi_dmul+0xc2>
 800188c:	2001      	movs	r0, #1
 800188e:	1a40      	subs	r0, r0, r1
 8001890:	2838      	cmp	r0, #56	; 0x38
 8001892:	dd00      	ble.n	8001896 <__aeabi_dmul+0x3ce>
 8001894:	e676      	b.n	8001584 <__aeabi_dmul+0xbc>
 8001896:	281f      	cmp	r0, #31
 8001898:	dd5b      	ble.n	8001952 <__aeabi_dmul+0x48a>
 800189a:	221f      	movs	r2, #31
 800189c:	0023      	movs	r3, r4
 800189e:	4252      	negs	r2, r2
 80018a0:	1a51      	subs	r1, r2, r1
 80018a2:	40cb      	lsrs	r3, r1
 80018a4:	0019      	movs	r1, r3
 80018a6:	2820      	cmp	r0, #32
 80018a8:	d003      	beq.n	80018b2 <__aeabi_dmul+0x3ea>
 80018aa:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <__aeabi_dmul+0x4d0>)
 80018ac:	4462      	add	r2, ip
 80018ae:	4094      	lsls	r4, r2
 80018b0:	4325      	orrs	r5, r4
 80018b2:	1e6a      	subs	r2, r5, #1
 80018b4:	4195      	sbcs	r5, r2
 80018b6:	002a      	movs	r2, r5
 80018b8:	430a      	orrs	r2, r1
 80018ba:	2107      	movs	r1, #7
 80018bc:	000d      	movs	r5, r1
 80018be:	2400      	movs	r4, #0
 80018c0:	4015      	ands	r5, r2
 80018c2:	4211      	tst	r1, r2
 80018c4:	d05b      	beq.n	800197e <__aeabi_dmul+0x4b6>
 80018c6:	210f      	movs	r1, #15
 80018c8:	2400      	movs	r4, #0
 80018ca:	4011      	ands	r1, r2
 80018cc:	2904      	cmp	r1, #4
 80018ce:	d053      	beq.n	8001978 <__aeabi_dmul+0x4b0>
 80018d0:	1d11      	adds	r1, r2, #4
 80018d2:	4291      	cmp	r1, r2
 80018d4:	4192      	sbcs	r2, r2
 80018d6:	4252      	negs	r2, r2
 80018d8:	18a4      	adds	r4, r4, r2
 80018da:	000a      	movs	r2, r1
 80018dc:	0223      	lsls	r3, r4, #8
 80018de:	d54b      	bpl.n	8001978 <__aeabi_dmul+0x4b0>
 80018e0:	2201      	movs	r2, #1
 80018e2:	2400      	movs	r4, #0
 80018e4:	2500      	movs	r5, #0
 80018e6:	e650      	b.n	800158a <__aeabi_dmul+0xc2>
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	031b      	lsls	r3, r3, #12
 80018ec:	421c      	tst	r4, r3
 80018ee:	d009      	beq.n	8001904 <__aeabi_dmul+0x43c>
 80018f0:	421e      	tst	r6, r3
 80018f2:	d107      	bne.n	8001904 <__aeabi_dmul+0x43c>
 80018f4:	4333      	orrs	r3, r6
 80018f6:	031c      	lsls	r4, r3, #12
 80018f8:	4643      	mov	r3, r8
 80018fa:	0015      	movs	r5, r2
 80018fc:	0b24      	lsrs	r4, r4, #12
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <__aeabi_dmul+0x4cc>)
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	e642      	b.n	800158a <__aeabi_dmul+0xc2>
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	0312      	lsls	r2, r2, #12
 8001908:	4314      	orrs	r4, r2
 800190a:	0324      	lsls	r4, r4, #12
 800190c:	4a21      	ldr	r2, [pc, #132]	; (8001994 <__aeabi_dmul+0x4cc>)
 800190e:	0b24      	lsrs	r4, r4, #12
 8001910:	9701      	str	r7, [sp, #4]
 8001912:	e63a      	b.n	800158a <__aeabi_dmul+0xc2>
 8001914:	f7fe fdd2 	bl	80004bc <__clzsi2>
 8001918:	0001      	movs	r1, r0
 800191a:	0002      	movs	r2, r0
 800191c:	3115      	adds	r1, #21
 800191e:	3220      	adds	r2, #32
 8001920:	291c      	cmp	r1, #28
 8001922:	dc00      	bgt.n	8001926 <__aeabi_dmul+0x45e>
 8001924:	e74b      	b.n	80017be <__aeabi_dmul+0x2f6>
 8001926:	0034      	movs	r4, r6
 8001928:	3808      	subs	r0, #8
 800192a:	2500      	movs	r5, #0
 800192c:	4084      	lsls	r4, r0
 800192e:	e750      	b.n	80017d2 <__aeabi_dmul+0x30a>
 8001930:	f7fe fdc4 	bl	80004bc <__clzsi2>
 8001934:	0003      	movs	r3, r0
 8001936:	001a      	movs	r2, r3
 8001938:	3215      	adds	r2, #21
 800193a:	3020      	adds	r0, #32
 800193c:	2a1c      	cmp	r2, #28
 800193e:	dc00      	bgt.n	8001942 <__aeabi_dmul+0x47a>
 8001940:	e71e      	b.n	8001780 <__aeabi_dmul+0x2b8>
 8001942:	4656      	mov	r6, sl
 8001944:	3b08      	subs	r3, #8
 8001946:	2200      	movs	r2, #0
 8001948:	409e      	lsls	r6, r3
 800194a:	e723      	b.n	8001794 <__aeabi_dmul+0x2cc>
 800194c:	9b00      	ldr	r3, [sp, #0]
 800194e:	469c      	mov	ip, r3
 8001950:	e6e6      	b.n	8001720 <__aeabi_dmul+0x258>
 8001952:	4912      	ldr	r1, [pc, #72]	; (800199c <__aeabi_dmul+0x4d4>)
 8001954:	0022      	movs	r2, r4
 8001956:	4461      	add	r1, ip
 8001958:	002e      	movs	r6, r5
 800195a:	408d      	lsls	r5, r1
 800195c:	408a      	lsls	r2, r1
 800195e:	40c6      	lsrs	r6, r0
 8001960:	1e69      	subs	r1, r5, #1
 8001962:	418d      	sbcs	r5, r1
 8001964:	4332      	orrs	r2, r6
 8001966:	432a      	orrs	r2, r5
 8001968:	40c4      	lsrs	r4, r0
 800196a:	0753      	lsls	r3, r2, #29
 800196c:	d0b6      	beq.n	80018dc <__aeabi_dmul+0x414>
 800196e:	210f      	movs	r1, #15
 8001970:	4011      	ands	r1, r2
 8001972:	2904      	cmp	r1, #4
 8001974:	d1ac      	bne.n	80018d0 <__aeabi_dmul+0x408>
 8001976:	e7b1      	b.n	80018dc <__aeabi_dmul+0x414>
 8001978:	0765      	lsls	r5, r4, #29
 800197a:	0264      	lsls	r4, r4, #9
 800197c:	0b24      	lsrs	r4, r4, #12
 800197e:	08d2      	lsrs	r2, r2, #3
 8001980:	4315      	orrs	r5, r2
 8001982:	2200      	movs	r2, #0
 8001984:	e601      	b.n	800158a <__aeabi_dmul+0xc2>
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	0312      	lsls	r2, r2, #12
 800198a:	4314      	orrs	r4, r2
 800198c:	0324      	lsls	r4, r4, #12
 800198e:	4a01      	ldr	r2, [pc, #4]	; (8001994 <__aeabi_dmul+0x4cc>)
 8001990:	0b24      	lsrs	r4, r4, #12
 8001992:	e5fa      	b.n	800158a <__aeabi_dmul+0xc2>
 8001994:	000007ff 	.word	0x000007ff
 8001998:	0000043e 	.word	0x0000043e
 800199c:	0000041e 	.word	0x0000041e

080019a0 <__aeabi_dsub>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	4657      	mov	r7, sl
 80019a4:	464e      	mov	r6, r9
 80019a6:	4645      	mov	r5, r8
 80019a8:	46de      	mov	lr, fp
 80019aa:	b5e0      	push	{r5, r6, r7, lr}
 80019ac:	001e      	movs	r6, r3
 80019ae:	0017      	movs	r7, r2
 80019b0:	004a      	lsls	r2, r1, #1
 80019b2:	030b      	lsls	r3, r1, #12
 80019b4:	0d52      	lsrs	r2, r2, #21
 80019b6:	0a5b      	lsrs	r3, r3, #9
 80019b8:	4690      	mov	r8, r2
 80019ba:	0f42      	lsrs	r2, r0, #29
 80019bc:	431a      	orrs	r2, r3
 80019be:	0fcd      	lsrs	r5, r1, #31
 80019c0:	4ccd      	ldr	r4, [pc, #820]	; (8001cf8 <__aeabi_dsub+0x358>)
 80019c2:	0331      	lsls	r1, r6, #12
 80019c4:	00c3      	lsls	r3, r0, #3
 80019c6:	4694      	mov	ip, r2
 80019c8:	0070      	lsls	r0, r6, #1
 80019ca:	0f7a      	lsrs	r2, r7, #29
 80019cc:	0a49      	lsrs	r1, r1, #9
 80019ce:	00ff      	lsls	r7, r7, #3
 80019d0:	469a      	mov	sl, r3
 80019d2:	46b9      	mov	r9, r7
 80019d4:	0d40      	lsrs	r0, r0, #21
 80019d6:	0ff6      	lsrs	r6, r6, #31
 80019d8:	4311      	orrs	r1, r2
 80019da:	42a0      	cmp	r0, r4
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x40>
 80019de:	e0b1      	b.n	8001b44 <__aeabi_dsub+0x1a4>
 80019e0:	2201      	movs	r2, #1
 80019e2:	4056      	eors	r6, r2
 80019e4:	46b3      	mov	fp, r6
 80019e6:	42b5      	cmp	r5, r6
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x4c>
 80019ea:	e088      	b.n	8001afe <__aeabi_dsub+0x15e>
 80019ec:	4642      	mov	r2, r8
 80019ee:	1a12      	subs	r2, r2, r0
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	dc00      	bgt.n	80019f6 <__aeabi_dsub+0x56>
 80019f4:	e0ae      	b.n	8001b54 <__aeabi_dsub+0x1b4>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_dsub+0x5c>
 80019fa:	e0c1      	b.n	8001b80 <__aeabi_dsub+0x1e0>
 80019fc:	48be      	ldr	r0, [pc, #760]	; (8001cf8 <__aeabi_dsub+0x358>)
 80019fe:	4580      	cmp	r8, r0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x64>
 8001a02:	e151      	b.n	8001ca8 <__aeabi_dsub+0x308>
 8001a04:	2080      	movs	r0, #128	; 0x80
 8001a06:	0400      	lsls	r0, r0, #16
 8001a08:	4301      	orrs	r1, r0
 8001a0a:	2a38      	cmp	r2, #56	; 0x38
 8001a0c:	dd00      	ble.n	8001a10 <__aeabi_dsub+0x70>
 8001a0e:	e17b      	b.n	8001d08 <__aeabi_dsub+0x368>
 8001a10:	2a1f      	cmp	r2, #31
 8001a12:	dd00      	ble.n	8001a16 <__aeabi_dsub+0x76>
 8001a14:	e1ee      	b.n	8001df4 <__aeabi_dsub+0x454>
 8001a16:	2020      	movs	r0, #32
 8001a18:	003e      	movs	r6, r7
 8001a1a:	1a80      	subs	r0, r0, r2
 8001a1c:	000c      	movs	r4, r1
 8001a1e:	40d6      	lsrs	r6, r2
 8001a20:	40d1      	lsrs	r1, r2
 8001a22:	4087      	lsls	r7, r0
 8001a24:	4662      	mov	r2, ip
 8001a26:	4084      	lsls	r4, r0
 8001a28:	1a52      	subs	r2, r2, r1
 8001a2a:	1e78      	subs	r0, r7, #1
 8001a2c:	4187      	sbcs	r7, r0
 8001a2e:	4694      	mov	ip, r2
 8001a30:	4334      	orrs	r4, r6
 8001a32:	4327      	orrs	r7, r4
 8001a34:	1bdc      	subs	r4, r3, r7
 8001a36:	42a3      	cmp	r3, r4
 8001a38:	419b      	sbcs	r3, r3
 8001a3a:	4662      	mov	r2, ip
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	4699      	mov	r9, r3
 8001a42:	464b      	mov	r3, r9
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	d400      	bmi.n	8001a4a <__aeabi_dsub+0xaa>
 8001a48:	e118      	b.n	8001c7c <__aeabi_dsub+0x2dc>
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	0258      	lsls	r0, r3, #9
 8001a4e:	0a43      	lsrs	r3, r0, #9
 8001a50:	4699      	mov	r9, r3
 8001a52:	464b      	mov	r3, r9
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0xba>
 8001a58:	e137      	b.n	8001cca <__aeabi_dsub+0x32a>
 8001a5a:	4648      	mov	r0, r9
 8001a5c:	f7fe fd2e 	bl	80004bc <__clzsi2>
 8001a60:	0001      	movs	r1, r0
 8001a62:	3908      	subs	r1, #8
 8001a64:	2320      	movs	r3, #32
 8001a66:	0022      	movs	r2, r4
 8001a68:	4648      	mov	r0, r9
 8001a6a:	1a5b      	subs	r3, r3, r1
 8001a6c:	40da      	lsrs	r2, r3
 8001a6e:	4088      	lsls	r0, r1
 8001a70:	408c      	lsls	r4, r1
 8001a72:	4643      	mov	r3, r8
 8001a74:	4310      	orrs	r0, r2
 8001a76:	4588      	cmp	r8, r1
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xdc>
 8001a7a:	e136      	b.n	8001cea <__aeabi_dsub+0x34a>
 8001a7c:	1ac9      	subs	r1, r1, r3
 8001a7e:	1c4b      	adds	r3, r1, #1
 8001a80:	2b1f      	cmp	r3, #31
 8001a82:	dd00      	ble.n	8001a86 <__aeabi_dsub+0xe6>
 8001a84:	e0ea      	b.n	8001c5c <__aeabi_dsub+0x2bc>
 8001a86:	2220      	movs	r2, #32
 8001a88:	0026      	movs	r6, r4
 8001a8a:	1ad2      	subs	r2, r2, r3
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	4094      	lsls	r4, r2
 8001a90:	40de      	lsrs	r6, r3
 8001a92:	40d8      	lsrs	r0, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	4091      	lsls	r1, r2
 8001a98:	1e62      	subs	r2, r4, #1
 8001a9a:	4194      	sbcs	r4, r2
 8001a9c:	4681      	mov	r9, r0
 8001a9e:	4698      	mov	r8, r3
 8001aa0:	4331      	orrs	r1, r6
 8001aa2:	430c      	orrs	r4, r1
 8001aa4:	0763      	lsls	r3, r4, #29
 8001aa6:	d009      	beq.n	8001abc <__aeabi_dsub+0x11c>
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	4023      	ands	r3, r4
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d005      	beq.n	8001abc <__aeabi_dsub+0x11c>
 8001ab0:	1d23      	adds	r3, r4, #4
 8001ab2:	42a3      	cmp	r3, r4
 8001ab4:	41a4      	sbcs	r4, r4
 8001ab6:	4264      	negs	r4, r4
 8001ab8:	44a1      	add	r9, r4
 8001aba:	001c      	movs	r4, r3
 8001abc:	464b      	mov	r3, r9
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	d400      	bmi.n	8001ac4 <__aeabi_dsub+0x124>
 8001ac2:	e0de      	b.n	8001c82 <__aeabi_dsub+0x2e2>
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	4b8c      	ldr	r3, [pc, #560]	; (8001cf8 <__aeabi_dsub+0x358>)
 8001ac8:	3101      	adds	r1, #1
 8001aca:	4299      	cmp	r1, r3
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x130>
 8001ace:	e0e7      	b.n	8001ca0 <__aeabi_dsub+0x300>
 8001ad0:	464b      	mov	r3, r9
 8001ad2:	488a      	ldr	r0, [pc, #552]	; (8001cfc <__aeabi_dsub+0x35c>)
 8001ad4:	08e4      	lsrs	r4, r4, #3
 8001ad6:	4003      	ands	r3, r0
 8001ad8:	0018      	movs	r0, r3
 8001ada:	0549      	lsls	r1, r1, #21
 8001adc:	075b      	lsls	r3, r3, #29
 8001ade:	0240      	lsls	r0, r0, #9
 8001ae0:	4323      	orrs	r3, r4
 8001ae2:	0d4a      	lsrs	r2, r1, #21
 8001ae4:	0b04      	lsrs	r4, r0, #12
 8001ae6:	0512      	lsls	r2, r2, #20
 8001ae8:	07ed      	lsls	r5, r5, #31
 8001aea:	4322      	orrs	r2, r4
 8001aec:	432a      	orrs	r2, r5
 8001aee:	0018      	movs	r0, r3
 8001af0:	0011      	movs	r1, r2
 8001af2:	bcf0      	pop	{r4, r5, r6, r7}
 8001af4:	46bb      	mov	fp, r7
 8001af6:	46b2      	mov	sl, r6
 8001af8:	46a9      	mov	r9, r5
 8001afa:	46a0      	mov	r8, r4
 8001afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001afe:	4642      	mov	r2, r8
 8001b00:	1a12      	subs	r2, r2, r0
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	dd52      	ble.n	8001bac <__aeabi_dsub+0x20c>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x16c>
 8001b0a:	e09c      	b.n	8001c46 <__aeabi_dsub+0x2a6>
 8001b0c:	45a0      	cmp	r8, r4
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x172>
 8001b10:	e0ca      	b.n	8001ca8 <__aeabi_dsub+0x308>
 8001b12:	2080      	movs	r0, #128	; 0x80
 8001b14:	0400      	lsls	r0, r0, #16
 8001b16:	4301      	orrs	r1, r0
 8001b18:	2a38      	cmp	r2, #56	; 0x38
 8001b1a:	dd00      	ble.n	8001b1e <__aeabi_dsub+0x17e>
 8001b1c:	e149      	b.n	8001db2 <__aeabi_dsub+0x412>
 8001b1e:	2a1f      	cmp	r2, #31
 8001b20:	dc00      	bgt.n	8001b24 <__aeabi_dsub+0x184>
 8001b22:	e197      	b.n	8001e54 <__aeabi_dsub+0x4b4>
 8001b24:	0010      	movs	r0, r2
 8001b26:	000e      	movs	r6, r1
 8001b28:	3820      	subs	r0, #32
 8001b2a:	40c6      	lsrs	r6, r0
 8001b2c:	2a20      	cmp	r2, #32
 8001b2e:	d004      	beq.n	8001b3a <__aeabi_dsub+0x19a>
 8001b30:	2040      	movs	r0, #64	; 0x40
 8001b32:	1a82      	subs	r2, r0, r2
 8001b34:	4091      	lsls	r1, r2
 8001b36:	430f      	orrs	r7, r1
 8001b38:	46b9      	mov	r9, r7
 8001b3a:	464c      	mov	r4, r9
 8001b3c:	1e62      	subs	r2, r4, #1
 8001b3e:	4194      	sbcs	r4, r2
 8001b40:	4334      	orrs	r4, r6
 8001b42:	e13a      	b.n	8001dba <__aeabi_dsub+0x41a>
 8001b44:	000a      	movs	r2, r1
 8001b46:	433a      	orrs	r2, r7
 8001b48:	d028      	beq.n	8001b9c <__aeabi_dsub+0x1fc>
 8001b4a:	46b3      	mov	fp, r6
 8001b4c:	42b5      	cmp	r5, r6
 8001b4e:	d02b      	beq.n	8001ba8 <__aeabi_dsub+0x208>
 8001b50:	4a6b      	ldr	r2, [pc, #428]	; (8001d00 <__aeabi_dsub+0x360>)
 8001b52:	4442      	add	r2, r8
 8001b54:	2a00      	cmp	r2, #0
 8001b56:	d05d      	beq.n	8001c14 <__aeabi_dsub+0x274>
 8001b58:	4642      	mov	r2, r8
 8001b5a:	4644      	mov	r4, r8
 8001b5c:	1a82      	subs	r2, r0, r2
 8001b5e:	2c00      	cmp	r4, #0
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x1c4>
 8001b62:	e0f5      	b.n	8001d50 <__aeabi_dsub+0x3b0>
 8001b64:	4665      	mov	r5, ip
 8001b66:	431d      	orrs	r5, r3
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x1cc>
 8001b6a:	e19c      	b.n	8001ea6 <__aeabi_dsub+0x506>
 8001b6c:	1e55      	subs	r5, r2, #1
 8001b6e:	2a01      	cmp	r2, #1
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x1d4>
 8001b72:	e1fb      	b.n	8001f6c <__aeabi_dsub+0x5cc>
 8001b74:	4c60      	ldr	r4, [pc, #384]	; (8001cf8 <__aeabi_dsub+0x358>)
 8001b76:	42a2      	cmp	r2, r4
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0x1dc>
 8001b7a:	e1bd      	b.n	8001ef8 <__aeabi_dsub+0x558>
 8001b7c:	002a      	movs	r2, r5
 8001b7e:	e0f0      	b.n	8001d62 <__aeabi_dsub+0x3c2>
 8001b80:	0008      	movs	r0, r1
 8001b82:	4338      	orrs	r0, r7
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dsub+0x1e8>
 8001b86:	e0c3      	b.n	8001d10 <__aeabi_dsub+0x370>
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x1f0>
 8001b8e:	e1a8      	b.n	8001ee2 <__aeabi_dsub+0x542>
 8001b90:	4c59      	ldr	r4, [pc, #356]	; (8001cf8 <__aeabi_dsub+0x358>)
 8001b92:	42a2      	cmp	r2, r4
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x1f8>
 8001b96:	e087      	b.n	8001ca8 <__aeabi_dsub+0x308>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	e736      	b.n	8001a0a <__aeabi_dsub+0x6a>
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4056      	eors	r6, r2
 8001ba0:	46b3      	mov	fp, r6
 8001ba2:	42b5      	cmp	r5, r6
 8001ba4:	d000      	beq.n	8001ba8 <__aeabi_dsub+0x208>
 8001ba6:	e721      	b.n	80019ec <__aeabi_dsub+0x4c>
 8001ba8:	4a55      	ldr	r2, [pc, #340]	; (8001d00 <__aeabi_dsub+0x360>)
 8001baa:	4442      	add	r2, r8
 8001bac:	2a00      	cmp	r2, #0
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x212>
 8001bb0:	e0b5      	b.n	8001d1e <__aeabi_dsub+0x37e>
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	4644      	mov	r4, r8
 8001bb6:	1a82      	subs	r2, r0, r2
 8001bb8:	2c00      	cmp	r4, #0
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x21e>
 8001bbc:	e138      	b.n	8001e30 <__aeabi_dsub+0x490>
 8001bbe:	4e4e      	ldr	r6, [pc, #312]	; (8001cf8 <__aeabi_dsub+0x358>)
 8001bc0:	42b0      	cmp	r0, r6
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x226>
 8001bc4:	e1de      	b.n	8001f84 <__aeabi_dsub+0x5e4>
 8001bc6:	2680      	movs	r6, #128	; 0x80
 8001bc8:	4664      	mov	r4, ip
 8001bca:	0436      	lsls	r6, r6, #16
 8001bcc:	4334      	orrs	r4, r6
 8001bce:	46a4      	mov	ip, r4
 8001bd0:	2a38      	cmp	r2, #56	; 0x38
 8001bd2:	dd00      	ble.n	8001bd6 <__aeabi_dsub+0x236>
 8001bd4:	e196      	b.n	8001f04 <__aeabi_dsub+0x564>
 8001bd6:	2a1f      	cmp	r2, #31
 8001bd8:	dd00      	ble.n	8001bdc <__aeabi_dsub+0x23c>
 8001bda:	e224      	b.n	8002026 <__aeabi_dsub+0x686>
 8001bdc:	2620      	movs	r6, #32
 8001bde:	1ab4      	subs	r4, r6, r2
 8001be0:	46a2      	mov	sl, r4
 8001be2:	4664      	mov	r4, ip
 8001be4:	4656      	mov	r6, sl
 8001be6:	40b4      	lsls	r4, r6
 8001be8:	46a1      	mov	r9, r4
 8001bea:	001c      	movs	r4, r3
 8001bec:	464e      	mov	r6, r9
 8001bee:	40d4      	lsrs	r4, r2
 8001bf0:	4326      	orrs	r6, r4
 8001bf2:	0034      	movs	r4, r6
 8001bf4:	4656      	mov	r6, sl
 8001bf6:	40b3      	lsls	r3, r6
 8001bf8:	1e5e      	subs	r6, r3, #1
 8001bfa:	41b3      	sbcs	r3, r6
 8001bfc:	431c      	orrs	r4, r3
 8001bfe:	4663      	mov	r3, ip
 8001c00:	40d3      	lsrs	r3, r2
 8001c02:	18c9      	adds	r1, r1, r3
 8001c04:	19e4      	adds	r4, r4, r7
 8001c06:	42bc      	cmp	r4, r7
 8001c08:	41bf      	sbcs	r7, r7
 8001c0a:	427f      	negs	r7, r7
 8001c0c:	46b9      	mov	r9, r7
 8001c0e:	4680      	mov	r8, r0
 8001c10:	4489      	add	r9, r1
 8001c12:	e0d8      	b.n	8001dc6 <__aeabi_dsub+0x426>
 8001c14:	4640      	mov	r0, r8
 8001c16:	4c3b      	ldr	r4, [pc, #236]	; (8001d04 <__aeabi_dsub+0x364>)
 8001c18:	3001      	adds	r0, #1
 8001c1a:	4220      	tst	r0, r4
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_dsub+0x280>
 8001c1e:	e0b4      	b.n	8001d8a <__aeabi_dsub+0x3ea>
 8001c20:	4640      	mov	r0, r8
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d000      	beq.n	8001c28 <__aeabi_dsub+0x288>
 8001c26:	e144      	b.n	8001eb2 <__aeabi_dsub+0x512>
 8001c28:	4660      	mov	r0, ip
 8001c2a:	4318      	orrs	r0, r3
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x290>
 8001c2e:	e190      	b.n	8001f52 <__aeabi_dsub+0x5b2>
 8001c30:	0008      	movs	r0, r1
 8001c32:	4338      	orrs	r0, r7
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x298>
 8001c36:	e1aa      	b.n	8001f8e <__aeabi_dsub+0x5ee>
 8001c38:	4661      	mov	r1, ip
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	0749      	lsls	r1, r1, #29
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	4661      	mov	r1, ip
 8001c42:	08cc      	lsrs	r4, r1, #3
 8001c44:	e027      	b.n	8001c96 <__aeabi_dsub+0x2f6>
 8001c46:	0008      	movs	r0, r1
 8001c48:	4338      	orrs	r0, r7
 8001c4a:	d061      	beq.n	8001d10 <__aeabi_dsub+0x370>
 8001c4c:	1e50      	subs	r0, r2, #1
 8001c4e:	2a01      	cmp	r2, #1
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dsub+0x2b4>
 8001c52:	e139      	b.n	8001ec8 <__aeabi_dsub+0x528>
 8001c54:	42a2      	cmp	r2, r4
 8001c56:	d027      	beq.n	8001ca8 <__aeabi_dsub+0x308>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	e75d      	b.n	8001b18 <__aeabi_dsub+0x178>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	391f      	subs	r1, #31
 8001c60:	40ca      	lsrs	r2, r1
 8001c62:	0011      	movs	r1, r2
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d003      	beq.n	8001c70 <__aeabi_dsub+0x2d0>
 8001c68:	2240      	movs	r2, #64	; 0x40
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	4098      	lsls	r0, r3
 8001c6e:	4304      	orrs	r4, r0
 8001c70:	1e63      	subs	r3, r4, #1
 8001c72:	419c      	sbcs	r4, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	4699      	mov	r9, r3
 8001c78:	4698      	mov	r8, r3
 8001c7a:	430c      	orrs	r4, r1
 8001c7c:	0763      	lsls	r3, r4, #29
 8001c7e:	d000      	beq.n	8001c82 <__aeabi_dsub+0x2e2>
 8001c80:	e712      	b.n	8001aa8 <__aeabi_dsub+0x108>
 8001c82:	464b      	mov	r3, r9
 8001c84:	464a      	mov	r2, r9
 8001c86:	08e4      	lsrs	r4, r4, #3
 8001c88:	075b      	lsls	r3, r3, #29
 8001c8a:	4323      	orrs	r3, r4
 8001c8c:	08d4      	lsrs	r4, r2, #3
 8001c8e:	4642      	mov	r2, r8
 8001c90:	4919      	ldr	r1, [pc, #100]	; (8001cf8 <__aeabi_dsub+0x358>)
 8001c92:	428a      	cmp	r2, r1
 8001c94:	d00e      	beq.n	8001cb4 <__aeabi_dsub+0x314>
 8001c96:	0324      	lsls	r4, r4, #12
 8001c98:	0552      	lsls	r2, r2, #21
 8001c9a:	0b24      	lsrs	r4, r4, #12
 8001c9c:	0d52      	lsrs	r2, r2, #21
 8001c9e:	e722      	b.n	8001ae6 <__aeabi_dsub+0x146>
 8001ca0:	000a      	movs	r2, r1
 8001ca2:	2400      	movs	r4, #0
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e71e      	b.n	8001ae6 <__aeabi_dsub+0x146>
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	4662      	mov	r2, ip
 8001cac:	0752      	lsls	r2, r2, #29
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	4662      	mov	r2, ip
 8001cb2:	08d4      	lsrs	r4, r2, #3
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	4322      	orrs	r2, r4
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x31c>
 8001cba:	e1fc      	b.n	80020b6 <__aeabi_dsub+0x716>
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	0312      	lsls	r2, r2, #12
 8001cc0:	4314      	orrs	r4, r2
 8001cc2:	0324      	lsls	r4, r4, #12
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <__aeabi_dsub+0x358>)
 8001cc6:	0b24      	lsrs	r4, r4, #12
 8001cc8:	e70d      	b.n	8001ae6 <__aeabi_dsub+0x146>
 8001cca:	0020      	movs	r0, r4
 8001ccc:	f7fe fbf6 	bl	80004bc <__clzsi2>
 8001cd0:	0001      	movs	r1, r0
 8001cd2:	3118      	adds	r1, #24
 8001cd4:	291f      	cmp	r1, #31
 8001cd6:	dc00      	bgt.n	8001cda <__aeabi_dsub+0x33a>
 8001cd8:	e6c4      	b.n	8001a64 <__aeabi_dsub+0xc4>
 8001cda:	3808      	subs	r0, #8
 8001cdc:	4084      	lsls	r4, r0
 8001cde:	4643      	mov	r3, r8
 8001ce0:	0020      	movs	r0, r4
 8001ce2:	2400      	movs	r4, #0
 8001ce4:	4588      	cmp	r8, r1
 8001ce6:	dc00      	bgt.n	8001cea <__aeabi_dsub+0x34a>
 8001ce8:	e6c8      	b.n	8001a7c <__aeabi_dsub+0xdc>
 8001cea:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <__aeabi_dsub+0x35c>)
 8001cec:	1a5b      	subs	r3, r3, r1
 8001cee:	4010      	ands	r0, r2
 8001cf0:	4698      	mov	r8, r3
 8001cf2:	4681      	mov	r9, r0
 8001cf4:	e6d6      	b.n	8001aa4 <__aeabi_dsub+0x104>
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	000007ff 	.word	0x000007ff
 8001cfc:	ff7fffff 	.word	0xff7fffff
 8001d00:	fffff801 	.word	0xfffff801
 8001d04:	000007fe 	.word	0x000007fe
 8001d08:	430f      	orrs	r7, r1
 8001d0a:	1e7a      	subs	r2, r7, #1
 8001d0c:	4197      	sbcs	r7, r2
 8001d0e:	e691      	b.n	8001a34 <__aeabi_dsub+0x94>
 8001d10:	4661      	mov	r1, ip
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	0749      	lsls	r1, r1, #29
 8001d16:	430b      	orrs	r3, r1
 8001d18:	4661      	mov	r1, ip
 8001d1a:	08cc      	lsrs	r4, r1, #3
 8001d1c:	e7b8      	b.n	8001c90 <__aeabi_dsub+0x2f0>
 8001d1e:	4640      	mov	r0, r8
 8001d20:	4cd3      	ldr	r4, [pc, #844]	; (8002070 <__aeabi_dsub+0x6d0>)
 8001d22:	3001      	adds	r0, #1
 8001d24:	4220      	tst	r0, r4
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x38a>
 8001d28:	e0a2      	b.n	8001e70 <__aeabi_dsub+0x4d0>
 8001d2a:	4640      	mov	r0, r8
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_dsub+0x392>
 8001d30:	e101      	b.n	8001f36 <__aeabi_dsub+0x596>
 8001d32:	4660      	mov	r0, ip
 8001d34:	4318      	orrs	r0, r3
 8001d36:	d100      	bne.n	8001d3a <__aeabi_dsub+0x39a>
 8001d38:	e15e      	b.n	8001ff8 <__aeabi_dsub+0x658>
 8001d3a:	0008      	movs	r0, r1
 8001d3c:	4338      	orrs	r0, r7
 8001d3e:	d000      	beq.n	8001d42 <__aeabi_dsub+0x3a2>
 8001d40:	e15f      	b.n	8002002 <__aeabi_dsub+0x662>
 8001d42:	4661      	mov	r1, ip
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	0749      	lsls	r1, r1, #29
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	4661      	mov	r1, ip
 8001d4c:	08cc      	lsrs	r4, r1, #3
 8001d4e:	e7a2      	b.n	8001c96 <__aeabi_dsub+0x2f6>
 8001d50:	4dc8      	ldr	r5, [pc, #800]	; (8002074 <__aeabi_dsub+0x6d4>)
 8001d52:	42a8      	cmp	r0, r5
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x3b8>
 8001d56:	e0cf      	b.n	8001ef8 <__aeabi_dsub+0x558>
 8001d58:	2580      	movs	r5, #128	; 0x80
 8001d5a:	4664      	mov	r4, ip
 8001d5c:	042d      	lsls	r5, r5, #16
 8001d5e:	432c      	orrs	r4, r5
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2a38      	cmp	r2, #56	; 0x38
 8001d64:	dc56      	bgt.n	8001e14 <__aeabi_dsub+0x474>
 8001d66:	2a1f      	cmp	r2, #31
 8001d68:	dd00      	ble.n	8001d6c <__aeabi_dsub+0x3cc>
 8001d6a:	e0d1      	b.n	8001f10 <__aeabi_dsub+0x570>
 8001d6c:	2520      	movs	r5, #32
 8001d6e:	001e      	movs	r6, r3
 8001d70:	1aad      	subs	r5, r5, r2
 8001d72:	4664      	mov	r4, ip
 8001d74:	40ab      	lsls	r3, r5
 8001d76:	40ac      	lsls	r4, r5
 8001d78:	40d6      	lsrs	r6, r2
 8001d7a:	1e5d      	subs	r5, r3, #1
 8001d7c:	41ab      	sbcs	r3, r5
 8001d7e:	4334      	orrs	r4, r6
 8001d80:	4323      	orrs	r3, r4
 8001d82:	4664      	mov	r4, ip
 8001d84:	40d4      	lsrs	r4, r2
 8001d86:	1b09      	subs	r1, r1, r4
 8001d88:	e049      	b.n	8001e1e <__aeabi_dsub+0x47e>
 8001d8a:	4660      	mov	r0, ip
 8001d8c:	1bdc      	subs	r4, r3, r7
 8001d8e:	1a46      	subs	r6, r0, r1
 8001d90:	42a3      	cmp	r3, r4
 8001d92:	4180      	sbcs	r0, r0
 8001d94:	4240      	negs	r0, r0
 8001d96:	4681      	mov	r9, r0
 8001d98:	0030      	movs	r0, r6
 8001d9a:	464e      	mov	r6, r9
 8001d9c:	1b80      	subs	r0, r0, r6
 8001d9e:	4681      	mov	r9, r0
 8001da0:	0200      	lsls	r0, r0, #8
 8001da2:	d476      	bmi.n	8001e92 <__aeabi_dsub+0x4f2>
 8001da4:	464b      	mov	r3, r9
 8001da6:	4323      	orrs	r3, r4
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x40c>
 8001daa:	e652      	b.n	8001a52 <__aeabi_dsub+0xb2>
 8001dac:	2400      	movs	r4, #0
 8001dae:	2500      	movs	r5, #0
 8001db0:	e771      	b.n	8001c96 <__aeabi_dsub+0x2f6>
 8001db2:	4339      	orrs	r1, r7
 8001db4:	000c      	movs	r4, r1
 8001db6:	1e62      	subs	r2, r4, #1
 8001db8:	4194      	sbcs	r4, r2
 8001dba:	18e4      	adds	r4, r4, r3
 8001dbc:	429c      	cmp	r4, r3
 8001dbe:	419b      	sbcs	r3, r3
 8001dc0:	425b      	negs	r3, r3
 8001dc2:	4463      	add	r3, ip
 8001dc4:	4699      	mov	r9, r3
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	d400      	bmi.n	8001dce <__aeabi_dsub+0x42e>
 8001dcc:	e756      	b.n	8001c7c <__aeabi_dsub+0x2dc>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	469c      	mov	ip, r3
 8001dd2:	4ba8      	ldr	r3, [pc, #672]	; (8002074 <__aeabi_dsub+0x6d4>)
 8001dd4:	44e0      	add	r8, ip
 8001dd6:	4598      	cmp	r8, r3
 8001dd8:	d038      	beq.n	8001e4c <__aeabi_dsub+0x4ac>
 8001dda:	464b      	mov	r3, r9
 8001ddc:	48a6      	ldr	r0, [pc, #664]	; (8002078 <__aeabi_dsub+0x6d8>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	4003      	ands	r3, r0
 8001de2:	0018      	movs	r0, r3
 8001de4:	0863      	lsrs	r3, r4, #1
 8001de6:	4014      	ands	r4, r2
 8001de8:	431c      	orrs	r4, r3
 8001dea:	07c3      	lsls	r3, r0, #31
 8001dec:	431c      	orrs	r4, r3
 8001dee:	0843      	lsrs	r3, r0, #1
 8001df0:	4699      	mov	r9, r3
 8001df2:	e657      	b.n	8001aa4 <__aeabi_dsub+0x104>
 8001df4:	0010      	movs	r0, r2
 8001df6:	000e      	movs	r6, r1
 8001df8:	3820      	subs	r0, #32
 8001dfa:	40c6      	lsrs	r6, r0
 8001dfc:	2a20      	cmp	r2, #32
 8001dfe:	d004      	beq.n	8001e0a <__aeabi_dsub+0x46a>
 8001e00:	2040      	movs	r0, #64	; 0x40
 8001e02:	1a82      	subs	r2, r0, r2
 8001e04:	4091      	lsls	r1, r2
 8001e06:	430f      	orrs	r7, r1
 8001e08:	46b9      	mov	r9, r7
 8001e0a:	464f      	mov	r7, r9
 8001e0c:	1e7a      	subs	r2, r7, #1
 8001e0e:	4197      	sbcs	r7, r2
 8001e10:	4337      	orrs	r7, r6
 8001e12:	e60f      	b.n	8001a34 <__aeabi_dsub+0x94>
 8001e14:	4662      	mov	r2, ip
 8001e16:	431a      	orrs	r2, r3
 8001e18:	0013      	movs	r3, r2
 8001e1a:	1e5a      	subs	r2, r3, #1
 8001e1c:	4193      	sbcs	r3, r2
 8001e1e:	1afc      	subs	r4, r7, r3
 8001e20:	42a7      	cmp	r7, r4
 8001e22:	41bf      	sbcs	r7, r7
 8001e24:	427f      	negs	r7, r7
 8001e26:	1bcb      	subs	r3, r1, r7
 8001e28:	4699      	mov	r9, r3
 8001e2a:	465d      	mov	r5, fp
 8001e2c:	4680      	mov	r8, r0
 8001e2e:	e608      	b.n	8001a42 <__aeabi_dsub+0xa2>
 8001e30:	4666      	mov	r6, ip
 8001e32:	431e      	orrs	r6, r3
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x498>
 8001e36:	e0be      	b.n	8001fb6 <__aeabi_dsub+0x616>
 8001e38:	1e56      	subs	r6, r2, #1
 8001e3a:	2a01      	cmp	r2, #1
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x4a0>
 8001e3e:	e109      	b.n	8002054 <__aeabi_dsub+0x6b4>
 8001e40:	4c8c      	ldr	r4, [pc, #560]	; (8002074 <__aeabi_dsub+0x6d4>)
 8001e42:	42a2      	cmp	r2, r4
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x4a8>
 8001e46:	e119      	b.n	800207c <__aeabi_dsub+0x6dc>
 8001e48:	0032      	movs	r2, r6
 8001e4a:	e6c1      	b.n	8001bd0 <__aeabi_dsub+0x230>
 8001e4c:	4642      	mov	r2, r8
 8001e4e:	2400      	movs	r4, #0
 8001e50:	2300      	movs	r3, #0
 8001e52:	e648      	b.n	8001ae6 <__aeabi_dsub+0x146>
 8001e54:	2020      	movs	r0, #32
 8001e56:	000c      	movs	r4, r1
 8001e58:	1a80      	subs	r0, r0, r2
 8001e5a:	003e      	movs	r6, r7
 8001e5c:	4087      	lsls	r7, r0
 8001e5e:	4084      	lsls	r4, r0
 8001e60:	40d6      	lsrs	r6, r2
 8001e62:	1e78      	subs	r0, r7, #1
 8001e64:	4187      	sbcs	r7, r0
 8001e66:	40d1      	lsrs	r1, r2
 8001e68:	4334      	orrs	r4, r6
 8001e6a:	433c      	orrs	r4, r7
 8001e6c:	448c      	add	ip, r1
 8001e6e:	e7a4      	b.n	8001dba <__aeabi_dsub+0x41a>
 8001e70:	4a80      	ldr	r2, [pc, #512]	; (8002074 <__aeabi_dsub+0x6d4>)
 8001e72:	4290      	cmp	r0, r2
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x4d8>
 8001e76:	e0e9      	b.n	800204c <__aeabi_dsub+0x6ac>
 8001e78:	19df      	adds	r7, r3, r7
 8001e7a:	429f      	cmp	r7, r3
 8001e7c:	419b      	sbcs	r3, r3
 8001e7e:	4461      	add	r1, ip
 8001e80:	425b      	negs	r3, r3
 8001e82:	18c9      	adds	r1, r1, r3
 8001e84:	07cc      	lsls	r4, r1, #31
 8001e86:	087f      	lsrs	r7, r7, #1
 8001e88:	084b      	lsrs	r3, r1, #1
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	4680      	mov	r8, r0
 8001e8e:	433c      	orrs	r4, r7
 8001e90:	e6f4      	b.n	8001c7c <__aeabi_dsub+0x2dc>
 8001e92:	1afc      	subs	r4, r7, r3
 8001e94:	42a7      	cmp	r7, r4
 8001e96:	41bf      	sbcs	r7, r7
 8001e98:	4663      	mov	r3, ip
 8001e9a:	427f      	negs	r7, r7
 8001e9c:	1ac9      	subs	r1, r1, r3
 8001e9e:	1bcb      	subs	r3, r1, r7
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	465d      	mov	r5, fp
 8001ea4:	e5d5      	b.n	8001a52 <__aeabi_dsub+0xb2>
 8001ea6:	08ff      	lsrs	r7, r7, #3
 8001ea8:	074b      	lsls	r3, r1, #29
 8001eaa:	465d      	mov	r5, fp
 8001eac:	433b      	orrs	r3, r7
 8001eae:	08cc      	lsrs	r4, r1, #3
 8001eb0:	e6ee      	b.n	8001c90 <__aeabi_dsub+0x2f0>
 8001eb2:	4662      	mov	r2, ip
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	d000      	beq.n	8001eba <__aeabi_dsub+0x51a>
 8001eb8:	e082      	b.n	8001fc0 <__aeabi_dsub+0x620>
 8001eba:	000b      	movs	r3, r1
 8001ebc:	433b      	orrs	r3, r7
 8001ebe:	d11b      	bne.n	8001ef8 <__aeabi_dsub+0x558>
 8001ec0:	2480      	movs	r4, #128	; 0x80
 8001ec2:	2500      	movs	r5, #0
 8001ec4:	0324      	lsls	r4, r4, #12
 8001ec6:	e6f9      	b.n	8001cbc <__aeabi_dsub+0x31c>
 8001ec8:	19dc      	adds	r4, r3, r7
 8001eca:	429c      	cmp	r4, r3
 8001ecc:	419b      	sbcs	r3, r3
 8001ece:	4461      	add	r1, ip
 8001ed0:	4689      	mov	r9, r1
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	4499      	add	r9, r3
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	d444      	bmi.n	8001f66 <__aeabi_dsub+0x5c6>
 8001edc:	2301      	movs	r3, #1
 8001ede:	4698      	mov	r8, r3
 8001ee0:	e6cc      	b.n	8001c7c <__aeabi_dsub+0x2dc>
 8001ee2:	1bdc      	subs	r4, r3, r7
 8001ee4:	4662      	mov	r2, ip
 8001ee6:	42a3      	cmp	r3, r4
 8001ee8:	419b      	sbcs	r3, r3
 8001eea:	1a51      	subs	r1, r2, r1
 8001eec:	425b      	negs	r3, r3
 8001eee:	1acb      	subs	r3, r1, r3
 8001ef0:	4699      	mov	r9, r3
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	4698      	mov	r8, r3
 8001ef6:	e5a4      	b.n	8001a42 <__aeabi_dsub+0xa2>
 8001ef8:	08ff      	lsrs	r7, r7, #3
 8001efa:	074b      	lsls	r3, r1, #29
 8001efc:	465d      	mov	r5, fp
 8001efe:	433b      	orrs	r3, r7
 8001f00:	08cc      	lsrs	r4, r1, #3
 8001f02:	e6d7      	b.n	8001cb4 <__aeabi_dsub+0x314>
 8001f04:	4662      	mov	r2, ip
 8001f06:	431a      	orrs	r2, r3
 8001f08:	0014      	movs	r4, r2
 8001f0a:	1e63      	subs	r3, r4, #1
 8001f0c:	419c      	sbcs	r4, r3
 8001f0e:	e679      	b.n	8001c04 <__aeabi_dsub+0x264>
 8001f10:	0015      	movs	r5, r2
 8001f12:	4664      	mov	r4, ip
 8001f14:	3d20      	subs	r5, #32
 8001f16:	40ec      	lsrs	r4, r5
 8001f18:	46a0      	mov	r8, r4
 8001f1a:	2a20      	cmp	r2, #32
 8001f1c:	d005      	beq.n	8001f2a <__aeabi_dsub+0x58a>
 8001f1e:	2540      	movs	r5, #64	; 0x40
 8001f20:	4664      	mov	r4, ip
 8001f22:	1aaa      	subs	r2, r5, r2
 8001f24:	4094      	lsls	r4, r2
 8001f26:	4323      	orrs	r3, r4
 8001f28:	469a      	mov	sl, r3
 8001f2a:	4654      	mov	r4, sl
 8001f2c:	1e63      	subs	r3, r4, #1
 8001f2e:	419c      	sbcs	r4, r3
 8001f30:	4643      	mov	r3, r8
 8001f32:	4323      	orrs	r3, r4
 8001f34:	e773      	b.n	8001e1e <__aeabi_dsub+0x47e>
 8001f36:	4662      	mov	r2, ip
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	d023      	beq.n	8001f84 <__aeabi_dsub+0x5e4>
 8001f3c:	000a      	movs	r2, r1
 8001f3e:	433a      	orrs	r2, r7
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dsub+0x5a4>
 8001f42:	e0a0      	b.n	8002086 <__aeabi_dsub+0x6e6>
 8001f44:	4662      	mov	r2, ip
 8001f46:	08db      	lsrs	r3, r3, #3
 8001f48:	0752      	lsls	r2, r2, #29
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	4662      	mov	r2, ip
 8001f4e:	08d4      	lsrs	r4, r2, #3
 8001f50:	e6b0      	b.n	8001cb4 <__aeabi_dsub+0x314>
 8001f52:	000b      	movs	r3, r1
 8001f54:	433b      	orrs	r3, r7
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x5ba>
 8001f58:	e728      	b.n	8001dac <__aeabi_dsub+0x40c>
 8001f5a:	08ff      	lsrs	r7, r7, #3
 8001f5c:	074b      	lsls	r3, r1, #29
 8001f5e:	465d      	mov	r5, fp
 8001f60:	433b      	orrs	r3, r7
 8001f62:	08cc      	lsrs	r4, r1, #3
 8001f64:	e697      	b.n	8001c96 <__aeabi_dsub+0x2f6>
 8001f66:	2302      	movs	r3, #2
 8001f68:	4698      	mov	r8, r3
 8001f6a:	e736      	b.n	8001dda <__aeabi_dsub+0x43a>
 8001f6c:	1afc      	subs	r4, r7, r3
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	41bf      	sbcs	r7, r7
 8001f72:	4663      	mov	r3, ip
 8001f74:	427f      	negs	r7, r7
 8001f76:	1ac9      	subs	r1, r1, r3
 8001f78:	1bcb      	subs	r3, r1, r7
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	465d      	mov	r5, fp
 8001f80:	4698      	mov	r8, r3
 8001f82:	e55e      	b.n	8001a42 <__aeabi_dsub+0xa2>
 8001f84:	074b      	lsls	r3, r1, #29
 8001f86:	08ff      	lsrs	r7, r7, #3
 8001f88:	433b      	orrs	r3, r7
 8001f8a:	08cc      	lsrs	r4, r1, #3
 8001f8c:	e692      	b.n	8001cb4 <__aeabi_dsub+0x314>
 8001f8e:	1bdc      	subs	r4, r3, r7
 8001f90:	4660      	mov	r0, ip
 8001f92:	42a3      	cmp	r3, r4
 8001f94:	41b6      	sbcs	r6, r6
 8001f96:	1a40      	subs	r0, r0, r1
 8001f98:	4276      	negs	r6, r6
 8001f9a:	1b80      	subs	r0, r0, r6
 8001f9c:	4681      	mov	r9, r0
 8001f9e:	0200      	lsls	r0, r0, #8
 8001fa0:	d560      	bpl.n	8002064 <__aeabi_dsub+0x6c4>
 8001fa2:	1afc      	subs	r4, r7, r3
 8001fa4:	42a7      	cmp	r7, r4
 8001fa6:	41bf      	sbcs	r7, r7
 8001fa8:	4663      	mov	r3, ip
 8001faa:	427f      	negs	r7, r7
 8001fac:	1ac9      	subs	r1, r1, r3
 8001fae:	1bcb      	subs	r3, r1, r7
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	465d      	mov	r5, fp
 8001fb4:	e576      	b.n	8001aa4 <__aeabi_dsub+0x104>
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	074b      	lsls	r3, r1, #29
 8001fba:	433b      	orrs	r3, r7
 8001fbc:	08cc      	lsrs	r4, r1, #3
 8001fbe:	e667      	b.n	8001c90 <__aeabi_dsub+0x2f0>
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	433a      	orrs	r2, r7
 8001fc6:	d100      	bne.n	8001fca <__aeabi_dsub+0x62a>
 8001fc8:	e66f      	b.n	8001caa <__aeabi_dsub+0x30a>
 8001fca:	4662      	mov	r2, ip
 8001fcc:	0752      	lsls	r2, r2, #29
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	4662      	mov	r2, ip
 8001fd2:	08d4      	lsrs	r4, r2, #3
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	0312      	lsls	r2, r2, #12
 8001fd8:	4214      	tst	r4, r2
 8001fda:	d007      	beq.n	8001fec <__aeabi_dsub+0x64c>
 8001fdc:	08c8      	lsrs	r0, r1, #3
 8001fde:	4210      	tst	r0, r2
 8001fe0:	d104      	bne.n	8001fec <__aeabi_dsub+0x64c>
 8001fe2:	465d      	mov	r5, fp
 8001fe4:	0004      	movs	r4, r0
 8001fe6:	08fb      	lsrs	r3, r7, #3
 8001fe8:	0749      	lsls	r1, r1, #29
 8001fea:	430b      	orrs	r3, r1
 8001fec:	0f5a      	lsrs	r2, r3, #29
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	0752      	lsls	r2, r2, #29
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	e65d      	b.n	8001cb4 <__aeabi_dsub+0x314>
 8001ff8:	074b      	lsls	r3, r1, #29
 8001ffa:	08ff      	lsrs	r7, r7, #3
 8001ffc:	433b      	orrs	r3, r7
 8001ffe:	08cc      	lsrs	r4, r1, #3
 8002000:	e649      	b.n	8001c96 <__aeabi_dsub+0x2f6>
 8002002:	19dc      	adds	r4, r3, r7
 8002004:	429c      	cmp	r4, r3
 8002006:	419b      	sbcs	r3, r3
 8002008:	4461      	add	r1, ip
 800200a:	4689      	mov	r9, r1
 800200c:	425b      	negs	r3, r3
 800200e:	4499      	add	r9, r3
 8002010:	464b      	mov	r3, r9
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	d400      	bmi.n	8002018 <__aeabi_dsub+0x678>
 8002016:	e631      	b.n	8001c7c <__aeabi_dsub+0x2dc>
 8002018:	464a      	mov	r2, r9
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <__aeabi_dsub+0x6d8>)
 800201c:	401a      	ands	r2, r3
 800201e:	2301      	movs	r3, #1
 8002020:	4691      	mov	r9, r2
 8002022:	4698      	mov	r8, r3
 8002024:	e62a      	b.n	8001c7c <__aeabi_dsub+0x2dc>
 8002026:	0016      	movs	r6, r2
 8002028:	4664      	mov	r4, ip
 800202a:	3e20      	subs	r6, #32
 800202c:	40f4      	lsrs	r4, r6
 800202e:	46a0      	mov	r8, r4
 8002030:	2a20      	cmp	r2, #32
 8002032:	d005      	beq.n	8002040 <__aeabi_dsub+0x6a0>
 8002034:	2640      	movs	r6, #64	; 0x40
 8002036:	4664      	mov	r4, ip
 8002038:	1ab2      	subs	r2, r6, r2
 800203a:	4094      	lsls	r4, r2
 800203c:	4323      	orrs	r3, r4
 800203e:	469a      	mov	sl, r3
 8002040:	4654      	mov	r4, sl
 8002042:	1e63      	subs	r3, r4, #1
 8002044:	419c      	sbcs	r4, r3
 8002046:	4643      	mov	r3, r8
 8002048:	431c      	orrs	r4, r3
 800204a:	e5db      	b.n	8001c04 <__aeabi_dsub+0x264>
 800204c:	0002      	movs	r2, r0
 800204e:	2400      	movs	r4, #0
 8002050:	2300      	movs	r3, #0
 8002052:	e548      	b.n	8001ae6 <__aeabi_dsub+0x146>
 8002054:	19dc      	adds	r4, r3, r7
 8002056:	42bc      	cmp	r4, r7
 8002058:	41bf      	sbcs	r7, r7
 800205a:	4461      	add	r1, ip
 800205c:	4689      	mov	r9, r1
 800205e:	427f      	negs	r7, r7
 8002060:	44b9      	add	r9, r7
 8002062:	e738      	b.n	8001ed6 <__aeabi_dsub+0x536>
 8002064:	464b      	mov	r3, r9
 8002066:	4323      	orrs	r3, r4
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0x6cc>
 800206a:	e69f      	b.n	8001dac <__aeabi_dsub+0x40c>
 800206c:	e606      	b.n	8001c7c <__aeabi_dsub+0x2dc>
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	000007fe 	.word	0x000007fe
 8002074:	000007ff 	.word	0x000007ff
 8002078:	ff7fffff 	.word	0xff7fffff
 800207c:	08ff      	lsrs	r7, r7, #3
 800207e:	074b      	lsls	r3, r1, #29
 8002080:	433b      	orrs	r3, r7
 8002082:	08cc      	lsrs	r4, r1, #3
 8002084:	e616      	b.n	8001cb4 <__aeabi_dsub+0x314>
 8002086:	4662      	mov	r2, ip
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	0752      	lsls	r2, r2, #29
 800208c:	4313      	orrs	r3, r2
 800208e:	4662      	mov	r2, ip
 8002090:	08d4      	lsrs	r4, r2, #3
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	0312      	lsls	r2, r2, #12
 8002096:	4214      	tst	r4, r2
 8002098:	d007      	beq.n	80020aa <__aeabi_dsub+0x70a>
 800209a:	08c8      	lsrs	r0, r1, #3
 800209c:	4210      	tst	r0, r2
 800209e:	d104      	bne.n	80020aa <__aeabi_dsub+0x70a>
 80020a0:	465d      	mov	r5, fp
 80020a2:	0004      	movs	r4, r0
 80020a4:	08fb      	lsrs	r3, r7, #3
 80020a6:	0749      	lsls	r1, r1, #29
 80020a8:	430b      	orrs	r3, r1
 80020aa:	0f5a      	lsrs	r2, r3, #29
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	0752      	lsls	r2, r2, #29
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	e5fe      	b.n	8001cb4 <__aeabi_dsub+0x314>
 80020b6:	2300      	movs	r3, #0
 80020b8:	4a01      	ldr	r2, [pc, #4]	; (80020c0 <__aeabi_dsub+0x720>)
 80020ba:	001c      	movs	r4, r3
 80020bc:	e513      	b.n	8001ae6 <__aeabi_dsub+0x146>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	000007ff 	.word	0x000007ff

080020c4 <__aeabi_dcmpun>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	0005      	movs	r5, r0
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020ca:	031c      	lsls	r4, r3, #12
 80020cc:	0016      	movs	r6, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	030a      	lsls	r2, r1, #12
 80020d2:	0049      	lsls	r1, r1, #1
 80020d4:	0b12      	lsrs	r2, r2, #12
 80020d6:	0d49      	lsrs	r1, r1, #21
 80020d8:	0b24      	lsrs	r4, r4, #12
 80020da:	0d5b      	lsrs	r3, r3, #21
 80020dc:	4281      	cmp	r1, r0
 80020de:	d008      	beq.n	80020f2 <__aeabi_dcmpun+0x2e>
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020e2:	2000      	movs	r0, #0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d103      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020e8:	0020      	movs	r0, r4
 80020ea:	4330      	orrs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	2001      	movs	r0, #1
 80020f4:	432a      	orrs	r2, r5
 80020f6:	d1fb      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020f8:	e7f2      	b.n	80020e0 <__aeabi_dcmpun+0x1c>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__aeabi_d2iz>:
 8002100:	000a      	movs	r2, r1
 8002102:	b530      	push	{r4, r5, lr}
 8002104:	4c13      	ldr	r4, [pc, #76]	; (8002154 <__aeabi_d2iz+0x54>)
 8002106:	0053      	lsls	r3, r2, #1
 8002108:	0309      	lsls	r1, r1, #12
 800210a:	0005      	movs	r5, r0
 800210c:	0b09      	lsrs	r1, r1, #12
 800210e:	2000      	movs	r0, #0
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	0fd2      	lsrs	r2, r2, #31
 8002114:	42a3      	cmp	r3, r4
 8002116:	dd04      	ble.n	8002122 <__aeabi_d2iz+0x22>
 8002118:	480f      	ldr	r0, [pc, #60]	; (8002158 <__aeabi_d2iz+0x58>)
 800211a:	4283      	cmp	r3, r0
 800211c:	dd02      	ble.n	8002124 <__aeabi_d2iz+0x24>
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <__aeabi_d2iz+0x5c>)
 8002120:	18d0      	adds	r0, r2, r3
 8002122:	bd30      	pop	{r4, r5, pc}
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	0340      	lsls	r0, r0, #13
 8002128:	4301      	orrs	r1, r0
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <__aeabi_d2iz+0x60>)
 800212c:	1ac0      	subs	r0, r0, r3
 800212e:	281f      	cmp	r0, #31
 8002130:	dd08      	ble.n	8002144 <__aeabi_d2iz+0x44>
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <__aeabi_d2iz+0x64>)
 8002134:	1ac3      	subs	r3, r0, r3
 8002136:	40d9      	lsrs	r1, r3
 8002138:	000b      	movs	r3, r1
 800213a:	4258      	negs	r0, r3
 800213c:	2a00      	cmp	r2, #0
 800213e:	d1f0      	bne.n	8002122 <__aeabi_d2iz+0x22>
 8002140:	0018      	movs	r0, r3
 8002142:	e7ee      	b.n	8002122 <__aeabi_d2iz+0x22>
 8002144:	4c08      	ldr	r4, [pc, #32]	; (8002168 <__aeabi_d2iz+0x68>)
 8002146:	40c5      	lsrs	r5, r0
 8002148:	46a4      	mov	ip, r4
 800214a:	4463      	add	r3, ip
 800214c:	4099      	lsls	r1, r3
 800214e:	000b      	movs	r3, r1
 8002150:	432b      	orrs	r3, r5
 8002152:	e7f2      	b.n	800213a <__aeabi_d2iz+0x3a>
 8002154:	000003fe 	.word	0x000003fe
 8002158:	0000041d 	.word	0x0000041d
 800215c:	7fffffff 	.word	0x7fffffff
 8002160:	00000433 	.word	0x00000433
 8002164:	00000413 	.word	0x00000413
 8002168:	fffffbed 	.word	0xfffffbed

0800216c <__aeabi_i2d>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	2800      	cmp	r0, #0
 8002170:	d016      	beq.n	80021a0 <__aeabi_i2d+0x34>
 8002172:	17c3      	asrs	r3, r0, #31
 8002174:	18c5      	adds	r5, r0, r3
 8002176:	405d      	eors	r5, r3
 8002178:	0fc4      	lsrs	r4, r0, #31
 800217a:	0028      	movs	r0, r5
 800217c:	f7fe f99e 	bl	80004bc <__clzsi2>
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <__aeabi_i2d+0x5c>)
 8002182:	1a12      	subs	r2, r2, r0
 8002184:	280a      	cmp	r0, #10
 8002186:	dc16      	bgt.n	80021b6 <__aeabi_i2d+0x4a>
 8002188:	0003      	movs	r3, r0
 800218a:	002e      	movs	r6, r5
 800218c:	3315      	adds	r3, #21
 800218e:	409e      	lsls	r6, r3
 8002190:	230b      	movs	r3, #11
 8002192:	1a18      	subs	r0, r3, r0
 8002194:	40c5      	lsrs	r5, r0
 8002196:	0552      	lsls	r2, r2, #21
 8002198:	032d      	lsls	r5, r5, #12
 800219a:	0b2d      	lsrs	r5, r5, #12
 800219c:	0d53      	lsrs	r3, r2, #21
 800219e:	e003      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021a0:	2400      	movs	r4, #0
 80021a2:	2300      	movs	r3, #0
 80021a4:	2500      	movs	r5, #0
 80021a6:	2600      	movs	r6, #0
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	432b      	orrs	r3, r5
 80021ac:	07e4      	lsls	r4, r4, #31
 80021ae:	4323      	orrs	r3, r4
 80021b0:	0030      	movs	r0, r6
 80021b2:	0019      	movs	r1, r3
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
 80021b6:	380b      	subs	r0, #11
 80021b8:	4085      	lsls	r5, r0
 80021ba:	0552      	lsls	r2, r2, #21
 80021bc:	032d      	lsls	r5, r5, #12
 80021be:	2600      	movs	r6, #0
 80021c0:	0b2d      	lsrs	r5, r5, #12
 80021c2:	0d53      	lsrs	r3, r2, #21
 80021c4:	e7f0      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	0000041e 	.word	0x0000041e

080021cc <__aeabi_ui2d>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	1e04      	subs	r4, r0, #0
 80021d0:	d010      	beq.n	80021f4 <__aeabi_ui2d+0x28>
 80021d2:	f7fe f973 	bl	80004bc <__clzsi2>
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <__aeabi_ui2d+0x48>)
 80021d8:	1a1b      	subs	r3, r3, r0
 80021da:	280a      	cmp	r0, #10
 80021dc:	dc11      	bgt.n	8002202 <__aeabi_ui2d+0x36>
 80021de:	220b      	movs	r2, #11
 80021e0:	0021      	movs	r1, r4
 80021e2:	1a12      	subs	r2, r2, r0
 80021e4:	40d1      	lsrs	r1, r2
 80021e6:	3015      	adds	r0, #21
 80021e8:	030a      	lsls	r2, r1, #12
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	4084      	lsls	r4, r0
 80021ee:	0b12      	lsrs	r2, r2, #12
 80021f0:	0d5b      	lsrs	r3, r3, #21
 80021f2:	e001      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	051b      	lsls	r3, r3, #20
 80021fa:	4313      	orrs	r3, r2
 80021fc:	0020      	movs	r0, r4
 80021fe:	0019      	movs	r1, r3
 8002200:	bd10      	pop	{r4, pc}
 8002202:	0022      	movs	r2, r4
 8002204:	380b      	subs	r0, #11
 8002206:	4082      	lsls	r2, r0
 8002208:	055b      	lsls	r3, r3, #21
 800220a:	0312      	lsls	r2, r2, #12
 800220c:	2400      	movs	r4, #0
 800220e:	0b12      	lsrs	r2, r2, #12
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	e7f1      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 8002214:	0000041e 	.word	0x0000041e

08002218 <__aeabi_f2d>:
 8002218:	b570      	push	{r4, r5, r6, lr}
 800221a:	0043      	lsls	r3, r0, #1
 800221c:	0246      	lsls	r6, r0, #9
 800221e:	0fc4      	lsrs	r4, r0, #31
 8002220:	20fe      	movs	r0, #254	; 0xfe
 8002222:	0e1b      	lsrs	r3, r3, #24
 8002224:	1c59      	adds	r1, r3, #1
 8002226:	0a75      	lsrs	r5, r6, #9
 8002228:	4208      	tst	r0, r1
 800222a:	d00c      	beq.n	8002246 <__aeabi_f2d+0x2e>
 800222c:	22e0      	movs	r2, #224	; 0xe0
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4694      	mov	ip, r2
 8002232:	076d      	lsls	r5, r5, #29
 8002234:	0b36      	lsrs	r6, r6, #12
 8002236:	4463      	add	r3, ip
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	4333      	orrs	r3, r6
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0028      	movs	r0, r5
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	2b00      	cmp	r3, #0
 8002248:	d114      	bne.n	8002274 <__aeabi_f2d+0x5c>
 800224a:	2d00      	cmp	r5, #0
 800224c:	d01b      	beq.n	8002286 <__aeabi_f2d+0x6e>
 800224e:	0028      	movs	r0, r5
 8002250:	f7fe f934 	bl	80004bc <__clzsi2>
 8002254:	280a      	cmp	r0, #10
 8002256:	dc1c      	bgt.n	8002292 <__aeabi_f2d+0x7a>
 8002258:	230b      	movs	r3, #11
 800225a:	002e      	movs	r6, r5
 800225c:	1a1b      	subs	r3, r3, r0
 800225e:	40de      	lsrs	r6, r3
 8002260:	0003      	movs	r3, r0
 8002262:	3315      	adds	r3, #21
 8002264:	409d      	lsls	r5, r3
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <__aeabi_f2d+0x88>)
 8002268:	0336      	lsls	r6, r6, #12
 800226a:	1a12      	subs	r2, r2, r0
 800226c:	0552      	lsls	r2, r2, #21
 800226e:	0b36      	lsrs	r6, r6, #12
 8002270:	0d53      	lsrs	r3, r2, #21
 8002272:	e7e1      	b.n	8002238 <__aeabi_f2d+0x20>
 8002274:	2d00      	cmp	r5, #0
 8002276:	d009      	beq.n	800228c <__aeabi_f2d+0x74>
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	0b36      	lsrs	r6, r6, #12
 800227c:	0312      	lsls	r2, r2, #12
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <__aeabi_f2d+0x8c>)
 8002280:	076d      	lsls	r5, r5, #29
 8002282:	4316      	orrs	r6, r2
 8002284:	e7d8      	b.n	8002238 <__aeabi_f2d+0x20>
 8002286:	2300      	movs	r3, #0
 8002288:	2600      	movs	r6, #0
 800228a:	e7d5      	b.n	8002238 <__aeabi_f2d+0x20>
 800228c:	2600      	movs	r6, #0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <__aeabi_f2d+0x8c>)
 8002290:	e7d2      	b.n	8002238 <__aeabi_f2d+0x20>
 8002292:	0003      	movs	r3, r0
 8002294:	3b0b      	subs	r3, #11
 8002296:	409d      	lsls	r5, r3
 8002298:	002e      	movs	r6, r5
 800229a:	2500      	movs	r5, #0
 800229c:	e7e3      	b.n	8002266 <__aeabi_f2d+0x4e>
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	00000389 	.word	0x00000389
 80022a4:	000007ff 	.word	0x000007ff

080022a8 <__aeabi_d2f>:
 80022a8:	0002      	movs	r2, r0
 80022aa:	004b      	lsls	r3, r1, #1
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	030c      	lsls	r4, r1, #12
 80022b2:	4e3d      	ldr	r6, [pc, #244]	; (80023a8 <__aeabi_d2f+0x100>)
 80022b4:	0a64      	lsrs	r4, r4, #9
 80022b6:	0f40      	lsrs	r0, r0, #29
 80022b8:	1c5f      	adds	r7, r3, #1
 80022ba:	0fc9      	lsrs	r1, r1, #31
 80022bc:	4304      	orrs	r4, r0
 80022be:	00d5      	lsls	r5, r2, #3
 80022c0:	4237      	tst	r7, r6
 80022c2:	d00a      	beq.n	80022da <__aeabi_d2f+0x32>
 80022c4:	4839      	ldr	r0, [pc, #228]	; (80023ac <__aeabi_d2f+0x104>)
 80022c6:	181e      	adds	r6, r3, r0
 80022c8:	2efe      	cmp	r6, #254	; 0xfe
 80022ca:	dd16      	ble.n	80022fa <__aeabi_d2f+0x52>
 80022cc:	20ff      	movs	r0, #255	; 0xff
 80022ce:	2400      	movs	r4, #0
 80022d0:	05c0      	lsls	r0, r0, #23
 80022d2:	4320      	orrs	r0, r4
 80022d4:	07c9      	lsls	r1, r1, #31
 80022d6:	4308      	orrs	r0, r1
 80022d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <__aeabi_d2f+0x44>
 80022de:	432c      	orrs	r4, r5
 80022e0:	d026      	beq.n	8002330 <__aeabi_d2f+0x88>
 80022e2:	2205      	movs	r2, #5
 80022e4:	0192      	lsls	r2, r2, #6
 80022e6:	0a54      	lsrs	r4, r2, #9
 80022e8:	b2d8      	uxtb	r0, r3
 80022ea:	e7f1      	b.n	80022d0 <__aeabi_d2f+0x28>
 80022ec:	4325      	orrs	r5, r4
 80022ee:	d0ed      	beq.n	80022cc <__aeabi_d2f+0x24>
 80022f0:	2080      	movs	r0, #128	; 0x80
 80022f2:	03c0      	lsls	r0, r0, #15
 80022f4:	4304      	orrs	r4, r0
 80022f6:	20ff      	movs	r0, #255	; 0xff
 80022f8:	e7ea      	b.n	80022d0 <__aeabi_d2f+0x28>
 80022fa:	2e00      	cmp	r6, #0
 80022fc:	dd1b      	ble.n	8002336 <__aeabi_d2f+0x8e>
 80022fe:	0192      	lsls	r2, r2, #6
 8002300:	1e53      	subs	r3, r2, #1
 8002302:	419a      	sbcs	r2, r3
 8002304:	00e4      	lsls	r4, r4, #3
 8002306:	0f6d      	lsrs	r5, r5, #29
 8002308:	4322      	orrs	r2, r4
 800230a:	432a      	orrs	r2, r5
 800230c:	0753      	lsls	r3, r2, #29
 800230e:	d048      	beq.n	80023a2 <__aeabi_d2f+0xfa>
 8002310:	230f      	movs	r3, #15
 8002312:	4013      	ands	r3, r2
 8002314:	2b04      	cmp	r3, #4
 8002316:	d000      	beq.n	800231a <__aeabi_d2f+0x72>
 8002318:	3204      	adds	r2, #4
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	04db      	lsls	r3, r3, #19
 800231e:	4013      	ands	r3, r2
 8002320:	d03f      	beq.n	80023a2 <__aeabi_d2f+0xfa>
 8002322:	1c70      	adds	r0, r6, #1
 8002324:	2efe      	cmp	r6, #254	; 0xfe
 8002326:	d0d1      	beq.n	80022cc <__aeabi_d2f+0x24>
 8002328:	0192      	lsls	r2, r2, #6
 800232a:	0a54      	lsrs	r4, r2, #9
 800232c:	b2c0      	uxtb	r0, r0
 800232e:	e7cf      	b.n	80022d0 <__aeabi_d2f+0x28>
 8002330:	2000      	movs	r0, #0
 8002332:	2400      	movs	r4, #0
 8002334:	e7cc      	b.n	80022d0 <__aeabi_d2f+0x28>
 8002336:	0032      	movs	r2, r6
 8002338:	3217      	adds	r2, #23
 800233a:	db22      	blt.n	8002382 <__aeabi_d2f+0xda>
 800233c:	2080      	movs	r0, #128	; 0x80
 800233e:	0400      	lsls	r0, r0, #16
 8002340:	4320      	orrs	r0, r4
 8002342:	241e      	movs	r4, #30
 8002344:	1ba4      	subs	r4, r4, r6
 8002346:	2c1f      	cmp	r4, #31
 8002348:	dd1d      	ble.n	8002386 <__aeabi_d2f+0xde>
 800234a:	2202      	movs	r2, #2
 800234c:	4252      	negs	r2, r2
 800234e:	1b96      	subs	r6, r2, r6
 8002350:	0002      	movs	r2, r0
 8002352:	40f2      	lsrs	r2, r6
 8002354:	0016      	movs	r6, r2
 8002356:	2c20      	cmp	r4, #32
 8002358:	d004      	beq.n	8002364 <__aeabi_d2f+0xbc>
 800235a:	4a15      	ldr	r2, [pc, #84]	; (80023b0 <__aeabi_d2f+0x108>)
 800235c:	4694      	mov	ip, r2
 800235e:	4463      	add	r3, ip
 8002360:	4098      	lsls	r0, r3
 8002362:	4305      	orrs	r5, r0
 8002364:	002a      	movs	r2, r5
 8002366:	1e53      	subs	r3, r2, #1
 8002368:	419a      	sbcs	r2, r3
 800236a:	4332      	orrs	r2, r6
 800236c:	2600      	movs	r6, #0
 800236e:	0753      	lsls	r3, r2, #29
 8002370:	d1ce      	bne.n	8002310 <__aeabi_d2f+0x68>
 8002372:	2480      	movs	r4, #128	; 0x80
 8002374:	0013      	movs	r3, r2
 8002376:	04e4      	lsls	r4, r4, #19
 8002378:	2001      	movs	r0, #1
 800237a:	4023      	ands	r3, r4
 800237c:	4222      	tst	r2, r4
 800237e:	d1d3      	bne.n	8002328 <__aeabi_d2f+0x80>
 8002380:	e7b0      	b.n	80022e4 <__aeabi_d2f+0x3c>
 8002382:	2300      	movs	r3, #0
 8002384:	e7ad      	b.n	80022e2 <__aeabi_d2f+0x3a>
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <__aeabi_d2f+0x10c>)
 8002388:	4694      	mov	ip, r2
 800238a:	002a      	movs	r2, r5
 800238c:	40e2      	lsrs	r2, r4
 800238e:	0014      	movs	r4, r2
 8002390:	002a      	movs	r2, r5
 8002392:	4463      	add	r3, ip
 8002394:	409a      	lsls	r2, r3
 8002396:	4098      	lsls	r0, r3
 8002398:	1e55      	subs	r5, r2, #1
 800239a:	41aa      	sbcs	r2, r5
 800239c:	4302      	orrs	r2, r0
 800239e:	4322      	orrs	r2, r4
 80023a0:	e7e4      	b.n	800236c <__aeabi_d2f+0xc4>
 80023a2:	0033      	movs	r3, r6
 80023a4:	e79e      	b.n	80022e4 <__aeabi_d2f+0x3c>
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	000007fe 	.word	0x000007fe
 80023ac:	fffffc80 	.word	0xfffffc80
 80023b0:	fffffca2 	.word	0xfffffca2
 80023b4:	fffffc82 	.word	0xfffffc82

080023b8 <set_clock>:
#include "main.h"
#include "clock.h"

/** */
void set_clock(int hours, int minutes, int seconds, int date, int month, int year)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b08b      	sub	sp, #44	; 0x2c
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef sTime = {.Hours = hours, .Minutes = minutes, .Seconds = seconds};
 80023c6:	2414      	movs	r4, #20
 80023c8:	193b      	adds	r3, r7, r4
 80023ca:	0018      	movs	r0, r3
 80023cc:	2314      	movs	r3, #20
 80023ce:	001a      	movs	r2, r3
 80023d0:	2100      	movs	r1, #0
 80023d2:	f014 fa30 	bl	8016836 <memset>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	0021      	movs	r1, r4
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	705a      	strb	r2, [r3, #1]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef sDate = {.Date = date, .Month = month, .Year = year};
 80023f0:	2010      	movs	r0, #16
 80023f2:	183b      	adds	r3, r7, r0
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	183b      	adds	r3, r7, r0
 80023fe:	705a      	strb	r2, [r3, #1]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	183b      	adds	r3, r7, r0
 8002406:	709a      	strb	r2, [r3, #2]
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	b2da      	uxtb	r2, r3
 800240c:	0004      	movs	r4, r0
 800240e:	183b      	adds	r3, r7, r0
 8002410:	70da      	strb	r2, [r3, #3]

    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002412:	1879      	adds	r1, r7, r1
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <set_clock+0x7c>)
 8002416:	2200      	movs	r2, #0
 8002418:	0018      	movs	r0, r3
 800241a:	f005 fa89 	bl	8007930 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800241e:	1939      	adds	r1, r7, r4
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <set_clock+0x7c>)
 8002422:	2200      	movs	r2, #0
 8002424:	0018      	movs	r0, r3
 8002426:	f005 fb87 	bl	8007b38 <HAL_RTC_SetDate>
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b00b      	add	sp, #44	; 0x2c
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	20000d40 	.word	0x20000d40

08002438 <get_clock>:

/** */
void get_clock(int *hours, int *minutes, int *seconds, int *date, int *month, int *year)
{
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002446:	2414      	movs	r4, #20
 8002448:	1939      	adds	r1, r7, r4
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <get_clock+0x70>)
 800244c:	2200      	movs	r2, #0
 800244e:	0018      	movs	r0, r3
 8002450:	f005 fb14 	bl	8007a7c <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002454:	2510      	movs	r5, #16
 8002456:	1979      	adds	r1, r7, r5
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <get_clock+0x70>)
 800245a:	2200      	movs	r2, #0
 800245c:	0018      	movs	r0, r3
 800245e:	f005 fbfb 	bl	8007c58 <HAL_RTC_GetDate>
    *hours = sTime.Hours;
 8002462:	0021      	movs	r1, r4
 8002464:	187b      	adds	r3, r7, r1
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	001a      	movs	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	601a      	str	r2, [r3, #0]
    *minutes = sTime.Minutes;
 800246e:	187b      	adds	r3, r7, r1
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	001a      	movs	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	601a      	str	r2, [r3, #0]
    *seconds = sTime.Seconds;
 8002478:	187b      	adds	r3, r7, r1
 800247a:	789b      	ldrb	r3, [r3, #2]
 800247c:	001a      	movs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	601a      	str	r2, [r3, #0]
    *date = sDate.Date;
 8002482:	197b      	adds	r3, r7, r5
 8002484:	789b      	ldrb	r3, [r3, #2]
 8002486:	001a      	movs	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	601a      	str	r2, [r3, #0]
    *month = sDate.Month;
 800248c:	197b      	adds	r3, r7, r5
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	001a      	movs	r2, r3
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	601a      	str	r2, [r3, #0]
    *year = sDate.Year;
 8002496:	197b      	adds	r3, r7, r5
 8002498:	78db      	ldrb	r3, [r3, #3]
 800249a:	001a      	movs	r2, r3
 800249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249e:	601a      	str	r2, [r3, #0]
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b00a      	add	sp, #40	; 0x28
 80024a6:	bdb0      	pop	{r4, r5, r7, pc}
 80024a8:	20000d40 	.word	0x20000d40

080024ac <console_gps_command>:
	{"history", "linux-like command history", console_history_command},
};

/** */
void console_gps_command(const char *command_string)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    uint8_t arg1_len;
    uint8_t arg2_len;
    const char *arg1 = console_get_parameter(command_string, 1, &arg1_len);
 80024b4:	240f      	movs	r4, #15
 80024b6:	193a      	adds	r2, r7, r4
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2101      	movs	r1, #1
 80024bc:	0018      	movs	r0, r3
 80024be:	f000 fcaa 	bl	8002e16 <console_get_parameter>
 80024c2:	0003      	movs	r3, r0
 80024c4:	617b      	str	r3, [r7, #20]
    const char *arg2 = console_get_parameter(command_string, 2, &arg2_len);
 80024c6:	230e      	movs	r3, #14
 80024c8:	18fa      	adds	r2, r7, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2102      	movs	r1, #2
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 fca1 	bl	8002e16 <console_get_parameter>
 80024d4:	0003      	movs	r3, r0
 80024d6:	613b      	str	r3, [r7, #16]

    if (console_arg_is("fix", arg1, arg1_len))
 80024d8:	193b      	adds	r3, r7, r4
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	6979      	ldr	r1, [r7, #20]
 80024de:	4b29      	ldr	r3, [pc, #164]	; (8002584 <console_gps_command+0xd8>)
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 fc71 	bl	8002dc8 <console_arg_is>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d00c      	beq.n	8002504 <console_gps_command+0x58>
    {
    	printf("gps fix %s\n", gps_get_fix_obtained()?"obtained":"not obtained");
 80024ea:	f001 fcbc 	bl	8003e66 <gps_get_fix_obtained>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d001      	beq.n	80024f6 <console_gps_command+0x4a>
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <console_gps_command+0xdc>)
 80024f4:	e000      	b.n	80024f8 <console_gps_command+0x4c>
 80024f6:	4b25      	ldr	r3, [pc, #148]	; (800258c <console_gps_command+0xe0>)
 80024f8:	4a25      	ldr	r2, [pc, #148]	; (8002590 <console_gps_command+0xe4>)
 80024fa:	0019      	movs	r1, r3
 80024fc:	0010      	movs	r0, r2
 80024fe:	f015 f855 	bl	80175ac <iprintf>
    }
    else
    {
        printf("incorrect argument\n");
    }
}
 8002502:	e03b      	b.n	800257c <console_gps_command+0xd0>
    else if (console_arg_is("debug", arg1, arg1_len))
 8002504:	230f      	movs	r3, #15
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	6979      	ldr	r1, [r7, #20]
 800250c:	4b21      	ldr	r3, [pc, #132]	; (8002594 <console_gps_command+0xe8>)
 800250e:	0018      	movs	r0, r3
 8002510:	f000 fc5a 	bl	8002dc8 <console_arg_is>
 8002514:	1e03      	subs	r3, r0, #0
 8002516:	d011      	beq.n	800253c <console_gps_command+0x90>
    	if (console_arg_is("on", arg2, arg2_len))
 8002518:	230e      	movs	r3, #14
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	6939      	ldr	r1, [r7, #16]
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <console_gps_command+0xec>)
 8002522:	0018      	movs	r0, r3
 8002524:	f000 fc50 	bl	8002dc8 <console_arg_is>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d003      	beq.n	8002534 <console_gps_command+0x88>
    		gps_set_debug(true);
 800252c:	2001      	movs	r0, #1
 800252e:	f001 fca9 	bl	8003e84 <gps_set_debug>
}
 8002532:	e023      	b.n	800257c <console_gps_command+0xd0>
    		gps_set_debug(false);
 8002534:	2000      	movs	r0, #0
 8002536:	f001 fca5 	bl	8003e84 <gps_set_debug>
}
 800253a:	e01f      	b.n	800257c <console_gps_command+0xd0>
    else if (console_arg_is("standby", arg1, arg1_len))
 800253c:	230f      	movs	r3, #15
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	6979      	ldr	r1, [r7, #20]
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <console_gps_command+0xf0>)
 8002546:	0018      	movs	r0, r3
 8002548:	f000 fc3e 	bl	8002dc8 <console_arg_is>
 800254c:	1e03      	subs	r3, r0, #0
 800254e:	d011      	beq.n	8002574 <console_gps_command+0xc8>
    	if (console_arg_is("on", arg2, arg2_len))
 8002550:	230e      	movs	r3, #14
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	6939      	ldr	r1, [r7, #16]
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <console_gps_command+0xec>)
 800255a:	0018      	movs	r0, r3
 800255c:	f000 fc34 	bl	8002dc8 <console_arg_is>
 8002560:	1e03      	subs	r3, r0, #0
 8002562:	d003      	beq.n	800256c <console_gps_command+0xc0>
    		gps_set_standby(true);
 8002564:	2001      	movs	r0, #1
 8002566:	f001 fc67 	bl	8003e38 <gps_set_standby>
}
 800256a:	e007      	b.n	800257c <console_gps_command+0xd0>
    		gps_set_standby(false);
 800256c:	2000      	movs	r0, #0
 800256e:	f001 fc63 	bl	8003e38 <gps_set_standby>
}
 8002572:	e003      	b.n	800257c <console_gps_command+0xd0>
        printf("incorrect argument\n");
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <console_gps_command+0xf4>)
 8002576:	0018      	movs	r0, r3
 8002578:	f015 f8b8 	bl	80176ec <puts>
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b007      	add	sp, #28
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	0801bfbc 	.word	0x0801bfbc
 8002588:	0801bfc0 	.word	0x0801bfc0
 800258c:	0801bfcc 	.word	0x0801bfcc
 8002590:	0801bfdc 	.word	0x0801bfdc
 8002594:	0801bfe8 	.word	0x0801bfe8
 8002598:	0801bff0 	.word	0x0801bff0
 800259c:	0801bff4 	.word	0x0801bff4
 80025a0:	0801bffc 	.word	0x0801bffc

080025a4 <console_help_command>:

/** */
static void console_help_command(const char *command_string)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	for(int idx = 0; idx < sizeof(commands)/sizeof(command_t); idx++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	e017      	b.n	80025e2 <console_help_command+0x3e>
	{
		printf("%s: %s\n", commands[idx].command, commands[idx].help_string);
 80025b2:	4910      	ldr	r1, [pc, #64]	; (80025f4 <console_help_command+0x50>)
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	0013      	movs	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	189b      	adds	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	5858      	ldr	r0, [r3, r1]
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <console_help_command+0x50>)
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	0013      	movs	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	189b      	adds	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	18cb      	adds	r3, r1, r3
 80025ce:	3304      	adds	r3, #4
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <console_help_command+0x54>)
 80025d4:	0001      	movs	r1, r0
 80025d6:	0018      	movs	r0, r3
 80025d8:	f014 ffe8 	bl	80175ac <iprintf>
	for(int idx = 0; idx < sizeof(commands)/sizeof(command_t); idx++)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3301      	adds	r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b0a      	cmp	r3, #10
 80025e6:	d9e4      	bls.n	80025b2 <console_help_command+0xe>
	}
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b004      	add	sp, #16
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	20000000 	.word	0x20000000
 80025f8:	0801c010 	.word	0x0801c010

080025fc <console_clock_command>:

/** */
static void console_clock_command(const char *command_string)
{
 80025fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fe:	b097      	sub	sp, #92	; 0x5c
 8002600:	af04      	add	r7, sp, #16
 8002602:	6078      	str	r0, [r7, #4]
    uint8_t arg1_len;
    uint8_t arg2_len;
    const char *arg1 = console_get_parameter(command_string, 1, &arg1_len);
 8002604:	243f      	movs	r4, #63	; 0x3f
 8002606:	193a      	adds	r2, r7, r4
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2101      	movs	r1, #1
 800260c:	0018      	movs	r0, r3
 800260e:	f000 fc02 	bl	8002e16 <console_get_parameter>
 8002612:	0003      	movs	r3, r0
 8002614:	647b      	str	r3, [r7, #68]	; 0x44
    const char *arg2 = console_get_parameter(command_string, 2, &arg2_len);
 8002616:	233e      	movs	r3, #62	; 0x3e
 8002618:	18fa      	adds	r2, r7, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2102      	movs	r1, #2
 800261e:	0018      	movs	r0, r3
 8002620:	f000 fbf9 	bl	8002e16 <console_get_parameter>
 8002624:	0003      	movs	r3, r0
 8002626:	643b      	str	r3, [r7, #64]	; 0x40

    if (console_arg_is("get", arg1, arg1_len))
 8002628:	193b      	adds	r3, r7, r4
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <console_clock_command+0x130>)
 8002630:	0018      	movs	r0, r3
 8002632:	f000 fbc9 	bl	8002dc8 <console_arg_is>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d020      	beq.n	800267c <console_clock_command+0x80>
    {
        int hours, minutes, seconds, date, month, year;
        get_clock(&hours, &minutes, &seconds, &date, &month, &year);
 800263a:	232c      	movs	r3, #44	; 0x2c
 800263c:	18fc      	adds	r4, r7, r3
 800263e:	2330      	movs	r3, #48	; 0x30
 8002640:	18fa      	adds	r2, r7, r3
 8002642:	2334      	movs	r3, #52	; 0x34
 8002644:	18f9      	adds	r1, r7, r3
 8002646:	2338      	movs	r3, #56	; 0x38
 8002648:	18f8      	adds	r0, r7, r3
 800264a:	2324      	movs	r3, #36	; 0x24
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2328      	movs	r3, #40	; 0x28
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	0023      	movs	r3, r4
 8002658:	f7ff feee 	bl	8002438 <get_clock>
        printf("The date and time is set to %2.2d:%2.2d:%2.2d on %2.2d/%2.2d/%2.2d\n", hours, minutes, seconds, date, month, year);
 800265c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800265e:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8002660:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002668:	4831      	ldr	r0, [pc, #196]	; (8002730 <console_clock_command+0x134>)
 800266a:	9102      	str	r1, [sp, #8]
 800266c:	9201      	str	r2, [sp, #4]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	0033      	movs	r3, r6
 8002672:	002a      	movs	r2, r5
 8002674:	0021      	movs	r1, r4
 8002676:	f014 ff99 	bl	80175ac <iprintf>
    }
    else
    {
        printf("incorrect argument\n");
    }
}
 800267a:	e052      	b.n	8002722 <console_clock_command+0x126>
    else if (console_arg_is("set", arg1, arg1_len))
 800267c:	233f      	movs	r3, #63	; 0x3f
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <console_clock_command+0x138>)
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fb9e 	bl	8002dc8 <console_arg_is>
 800268c:	1e03      	subs	r3, r0, #0
 800268e:	d044      	beq.n	800271a <console_clock_command+0x11e>
        if (arg2)
 8002690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d03c      	beq.n	8002710 <console_clock_command+0x114>
			if (sscanf(arg2, "%d:%d:%d %d/%d/%d", &hours, &minutes, &seconds, &date, &month, &year) == 6)
 8002696:	231c      	movs	r3, #28
 8002698:	18fc      	adds	r4, r7, r3
 800269a:	2320      	movs	r3, #32
 800269c:	18fa      	adds	r2, r7, r3
 800269e:	4926      	ldr	r1, [pc, #152]	; (8002738 <console_clock_command+0x13c>)
 80026a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80026a2:	230c      	movs	r3, #12
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	9303      	str	r3, [sp, #12]
 80026a8:	2310      	movs	r3, #16
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	9302      	str	r3, [sp, #8]
 80026ae:	2314      	movs	r3, #20
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2318      	movs	r3, #24
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	0023      	movs	r3, r4
 80026bc:	f015 f94e 	bl	801795c <siscanf>
 80026c0:	0003      	movs	r3, r0
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d11f      	bne.n	8002706 <console_clock_command+0x10a>
				set_clock(hours, minutes, seconds, date, month, year);
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	0018      	movs	r0, r3
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	0019      	movs	r1, r3
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	001c      	movs	r4, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	001d      	movs	r5, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	9201      	str	r2, [sp, #4]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	002b      	movs	r3, r5
 80026e0:	0022      	movs	r2, r4
 80026e2:	f7ff fe69 	bl	80023b8 <set_clock>
				printf("Date and time set to %d:%d:%d %d/%d/%d\n", hours, minutes, seconds, date, month, year);
 80026e6:	6a3c      	ldr	r4, [r7, #32]
 80026e8:	69fd      	ldr	r5, [r7, #28]
 80026ea:	69be      	ldr	r6, [r7, #24]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	4812      	ldr	r0, [pc, #72]	; (800273c <console_clock_command+0x140>)
 80026f4:	9102      	str	r1, [sp, #8]
 80026f6:	9201      	str	r2, [sp, #4]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	0033      	movs	r3, r6
 80026fc:	002a      	movs	r2, r5
 80026fe:	0021      	movs	r1, r4
 8002700:	f014 ff54 	bl	80175ac <iprintf>
}
 8002704:	e00d      	b.n	8002722 <console_clock_command+0x126>
				printf("Parse error. Enter date and time in the format HH:MM:SS DD/MM/YY\n");
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <console_clock_command+0x144>)
 8002708:	0018      	movs	r0, r3
 800270a:	f014 ffef 	bl	80176ec <puts>
}
 800270e:	e008      	b.n	8002722 <console_clock_command+0x126>
            printf("missing argument");
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <console_clock_command+0x148>)
 8002712:	0018      	movs	r0, r3
 8002714:	f014 ff4a 	bl	80175ac <iprintf>
}
 8002718:	e003      	b.n	8002722 <console_clock_command+0x126>
        printf("incorrect argument\n");
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <console_clock_command+0x14c>)
 800271c:	0018      	movs	r0, r3
 800271e:	f014 ffe5 	bl	80176ec <puts>
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b013      	add	sp, #76	; 0x4c
 8002728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	0801c018 	.word	0x0801c018
 8002730:	0801c01c 	.word	0x0801c01c
 8002734:	0801c060 	.word	0x0801c060
 8002738:	0801c064 	.word	0x0801c064
 800273c:	0801c078 	.word	0x0801c078
 8002740:	0801c0a0 	.word	0x0801c0a0
 8002744:	0801c0e4 	.word	0x0801c0e4
 8002748:	0801bffc 	.word	0x0801bffc

0800274c <console_info_command>:

/** */
static void console_info_command(const char *command_string)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	printf("Number of flash blocks: %ld\n", lfs_cfg.block_count);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <console_info_command+0x70>)
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <console_info_command+0x74>)
 800275a:	0011      	movs	r1, r2
 800275c:	0018      	movs	r0, r3
 800275e:	f014 ff25 	bl	80175ac <iprintf>
	printf("Erase flash block size: %ld bytes\n", lfs_cfg.block_size);
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <console_info_command+0x70>)
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <console_info_command+0x78>)
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f014 ff1e 	bl	80175ac <iprintf>
	printf("Flash prog size: %ld bytes\n", lfs_cfg.prog_size);
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <console_info_command+0x70>)
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <console_info_command+0x7c>)
 8002776:	0011      	movs	r1, r2
 8002778:	0018      	movs	r0, r3
 800277a:	f014 ff17 	bl	80175ac <iprintf>
	printf("\n");
 800277e:	200a      	movs	r0, #10
 8002780:	f014 ff2e 	bl	80175e0 <putchar>
	uint32_t used = lfs_fs_size(&lfs) * lfs_cfg.block_size;
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <console_info_command+0x80>)
 8002786:	0018      	movs	r0, r3
 8002788:	f013 f9a1 	bl	8015ace <lfs_fs_size>
 800278c:	0003      	movs	r3, r0
 800278e:	001a      	movs	r2, r3
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <console_info_command+0x70>)
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4353      	muls	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
	uint32_t total = lfs_cfg.block_count * lfs_cfg.block_size;
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <console_info_command+0x70>)
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <console_info_command+0x70>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	4353      	muls	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
	printf("total byes = %ld, used bytes = %ld free bytes = %ld\n", total, used, total - used );
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	4808      	ldr	r0, [pc, #32]	; (80027d0 <console_info_command+0x84>)
 80027b0:	f014 fefc 	bl	80175ac <iprintf>
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000084 	.word	0x20000084
 80027c0:	0801c0f8 	.word	0x0801c0f8
 80027c4:	0801c118 	.word	0x0801c118
 80027c8:	0801c13c 	.word	0x0801c13c
 80027cc:	200008b8 	.word	0x200008b8
 80027d0:	0801c158 	.word	0x0801c158

080027d4 <console_format_command>:

/** */
static void console_format_command(const char *command_string)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	printf("are you sure (y/n)\n");
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <console_format_command+0x74>)
 80027de:	0018      	movs	r0, r3
 80027e0:	f014 ff84 	bl	80176ec <puts>

	char ch = getchar();
 80027e4:	f013 ffc6 	bl	8016774 <getchar>
 80027e8:	0002      	movs	r2, r0
 80027ea:	210f      	movs	r1, #15
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	701a      	strb	r2, [r3, #0]

	if(ch == 'y')
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b79      	cmp	r3, #121	; 0x79
 80027f6:	d103      	bne.n	8002800 <console_format_command+0x2c>
	{
		printf("\nreformatting\n");
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <console_format_command+0x78>)
 80027fa:	0018      	movs	r0, r3
 80027fc:	f014 ff76 	bl	80176ec <puts>
	}

	if (lfs_format(&lfs, &lfs_cfg) == 0)
 8002800:	4a13      	ldr	r2, [pc, #76]	; (8002850 <console_format_command+0x7c>)
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <console_format_command+0x80>)
 8002804:	0011      	movs	r1, r2
 8002806:	0018      	movs	r0, r3
 8002808:	f012 ffc6 	bl	8015798 <lfs_format>
 800280c:	1e03      	subs	r3, r0, #0
 800280e:	d113      	bne.n	8002838 <console_format_command+0x64>
	{
		printf("formatting complete\n");
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <console_format_command+0x84>)
 8002812:	0018      	movs	r0, r3
 8002814:	f014 ff6a 	bl	80176ec <puts>

		int err = lfs_mount(&lfs, &lfs_cfg);
 8002818:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <console_format_command+0x7c>)
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <console_format_command+0x80>)
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f012 ffd3 	bl	80157ca <lfs_mount>
 8002824:	0003      	movs	r3, r0
 8002826:	60bb      	str	r3, [r7, #8]

		if (err < 0)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	da08      	bge.n	8002840 <console_format_command+0x6c>
		{
			printf("could not mount filesystem\n");
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <console_format_command+0x88>)
 8002830:	0018      	movs	r0, r3
 8002832:	f014 ff5b 	bl	80176ec <puts>
	}
	else
	{
		printf("formatting failed\n");
	}
}
 8002836:	e003      	b.n	8002840 <console_format_command+0x6c>
		printf("formatting failed\n");
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <console_format_command+0x8c>)
 800283a:	0018      	movs	r0, r3
 800283c:	f014 ff56 	bl	80176ec <puts>
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bd80      	pop	{r7, pc}
 8002848:	0801c190 	.word	0x0801c190
 800284c:	0801c1a4 	.word	0x0801c1a4
 8002850:	20000084 	.word	0x20000084
 8002854:	200008b8 	.word	0x200008b8
 8002858:	0801c1b4 	.word	0x0801c1b4
 800285c:	0801c1c8 	.word	0x0801c1c8
 8002860:	0801c1e4 	.word	0x0801c1e4

08002864 <console_test_command>:

/** */
static void console_test_command(const char *command_string)
{
 8002864:	b5b0      	push	{r4, r5, r7, lr}
 8002866:	b098      	sub	sp, #96	; 0x60
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	lfs_file_t file;
	uint32_t test_count = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]

	lfs_file_open(&lfs, &file, "test", LFS_O_RDWR | LFS_O_CREAT);
 8002870:	2304      	movs	r3, #4
 8002872:	33ff      	adds	r3, #255	; 0xff
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <console_test_command+0x68>)
 8002876:	240c      	movs	r4, #12
 8002878:	1939      	adds	r1, r7, r4
 800287a:	4815      	ldr	r0, [pc, #84]	; (80028d0 <console_test_command+0x6c>)
 800287c:	f012 ffd8 	bl	8015830 <lfs_file_open>
	lfs_file_read(&lfs, &file, &test_count, sizeof(test_count));
 8002880:	2508      	movs	r5, #8
 8002882:	197a      	adds	r2, r7, r5
 8002884:	1939      	adds	r1, r7, r4
 8002886:	4812      	ldr	r0, [pc, #72]	; (80028d0 <console_test_command+0x6c>)
 8002888:	2304      	movs	r3, #4
 800288a:	f013 f839 	bl	8015900 <lfs_file_read>

	test_count += 1;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3301      	adds	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
	lfs_file_rewind(&lfs, &file);
 8002894:	193a      	adds	r2, r7, r4
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <console_test_command+0x6c>)
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f013 f894 	bl	80159c8 <lfs_file_rewind>
	lfs_file_write(&lfs, &file, &test_count, sizeof(test_count));
 80028a0:	197a      	adds	r2, r7, r5
 80028a2:	1939      	adds	r1, r7, r4
 80028a4:	480a      	ldr	r0, [pc, #40]	; (80028d0 <console_test_command+0x6c>)
 80028a6:	2304      	movs	r3, #4
 80028a8:	f013 f85c 	bl	8015964 <lfs_file_write>
	lfs_file_close(&lfs, &file);
 80028ac:	193a      	adds	r2, r7, r4
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <console_test_command+0x6c>)
 80028b0:	0011      	movs	r1, r2
 80028b2:	0018      	movs	r0, r3
 80028b4:	f012 fff4 	bl	80158a0 <lfs_file_close>

	printf("test_count: %ld\n", test_count);
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <console_test_command+0x70>)
 80028bc:	0011      	movs	r1, r2
 80028be:	0018      	movs	r0, r3
 80028c0:	f014 fe74 	bl	80175ac <iprintf>
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b018      	add	sp, #96	; 0x60
 80028ca:	bdb0      	pop	{r4, r5, r7, pc}
 80028cc:	0801be3c 	.word	0x0801be3c
 80028d0:	200008b8 	.word	0x200008b8
 80028d4:	0801c1f8 	.word	0x0801c1f8

080028d8 <console_ls_command>:

/** */
static void console_ls_command(const char *command_string)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b0d3      	sub	sp, #332	; 0x14c
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	lfs_dir_t dir;
	struct lfs_info info;

	lfs_dir_open(&lfs, &dir, ".");
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <console_ls_command+0x60>)
 80028e2:	238a      	movs	r3, #138	; 0x8a
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	18f9      	adds	r1, r7, r3
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <console_ls_command+0x64>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f013 f886 	bl	80159fc <lfs_dir_open>

	while(lfs_dir_read(&lfs, &dir, &info) > 0)
 80028f0:	e00d      	b.n	800290e <console_ls_command+0x36>
	{
		printf("%s\t\t%ld\n", info.name, info.size);
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <console_ls_command+0x68>)
 80028f4:	22a4      	movs	r2, #164	; 0xa4
 80028f6:	0052      	lsls	r2, r2, #1
 80028f8:	189b      	adds	r3, r3, r2
 80028fa:	19db      	adds	r3, r3, r7
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	230c      	movs	r3, #12
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	3308      	adds	r3, #8
 8002904:	0019      	movs	r1, r3
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <console_ls_command+0x6c>)
 8002908:	0018      	movs	r0, r3
 800290a:	f014 fe4f 	bl	80175ac <iprintf>
	while(lfs_dir_read(&lfs, &dir, &info) > 0)
 800290e:	230c      	movs	r3, #12
 8002910:	18fa      	adds	r2, r7, r3
 8002912:	248a      	movs	r4, #138	; 0x8a
 8002914:	0064      	lsls	r4, r4, #1
 8002916:	1939      	adds	r1, r7, r4
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <console_ls_command+0x64>)
 800291a:	0018      	movs	r0, r3
 800291c:	f013 f8bd 	bl	8015a9a <lfs_dir_read>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	dce6      	bgt.n	80028f2 <console_ls_command+0x1a>
	}

	lfs_dir_close(&lfs, &dir);
 8002924:	193a      	adds	r2, r7, r4
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <console_ls_command+0x64>)
 8002928:	0011      	movs	r1, r2
 800292a:	0018      	movs	r0, r3
 800292c:	f013 f89c 	bl	8015a68 <lfs_dir_close>
}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	46bd      	mov	sp, r7
 8002934:	b053      	add	sp, #332	; 0x14c
 8002936:	bd90      	pop	{r4, r7, pc}
 8002938:	0801c20c 	.word	0x0801c20c
 800293c:	200008b8 	.word	0x200008b8
 8002940:	fffffec4 	.word	0xfffffec4
 8002944:	0801c210 	.word	0x0801c210

08002948 <console_rm_command>:

/** */
static void console_rm_command(const char *command_string)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    uint8_t arg1_len;
    const char *arg1 = console_get_parameter(command_string, 1, &arg1_len);
 8002950:	230b      	movs	r3, #11
 8002952:	18fa      	adds	r2, r7, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2101      	movs	r1, #1
 8002958:	0018      	movs	r0, r3
 800295a:	f000 fa5c 	bl	8002e16 <console_get_parameter>
 800295e:	0003      	movs	r3, r0
 8002960:	60fb      	str	r3, [r7, #12]

    if(arg1 !=NULL)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <console_rm_command+0x4c>
    {
		if(lfs_remove(&lfs, arg1) >=0)
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <console_rm_command+0x5c>)
 800296c:	0011      	movs	r1, r2
 800296e:	0018      	movs	r0, r3
 8002970:	f012 ff44 	bl	80157fc <lfs_remove>
 8002974:	1e03      	subs	r3, r0, #0
 8002976:	db06      	blt.n	8002986 <console_rm_command+0x3e>
		{
			printf("file %s removed\n", arg1);
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <console_rm_command+0x60>)
 800297c:	0011      	movs	r1, r2
 800297e:	0018      	movs	r0, r3
 8002980:	f014 fe14 	bl	80175ac <iprintf>
    }
    else
    {
    	printf("no file name specified\n");
    }
}
 8002984:	e00a      	b.n	800299c <console_rm_command+0x54>
			printf("error removing file %s\n", arg1);
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <console_rm_command+0x64>)
 800298a:	0011      	movs	r1, r2
 800298c:	0018      	movs	r0, r3
 800298e:	f014 fe0d 	bl	80175ac <iprintf>
}
 8002992:	e003      	b.n	800299c <console_rm_command+0x54>
    	printf("no file name specified\n");
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <console_rm_command+0x68>)
 8002996:	0018      	movs	r0, r3
 8002998:	f014 fea8 	bl	80176ec <puts>
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b004      	add	sp, #16
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200008b8 	.word	0x200008b8
 80029a8:	0801c21c 	.word	0x0801c21c
 80029ac:	0801c230 	.word	0x0801c230
 80029b0:	0801c248 	.word	0x0801c248

080029b4 <console_cat_command>:

/** */
static void console_cat_command(const char *command_string)
{
 80029b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b6:	b0e5      	sub	sp, #404	; 0x194
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    uint8_t arg1_len;
    uint8_t arg2_len;
    const char *arg1 = console_get_parameter(command_string, 1, &arg1_len);
 80029bc:	2680      	movs	r6, #128	; 0x80
 80029be:	36ff      	adds	r6, #255	; 0xff
 80029c0:	19ba      	adds	r2, r7, r6
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2101      	movs	r1, #1
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 fa25 	bl	8002e16 <console_get_parameter>
 80029cc:	0003      	movs	r3, r0
 80029ce:	24c6      	movs	r4, #198	; 0xc6
 80029d0:	0064      	lsls	r4, r4, #1
 80029d2:	193a      	adds	r2, r7, r4
 80029d4:	6013      	str	r3, [r2, #0]
    const char *arg2 = console_get_parameter(command_string, 2, &arg2_len);
 80029d6:	23bf      	movs	r3, #191	; 0xbf
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	18fa      	adds	r2, r7, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2102      	movs	r1, #2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 fa18 	bl	8002e16 <console_get_parameter>
 80029e6:	0003      	movs	r3, r0
 80029e8:	22c4      	movs	r2, #196	; 0xc4
 80029ea:	0052      	lsls	r2, r2, #1
 80029ec:	18ba      	adds	r2, r7, r2
 80029ee:	6013      	str	r3, [r2, #0]

	lfs_file_t file;

    if(arg1 != NULL)
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d06e      	beq.n	8002ad6 <console_cat_command+0x122>
    {
    	char filename[32];
    	memset(filename,0, 32);
 80029f8:	2508      	movs	r5, #8
 80029fa:	197b      	adds	r3, r7, r5
 80029fc:	2220      	movs	r2, #32
 80029fe:	2100      	movs	r1, #0
 8002a00:	0018      	movs	r0, r3
 8002a02:	f013 ff18 	bl	8016836 <memset>
    	strncpy(filename,arg1, arg1_len);
 8002a06:	19bb      	adds	r3, r7, r6
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	197b      	adds	r3, r7, r5
 8002a12:	0018      	movs	r0, r3
 8002a14:	f015 f851 	bl	8017aba <strncpy>
		int err = lfs_file_open(&lfs, &file, filename, LFS_O_RDWR);
 8002a18:	197a      	adds	r2, r7, r5
 8002a1a:	2394      	movs	r3, #148	; 0x94
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	18f9      	adds	r1, r7, r3
 8002a20:	4830      	ldr	r0, [pc, #192]	; (8002ae4 <console_cat_command+0x130>)
 8002a22:	2303      	movs	r3, #3
 8002a24:	f012 ff04 	bl	8015830 <lfs_file_open>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	22c2      	movs	r2, #194	; 0xc2
 8002a2c:	0052      	lsls	r2, r2, #1
 8002a2e:	18b9      	adds	r1, r7, r2
 8002a30:	600b      	str	r3, [r1, #0]

		if(err < 0)
 8002a32:	18bb      	adds	r3, r7, r2
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	da04      	bge.n	8002a44 <console_cat_command+0x90>
		{
			printf("could not open file\n");
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <console_cat_command+0x134>)
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f014 fe55 	bl	80176ec <puts>
 8002a42:	e04c      	b.n	8002ade <console_cat_command+0x12a>
		}

		while(true)
		{
			unsigned char buffer[256];
			memset(buffer, 0, sizeof(buffer));
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	005a      	lsls	r2, r3, #1
 8002a48:	2428      	movs	r4, #40	; 0x28
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f013 fef1 	bl	8016836 <memset>
			int read = lfs_file_read(&lfs, &file, buffer, sizeof(buffer));
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	193a      	adds	r2, r7, r4
 8002a5a:	2494      	movs	r4, #148	; 0x94
 8002a5c:	0064      	lsls	r4, r4, #1
 8002a5e:	1939      	adds	r1, r7, r4
 8002a60:	4820      	ldr	r0, [pc, #128]	; (8002ae4 <console_cat_command+0x130>)
 8002a62:	f012 ff4d 	bl	8015900 <lfs_file_read>
 8002a66:	0003      	movs	r3, r0
 8002a68:	22c0      	movs	r2, #192	; 0xc0
 8002a6a:	0052      	lsls	r2, r2, #1
 8002a6c:	18b9      	adds	r1, r7, r2
 8002a6e:	600b      	str	r3, [r1, #0]

			if(read <= 0 )
 8002a70:	18bb      	adds	r3, r7, r2
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dc09      	bgt.n	8002a8c <console_cat_command+0xd8>
			{
				printf("%.*s", read, buffer);
			}
		}

		lfs_file_close(&lfs, &file);
 8002a78:	193a      	adds	r2, r7, r4
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <console_cat_command+0x130>)
 8002a7c:	0011      	movs	r1, r2
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f012 ff0e 	bl	80158a0 <lfs_file_close>
		printf("\n"); // <<<<<<<<<<<<<<<<<<<<<<<<<<<<< remove ??
 8002a84:	200a      	movs	r0, #10
 8002a86:	f014 fdab 	bl	80175e0 <putchar>
 8002a8a:	e028      	b.n	8002ade <console_cat_command+0x12a>
			if(console_arg_is("binary", arg2, arg2_len))
 8002a8c:	23bf      	movs	r3, #191	; 0xbf
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	23c4      	movs	r3, #196	; 0xc4
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	4b13      	ldr	r3, [pc, #76]	; (8002aec <console_cat_command+0x138>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f992 	bl	8002dc8 <console_arg_is>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d00b      	beq.n	8002ac0 <console_cat_command+0x10c>
				console_print_array(0, buffer, read);
 8002aa8:	23c0      	movs	r3, #192	; 0xc0
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	2328      	movs	r3, #40	; 0x28
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 f8fd 	bl	8002cb8 <console_print_array>
 8002abe:	e7c1      	b.n	8002a44 <console_cat_command+0x90>
				printf("%.*s", read, buffer);
 8002ac0:	2328      	movs	r3, #40	; 0x28
 8002ac2:	18fa      	adds	r2, r7, r3
 8002ac4:	23c0      	movs	r3, #192	; 0xc0
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	6819      	ldr	r1, [r3, #0]
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <console_cat_command+0x13c>)
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f014 fd6c 	bl	80175ac <iprintf>
		{
 8002ad4:	e7b6      	b.n	8002a44 <console_cat_command+0x90>
    }
    else
    {
    	printf("no file name specified\n");
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <console_cat_command+0x140>)
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f014 fe07 	bl	80176ec <puts>
    }
}
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b065      	add	sp, #404	; 0x194
 8002ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae4:	200008b8 	.word	0x200008b8
 8002ae8:	0801c260 	.word	0x0801c260
 8002aec:	0801c274 	.word	0x0801c274
 8002af0:	0801c27c 	.word	0x0801c27c
 8002af4:	0801c248 	.word	0x0801c248

08002af8 <console_example_command>:

/** */
void console_example_command(const char *command_string)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    uint8_t arg1_len;
    uint8_t arg2_len;
    const char *arg1 = console_get_parameter(command_string, 1, &arg1_len);
 8002b00:	240f      	movs	r4, #15
 8002b02:	193a      	adds	r2, r7, r4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2101      	movs	r1, #1
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 f984 	bl	8002e16 <console_get_parameter>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	617b      	str	r3, [r7, #20]
    const char *arg2 = console_get_parameter(command_string, 2, &arg2_len);
 8002b12:	230e      	movs	r3, #14
 8002b14:	18fa      	adds	r2, r7, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2102      	movs	r1, #2
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 f97b 	bl	8002e16 <console_get_parameter>
 8002b20:	0003      	movs	r3, r0
 8002b22:	613b      	str	r3, [r7, #16]

    if (console_arg_is("get", arg1, arg1_len))
 8002b24:	193b      	adds	r3, r7, r4
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	6979      	ldr	r1, [r7, #20]
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <console_example_command+0x70>)
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 f94b 	bl	8002dc8 <console_arg_is>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d114      	bne.n	8002b60 <console_example_command+0x68>
    {
    }
    else if (console_arg_is("set", arg1, arg1_len))
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	6979      	ldr	r1, [r7, #20]
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <console_example_command+0x74>)
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f942 	bl	8002dc8 <console_arg_is>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d007      	beq.n	8002b58 <console_example_command+0x60>
    {
        if (arg2)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d108      	bne.n	8002b60 <console_example_command+0x68>
        {
        }
        else
        {
            printf("missing argument");
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <console_example_command+0x78>)
 8002b50:	0018      	movs	r0, r3
 8002b52:	f014 fd2b 	bl	80175ac <iprintf>
    }
    else
    {
        printf("incorrect argument\n");
    }
}
 8002b56:	e003      	b.n	8002b60 <console_example_command+0x68>
        printf("incorrect argument\n");
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <console_example_command+0x7c>)
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f014 fdc6 	bl	80176ec <puts>
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b007      	add	sp, #28
 8002b66:	bd90      	pop	{r4, r7, pc}
 8002b68:	0801c018 	.word	0x0801c018
 8002b6c:	0801c060 	.word	0x0801c060
 8002b70:	0801c0e4 	.word	0x0801c0e4
 8002b74:	0801bffc 	.word	0x0801bffc

08002b78 <put_history>:

/** */
static void put_history(char *input)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    strcpy(input_history[history_index], input);
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <put_history+0x50>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	001a      	movs	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <put_history+0x54>)
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	0011      	movs	r1, r2
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f014 ff63 	bl	8017a64 <strcpy>

    if (++history_index == HISTORY_DEPTH)
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <put_history+0x50>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	b25a      	sxtb	r2, r3
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <put_history+0x50>)
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <put_history+0x50>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d102      	bne.n	8002bc0 <put_history+0x48>
    {
        history_index = 0;
 8002bba:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <put_history+0x50>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
    }
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b002      	add	sp, #8
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200005ac 	.word	0x200005ac
 8002bcc:	20000480 	.word	0x20000480

08002bd0 <get_history>:

/** */
static void get_history(char *input, bool reset)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	000a      	movs	r2, r1
 8002bda:	1cfb      	adds	r3, r7, #3
 8002bdc:	701a      	strb	r2, [r3, #0]
    static int8_t index = 0;
    if (reset)
 8002bde:	1cfb      	adds	r3, r7, #3
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d011      	beq.n	8002c0a <get_history+0x3a>
    {
        index = history_index -1;
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <get_history+0x84>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	b25a      	sxtb	r2, r3
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <get_history+0x88>)
 8002bf6:	701a      	strb	r2, [r3, #0]

        if (index < 0)
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <get_history+0x88>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	da24      	bge.n	8002c4c <get_history+0x7c>
        {
            index = HISTORY_DEPTH;
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <get_history+0x88>)
 8002c04:	2205      	movs	r2, #5
 8002c06:	701a      	strb	r2, [r3, #0]
        }
        return;
 8002c08:	e020      	b.n	8002c4c <get_history+0x7c>
    }

    strcpy(input, input_history[index]);
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <get_history+0x88>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	001a      	movs	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <get_history+0x8c>)
 8002c1c:	189a      	adds	r2, r3, r2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0011      	movs	r1, r2
 8002c22:	0018      	movs	r0, r3
 8002c24:	f014 ff1e 	bl	8017a64 <strcpy>

    if (--index < 0)
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <get_history+0x88>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	b25a      	sxtb	r2, r3
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <get_history+0x88>)
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <get_history+0x88>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b25b      	sxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	da04      	bge.n	8002c4e <get_history+0x7e>
    {
        index = HISTORY_DEPTH;
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <get_history+0x88>)
 8002c46:	2205      	movs	r2, #5
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e000      	b.n	8002c4e <get_history+0x7e>
        return;
 8002c4c:	46c0      	nop			; (mov r8, r8)
    }
}
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200005ac 	.word	0x200005ac
 8002c58:	200005b4 	.word	0x200005b4
 8002c5c:	20000480 	.word	0x20000480

08002c60 <console_history_command>:

/** */
static void console_history_command(const char *command_string)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    (void)command_string;

    for (uint8_t i = 0; i < HISTORY_DEPTH; i++)
 8002c68:	230f      	movs	r3, #15
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e014      	b.n	8002c9c <console_history_command+0x3c>
    {
        printf("%d %s\n", i + 1, input_history[i]);
 8002c72:	240f      	movs	r4, #15
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	1c59      	adds	r1, r3, #1
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	0013      	movs	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <console_history_command+0x50>)
 8002c88:	189a      	adds	r2, r3, r2
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <console_history_command+0x54>)
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f014 fc8d 	bl	80175ac <iprintf>
    for (uint8_t i = 0; i < HISTORY_DEPTH; i++)
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	3201      	adds	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d9e5      	bls.n	8002c72 <console_history_command+0x12>
    }
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b005      	add	sp, #20
 8002cae:	bd90      	pop	{r4, r7, pc}
 8002cb0:	20000480 	.word	0x20000480
 8002cb4:	0801c284 	.word	0x0801c284

08002cb8 <console_print_array>:

/** */
static void console_print_array(uint32_t addr, uint8_t data[], uint16_t len)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08e      	sub	sp, #56	; 0x38
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	1dbb      	adds	r3, r7, #6
 8002cc4:	801a      	strh	r2, [r3, #0]
    uint8_t str[17];

    for (int i = 0; i < len; i += 16)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cca:	e06d      	b.n	8002da8 <console_print_array+0xf0>
    {
        uint16_t bytes_per_line = 16;
 8002ccc:	2132      	movs	r1, #50	; 0x32
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	801a      	strh	r2, [r3, #0]

        if ((len - i) < 16)
 8002cd4:	1dbb      	adds	r3, r7, #6
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	dc06      	bgt.n	8002cee <console_print_array+0x36>
        {
            bytes_per_line = len - i;
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	1db9      	adds	r1, r7, #6
 8002ce8:	8809      	ldrh	r1, [r1, #0]
 8002cea:	1a8a      	subs	r2, r1, r2
 8002cec:	801a      	strh	r2, [r3, #0]
        }

        for (int j = 0; j < bytes_per_line; j++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf2:	e022      	b.n	8002d3a <console_print_array+0x82>
        {
            uint8_t ch = data[i + j];
 8002cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	18d3      	adds	r3, r2, r3
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	189a      	adds	r2, r3, r2
 8002d00:	2127      	movs	r1, #39	; 0x27
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	701a      	strb	r2, [r3, #0]
            if (ch >= 0x20 && ch < 0x7f)
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b1f      	cmp	r3, #31
 8002d0e:	d90b      	bls.n	8002d28 <console_print_array+0x70>
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b7e      	cmp	r3, #126	; 0x7e
 8002d16:	d807      	bhi.n	8002d28 <console_print_array+0x70>
            {
                str[j] = ch;
 8002d18:	2314      	movs	r3, #20
 8002d1a:	18fa      	adds	r2, r7, r3
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	18d3      	adds	r3, r2, r3
 8002d20:	187a      	adds	r2, r7, r1
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e005      	b.n	8002d34 <console_print_array+0x7c>
            }
            else
            {
                str[j] = '.';
 8002d28:	2314      	movs	r3, #20
 8002d2a:	18fa      	adds	r2, r7, r3
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	18d3      	adds	r3, r2, r3
 8002d30:	222e      	movs	r2, #46	; 0x2e
 8002d32:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < bytes_per_line; j++)
 8002d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d36:	3301      	adds	r3, #1
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3a:	2132      	movs	r1, #50	; 0x32
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbd6      	blt.n	8002cf4 <console_print_array+0x3c>
            }
        }

        str[bytes_per_line] = '\0';
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	2214      	movs	r2, #20
 8002d4c:	18ba      	adds	r2, r7, r2
 8002d4e:	2100      	movs	r1, #0
 8002d50:	54d1      	strb	r1, [r2, r3]

        printf("%8.8lx  ", addr + i);
 8002d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	18d2      	adds	r2, r2, r3
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <console_print_array+0x104>)
 8002d5a:	0011      	movs	r1, r2
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f014 fc25 	bl	80175ac <iprintf>
        for (int j = 0; j < bytes_per_line; j++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d66:	e00f      	b.n	8002d88 <console_print_array+0xd0>
        {
            printf("%2.2x ", data[i + j]);
 8002d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	001a      	movs	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	001a      	movs	r2, r3
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <console_print_array+0x108>)
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f014 fc15 	bl	80175ac <iprintf>
        for (int j = 0; j < bytes_per_line; j++)
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	3301      	adds	r3, #1
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d88:	2332      	movs	r3, #50	; 0x32
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbe9      	blt.n	8002d68 <console_print_array+0xb0>
        }

        printf("|%s|\n", str);
 8002d94:	2314      	movs	r3, #20
 8002d96:	18fa      	adds	r2, r7, r3
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <console_print_array+0x10c>)
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f014 fc05 	bl	80175ac <iprintf>
    for (int i = 0; i < len; i += 16)
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da4:	3310      	adds	r3, #16
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
 8002da8:	1dbb      	adds	r3, r7, #6
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dae:	429a      	cmp	r2, r3
 8002db0:	db8c      	blt.n	8002ccc <console_print_array+0x14>
    }
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b00e      	add	sp, #56	; 0x38
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	0801c28c 	.word	0x0801c28c
 8002dc0:	0801c298 	.word	0x0801c298
 8002dc4:	0801c2a0 	.word	0x0801c2a0

08002dc8 <console_arg_is>:

/** */
static bool console_arg_is(const char *name, const char *arg, uint8_t arg_len)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	701a      	strb	r2, [r3, #0]
    return arg != NULL && arg_len == strlen(name) && strncmp(name, arg, arg_len) == 0;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <console_arg_is+0x3c>
 8002ddc:	1dfb      	adds	r3, r7, #7
 8002dde:	781c      	ldrb	r4, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fd f99a 	bl	800011c <strlen>
 8002de8:	0003      	movs	r3, r0
 8002dea:	429c      	cmp	r4, r3
 8002dec:	d10a      	bne.n	8002e04 <console_arg_is+0x3c>
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f014 fe4d 	bl	8017a96 <strncmp>
 8002dfc:	1e03      	subs	r3, r0, #0
 8002dfe:	d101      	bne.n	8002e04 <console_arg_is+0x3c>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <console_arg_is+0x3e>
 8002e04:	2300      	movs	r3, #0
 8002e06:	1c1a      	adds	r2, r3, #0
 8002e08:	2301      	movs	r3, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	b2db      	uxtb	r3, r3
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b005      	add	sp, #20
 8002e14:	bd90      	pop	{r4, r7, pc}

08002e16 <console_get_parameter>:

/** */
static const char* console_get_parameter( const char *command_string, uint8_t wanted_parameter, uint8_t *parameter_string_length)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	230b      	movs	r3, #11
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	1c0a      	adds	r2, r1, #0
 8002e26:	701a      	strb	r2, [r3, #0]
	uint8_t parameters_found = 0;
 8002e28:	2317      	movs	r3, #23
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
	const char *return_parameter = NULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]

	*parameter_string_length = 0;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]

	while(parameters_found < wanted_parameter)
 8002e3a:	e042      	b.n	8002ec2 <console_get_parameter+0xac>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) != ' ' ) )
		{
			command_string++;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
		while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) != ' ' ) )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <console_get_parameter+0x44>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d1f4      	bne.n	8002e3c <console_get_parameter+0x26>
		}

		/* Find the start of the next string. */
		while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) == ' ' ) )
 8002e52:	e002      	b.n	8002e5a <console_get_parameter+0x44>
		{
			command_string++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
		while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) == ' ' ) )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <console_get_parameter+0x54>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d0f4      	beq.n	8002e54 <console_get_parameter+0x3e>
		}

		/* Was a string found? */
		if( *command_string != 0x00 )
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d030      	beq.n	8002ed4 <console_get_parameter+0xbe>
		{
			/* Is this the start of the required parameter? */
			parameters_found++;
 8002e72:	2117      	movs	r1, #23
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	3201      	adds	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]

			if( parameters_found == wanted_parameter )
 8002e7e:	187a      	adds	r2, r7, r1
 8002e80:	230b      	movs	r3, #11
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	7812      	ldrb	r2, [r2, #0]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d11a      	bne.n	8002ec2 <console_get_parameter+0xac>
			{
				/* How long is the parameter? */
				return_parameter = command_string;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	613b      	str	r3, [r7, #16]
				while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) != ' ' ) )
 8002e90:	e008      	b.n	8002ea4 <console_get_parameter+0x8e>
				{
					( *parameter_string_length )++;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	701a      	strb	r2, [r3, #0]
					command_string++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
				while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) != ' ' ) )
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <console_get_parameter+0x9e>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d1ee      	bne.n	8002e92 <console_get_parameter+0x7c>
				}

				if( *parameter_string_length == 0 )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10d      	bne.n	8002ed8 <console_get_parameter+0xc2>
				{
					return_parameter = NULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
				}

				break;
 8002ec0:	e00a      	b.n	8002ed8 <console_get_parameter+0xc2>
	while(parameters_found < wanted_parameter)
 8002ec2:	2317      	movs	r3, #23
 8002ec4:	18fa      	adds	r2, r7, r3
 8002ec6:	230b      	movs	r3, #11
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d3b7      	bcc.n	8002e42 <console_get_parameter+0x2c>
 8002ed2:	e002      	b.n	8002eda <console_get_parameter+0xc4>
			}
		}
		else
		{
			break;
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	e000      	b.n	8002eda <console_get_parameter+0xc4>
				break;
 8002ed8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return return_parameter;
 8002eda:	693b      	ldr	r3, [r7, #16]
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b006      	add	sp, #24
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <process_command>:

/** */
static void process_command(const char * const input)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	for(int idx = 0; idx < sizeof(commands)/sizeof(command_t); idx++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e028      	b.n	8002f44 <process_command+0x60>
	{
		if(strncmp( commands[idx].command, input, strlen(commands[idx].command)) == 0)
 8002ef2:	491a      	ldr	r1, [pc, #104]	; (8002f5c <process_command+0x78>)
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	189b      	adds	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	585c      	ldr	r4, [r3, r1]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <process_command+0x78>)
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	0013      	movs	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	189b      	adds	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	585b      	ldr	r3, [r3, r1]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7fd f904 	bl	800011c <strlen>
 8002f14:	0002      	movs	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0019      	movs	r1, r3
 8002f1a:	0020      	movs	r0, r4
 8002f1c:	f014 fdbb 	bl	8017a96 <strncmp>
 8002f20:	1e03      	subs	r3, r0, #0
 8002f22:	d10c      	bne.n	8002f3e <process_command+0x5a>
		{
			commands[idx].command_interpreter(input);
 8002f24:	490d      	ldr	r1, [pc, #52]	; (8002f5c <process_command+0x78>)
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	0013      	movs	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	189b      	adds	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	18cb      	adds	r3, r1, r3
 8002f32:	3308      	adds	r3, #8
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	0010      	movs	r0, r2
 8002f3a:	4798      	blx	r3
			return;
 8002f3c:	e00b      	b.n	8002f56 <process_command+0x72>
	for(int idx = 0; idx < sizeof(commands)/sizeof(command_t); idx++)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3301      	adds	r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b0a      	cmp	r3, #10
 8002f48:	d9d3      	bls.n	8002ef2 <process_command+0xe>
		}
	}

	printf("unrecognised command %s\n", input);
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <process_command+0x7c>)
 8002f4e:	0011      	movs	r1, r2
 8002f50:	0018      	movs	r0, r3
 8002f52:	f014 fb2b 	bl	80175ac <iprintf>
}
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b005      	add	sp, #20
 8002f5a:	bd90      	pop	{r4, r7, pc}
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	0801c2a8 	.word	0x0801c2a8

08002f64 <console_init>:

/** */
void console_init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
    memset(input, 0, 60);
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <console_init+0x20>)
 8002f6a:	223c      	movs	r2, #60	; 0x3c
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f013 fc61 	bl	8016836 <memset>
    printf("$ ");
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <console_init+0x24>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f014 fb18 	bl	80175ac <iprintf>
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	20000444 	.word	0x20000444
 8002f88:	0801c2c4 	.word	0x0801c2c4

08002f8c <console_process_key>:

/** */
void console_process_key(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
    if(kbhit())
 8002f92:	f012 fe23 	bl	8015bdc <usb_char_waiting>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d100      	bne.n	8002f9c <console_process_key+0x10>
 8002f9a:	e0a6      	b.n	80030ea <console_process_key+0x15e>
    {
    	int8_t ch = getchar();
 8002f9c:	f013 fbea 	bl	8016774 <getchar>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	701a      	strb	r2, [r3, #0]

        // look for up arrow key
        if ((ch == 0x1b) || (ch == 0x5b))
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	2b1b      	cmp	r3, #27
 8002fae:	d004      	beq.n	8002fba <console_process_key+0x2e>
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	2b5b      	cmp	r3, #91	; 0x5b
 8002fb8:	d126      	bne.n	8003008 <console_process_key+0x7c>
        {
           	ch = getchar();
 8002fba:	f013 fbdb 	bl	8016774 <getchar>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	1dfb      	adds	r3, r7, #7
 8002fc2:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f001 fc8b 	bl	80048e0 <HAL_Delay>
			ch = getchar();
 8002fca:	f013 fbd3 	bl	8016774 <getchar>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	1dfb      	adds	r3, r7, #7
 8002fd2:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f001 fc83 	bl	80048e0 <HAL_Delay>

        	// clear the line to remove the uparrow
            printf(CLL);
 8002fda:	4b45      	ldr	r3, [pc, #276]	; (80030f0 <console_process_key+0x164>)
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f014 fae5 	bl	80175ac <iprintf>
            get_history(input,false);
 8002fe2:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <console_process_key+0x168>)
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff fdf2 	bl	8002bd0 <get_history>
            inputIndex = strlen(input);
 8002fec:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <console_process_key+0x168>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7fd f894 	bl	800011c <strlen>
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <console_process_key+0x16c>)
 8002ff8:	601a      	str	r2, [r3, #0]
            printf("\r$ %s", input);
 8002ffa:	4a3e      	ldr	r2, [pc, #248]	; (80030f4 <console_process_key+0x168>)
 8002ffc:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <console_process_key+0x170>)
 8002ffe:	0011      	movs	r1, r2
 8003000:	0018      	movs	r0, r3
 8003002:	f014 fad3 	bl	80175ac <iprintf>
            return;
 8003006:	e070      	b.n	80030ea <console_process_key+0x15e>
        }
        else
		{
        	putchar(ch);
 8003008:	1dfb      	adds	r3, r7, #7
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b25b      	sxtb	r3, r3
 800300e:	0018      	movs	r0, r3
 8003010:	f014 fae6 	bl	80175e0 <putchar>
		}

        if (ch == '\r')
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b25b      	sxtb	r3, r3
 800301a:	2b0d      	cmp	r3, #13
 800301c:	d12d      	bne.n	800307a <console_process_key+0xee>
        {
            printf("\n");
 800301e:	200a      	movs	r0, #10
 8003020:	f014 fade 	bl	80175e0 <putchar>

            if (inputIndex == 0)
 8003024:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <console_process_key+0x16c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <console_process_key+0xaa>
            {
                printf("$ ");
 800302c:	4b34      	ldr	r3, [pc, #208]	; (8003100 <console_process_key+0x174>)
 800302e:	0018      	movs	r0, r3
 8003030:	f014 fabc 	bl	80175ac <iprintf>
                return;
 8003034:	e059      	b.n	80030ea <console_process_key+0x15e>
            }

			process_command(input);
 8003036:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <console_process_key+0x168>)
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff ff53 	bl	8002ee4 <process_command>

            if(strcmp(input, "history")!=0)
 800303e:	4a31      	ldr	r2, [pc, #196]	; (8003104 <console_process_key+0x178>)
 8003040:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <console_process_key+0x168>)
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f7fd f85f 	bl	8000108 <strcmp>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d003      	beq.n	8003056 <console_process_key+0xca>
            {
                put_history(input);
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <console_process_key+0x168>)
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff fd91 	bl	8002b78 <put_history>
            }

            get_history(NULL, true);
 8003056:	2101      	movs	r1, #1
 8003058:	2000      	movs	r0, #0
 800305a:	f7ff fdb9 	bl	8002bd0 <get_history>

            inputIndex = 0;
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <console_process_key+0x16c>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
            memset(input, 0x00, sizeof(input));
 8003064:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <console_process_key+0x168>)
 8003066:	223c      	movs	r2, #60	; 0x3c
 8003068:	2100      	movs	r1, #0
 800306a:	0018      	movs	r0, r3
 800306c:	f013 fbe3 	bl	8016836 <memset>
            printf("\n$ ");
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <console_process_key+0x17c>)
 8003072:	0018      	movs	r0, r3
 8003074:	f014 fa9a 	bl	80175ac <iprintf>
 8003078:	e037      	b.n	80030ea <console_process_key+0x15e>
        }
        else
        {
            if (ch == '\n')
 800307a:	1dfb      	adds	r3, r7, #7
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	2b0a      	cmp	r3, #10
 8003082:	d032      	beq.n	80030ea <console_process_key+0x15e>
            {
                // ignore carriage returns
            }
            else if (ch == '\b')
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b25b      	sxtb	r3, r3
 800308a:	2b08      	cmp	r3, #8
 800308c:	d114      	bne.n	80030b8 <console_process_key+0x12c>
            {
                // process backspace
                if (inputIndex > 0)
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <console_process_key+0x16c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <console_process_key+0x11e>
                {
                    inputIndex--;
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <console_process_key+0x16c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	1e5a      	subs	r2, r3, #1
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <console_process_key+0x16c>)
 800309e:	601a      	str	r2, [r3, #0]
                    input[inputIndex] = '\0';
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <console_process_key+0x16c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <console_process_key+0x168>)
 80030a6:	2100      	movs	r1, #0
 80030a8:	54d1      	strb	r1, [r2, r3]
                }

                printf(CLL "\r$ %s", input);
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <console_process_key+0x168>)
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <console_process_key+0x180>)
 80030ae:	0011      	movs	r1, r2
 80030b0:	0018      	movs	r0, r3
 80030b2:	f014 fa7b 	bl	80175ac <iprintf>
 80030b6:	e018      	b.n	80030ea <console_process_key+0x15e>
            }
            else if (ch >= ' ' && ch <= '~')
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	2b1f      	cmp	r3, #31
 80030c0:	dd13      	ble.n	80030ea <console_process_key+0x15e>
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b25b      	sxtb	r3, r3
 80030c8:	2b7f      	cmp	r3, #127	; 0x7f
 80030ca:	d00e      	beq.n	80030ea <console_process_key+0x15e>
            {
                // save printable characters
                if (inputIndex < sizeof(input))
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <console_process_key+0x16c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b3b      	cmp	r3, #59	; 0x3b
 80030d2:	d80a      	bhi.n	80030ea <console_process_key+0x15e>
                {
                    input[inputIndex] = ch;
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <console_process_key+0x16c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	1dfa      	adds	r2, r7, #7
 80030da:	7811      	ldrb	r1, [r2, #0]
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <console_process_key+0x168>)
 80030de:	54d1      	strb	r1, [r2, r3]
                    inputIndex++;
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <console_process_key+0x16c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <console_process_key+0x16c>)
 80030e8:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
}
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	0801c2c8 	.word	0x0801c2c8
 80030f4:	20000444 	.word	0x20000444
 80030f8:	200005b0 	.word	0x200005b0
 80030fc:	0801c2d0 	.word	0x0801c2d0
 8003100:	0801c2c4 	.word	0x0801c2c4
 8003104:	0801bf98 	.word	0x0801bf98
 8003108:	0801c2d8 	.word	0x0801c2d8
 800310c:	0801c2dc 	.word	0x0801c2dc

08003110 <FSH_GlobalUnlock>:
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
}

/** */
void FSH_GlobalUnlock(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af02      	add	r7, sp, #8
    uint8_t txbuf[] = {0x98};
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <FSH_GlobalUnlock+0x44>)
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_RESET);
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	015b      	lsls	r3, r3, #5
 8003122:	480d      	ldr	r0, [pc, #52]	; (8003158 <FSH_GlobalUnlock+0x48>)
 8003124:	2200      	movs	r2, #0
 8003126:	0019      	movs	r1, r3
 8003128:	f001 feef 	bl	8004f0a <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, txbuf, txbuf, sizeof(txbuf), 10000L);
 800312c:	1d3a      	adds	r2, r7, #4
 800312e:	1d39      	adds	r1, r7, #4
 8003130:	480a      	ldr	r0, [pc, #40]	; (800315c <FSH_GlobalUnlock+0x4c>)
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <FSH_GlobalUnlock+0x50>)
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2301      	movs	r3, #1
 8003138:	f005 fa1c 	bl	8008574 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	015b      	lsls	r3, r3, #5
 8003140:	4805      	ldr	r0, [pc, #20]	; (8003158 <FSH_GlobalUnlock+0x48>)
 8003142:	2201      	movs	r2, #1
 8003144:	0019      	movs	r1, r3
 8003146:	f001 fee0 	bl	8004f0a <HAL_GPIO_WritePin>
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b002      	add	sp, #8
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	0801c2f0 	.word	0x0801c2f0
 8003158:	48000400 	.word	0x48000400
 800315c:	20000d60 	.word	0x20000d60
 8003160:	00002710 	.word	0x00002710

08003164 <FSH_ReadJedecID>:

/** */
uint32_t FSH_ReadJedecID(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
    uint8_t txbuf[] = {0x9f};
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	4a17      	ldr	r2, [pc, #92]	; (80031cc <FSH_ReadJedecID+0x68>)
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	701a      	strb	r2, [r3, #0]
    uint8_t rxbuf[3];

    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_RESET);
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	015b      	lsls	r3, r3, #5
 8003176:	4816      	ldr	r0, [pc, #88]	; (80031d0 <FSH_ReadJedecID+0x6c>)
 8003178:	2200      	movs	r2, #0
 800317a:	0019      	movs	r1, r3
 800317c:	f001 fec5 	bl	8004f0a <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003180:	b672      	cpsid	i
}
 8003182:	46c0      	nop			; (mov r8, r8)
     __disable_irq();
    HAL_SPI_Transmit(&hspi2, txbuf, sizeof(txbuf), 10000L);
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <FSH_ReadJedecID+0x70>)
 8003186:	1d39      	adds	r1, r7, #4
 8003188:	4813      	ldr	r0, [pc, #76]	; (80031d8 <FSH_ReadJedecID+0x74>)
 800318a:	2201      	movs	r2, #1
 800318c:	f004 ff40 	bl	8008010 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, rxbuf, sizeof(rxbuf), 10000L);
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <FSH_ReadJedecID+0x70>)
 8003192:	0039      	movs	r1, r7
 8003194:	4810      	ldr	r0, [pc, #64]	; (80031d8 <FSH_ReadJedecID+0x74>)
 8003196:	2203      	movs	r2, #3
 8003198:	f005 f89a 	bl	80082d0 <HAL_SPI_Receive>
  __ASM volatile ("cpsie i" : : : "memory");
 800319c:	b662      	cpsie	i
}
 800319e:	46c0      	nop			; (mov r8, r8)
     __enable_irq();
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	015b      	lsls	r3, r3, #5
 80031a4:	480a      	ldr	r0, [pc, #40]	; (80031d0 <FSH_ReadJedecID+0x6c>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	0019      	movs	r1, r3
 80031aa:	f001 feae 	bl	8004f0a <HAL_GPIO_WritePin>

    return rxbuf[0] << 16 | rxbuf[1] << 8 | rxbuf[2];
 80031ae:	003b      	movs	r3, r7
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	041a      	lsls	r2, r3, #16
 80031b4:	003b      	movs	r3, r7
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	4313      	orrs	r3, r2
 80031bc:	003a      	movs	r2, r7
 80031be:	7892      	ldrb	r2, [r2, #2]
 80031c0:	4313      	orrs	r3, r2
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b002      	add	sp, #8
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	0801c2f4 	.word	0x0801c2f4
 80031d0:	48000400 	.word	0x48000400
 80031d4:	00002710 	.word	0x00002710
 80031d8:	20000d60 	.word	0x20000d60

080031dc <FSH_Read>:

/** */
void FSH_Read(uint32_t addr, uint8_t *data, uint16_t len)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	1dbb      	adds	r3, r7, #6
 80031e8:	801a      	strh	r2, [r3, #0]
    uint8_t txbuf[] = {0x03, addr >> 16, addr >> 8, addr};
 80031ea:	2414      	movs	r4, #20
 80031ec:	193b      	adds	r3, r7, r4
 80031ee:	2203      	movs	r2, #3
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	193b      	adds	r3, r7, r4
 80031fa:	705a      	strb	r2, [r3, #1]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	b2da      	uxtb	r2, r3
 8003202:	193b      	adds	r3, r7, r4
 8003204:	709a      	strb	r2, [r3, #2]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	193b      	adds	r3, r7, r4
 800320c:	70da      	strb	r2, [r3, #3]
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_RESET);
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	015b      	lsls	r3, r3, #5
 8003212:	4811      	ldr	r0, [pc, #68]	; (8003258 <FSH_Read+0x7c>)
 8003214:	2200      	movs	r2, #0
 8003216:	0019      	movs	r1, r3
 8003218:	f001 fe77 	bl	8004f0a <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 800321c:	b672      	cpsid	i
}
 800321e:	46c0      	nop			; (mov r8, r8)
     __disable_irq();
    HAL_SPI_Transmit(&hspi2, txbuf, sizeof(txbuf), 10000L);
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <FSH_Read+0x80>)
 8003222:	1939      	adds	r1, r7, r4
 8003224:	480e      	ldr	r0, [pc, #56]	; (8003260 <FSH_Read+0x84>)
 8003226:	2204      	movs	r2, #4
 8003228:	f004 fef2 	bl	8008010 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, data, len, 10000L);
 800322c:	4c0b      	ldr	r4, [pc, #44]	; (800325c <FSH_Read+0x80>)
 800322e:	1dbb      	adds	r3, r7, #6
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	480a      	ldr	r0, [pc, #40]	; (8003260 <FSH_Read+0x84>)
 8003236:	0023      	movs	r3, r4
 8003238:	f005 f84a 	bl	80082d0 <HAL_SPI_Receive>
  __ASM volatile ("cpsie i" : : : "memory");
 800323c:	b662      	cpsie	i
}
 800323e:	46c0      	nop			; (mov r8, r8)
     __enable_irq();
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	015b      	lsls	r3, r3, #5
 8003244:	4804      	ldr	r0, [pc, #16]	; (8003258 <FSH_Read+0x7c>)
 8003246:	2201      	movs	r2, #1
 8003248:	0019      	movs	r1, r3
 800324a:	f001 fe5e 	bl	8004f0a <HAL_GPIO_WritePin>

#ifdef FSH_DEBUG
    fprintf(stderr,"FSH_Read addr=%lx len=%d\n", addr, len);
#endif
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b007      	add	sp, #28
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	48000400 	.word	0x48000400
 800325c:	00002710 	.word	0x00002710
 8003260:	20000d60 	.word	0x20000d60

08003264 <FSH_EraseSector>:

/** */
void FSH_EraseSector(uint32_t addr)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b087      	sub	sp, #28
 8003268:	af02      	add	r7, sp, #8
 800326a:	6078      	str	r0, [r7, #4]
    uint8_t txbuf[] = {0x20, addr >> 16, addr >> 8, addr};
 800326c:	210c      	movs	r1, #12
 800326e:	187b      	adds	r3, r7, r1
 8003270:	2220      	movs	r2, #32
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0c1b      	lsrs	r3, r3, #16
 8003278:	b2da      	uxtb	r2, r3
 800327a:	187b      	adds	r3, r7, r1
 800327c:	705a      	strb	r2, [r3, #1]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	b2da      	uxtb	r2, r3
 8003284:	187b      	adds	r3, r7, r1
 8003286:	709a      	strb	r2, [r3, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	000c      	movs	r4, r1
 800328e:	187b      	adds	r3, r7, r1
 8003290:	70da      	strb	r2, [r3, #3]

    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_RESET);
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	015b      	lsls	r3, r3, #5
 8003296:	480c      	ldr	r0, [pc, #48]	; (80032c8 <FSH_EraseSector+0x64>)
 8003298:	2200      	movs	r2, #0
 800329a:	0019      	movs	r1, r3
 800329c:	f001 fe35 	bl	8004f0a <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, txbuf, txbuf, sizeof(txbuf), 10000L);
 80032a0:	193a      	adds	r2, r7, r4
 80032a2:	1939      	adds	r1, r7, r4
 80032a4:	4809      	ldr	r0, [pc, #36]	; (80032cc <FSH_EraseSector+0x68>)
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <FSH_EraseSector+0x6c>)
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2304      	movs	r3, #4
 80032ac:	f005 f962 	bl	8008574 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	4804      	ldr	r0, [pc, #16]	; (80032c8 <FSH_EraseSector+0x64>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	0019      	movs	r1, r3
 80032ba:	f001 fe26 	bl	8004f0a <HAL_GPIO_WritePin>
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b005      	add	sp, #20
 80032c4:	bd90      	pop	{r4, r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	48000400 	.word	0x48000400
 80032cc:	20000d60 	.word	0x20000d60
 80032d0:	00002710 	.word	0x00002710

080032d4 <FSH_ProgramPage>:
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
}

/** */
void FSH_ProgramPage(uint32_t addr, uint8_t *data, uint16_t len)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	1dbb      	adds	r3, r7, #6
 80032e0:	801a      	strh	r2, [r3, #0]
    uint8_t txbuf[] = {0x02, addr >> 16, addr >> 8, addr};
 80032e2:	2414      	movs	r4, #20
 80032e4:	193b      	adds	r3, r7, r4
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	193b      	adds	r3, r7, r4
 80032f2:	705a      	strb	r2, [r3, #1]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	709a      	strb	r2, [r3, #2]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	193b      	adds	r3, r7, r4
 8003304:	70da      	strb	r2, [r3, #3]

    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_RESET);
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	015b      	lsls	r3, r3, #5
 800330a:	4811      	ldr	r0, [pc, #68]	; (8003350 <FSH_ProgramPage+0x7c>)
 800330c:	2200      	movs	r2, #0
 800330e:	0019      	movs	r1, r3
 8003310:	f001 fdfb 	bl	8004f0a <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8003314:	b672      	cpsid	i
}
 8003316:	46c0      	nop			; (mov r8, r8)
     __disable_irq();
    HAL_SPI_Transmit(&hspi2, txbuf, sizeof(txbuf), 10000L);
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <FSH_ProgramPage+0x80>)
 800331a:	1939      	adds	r1, r7, r4
 800331c:	480e      	ldr	r0, [pc, #56]	; (8003358 <FSH_ProgramPage+0x84>)
 800331e:	2204      	movs	r2, #4
 8003320:	f004 fe76 	bl	8008010 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, data, len, 10000L);
 8003324:	4c0b      	ldr	r4, [pc, #44]	; (8003354 <FSH_ProgramPage+0x80>)
 8003326:	1dbb      	adds	r3, r7, #6
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	480a      	ldr	r0, [pc, #40]	; (8003358 <FSH_ProgramPage+0x84>)
 800332e:	0023      	movs	r3, r4
 8003330:	f004 fe6e 	bl	8008010 <HAL_SPI_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8003334:	b662      	cpsie	i
}
 8003336:	46c0      	nop			; (mov r8, r8)
     __enable_irq();
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	015b      	lsls	r3, r3, #5
 800333c:	4804      	ldr	r0, [pc, #16]	; (8003350 <FSH_ProgramPage+0x7c>)
 800333e:	2201      	movs	r2, #1
 8003340:	0019      	movs	r1, r3
 8003342:	f001 fde2 	bl	8004f0a <HAL_GPIO_WritePin>

#ifdef FSH_DEBUG
    fprintf(stderr,"FSH_ProgramPage addr=%lx len=%d\n", addr, len);
#endif
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b007      	add	sp, #28
 800334c:	bd90      	pop	{r4, r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	48000400 	.word	0x48000400
 8003354:	00002710 	.word	0x00002710
 8003358:	20000d60 	.word	0x20000d60

0800335c <FSH_WriteEnable>:

/** */
void FSH_WriteEnable(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af02      	add	r7, sp, #8
    uint8_t txbuf[] = {0x06};
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <FSH_WriteEnable+0x44>)
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_RESET);
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	015b      	lsls	r3, r3, #5
 800336e:	480d      	ldr	r0, [pc, #52]	; (80033a4 <FSH_WriteEnable+0x48>)
 8003370:	2200      	movs	r2, #0
 8003372:	0019      	movs	r1, r3
 8003374:	f001 fdc9 	bl	8004f0a <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, txbuf, txbuf, sizeof(txbuf), 10000L);
 8003378:	1d3a      	adds	r2, r7, #4
 800337a:	1d39      	adds	r1, r7, #4
 800337c:	480a      	ldr	r0, [pc, #40]	; (80033a8 <FSH_WriteEnable+0x4c>)
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <FSH_WriteEnable+0x50>)
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2301      	movs	r3, #1
 8003384:	f005 f8f6 	bl	8008574 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	015b      	lsls	r3, r3, #5
 800338c:	4805      	ldr	r0, [pc, #20]	; (80033a4 <FSH_WriteEnable+0x48>)
 800338e:	2201      	movs	r2, #1
 8003390:	0019      	movs	r1, r3
 8003392:	f001 fdba 	bl	8004f0a <HAL_GPIO_WritePin>
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b002      	add	sp, #8
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	0801c2fc 	.word	0x0801c2fc
 80033a4:	48000400 	.word	0x48000400
 80033a8:	20000d60 	.word	0x20000d60
 80033ac:	00002710 	.word	0x00002710

080033b0 <FSH_WriteDisable>:

/** */
void FSH_WriteDisable(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af02      	add	r7, sp, #8
    uint8_t txbuf[] = {0x04};
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	4a0e      	ldr	r2, [pc, #56]	; (80033f4 <FSH_WriteDisable+0x44>)
 80033ba:	7812      	ldrb	r2, [r2, #0]
 80033bc:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_RESET);
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	015b      	lsls	r3, r3, #5
 80033c2:	480d      	ldr	r0, [pc, #52]	; (80033f8 <FSH_WriteDisable+0x48>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	0019      	movs	r1, r3
 80033c8:	f001 fd9f 	bl	8004f0a <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, txbuf, txbuf, sizeof(txbuf), 10000L);
 80033cc:	1d3a      	adds	r2, r7, #4
 80033ce:	1d39      	adds	r1, r7, #4
 80033d0:	480a      	ldr	r0, [pc, #40]	; (80033fc <FSH_WriteDisable+0x4c>)
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <FSH_WriteDisable+0x50>)
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2301      	movs	r3, #1
 80033d8:	f005 f8cc 	bl	8008574 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	015b      	lsls	r3, r3, #5
 80033e0:	4805      	ldr	r0, [pc, #20]	; (80033f8 <FSH_WriteDisable+0x48>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	0019      	movs	r1, r3
 80033e6:	f001 fd90 	bl	8004f0a <HAL_GPIO_WritePin>
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b002      	add	sp, #8
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	0801c300 	.word	0x0801c300
 80033f8:	48000400 	.word	0x48000400
 80033fc:	20000d60 	.word	0x20000d60
 8003400:	00002710 	.word	0x00002710

08003404 <FSH_ClearBlockProtectionRegister>:

/** */
void FSH_ClearBlockProtectionRegister(void)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af02      	add	r7, sp, #8
    uint8_t txbuf[] = {0x42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <FSH_ClearBlockProtectionRegister+0x50>)
 800340e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003410:	c313      	stmia	r3!, {r0, r1, r4}
 8003412:	6811      	ldr	r1, [r2, #0]
 8003414:	6019      	str	r1, [r3, #0]
 8003416:	8891      	ldrh	r1, [r2, #4]
 8003418:	8099      	strh	r1, [r3, #4]
 800341a:	7992      	ldrb	r2, [r2, #6]
 800341c:	719a      	strb	r2, [r3, #6]

    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_RESET);
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	015b      	lsls	r3, r3, #5
 8003422:	480d      	ldr	r0, [pc, #52]	; (8003458 <FSH_ClearBlockProtectionRegister+0x54>)
 8003424:	2200      	movs	r2, #0
 8003426:	0019      	movs	r1, r3
 8003428:	f001 fd6f 	bl	8004f0a <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, txbuf, txbuf, sizeof(txbuf), 10000L);
 800342c:	1d3a      	adds	r2, r7, #4
 800342e:	1d39      	adds	r1, r7, #4
 8003430:	480a      	ldr	r0, [pc, #40]	; (800345c <FSH_ClearBlockProtectionRegister+0x58>)
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <FSH_ClearBlockProtectionRegister+0x5c>)
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2313      	movs	r3, #19
 8003438:	f005 f89c 	bl	8008574 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	015b      	lsls	r3, r3, #5
 8003440:	4805      	ldr	r0, [pc, #20]	; (8003458 <FSH_ClearBlockProtectionRegister+0x54>)
 8003442:	2201      	movs	r2, #1
 8003444:	0019      	movs	r1, r3
 8003446:	f001 fd60 	bl	8004f0a <HAL_GPIO_WritePin>
}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b007      	add	sp, #28
 8003450:	bd90      	pop	{r4, r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	0801c304 	.word	0x0801c304
 8003458:	48000400 	.word	0x48000400
 800345c:	20000d60 	.word	0x20000d60
 8003460:	00002710 	.word	0x00002710

08003464 <FSH_ReadStatus>:

/** */
uint8_t FSH_ReadStatus(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af02      	add	r7, sp, #8
    uint8_t txbuf[2] = {0x05, 0};
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	2205      	movs	r2, #5
 800346e:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_RESET);
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	015b      	lsls	r3, r3, #5
 8003474:	480c      	ldr	r0, [pc, #48]	; (80034a8 <FSH_ReadStatus+0x44>)
 8003476:	2200      	movs	r2, #0
 8003478:	0019      	movs	r1, r3
 800347a:	f001 fd46 	bl	8004f0a <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, txbuf, txbuf, sizeof(txbuf), 10000L);
 800347e:	1d3a      	adds	r2, r7, #4
 8003480:	1d39      	adds	r1, r7, #4
 8003482:	480a      	ldr	r0, [pc, #40]	; (80034ac <FSH_ReadStatus+0x48>)
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <FSH_ReadStatus+0x4c>)
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2302      	movs	r3, #2
 800348a:	f005 f873 	bl	8008574 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	015b      	lsls	r3, r3, #5
 8003492:	4805      	ldr	r0, [pc, #20]	; (80034a8 <FSH_ReadStatus+0x44>)
 8003494:	2201      	movs	r2, #1
 8003496:	0019      	movs	r1, r3
 8003498:	f001 fd37 	bl	8004f0a <HAL_GPIO_WritePin>

    return txbuf[1];
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	785b      	ldrb	r3, [r3, #1]
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	48000400 	.word	0x48000400
 80034ac:	20000d60 	.word	0x20000d60
 80034b0:	00002710 	.word	0x00002710

080034b4 <FSH_WaitWhileBusy>:
    return txbuf[1];
}

/** */
void FSH_WaitWhileBusy(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
        HAL_Delay(1);
    }

    printf("op took %ldms\n", HAL_GetTick() - t0);
#else
    while (FSH_ReadStatus()& FSH_STATUS_BUSY)
 80034b8:	e002      	b.n	80034c0 <FSH_WaitWhileBusy+0xc>
    {
        HAL_Delay(1);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f001 fa10 	bl	80048e0 <HAL_Delay>
    while (FSH_ReadStatus()& FSH_STATUS_BUSY)
 80034c0:	f7ff ffd0 	bl	8003464 <FSH_ReadStatus>
 80034c4:	0003      	movs	r3, r0
 80034c6:	001a      	movs	r2, r3
 80034c8:	2301      	movs	r3, #1
 80034ca:	4013      	ands	r3, r2
 80034cc:	d1f5      	bne.n	80034ba <FSH_WaitWhileBusy+0x6>
    }
#endif  
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <block_device_read>:
#include "lfs.h"
#include "main.h"

/** */
static int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	603b      	str	r3, [r7, #0]
	FSH_Read((block * c->block_size + off), (uint8_t*)buffer, size);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	435a      	muls	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	18d3      	adds	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	b292      	uxth	r2, r2
 80034f4:	6839      	ldr	r1, [r7, #0]
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7ff fe70 	bl	80031dc <FSH_Read>
	return 0;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}

08003506 <block_device_prog>:

/** */
static int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]
	FSH_WriteEnable();
 8003514:	f7ff ff22 	bl	800335c <FSH_WriteEnable>
	FSH_ProgramPage((block * c->block_size + off), (uint8_t *)buffer, size);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	435a      	muls	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	18d3      	adds	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	b292      	uxth	r2, r2
 8003528:	6839      	ldr	r1, [r7, #0]
 800352a:	0018      	movs	r0, r3
 800352c:	f7ff fed2 	bl	80032d4 <FSH_ProgramPage>
	FSH_WaitWhileBusy();
 8003530:	f7ff ffc0 	bl	80034b4 <FSH_WaitWhileBusy>
	FSH_WriteDisable();
 8003534:	f7ff ff3c 	bl	80033b0 <FSH_WriteDisable>
	return 0;
 8003538:	2300      	movs	r3, #0
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b004      	add	sp, #16
 8003540:	bd80      	pop	{r7, pc}

08003542 <block_device_erase>:

/** */
static int block_device_erase(const struct lfs_config *c, lfs_block_t block)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
	FSH_WriteEnable();
 800354c:	f7ff ff06 	bl	800335c <FSH_WriteEnable>
	FSH_EraseSector(block * c->block_size);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	4353      	muls	r3, r2
 8003558:	0018      	movs	r0, r3
 800355a:	f7ff fe83 	bl	8003264 <FSH_EraseSector>
	FSH_WaitWhileBusy();
 800355e:	f7ff ffa9 	bl	80034b4 <FSH_WaitWhileBusy>
	FSH_WriteDisable();
 8003562:	f7ff ff25 	bl	80033b0 <FSH_WriteDisable>
	return 0;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <block_device_sync>:

/** */
int block_device_sync(const struct lfs_config *c)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	return 0;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b002      	add	sp, #8
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <fs_init>:

lfs_t lfs;

/** */
void fs_init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
	FSH_GlobalUnlock();
 800358a:	f7ff fdc1 	bl	8003110 <FSH_GlobalUnlock>
	FSH_WriteEnable();
 800358e:	f7ff fee5 	bl	800335c <FSH_WriteEnable>
	FSH_ClearBlockProtectionRegister();
 8003592:	f7ff ff37 	bl	8003404 <FSH_ClearBlockProtectionRegister>
	FSH_WaitWhileBusy();
 8003596:	f7ff ff8d 	bl	80034b4 <FSH_WaitWhileBusy>
	FSH_WriteDisable();
 800359a:	f7ff ff09 	bl	80033b0 <FSH_WriteDisable>

	uint32_t jedec_id = FSH_ReadJedecID();
 800359e:	f7ff fde1 	bl	8003164 <FSH_ReadJedecID>
 80035a2:	0003      	movs	r3, r0
 80035a4:	607b      	str	r3, [r7, #4]
	if(jedec_id != FSH_JEDEC_ID)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <fs_init+0x5c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d005      	beq.n	80035ba <fs_init+0x36>
	{
		printf("Flash memory found with Jedec ID %8.8lx, expected %8.8lx\n", jedec_id, FSH_JEDEC_ID);
 80035ae:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <fs_init+0x5c>)
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <fs_init+0x60>)
 80035b4:	0018      	movs	r0, r3
 80035b6:	f013 fff9 	bl	80175ac <iprintf>
	}

	int err = lfs_mount(&lfs, &lfs_cfg);
 80035ba:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <fs_init+0x64>)
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <fs_init+0x68>)
 80035be:	0011      	movs	r1, r2
 80035c0:	0018      	movs	r0, r3
 80035c2:	f012 f902 	bl	80157ca <lfs_mount>
 80035c6:	0003      	movs	r3, r0
 80035c8:	603b      	str	r3, [r7, #0]

	if (err < 0)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da04      	bge.n	80035da <fs_init+0x56>
	{
		printf("could not mount filesystem\n");
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <fs_init+0x6c>)
 80035d2:	0018      	movs	r0, r3
 80035d4:	f014 f88a 	bl	80176ec <puts>
		return;
 80035d8:	46c0      	nop			; (mov r8, r8)
	}
}
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00bf2642 	.word	0x00bf2642
 80035e4:	0801c318 	.word	0x0801c318
 80035e8:	20000084 	.word	0x20000084
 80035ec:	200008b8 	.word	0x200008b8
 80035f0:	0801c354 	.word	0x0801c354

080035f4 <append_to_file>:

/** */
static void append_to_file(char *filename, char *buffer, int length)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b09b      	sub	sp, #108	; 0x6c
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
	lfs_file_t file;

	lfs_file_open(&lfs, &file, filename, LFS_O_WRONLY | LFS_O_APPEND | LFS_O_CREAT);
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <append_to_file+0x3c>)
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	2414      	movs	r4, #20
 8003606:	1939      	adds	r1, r7, r4
 8003608:	480a      	ldr	r0, [pc, #40]	; (8003634 <append_to_file+0x40>)
 800360a:	f012 f911 	bl	8015830 <lfs_file_open>
	lfs_file_write(&lfs, &file, buffer, length);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	1939      	adds	r1, r7, r4
 8003614:	4807      	ldr	r0, [pc, #28]	; (8003634 <append_to_file+0x40>)
 8003616:	f012 f9a5 	bl	8015964 <lfs_file_write>
	lfs_file_close(&lfs, &file);
 800361a:	193a      	adds	r2, r7, r4
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <append_to_file+0x40>)
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f012 f93d 	bl	80158a0 <lfs_file_close>
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b01b      	add	sp, #108	; 0x6c
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	00000902 	.word	0x00000902
 8003634:	200008b8 	.word	0x200008b8

08003638 <append_to_current_file>:

/** */
void append_to_current_file(char *buffer, int length)
{
 8003638:	b5b0      	push	{r4, r5, r7, lr}
 800363a:	b08a      	sub	sp, #40	; 0x28
 800363c:	af02      	add	r7, sp, #8
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	char filename[16];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003642:	240c      	movs	r4, #12
 8003644:	1939      	adds	r1, r7, r4
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <append_to_current_file+0x50>)
 8003648:	2200      	movs	r2, #0
 800364a:	0018      	movs	r0, r3
 800364c:	f004 fb04 	bl	8007c58 <HAL_RTC_GetDate>
	snprintf(filename, sizeof(filename), "%2.2d_%2.2d_%2.2d", sDate.Date, sDate.Month, sDate.Year);
 8003650:	0022      	movs	r2, r4
 8003652:	18bb      	adds	r3, r7, r2
 8003654:	789b      	ldrb	r3, [r3, #2]
 8003656:	001c      	movs	r4, r3
 8003658:	18bb      	adds	r3, r7, r2
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	0019      	movs	r1, r3
 800365e:	18bb      	adds	r3, r7, r2
 8003660:	78db      	ldrb	r3, [r3, #3]
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <append_to_current_file+0x54>)
 8003664:	2510      	movs	r5, #16
 8003666:	1978      	adds	r0, r7, r5
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	9100      	str	r1, [sp, #0]
 800366c:	0023      	movs	r3, r4
 800366e:	2110      	movs	r1, #16
 8003670:	f014 f920 	bl	80178b4 <sniprintf>

	append_to_file(filename, buffer, length);
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	197b      	adds	r3, r7, r5
 800367a:	0018      	movs	r0, r3
 800367c:	f7ff ffba 	bl	80035f4 <append_to_file>
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b008      	add	sp, #32
 8003686:	bdb0      	pop	{r4, r5, r7, pc}
 8003688:	20000d40 	.word	0x20000d40
 800368c:	0801c370 	.word	0x0801c370

08003690 <nmea_to_decimal_degrees>:
const char * fix_interval = "$PMTK220,10000*2F\r\n";
const char * nmea_output = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n";

/** */
static float nmea_to_decimal_degrees(char *nmea,char nsew)
{
 8003690:	b5b0      	push	{r4, r5, r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	000a      	movs	r2, r1
 800369a:	1cfb      	adds	r3, r7, #3
 800369c:	701a      	strb	r2, [r3, #0]
	float decimal = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
	if(strlen(nmea)>5)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fc fd39 	bl	800011c <strlen>
 80036aa:	0003      	movs	r3, r0
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d946      	bls.n	800373e <nmea_to_decimal_degrees+0xae>
	{
		char integer_part[3+1];
		int digit_count = (nmea[4] == '.' ? 2 : 3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b2e      	cmp	r3, #46	; 0x2e
 80036b8:	d101      	bne.n	80036be <nmea_to_decimal_degrees+0x2e>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e000      	b.n	80036c0 <nmea_to_decimal_degrees+0x30>
 80036be:	2303      	movs	r3, #3
 80036c0:	613b      	str	r3, [r7, #16]
		memcpy(integer_part, nmea, digit_count);
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	240c      	movs	r4, #12
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	0018      	movs	r0, r3
 80036cc:	f013 f8aa 	bl	8016824 <memcpy>
		integer_part[digit_count] = 0;
 80036d0:	0021      	movs	r1, r4
 80036d2:	187a      	adds	r2, r7, r1
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	18d3      	adds	r3, r2, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
		nmea += digit_count;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	18d3      	adds	r3, r2, r3
 80036e2:	607b      	str	r3, [r7, #4]

		decimal = atoi(integer_part) + atof(nmea)/60.0f;
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	0018      	movs	r0, r3
 80036e8:	f013 f827 	bl	801673a <atoi>
 80036ec:	0003      	movs	r3, r0
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7fe fd3c 	bl	800216c <__aeabi_i2d>
 80036f4:	0004      	movs	r4, r0
 80036f6:	000d      	movs	r5, r1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f013 f818 	bl	8016730 <atof>
 8003700:	2200      	movs	r2, #0
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <nmea_to_decimal_degrees+0xb8>)
 8003704:	f7fd fade 	bl	8000cc4 <__aeabi_ddiv>
 8003708:	0002      	movs	r2, r0
 800370a:	000b      	movs	r3, r1
 800370c:	0020      	movs	r0, r4
 800370e:	0029      	movs	r1, r5
 8003710:	f7fc ff9c 	bl	800064c <__aeabi_dadd>
 8003714:	0002      	movs	r2, r0
 8003716:	000b      	movs	r3, r1
 8003718:	0010      	movs	r0, r2
 800371a:	0019      	movs	r1, r3
 800371c:	f7fe fdc4 	bl	80022a8 <__aeabi_d2f>
 8003720:	1c03      	adds	r3, r0, #0
 8003722:	617b      	str	r3, [r7, #20]
		if(nsew == 'W' || nsew == 'S')
 8003724:	1cfb      	adds	r3, r7, #3
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b57      	cmp	r3, #87	; 0x57
 800372a:	d003      	beq.n	8003734 <nmea_to_decimal_degrees+0xa4>
 800372c:	1cfb      	adds	r3, r7, #3
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b53      	cmp	r3, #83	; 0x53
 8003732:	d104      	bne.n	800373e <nmea_to_decimal_degrees+0xae>
		{
			decimal = -decimal;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	0612      	lsls	r2, r2, #24
 800373a:	4053      	eors	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
		}
	}
	return decimal;
 800373e:	697b      	ldr	r3, [r7, #20]
}
 8003740:	1c18      	adds	r0, r3, #0
 8003742:	46bd      	mov	sp, r7
 8003744:	b006      	add	sp, #24
 8003746:	bdb0      	pop	{r4, r5, r7, pc}
 8003748:	404e0000 	.word	0x404e0000

0800374c <set_time_and_date>:

/** */
static void set_time_and_date(char* time, char* date)
{
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af02      	add	r7, sp, #8
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
	int day, month,year;
	sscanf(date,"%2d%2d%2d",&day, &month, &year);
 8003756:	2318      	movs	r3, #24
 8003758:	18fc      	adds	r4, r7, r3
 800375a:	231c      	movs	r3, #28
 800375c:	18fa      	adds	r2, r7, r3
 800375e:	4912      	ldr	r1, [pc, #72]	; (80037a8 <set_time_and_date+0x5c>)
 8003760:	6838      	ldr	r0, [r7, #0]
 8003762:	2314      	movs	r3, #20
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	0023      	movs	r3, r4
 800376a:	f014 f8f7 	bl	801795c <siscanf>
	int hours, minutes, seconds;
	sscanf(time,"%2d%2d%2d",&hours, &minutes, &seconds);
 800376e:	230c      	movs	r3, #12
 8003770:	18fc      	adds	r4, r7, r3
 8003772:	2310      	movs	r3, #16
 8003774:	18fa      	adds	r2, r7, r3
 8003776:	490c      	ldr	r1, [pc, #48]	; (80037a8 <set_time_and_date+0x5c>)
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	2308      	movs	r3, #8
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	0023      	movs	r3, r4
 8003782:	f014 f8eb 	bl	801795c <siscanf>
	set_clock(hours, minutes, seconds, day, month, year);
 8003786:	6938      	ldr	r0, [r7, #16]
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	68bc      	ldr	r4, [r7, #8]
 800378c:	69fd      	ldr	r5, [r7, #28]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	9201      	str	r2, [sp, #4]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	002b      	movs	r3, r5
 8003798:	0022      	movs	r2, r4
 800379a:	f7fe fe0d 	bl	80023b8 <set_clock>
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b008      	add	sp, #32
 80037a4:	bdb0      	pop	{r4, r5, r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	0801c3cc 	.word	0x0801c3cc

080037ac <rx_event_callback>:

/** */
static void rx_event_callback(UART_HandleTypeDef *huart, uint16_t size)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	000a      	movs	r2, r1
 80037b6:	1cbb      	adds	r3, r7, #2
 80037b8:	801a      	strh	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	009a      	lsls	r2, r3, #2
 80037be:	490b      	ldr	r1, [pc, #44]	; (80037ec <rx_event_callback+0x40>)
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <rx_event_callback+0x44>)
 80037c2:	0018      	movs	r0, r3
 80037c4:	f006 fe78 	bl	800a4b8 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <rx_event_callback+0x48>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	0018      	movs	r0, r3
 80037ce:	f001 fbb9 	bl	8004f44 <HAL_GPIO_TogglePin>
	queue_put(queue, rx_buffer,size);
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <rx_event_callback+0x4c>)
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	1cbb      	adds	r3, r7, #2
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <rx_event_callback+0x40>)
 80037dc:	0019      	movs	r1, r3
 80037de:	f000 fdcb 	bl	8004378 <queue_put>
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b002      	add	sp, #8
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	20000934 	.word	0x20000934
 80037f0:	20000dc4 	.word	0x20000dc4
 80037f4:	48000400 	.word	0x48000400
 80037f8:	20000b34 	.word	0x20000b34

080037fc <check_crc>:

/** */
static bool check_crc(uint8_t * buffer, size_t length)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
	uint8_t recv_crc = 0;
 8003806:	230d      	movs	r3, #13
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
	uint8_t calc_crc = 0;
 800380e:	230f      	movs	r3, #15
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i < length - 2; i++)
 8003816:	230e      	movs	r3, #14
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e025      	b.n	800386c <check_crc+0x70>
	{
		if(buffer[i] == '$')
 8003820:	230e      	movs	r3, #14
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b24      	cmp	r3, #36	; 0x24
 800382e:	d104      	bne.n	800383a <check_crc+0x3e>
		{
			calc_crc = 0;
 8003830:	230f      	movs	r3, #15
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e012      	b.n	8003860 <check_crc+0x64>
		}
		else if(buffer[i] == '*')
 800383a:	210e      	movs	r1, #14
 800383c:	187b      	adds	r3, r7, r1
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	18d3      	adds	r3, r2, r3
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b2a      	cmp	r3, #42	; 0x2a
 8003848:	d018      	beq.n	800387c <check_crc+0x80>
		{
			break;
		}
		else
		{
			calc_crc ^= buffer[i];
 800384a:	187b      	adds	r3, r7, r1
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	18d3      	adds	r3, r2, r3
 8003852:	7819      	ldrb	r1, [r3, #0]
 8003854:	220f      	movs	r2, #15
 8003856:	18bb      	adds	r3, r7, r2
 8003858:	18ba      	adds	r2, r7, r2
 800385a:	7812      	ldrb	r2, [r2, #0]
 800385c:	404a      	eors	r2, r1
 800385e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < length - 2; i++)
 8003860:	210e      	movs	r1, #14
 8003862:	187b      	adds	r3, r7, r1
 8003864:	781a      	ldrb	r2, [r3, #0]
 8003866:	187b      	adds	r3, r7, r1
 8003868:	3201      	adds	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	230e      	movs	r3, #14
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	3b02      	subs	r3, #2
 8003876:	429a      	cmp	r2, r3
 8003878:	d3d2      	bcc.n	8003820 <check_crc+0x24>
 800387a:	e000      	b.n	800387e <check_crc+0x82>
			break;
 800387c:	46c0      	nop			; (mov r8, r8)
		}
	}

	recv_crc = strtoul((char*)&buffer[i+1], NULL, 16);
 800387e:	230e      	movs	r3, #14
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	18d3      	adds	r3, r2, r3
 800388a:	2210      	movs	r2, #16
 800388c:	2100      	movs	r1, #0
 800388e:	0018      	movs	r0, r3
 8003890:	f015 f89e 	bl	80189d0 <strtoul>
 8003894:	0002      	movs	r2, r0
 8003896:	210d      	movs	r1, #13
 8003898:	187b      	adds	r3, r7, r1
 800389a:	701a      	strb	r2, [r3, #0]

	return calc_crc == recv_crc;
 800389c:	230f      	movs	r3, #15
 800389e:	18fa      	adds	r2, r7, r3
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	425a      	negs	r2, r3
 80038aa:	4153      	adcs	r3, r2
 80038ac:	b2db      	uxtb	r3, r3
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <rx_error_callback>:

/** */
static void rx_error_callback(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	009a      	lsls	r2, r3, #2
 80038c4:	4904      	ldr	r1, [pc, #16]	; (80038d8 <rx_error_callback+0x20>)
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <rx_error_callback+0x24>)
 80038c8:	0018      	movs	r0, r3
 80038ca:	f006 fdf5 	bl	800a4b8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b002      	add	sp, #8
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	20000934 	.word	0x20000934
 80038dc:	20000dc4 	.word	0x20000dc4

080038e0 <gps_init>:

/** */
void gps_init(void)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, 0);
 80038e4:	2390      	movs	r3, #144	; 0x90
 80038e6:	05db      	lsls	r3, r3, #23
 80038e8:	2200      	movs	r2, #0
 80038ea:	2120      	movs	r1, #32
 80038ec:	0018      	movs	r0, r3
 80038ee:	f001 fb0c 	bl	8004f0a <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80038f2:	23fa      	movs	r3, #250	; 0xfa
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 fff2 	bl	80048e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, 1);
 80038fc:	2390      	movs	r3, #144	; 0x90
 80038fe:	05db      	lsls	r3, r3, #23
 8003900:	2201      	movs	r2, #1
 8003902:	2120      	movs	r1, #32
 8003904:	0018      	movs	r0, r3
 8003906:	f001 fb00 	bl	8004f0a <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800390a:	23fa      	movs	r3, #250	; 0xfa
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	0018      	movs	r0, r3
 8003910:	f000 ffe6 	bl	80048e0 <HAL_Delay>
	gps_set_standby(false);
 8003914:	2000      	movs	r0, #0
 8003916:	f000 fa8f 	bl	8003e38 <gps_set_standby>

	queue = queue_create(4, 512);
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	0019      	movs	r1, r3
 8003920:	2004      	movs	r0, #4
 8003922:	f000 fcd9 	bl	80042d8 <queue_create>
 8003926:	0002      	movs	r2, r0
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <gps_init+0xb4>)
 800392a:	601a      	str	r2, [r3, #0]
	HAL_UART_RegisterRxEventCallback(&huart1, rx_event_callback);
 800392c:	4a1a      	ldr	r2, [pc, #104]	; (8003998 <gps_init+0xb8>)
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <gps_init+0xbc>)
 8003930:	0011      	movs	r1, r2
 8003932:	0018      	movs	r0, r3
 8003934:	f005 fade 	bl	8008ef4 <HAL_UART_RegisterRxEventCallback>

	HAL_UART_RegisterCallback(&huart1, HAL_UART_ERROR_CB_ID, rx_error_callback);
 8003938:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <gps_init+0xc0>)
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <gps_init+0xbc>)
 800393c:	2104      	movs	r1, #4
 800393e:	0018      	movs	r0, r3
 8003940:	f005 fa34 	bl	8008dac <HAL_UART_RegisterCallback>

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	009a      	lsls	r2, r3, #2
 8003948:	4916      	ldr	r1, [pc, #88]	; (80039a4 <gps_init+0xc4>)
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <gps_init+0xbc>)
 800394c:	0018      	movs	r0, r3
 800394e:	f006 fdb3 	bl	800a4b8 <HAL_UARTEx_ReceiveToIdle_IT>

	// configure GPS output format and frequency
	HAL_UART_Transmit(&huart1, (uint8_t*)nmea_output, strlen(nmea_output), -1);
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <gps_init+0xc8>)
 8003954:	681c      	ldr	r4, [r3, #0]
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <gps_init+0xc8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	0018      	movs	r0, r3
 800395c:	f7fc fbde 	bl	800011c <strlen>
 8003960:	0003      	movs	r3, r0
 8003962:	b29a      	uxth	r2, r3
 8003964:	2301      	movs	r3, #1
 8003966:	425b      	negs	r3, r3
 8003968:	480c      	ldr	r0, [pc, #48]	; (800399c <gps_init+0xbc>)
 800396a:	0021      	movs	r1, r4
 800396c:	f005 fb03 	bl	8008f76 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)fix_interval, strlen(fix_interval), -1);
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <gps_init+0xcc>)
 8003972:	681c      	ldr	r4, [r3, #0]
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <gps_init+0xcc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0018      	movs	r0, r3
 800397a:	f7fc fbcf 	bl	800011c <strlen>
 800397e:	0003      	movs	r3, r0
 8003980:	b29a      	uxth	r2, r3
 8003982:	2301      	movs	r3, #1
 8003984:	425b      	negs	r3, r3
 8003986:	4805      	ldr	r0, [pc, #20]	; (800399c <gps_init+0xbc>)
 8003988:	0021      	movs	r1, r4
 800398a:	f005 faf4 	bl	8008f76 <HAL_UART_Transmit>
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	bdb0      	pop	{r4, r5, r7, pc}
 8003994:	20000b34 	.word	0x20000b34
 8003998:	080037ad 	.word	0x080037ad
 800399c:	20000dc4 	.word	0x20000dc4
 80039a0:	080038b9 	.word	0x080038b9
 80039a4:	20000934 	.word	0x20000934
 80039a8:	200000d4 	.word	0x200000d4
 80039ac:	200000d0 	.word	0x200000d0

080039b0 <gps_process_msg>:

/** */
void gps_process_msg(void)
{
 80039b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b2:	46ce      	mov	lr, r9
 80039b4:	4647      	mov	r7, r8
 80039b6:	b580      	push	{r7, lr}
 80039b8:	4c01      	ldr	r4, [pc, #4]	; (80039c0 <gps_process_msg+0x10>)
 80039ba:	44a5      	add	sp, r4
 80039bc:	af08      	add	r7, sp, #32
	static uint8_t buffer[512];

	static bool fix_valid = false;
	while(queue_size(queue))
 80039be:	e215      	b.n	8003dec <gps_process_msg+0x43c>
 80039c0:	fffffdf4 	.word	0xfffffdf4
	{
		queue_get(queue,buffer, sizeof(buffer));
 80039c4:	4bec      	ldr	r3, [pc, #944]	; (8003d78 <gps_process_msg+0x3c8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0092      	lsls	r2, r2, #2
 80039cc:	49eb      	ldr	r1, [pc, #940]	; (8003d7c <gps_process_msg+0x3cc>)
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fd0c 	bl	80043ec <queue_get>
		char longitude[16];
		char speed[16];
		char course[16];
		char valid, ns,ew;

		if(debug)
 80039d4:	4bea      	ldr	r3, [pc, #936]	; (8003d80 <gps_process_msg+0x3d0>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <gps_process_msg+0x38>
		{
			printf("%s\n$ ", buffer);
 80039dc:	4ae7      	ldr	r2, [pc, #924]	; (8003d7c <gps_process_msg+0x3cc>)
 80039de:	4be9      	ldr	r3, [pc, #932]	; (8003d84 <gps_process_msg+0x3d4>)
 80039e0:	0011      	movs	r1, r2
 80039e2:	0018      	movs	r0, r3
 80039e4:	f013 fde2 	bl	80175ac <iprintf>
		}

		if(check_crc(buffer, sizeof(buffer)))
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	009a      	lsls	r2, r3, #2
 80039ec:	4be3      	ldr	r3, [pc, #908]	; (8003d7c <gps_process_msg+0x3cc>)
 80039ee:	0011      	movs	r1, r2
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7ff ff03 	bl	80037fc <check_crc>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d100      	bne.n	80039fc <gps_process_msg+0x4c>
 80039fa:	e1f7      	b.n	8003dec <gps_process_msg+0x43c>
		{
			int n = sscanf((char *)buffer,"$GNRMC,%[^,],%c,%[^,],%c,%[^,],%c,%[^,],%[^,],%[^,]",time, &valid, latitude, &ns,longitude, &ew, speed, course, date);
 80039fc:	2350      	movs	r3, #80	; 0x50
 80039fe:	33ff      	adds	r3, #255	; 0xff
 8003a00:	2210      	movs	r2, #16
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	2108      	movs	r1, #8
 8003a06:	2008      	movs	r0, #8
 8003a08:	1809      	adds	r1, r1, r0
 8003a0a:	19c9      	adds	r1, r1, r7
 8003a0c:	185c      	adds	r4, r3, r1
 8003a0e:	25d0      	movs	r5, #208	; 0xd0
 8003a10:	006d      	lsls	r5, r5, #1
 8003a12:	60fd      	str	r5, [r7, #12]
 8003a14:	0013      	movs	r3, r2
 8003a16:	18ea      	adds	r2, r5, r3
 8003a18:	2108      	movs	r1, #8
 8003a1a:	468c      	mov	ip, r1
 8003a1c:	2108      	movs	r1, #8
 8003a1e:	4688      	mov	r8, r1
 8003a20:	44b8      	add	r8, r7
 8003a22:	44c4      	add	ip, r8
 8003a24:	4462      	add	r2, ip
 8003a26:	4690      	mov	r8, r2
 8003a28:	49d7      	ldr	r1, [pc, #860]	; (8003d88 <gps_process_msg+0x3d8>)
 8003a2a:	48d4      	ldr	r0, [pc, #848]	; (8003d7c <gps_process_msg+0x3cc>)
 8003a2c:	26c8      	movs	r6, #200	; 0xc8
 8003a2e:	0076      	lsls	r6, r6, #1
 8003a30:	18f5      	adds	r5, r6, r3
 8003a32:	2308      	movs	r3, #8
 8003a34:	2208      	movs	r2, #8
 8003a36:	189b      	adds	r3, r3, r2
 8003a38:	19db      	adds	r3, r3, r7
 8003a3a:	18eb      	adds	r3, r5, r3
 8003a3c:	9306      	str	r3, [sp, #24]
 8003a3e:	23a8      	movs	r3, #168	; 0xa8
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	2510      	movs	r5, #16
 8003a44:	195b      	adds	r3, r3, r5
 8003a46:	2208      	movs	r2, #8
 8003a48:	4694      	mov	ip, r2
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	4691      	mov	r9, r2
 8003a4e:	44b9      	add	r9, r7
 8003a50:	44cc      	add	ip, r9
 8003a52:	4463      	add	r3, ip
 8003a54:	9305      	str	r3, [sp, #20]
 8003a56:	23b0      	movs	r3, #176	; 0xb0
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	195b      	adds	r3, r3, r5
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	4694      	mov	ip, r2
 8003a60:	2208      	movs	r2, #8
 8003a62:	4691      	mov	r9, r2
 8003a64:	44b9      	add	r9, r7
 8003a66:	44cc      	add	ip, r9
 8003a68:	4463      	add	r3, ip
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	234e      	movs	r3, #78	; 0x4e
 8003a6e:	33ff      	adds	r3, #255	; 0xff
 8003a70:	195b      	adds	r3, r3, r5
 8003a72:	2208      	movs	r2, #8
 8003a74:	4694      	mov	ip, r2
 8003a76:	2208      	movs	r2, #8
 8003a78:	4691      	mov	r9, r2
 8003a7a:	44b9      	add	r9, r7
 8003a7c:	44cc      	add	ip, r9
 8003a7e:	4463      	add	r3, ip
 8003a80:	9303      	str	r3, [sp, #12]
 8003a82:	23b8      	movs	r3, #184	; 0xb8
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	195b      	adds	r3, r3, r5
 8003a88:	2208      	movs	r2, #8
 8003a8a:	4694      	mov	ip, r2
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	4691      	mov	r9, r2
 8003a90:	44b9      	add	r9, r7
 8003a92:	44cc      	add	ip, r9
 8003a94:	4463      	add	r3, ip
 8003a96:	9302      	str	r3, [sp, #8]
 8003a98:	23a7      	movs	r3, #167	; 0xa7
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	195b      	adds	r3, r3, r5
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	4694      	mov	ip, r2
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	4691      	mov	r9, r2
 8003aa6:	44b9      	add	r9, r7
 8003aa8:	44cc      	add	ip, r9
 8003aaa:	4463      	add	r3, ip
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	23c0      	movs	r3, #192	; 0xc0
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	195b      	adds	r3, r3, r5
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	4694      	mov	ip, r2
 8003ab8:	2208      	movs	r2, #8
 8003aba:	4691      	mov	r9, r2
 8003abc:	44b9      	add	r9, r7
 8003abe:	44cc      	add	ip, r9
 8003ac0:	4463      	add	r3, ip
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	0023      	movs	r3, r4
 8003ac6:	4642      	mov	r2, r8
 8003ac8:	f013 ff48 	bl	801795c <siscanf>
 8003acc:	0003      	movs	r3, r0
 8003ace:	22e2      	movs	r2, #226	; 0xe2
 8003ad0:	0052      	lsls	r2, r2, #1
 8003ad2:	0028      	movs	r0, r5
 8003ad4:	1811      	adds	r1, r2, r0
 8003ad6:	2408      	movs	r4, #8
 8003ad8:	46a4      	mov	ip, r4
 8003ada:	2408      	movs	r4, #8
 8003adc:	46a0      	mov	r8, r4
 8003ade:	44b8      	add	r8, r7
 8003ae0:	44c4      	add	ip, r8
 8003ae2:	4461      	add	r1, ip
 8003ae4:	600b      	str	r3, [r1, #0]

			if(n >= 2 && valid == 'A')
 8003ae6:	0001      	movs	r1, r0
 8003ae8:	1853      	adds	r3, r2, r1
 8003aea:	2208      	movs	r2, #8
 8003aec:	2008      	movs	r0, #8
 8003aee:	1812      	adds	r2, r2, r0
 8003af0:	19d2      	adds	r2, r2, r7
 8003af2:	189a      	adds	r2, r3, r2
 8003af4:	6813      	ldr	r3, [r2, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	dc00      	bgt.n	8003afc <gps_process_msg+0x14c>
 8003afa:	e14d      	b.n	8003d98 <gps_process_msg+0x3e8>
 8003afc:	2350      	movs	r3, #80	; 0x50
 8003afe:	33ff      	adds	r3, #255	; 0xff
 8003b00:	185b      	adds	r3, r3, r1
 8003b02:	2208      	movs	r2, #8
 8003b04:	4694      	mov	ip, r2
 8003b06:	2208      	movs	r2, #8
 8003b08:	4690      	mov	r8, r2
 8003b0a:	44b8      	add	r8, r7
 8003b0c:	44c4      	add	ip, r8
 8003b0e:	4463      	add	r3, ip
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b41      	cmp	r3, #65	; 0x41
 8003b14:	d000      	beq.n	8003b18 <gps_process_msg+0x168>
 8003b16:	e13f      	b.n	8003d98 <gps_process_msg+0x3e8>
			{
				if(!fix_valid)
 8003b18:	4b9c      	ldr	r3, [pc, #624]	; (8003d8c <gps_process_msg+0x3dc>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	4053      	eors	r3, r2
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d02a      	beq.n	8003b7c <gps_process_msg+0x1cc>
				{
					fix_valid = true;
 8003b26:	4b99      	ldr	r3, [pc, #612]	; (8003d8c <gps_process_msg+0x3dc>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
					set_time_and_date(time, date);
 8003b2c:	1873      	adds	r3, r6, r1
 8003b2e:	2208      	movs	r2, #8
 8003b30:	2008      	movs	r0, #8
 8003b32:	1812      	adds	r2, r2, r0
 8003b34:	19d2      	adds	r2, r2, r7
 8003b36:	189a      	adds	r2, r3, r2
 8003b38:	68fd      	ldr	r5, [r7, #12]
 8003b3a:	000c      	movs	r4, r1
 8003b3c:	186b      	adds	r3, r5, r1
 8003b3e:	2108      	movs	r1, #8
 8003b40:	468c      	mov	ip, r1
 8003b42:	2108      	movs	r1, #8
 8003b44:	4688      	mov	r8, r1
 8003b46:	44b8      	add	r8, r7
 8003b48:	44c4      	add	ip, r8
 8003b4a:	4463      	add	r3, ip
 8003b4c:	0011      	movs	r1, r2
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7ff fdfc 	bl	800374c <set_time_and_date>

					if(debug)
 8003b54:	4b8a      	ldr	r3, [pc, #552]	; (8003d80 <gps_process_msg+0x3d0>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00f      	beq.n	8003b7c <gps_process_msg+0x1cc>
					{
						printf("fix data became valid time and date set to %s on %s\n$ ", time, date );
 8003b5c:	1933      	adds	r3, r6, r4
 8003b5e:	2208      	movs	r2, #8
 8003b60:	2108      	movs	r1, #8
 8003b62:	1852      	adds	r2, r2, r1
 8003b64:	19d2      	adds	r2, r2, r7
 8003b66:	189a      	adds	r2, r3, r2
 8003b68:	192b      	adds	r3, r5, r4
 8003b6a:	2108      	movs	r1, #8
 8003b6c:	2008      	movs	r0, #8
 8003b6e:	1809      	adds	r1, r1, r0
 8003b70:	19c9      	adds	r1, r1, r7
 8003b72:	1859      	adds	r1, r3, r1
 8003b74:	4b86      	ldr	r3, [pc, #536]	; (8003d90 <gps_process_msg+0x3e0>)
 8003b76:	0018      	movs	r0, r3
 8003b78:	f013 fd18 	bl	80175ac <iprintf>
					}
				}

				float decimal_latitude = nmea_to_decimal_degrees(latitude, ns);
 8003b7c:	23a7      	movs	r3, #167	; 0xa7
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2510      	movs	r5, #16
 8003b82:	195b      	adds	r3, r3, r5
 8003b84:	2208      	movs	r2, #8
 8003b86:	4694      	mov	ip, r2
 8003b88:	2208      	movs	r2, #8
 8003b8a:	4690      	mov	r8, r2
 8003b8c:	44b8      	add	r8, r7
 8003b8e:	44c4      	add	ip, r8
 8003b90:	4463      	add	r3, ip
 8003b92:	781a      	ldrb	r2, [r3, #0]
 8003b94:	23c0      	movs	r3, #192	; 0xc0
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	195b      	adds	r3, r3, r5
 8003b9a:	2108      	movs	r1, #8
 8003b9c:	468c      	mov	ip, r1
 8003b9e:	2108      	movs	r1, #8
 8003ba0:	4688      	mov	r8, r1
 8003ba2:	44b8      	add	r8, r7
 8003ba4:	44c4      	add	ip, r8
 8003ba6:	4463      	add	r3, ip
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff fd70 	bl	8003690 <nmea_to_decimal_degrees>
 8003bb0:	1c03      	adds	r3, r0, #0
 8003bb2:	24e0      	movs	r4, #224	; 0xe0
 8003bb4:	0064      	lsls	r4, r4, #1
 8003bb6:	1962      	adds	r2, r4, r5
 8003bb8:	2108      	movs	r1, #8
 8003bba:	468c      	mov	ip, r1
 8003bbc:	2108      	movs	r1, #8
 8003bbe:	4688      	mov	r8, r1
 8003bc0:	44b8      	add	r8, r7
 8003bc2:	44c4      	add	ip, r8
 8003bc4:	4462      	add	r2, ip
 8003bc6:	6013      	str	r3, [r2, #0]
				float decimal_longitude = nmea_to_decimal_degrees(longitude, ew);
 8003bc8:	234e      	movs	r3, #78	; 0x4e
 8003bca:	33ff      	adds	r3, #255	; 0xff
 8003bcc:	195b      	adds	r3, r3, r5
 8003bce:	2208      	movs	r2, #8
 8003bd0:	4694      	mov	ip, r2
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	4690      	mov	r8, r2
 8003bd6:	44b8      	add	r8, r7
 8003bd8:	44c4      	add	ip, r8
 8003bda:	4463      	add	r3, ip
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	23b8      	movs	r3, #184	; 0xb8
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	195b      	adds	r3, r3, r5
 8003be4:	2108      	movs	r1, #8
 8003be6:	468c      	mov	ip, r1
 8003be8:	2108      	movs	r1, #8
 8003bea:	4688      	mov	r8, r1
 8003bec:	44b8      	add	r8, r7
 8003bee:	44c4      	add	ip, r8
 8003bf0:	4463      	add	r3, ip
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff fd4b 	bl	8003690 <nmea_to_decimal_degrees>
 8003bfa:	1c03      	adds	r3, r0, #0
 8003bfc:	26de      	movs	r6, #222	; 0xde
 8003bfe:	0076      	lsls	r6, r6, #1
 8003c00:	1972      	adds	r2, r6, r5
 8003c02:	2108      	movs	r1, #8
 8003c04:	468c      	mov	ip, r1
 8003c06:	2108      	movs	r1, #8
 8003c08:	4688      	mov	r8, r1
 8003c0a:	44b8      	add	r8, r7
 8003c0c:	44c4      	add	ip, r8
 8003c0e:	4462      	add	r2, ip
 8003c10:	6013      	str	r3, [r2, #0]
				float decimal_speed = atof(speed);
 8003c12:	23b0      	movs	r3, #176	; 0xb0
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	195b      	adds	r3, r3, r5
 8003c18:	2208      	movs	r2, #8
 8003c1a:	4694      	mov	ip, r2
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	4690      	mov	r8, r2
 8003c20:	44b8      	add	r8, r7
 8003c22:	44c4      	add	ip, r8
 8003c24:	4463      	add	r3, ip
 8003c26:	0018      	movs	r0, r3
 8003c28:	f012 fd82 	bl	8016730 <atof>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	000b      	movs	r3, r1
 8003c30:	0010      	movs	r0, r2
 8003c32:	0019      	movs	r1, r3
 8003c34:	f7fe fb38 	bl	80022a8 <__aeabi_d2f>
 8003c38:	1c03      	adds	r3, r0, #0
 8003c3a:	22dc      	movs	r2, #220	; 0xdc
 8003c3c:	0052      	lsls	r2, r2, #1
 8003c3e:	1952      	adds	r2, r2, r5
 8003c40:	2108      	movs	r1, #8
 8003c42:	2008      	movs	r0, #8
 8003c44:	1809      	adds	r1, r1, r0
 8003c46:	19c9      	adds	r1, r1, r7
 8003c48:	1851      	adds	r1, r2, r1
 8003c4a:	600b      	str	r3, [r1, #0]
				float decimal_course = atof(course);
 8003c4c:	21a8      	movs	r1, #168	; 0xa8
 8003c4e:	0049      	lsls	r1, r1, #1
 8003c50:	194b      	adds	r3, r1, r5
 8003c52:	2208      	movs	r2, #8
 8003c54:	4694      	mov	ip, r2
 8003c56:	2208      	movs	r2, #8
 8003c58:	4690      	mov	r8, r2
 8003c5a:	44b8      	add	r8, r7
 8003c5c:	44c4      	add	ip, r8
 8003c5e:	4463      	add	r3, ip
 8003c60:	0018      	movs	r0, r3
 8003c62:	f012 fd65 	bl	8016730 <atof>
 8003c66:	0002      	movs	r2, r0
 8003c68:	000b      	movs	r3, r1
 8003c6a:	0010      	movs	r0, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	f7fe fb1b 	bl	80022a8 <__aeabi_d2f>
 8003c72:	1c03      	adds	r3, r0, #0
 8003c74:	21da      	movs	r1, #218	; 0xda
 8003c76:	0049      	lsls	r1, r1, #1
 8003c78:	194a      	adds	r2, r1, r5
 8003c7a:	2108      	movs	r1, #8
 8003c7c:	2008      	movs	r0, #8
 8003c7e:	1809      	adds	r1, r1, r0
 8003c80:	19c9      	adds	r1, r1, r7
 8003c82:	1850      	adds	r0, r2, r1
 8003c84:	6003      	str	r3, [r0, #0]
				char buffer[330];
				int length = sprintf(buffer,"%.6s\t%12.8f\t%12.8f\t%12.8f\t%12.8f\n", time, decimal_latitude, decimal_longitude, decimal_speed, decimal_course);
 8003c86:	1962      	adds	r2, r4, r5
 8003c88:	2308      	movs	r3, #8
 8003c8a:	2108      	movs	r1, #8
 8003c8c:	185b      	adds	r3, r3, r1
 8003c8e:	19db      	adds	r3, r3, r7
 8003c90:	18d0      	adds	r0, r2, r3
 8003c92:	6800      	ldr	r0, [r0, #0]
 8003c94:	f7fe fac0 	bl	8002218 <__aeabi_f2d>
 8003c98:	0004      	movs	r4, r0
 8003c9a:	000d      	movs	r5, r1
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	18f2      	adds	r2, r6, r3
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	2108      	movs	r1, #8
 8003ca4:	185b      	adds	r3, r3, r1
 8003ca6:	19db      	adds	r3, r3, r7
 8003ca8:	18d0      	adds	r0, r2, r3
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	f7fe fab4 	bl	8002218 <__aeabi_f2d>
 8003cb0:	61b8      	str	r0, [r7, #24]
 8003cb2:	61f9      	str	r1, [r7, #28]
 8003cb4:	23dc      	movs	r3, #220	; 0xdc
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	2610      	movs	r6, #16
 8003cba:	199b      	adds	r3, r3, r6
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	4694      	mov	ip, r2
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	4690      	mov	r8, r2
 8003cc4:	44b8      	add	r8, r7
 8003cc6:	44c4      	add	ip, r8
 8003cc8:	4463      	add	r3, ip
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	f7fe faa4 	bl	8002218 <__aeabi_f2d>
 8003cd0:	6138      	str	r0, [r7, #16]
 8003cd2:	6179      	str	r1, [r7, #20]
 8003cd4:	21da      	movs	r1, #218	; 0xda
 8003cd6:	0049      	lsls	r1, r1, #1
 8003cd8:	198b      	adds	r3, r1, r6
 8003cda:	2208      	movs	r2, #8
 8003cdc:	4694      	mov	ip, r2
 8003cde:	2208      	movs	r2, #8
 8003ce0:	4690      	mov	r8, r2
 8003ce2:	44b8      	add	r8, r7
 8003ce4:	44c4      	add	ip, r8
 8003ce6:	4463      	add	r3, ip
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	f7fe fa95 	bl	8002218 <__aeabi_f2d>
 8003cee:	6038      	str	r0, [r7, #0]
 8003cf0:	6079      	str	r1, [r7, #4]
 8003cf2:	21d0      	movs	r1, #208	; 0xd0
 8003cf4:	0049      	lsls	r1, r1, #1
 8003cf6:	0030      	movs	r0, r6
 8003cf8:	1809      	adds	r1, r1, r0
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	19db      	adds	r3, r3, r7
 8003d02:	18ce      	adds	r6, r1, r3
 8003d04:	4923      	ldr	r1, [pc, #140]	; (8003d94 <gps_process_msg+0x3e4>)
 8003d06:	2308      	movs	r3, #8
 8003d08:	18c0      	adds	r0, r0, r3
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	469c      	mov	ip, r3
 8003d0e:	44bc      	add	ip, r7
 8003d10:	4460      	add	r0, ip
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	9206      	str	r2, [sp, #24]
 8003d18:	9307      	str	r3, [sp, #28]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	9204      	str	r2, [sp, #16]
 8003d20:	9305      	str	r3, [sp, #20]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	9202      	str	r2, [sp, #8]
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	9400      	str	r4, [sp, #0]
 8003d2c:	9501      	str	r5, [sp, #4]
 8003d2e:	0032      	movs	r2, r6
 8003d30:	f013 fdf4 	bl	801791c <siprintf>
 8003d34:	0003      	movs	r3, r0
 8003d36:	22d8      	movs	r2, #216	; 0xd8
 8003d38:	0052      	lsls	r2, r2, #1
 8003d3a:	2010      	movs	r0, #16
 8003d3c:	1811      	adds	r1, r2, r0
 8003d3e:	2408      	movs	r4, #8
 8003d40:	46a4      	mov	ip, r4
 8003d42:	2408      	movs	r4, #8
 8003d44:	46a0      	mov	r8, r4
 8003d46:	44b8      	add	r8, r7
 8003d48:	44c4      	add	ip, r8
 8003d4a:	4461      	add	r1, ip
 8003d4c:	600b      	str	r3, [r1, #0]

				append_to_current_file(buffer, length);
 8003d4e:	0001      	movs	r1, r0
 8003d50:	1853      	adds	r3, r2, r1
 8003d52:	2208      	movs	r2, #8
 8003d54:	4694      	mov	ip, r2
 8003d56:	2208      	movs	r2, #8
 8003d58:	4690      	mov	r8, r2
 8003d5a:	44b8      	add	r8, r7
 8003d5c:	44c4      	add	ip, r8
 8003d5e:	4463      	add	r3, ip
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2308      	movs	r3, #8
 8003d64:	18cb      	adds	r3, r1, r3
 8003d66:	2108      	movs	r1, #8
 8003d68:	468c      	mov	ip, r1
 8003d6a:	44bc      	add	ip, r7
 8003d6c:	4463      	add	r3, ip
 8003d6e:	0011      	movs	r1, r2
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff fc61 	bl	8003638 <append_to_current_file>
 8003d76:	e00f      	b.n	8003d98 <gps_process_msg+0x3e8>
 8003d78:	20000b34 	.word	0x20000b34
 8003d7c:	20000b3c 	.word	0x20000b3c
 8003d80:	20000b38 	.word	0x20000b38
 8003d84:	0801c3d8 	.word	0x0801c3d8
 8003d88:	0801c3e0 	.word	0x0801c3e0
 8003d8c:	20000d3c 	.word	0x20000d3c
 8003d90:	0801c414 	.word	0x0801c414
 8003d94:	0801c44c 	.word	0x0801c44c
			}

			if(n < 2 || valid != 'A')
 8003d98:	23e2      	movs	r3, #226	; 0xe2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	2108      	movs	r1, #8
 8003da2:	468c      	mov	ip, r1
 8003da4:	2108      	movs	r1, #8
 8003da6:	4688      	mov	r8, r1
 8003da8:	44b8      	add	r8, r7
 8003daa:	44c4      	add	ip, r8
 8003dac:	4463      	add	r3, ip
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	dd0c      	ble.n	8003dce <gps_process_msg+0x41e>
 8003db4:	2350      	movs	r3, #80	; 0x50
 8003db6:	33ff      	adds	r3, #255	; 0xff
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	2208      	movs	r2, #8
 8003dbc:	4694      	mov	ip, r2
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	4690      	mov	r8, r2
 8003dc2:	44b8      	add	r8, r7
 8003dc4:	44c4      	add	ip, r8
 8003dc6:	4463      	add	r3, ip
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b41      	cmp	r3, #65	; 0x41
 8003dcc:	d00e      	beq.n	8003dec <gps_process_msg+0x43c>
			{
				if(fix_valid)
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <gps_process_msg+0x474>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <gps_process_msg+0x43c>
				{
					fix_valid = false;
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <gps_process_msg+0x474>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
					if(debug)
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <gps_process_msg+0x478>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <gps_process_msg+0x43c>
					{
						printf("fix no longer valid\n$ ");
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <gps_process_msg+0x47c>)
 8003de6:	0018      	movs	r0, r3
 8003de8:	f013 fbe0 	bl	80175ac <iprintf>
	while(queue_size(queue))
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <gps_process_msg+0x480>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f000 fb27 	bl	8004444 <queue_size>
 8003df6:	1e03      	subs	r3, r0, #0
 8003df8:	d000      	beq.n	8003dfc <gps_process_msg+0x44c>
 8003dfa:	e5e3      	b.n	80039c4 <gps_process_msg+0x14>
			}
		}
	}

	// turn on an LED when fix obtained
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !gps_get_fix_obtained());
 8003dfc:	f000 f833 	bl	8003e66 <gps_get_fix_obtained>
 8003e00:	0003      	movs	r3, r0
 8003e02:	001a      	movs	r2, r3
 8003e04:	2301      	movs	r3, #1
 8003e06:	4053      	eors	r3, r2
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <gps_process_msg+0x484>)
 8003e0e:	2102      	movs	r1, #2
 8003e10:	0018      	movs	r0, r3
 8003e12:	f001 f87a 	bl	8004f0a <HAL_GPIO_WritePin>
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b07b      	add	sp, #492	; 0x1ec
 8003e1c:	bcc0      	pop	{r6, r7}
 8003e1e:	46b9      	mov	r9, r7
 8003e20:	46b0      	mov	r8, r6
 8003e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e24:	20000d3c 	.word	0x20000d3c
 8003e28:	20000b38 	.word	0x20000b38
 8003e2c:	0801c470 	.word	0x0801c470
 8003e30:	20000b34 	.word	0x20000b34
 8003e34:	48000400 	.word	0x48000400

08003e38 <gps_set_standby>:

/** */
void gps_set_standby(bool standby)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	0002      	movs	r2, r0
 8003e40:	1dfb      	adds	r3, r7, #7
 8003e42:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPS_SB_GPIO_Port, GPS_SB_Pin, !standby);
 8003e44:	1dfb      	adds	r3, r7, #7
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4053      	eors	r3, r2
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	001a      	movs	r2, r3
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	0059      	lsls	r1, r3, #1
 8003e54:	2390      	movs	r3, #144	; 0x90
 8003e56:	05db      	lsls	r3, r3, #23
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f001 f856 	bl	8004f0a <HAL_GPIO_WritePin>
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b002      	add	sp, #8
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <gps_get_fix_obtained>:

/** */
bool gps_get_fix_obtained(void)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPS_FIX_GPIO_Port, GPS_FIX_Pin);
 8003e6a:	2390      	movs	r3, #144	; 0x90
 8003e6c:	05db      	lsls	r3, r3, #23
 8003e6e:	2180      	movs	r1, #128	; 0x80
 8003e70:	0018      	movs	r0, r3
 8003e72:	f001 f82d 	bl	8004ed0 <HAL_GPIO_ReadPin>
 8003e76:	0003      	movs	r3, r0
 8003e78:	1e5a      	subs	r2, r3, #1
 8003e7a:	4193      	sbcs	r3, r2
 8003e7c:	b2db      	uxtb	r3, r3
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <gps_set_debug>:

/** */
void gps_set_debug(bool dbg)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	1dfb      	adds	r3, r7, #7
 8003e8e:	701a      	strb	r2, [r3, #0]
	debug = dbg;
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <gps_set_debug+0x1c>)
 8003e92:	1dfa      	adds	r2, r7, #7
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	701a      	strb	r2, [r3, #0]
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000b38 	.word	0x20000b38

08003ea4 <_read>:
#include "usbd_core.h"
#include "usbd_cdc_if.h"

// read from usb serial port
int _read(int file, char *data, int len)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
	while(!usb_char_waiting())
 8003eb0:	e002      	b.n	8003eb8 <_read+0x14>
	{
		HAL_Delay(10);
 8003eb2:	200a      	movs	r0, #10
 8003eb4:	f000 fd14 	bl	80048e0 <HAL_Delay>
	while(!usb_char_waiting())
 8003eb8:	f011 fe90 	bl	8015bdc <usb_char_waiting>
 8003ebc:	1e03      	subs	r3, r0, #0
 8003ebe:	d0f8      	beq.n	8003eb2 <_read+0xe>
	}

    *data = usb_read_char();
 8003ec0:	f011 fea0 	bl	8015c04 <usb_read_char>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	701a      	strb	r2, [r3, #0]
	return 1;
 8003ecc:	2301      	movs	r3, #1
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b004      	add	sp, #16
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <_write>:

// write to usb serial port
int _write(int file, char *ptr, int len)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
	if(usb_is_configured())
 8003ee2:	f011 feaf 	bl	8015c44 <usb_is_configured>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d006      	beq.n	8003ef8 <_write+0x22>
	{
		usb_write_chars(ptr, len);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	0011      	movs	r1, r2
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f011 feb0 	bl	8015c58 <usb_write_chars>
	}

	return len;
 8003ef8:	687b      	ldr	r3, [r7, #4]
}
 8003efa:	0018      	movs	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b004      	add	sp, #16
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f0a:	f000 fc85 	bl	8004818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f0e:	f000 f839 	bl	8003f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f12:	f000 f935 	bl	8004180 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8003f16:	f011 fe2d 	bl	8015b74 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8003f1a:	f000 f8c3 	bl	80040a4 <MX_SPI2_Init>
  MX_RTC_Init();
 8003f1e:	f000 f899 	bl	8004054 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8003f22:	f000 f8fd 	bl	8004120 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdin, NULL, _IONBF, 0);
 8003f26:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <main+0x7c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6858      	ldr	r0, [r3, #4]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2202      	movs	r2, #2
 8003f30:	2100      	movs	r1, #0
 8003f32:	f013 fbf7 	bl	8017724 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <main+0x7c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6898      	ldr	r0, [r3, #8]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2202      	movs	r2, #2
 8003f40:	2100      	movs	r1, #0
 8003f42:	f013 fbef 	bl	8017724 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <main+0x7c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68d8      	ldr	r0, [r3, #12]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2202      	movs	r2, #2
 8003f50:	2100      	movs	r1, #0
 8003f52:	f013 fbe7 	bl	8017724 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int delay =0; delay < 50; delay++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	e009      	b.n	8003f70 <main+0x6c>
	  {
			if(usb_is_configured())
 8003f5c:	f011 fe72 	bl	8015c44 <usb_is_configured>
 8003f60:	1e03      	subs	r3, r0, #0
 8003f62:	d109      	bne.n	8003f78 <main+0x74>
			{
				break;
			}
			HAL_Delay(100);
 8003f64:	2064      	movs	r0, #100	; 0x64
 8003f66:	f000 fcbb 	bl	80048e0 <HAL_Delay>
	  for(int delay =0; delay < 50; delay++)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	607b      	str	r3, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b31      	cmp	r3, #49	; 0x31
 8003f74:	ddf2      	ble.n	8003f5c <main+0x58>
 8003f76:	e000      	b.n	8003f7a <main+0x76>
				break;
 8003f78:	46c0      	nop			; (mov r8, r8)
	  }
	  main_task();
 8003f7a:	f000 f993 	bl	80042a4 <main_task>
	  for(int delay =0; delay < 50; delay++)
 8003f7e:	e7ea      	b.n	8003f56 <main+0x52>
 8003f80:	20000254 	.word	0x20000254

08003f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b099      	sub	sp, #100	; 0x64
 8003f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8a:	242c      	movs	r4, #44	; 0x2c
 8003f8c:	193b      	adds	r3, r7, r4
 8003f8e:	0018      	movs	r0, r3
 8003f90:	2334      	movs	r3, #52	; 0x34
 8003f92:	001a      	movs	r2, r3
 8003f94:	2100      	movs	r1, #0
 8003f96:	f012 fc4e 	bl	8016836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f9a:	231c      	movs	r3, #28
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	001a      	movs	r2, r3
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	f012 fc46 	bl	8016836 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003faa:	003b      	movs	r3, r7
 8003fac:	0018      	movs	r0, r3
 8003fae:	231c      	movs	r3, #28
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	f012 fc3f 	bl	8016836 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fb8:	0021      	movs	r1, r4
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	2202      	movs	r2, #2
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	0252      	lsls	r2, r2, #9
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	0352      	lsls	r2, r2, #13
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f002 fe1b 	bl	8006c20 <HAL_RCC_OscConfig>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d001      	beq.n	8003ff2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003fee:	f000 f953 	bl	8004298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ff2:	211c      	movs	r1, #28
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004000:	187b      	adds	r3, r7, r1
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004006:	187b      	adds	r3, r7, r1
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800400c:	187b      	adds	r3, r7, r1
 800400e:	2101      	movs	r1, #1
 8004010:	0018      	movs	r0, r3
 8004012:	f003 f98b 	bl	800732c <HAL_RCC_ClockConfig>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d001      	beq.n	800401e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800401a:	f000 f93d 	bl	8004298 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800401e:	003b      	movs	r3, r7
 8004020:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <SystemClock_Config+0xcc>)
 8004022:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004024:	003b      	movs	r3, r7
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800402a:	003b      	movs	r3, r7
 800402c:	22c0      	movs	r2, #192	; 0xc0
 800402e:	0092      	lsls	r2, r2, #2
 8004030:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004032:	003b      	movs	r3, r7
 8004034:	2280      	movs	r2, #128	; 0x80
 8004036:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004038:	003b      	movs	r3, r7
 800403a:	0018      	movs	r0, r3
 800403c:	f003 fae2 	bl	8007604 <HAL_RCCEx_PeriphCLKConfig>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004044:	f000 f928 	bl	8004298 <Error_Handler>
  }
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b019      	add	sp, #100	; 0x64
 800404e:	bd90      	pop	{r4, r7, pc}
 8004050:	00030001 	.word	0x00030001

08004054 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <MX_RTC_Init+0x48>)
 800405a:	4a11      	ldr	r2, [pc, #68]	; (80040a0 <MX_RTC_Init+0x4c>)
 800405c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <MX_RTC_Init+0x48>)
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 125;
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <MX_RTC_Init+0x48>)
 8004066:	227d      	movs	r2, #125	; 0x7d
 8004068:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2000;
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <MX_RTC_Init+0x48>)
 800406c:	22fa      	movs	r2, #250	; 0xfa
 800406e:	00d2      	lsls	r2, r2, #3
 8004070:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <MX_RTC_Init+0x48>)
 8004074:	2200      	movs	r2, #0
 8004076:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <MX_RTC_Init+0x48>)
 800407a:	2200      	movs	r2, #0
 800407c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <MX_RTC_Init+0x48>)
 8004080:	2200      	movs	r2, #0
 8004082:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <MX_RTC_Init+0x48>)
 8004086:	0018      	movs	r0, r3
 8004088:	f003 fbba 	bl	8007800 <HAL_RTC_Init>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8004090:	f000 f902 	bl	8004298 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	20000d40 	.word	0x20000d40
 80040a0:	40002800 	.word	0x40002800

080040a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <MX_SPI2_Init+0x74>)
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <MX_SPI2_Init+0x78>)
 80040ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040ae:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <MX_SPI2_Init+0x74>)
 80040b0:	2282      	movs	r2, #130	; 0x82
 80040b2:	0052      	lsls	r2, r2, #1
 80040b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040b6:	4b18      	ldr	r3, [pc, #96]	; (8004118 <MX_SPI2_Init+0x74>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040bc:	4b16      	ldr	r3, [pc, #88]	; (8004118 <MX_SPI2_Init+0x74>)
 80040be:	22e0      	movs	r2, #224	; 0xe0
 80040c0:	00d2      	lsls	r2, r2, #3
 80040c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <MX_SPI2_Init+0x74>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <MX_SPI2_Init+0x74>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <MX_SPI2_Init+0x74>)
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	0092      	lsls	r2, r2, #2
 80040d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <MX_SPI2_Init+0x74>)
 80040da:	2208      	movs	r2, #8
 80040dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <MX_SPI2_Init+0x74>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <MX_SPI2_Init+0x74>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <MX_SPI2_Init+0x74>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <MX_SPI2_Init+0x74>)
 80040f2:	2207      	movs	r2, #7
 80040f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <MX_SPI2_Init+0x74>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <MX_SPI2_Init+0x74>)
 80040fe:	2208      	movs	r2, #8
 8004100:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <MX_SPI2_Init+0x74>)
 8004104:	0018      	movs	r0, r3
 8004106:	f003 fecb 	bl	8007ea0 <HAL_SPI_Init>
 800410a:	1e03      	subs	r3, r0, #0
 800410c:	d001      	beq.n	8004112 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800410e:	f000 f8c3 	bl	8004298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000d60 	.word	0x20000d60
 800411c:	40003800 	.word	0x40003800

08004120 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004124:	4b14      	ldr	r3, [pc, #80]	; (8004178 <MX_USART1_UART_Init+0x58>)
 8004126:	4a15      	ldr	r2, [pc, #84]	; (800417c <MX_USART1_UART_Init+0x5c>)
 8004128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <MX_USART1_UART_Init+0x58>)
 800412c:	2296      	movs	r2, #150	; 0x96
 800412e:	0192      	lsls	r2, r2, #6
 8004130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004132:	4b11      	ldr	r3, [pc, #68]	; (8004178 <MX_USART1_UART_Init+0x58>)
 8004134:	2200      	movs	r2, #0
 8004136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004138:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <MX_USART1_UART_Init+0x58>)
 800413a:	2200      	movs	r2, #0
 800413c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <MX_USART1_UART_Init+0x58>)
 8004140:	2200      	movs	r2, #0
 8004142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <MX_USART1_UART_Init+0x58>)
 8004146:	220c      	movs	r2, #12
 8004148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <MX_USART1_UART_Init+0x58>)
 800414c:	2200      	movs	r2, #0
 800414e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <MX_USART1_UART_Init+0x58>)
 8004152:	2200      	movs	r2, #0
 8004154:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <MX_USART1_UART_Init+0x58>)
 8004158:	2200      	movs	r2, #0
 800415a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <MX_USART1_UART_Init+0x58>)
 800415e:	2200      	movs	r2, #0
 8004160:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <MX_USART1_UART_Init+0x58>)
 8004164:	0018      	movs	r0, r3
 8004166:	f004 fdbb 	bl	8008ce0 <HAL_UART_Init>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d001      	beq.n	8004172 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800416e:	f000 f893 	bl	8004298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000dc4 	.word	0x20000dc4
 800417c:	40013800 	.word	0x40013800

08004180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004180:	b590      	push	{r4, r7, lr}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004186:	240c      	movs	r4, #12
 8004188:	193b      	adds	r3, r7, r4
 800418a:	0018      	movs	r0, r3
 800418c:	2314      	movs	r3, #20
 800418e:	001a      	movs	r2, r3
 8004190:	2100      	movs	r1, #0
 8004192:	f012 fb50 	bl	8016836 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004196:	4b3d      	ldr	r3, [pc, #244]	; (800428c <MX_GPIO_Init+0x10c>)
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	4b3c      	ldr	r3, [pc, #240]	; (800428c <MX_GPIO_Init+0x10c>)
 800419c:	2180      	movs	r1, #128	; 0x80
 800419e:	03c9      	lsls	r1, r1, #15
 80041a0:	430a      	orrs	r2, r1
 80041a2:	615a      	str	r2, [r3, #20]
 80041a4:	4b39      	ldr	r3, [pc, #228]	; (800428c <MX_GPIO_Init+0x10c>)
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	03db      	lsls	r3, r3, #15
 80041ac:	4013      	ands	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b2:	4b36      	ldr	r3, [pc, #216]	; (800428c <MX_GPIO_Init+0x10c>)
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	4b35      	ldr	r3, [pc, #212]	; (800428c <MX_GPIO_Init+0x10c>)
 80041b8:	2180      	movs	r1, #128	; 0x80
 80041ba:	0289      	lsls	r1, r1, #10
 80041bc:	430a      	orrs	r2, r1
 80041be:	615a      	str	r2, [r3, #20]
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <MX_GPIO_Init+0x10c>)
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	029b      	lsls	r3, r3, #10
 80041c8:	4013      	ands	r3, r2
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <MX_GPIO_Init+0x10c>)
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	4b2e      	ldr	r3, [pc, #184]	; (800428c <MX_GPIO_Init+0x10c>)
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	02c9      	lsls	r1, r1, #11
 80041d8:	430a      	orrs	r2, r1
 80041da:	615a      	str	r2, [r3, #20]
 80041dc:	4b2b      	ldr	r3, [pc, #172]	; (800428c <MX_GPIO_Init+0x10c>)
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	02db      	lsls	r3, r3, #11
 80041e4:	4013      	ands	r3, r2
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 80041ea:	2390      	movs	r3, #144	; 0x90
 80041ec:	05db      	lsls	r3, r3, #23
 80041ee:	2200      	movs	r2, #0
 80041f0:	2120      	movs	r1, #32
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 fe89 	bl	8004f0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|FLASH_NSS_Pin, GPIO_PIN_SET);
 80041f8:	4925      	ldr	r1, [pc, #148]	; (8004290 <MX_GPIO_Init+0x110>)
 80041fa:	4b26      	ldr	r3, [pc, #152]	; (8004294 <MX_GPIO_Init+0x114>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 fe83 	bl	8004f0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_SB_GPIO_Port, GPS_SB_Pin, GPIO_PIN_SET);
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	0059      	lsls	r1, r3, #1
 8004208:	2390      	movs	r3, #144	; 0x90
 800420a:	05db      	lsls	r3, r3, #23
 800420c:	2201      	movs	r2, #1
 800420e:	0018      	movs	r0, r3
 8004210:	f000 fe7b 	bl	8004f0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPS_RST_Pin GPS_SB_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|GPS_SB_Pin;
 8004214:	193b      	adds	r3, r7, r4
 8004216:	2290      	movs	r2, #144	; 0x90
 8004218:	0052      	lsls	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800421c:	193b      	adds	r3, r7, r4
 800421e:	2201      	movs	r2, #1
 8004220:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	193b      	adds	r3, r7, r4
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004228:	193b      	adds	r3, r7, r4
 800422a:	2200      	movs	r2, #0
 800422c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422e:	193a      	adds	r2, r7, r4
 8004230:	2390      	movs	r3, #144	; 0x90
 8004232:	05db      	lsls	r3, r3, #23
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f000 fcd2 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_TM_Pin GPS_FIX_Pin */
  GPIO_InitStruct.Pin = GPS_TM_Pin|GPS_FIX_Pin;
 800423c:	193b      	adds	r3, r7, r4
 800423e:	22c0      	movs	r2, #192	; 0xc0
 8004240:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004242:	193b      	adds	r3, r7, r4
 8004244:	2200      	movs	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	193b      	adds	r3, r7, r4
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800424e:	193a      	adds	r2, r7, r4
 8004250:	2390      	movs	r3, #144	; 0x90
 8004252:	05db      	lsls	r3, r3, #23
 8004254:	0011      	movs	r1, r2
 8004256:	0018      	movs	r0, r3
 8004258:	f000 fcc2 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin FLASH_NSS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|FLASH_NSS_Pin;
 800425c:	0021      	movs	r1, r4
 800425e:	187b      	adds	r3, r7, r1
 8004260:	4a0b      	ldr	r2, [pc, #44]	; (8004290 <MX_GPIO_Init+0x110>)
 8004262:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004264:	187b      	adds	r3, r7, r1
 8004266:	2201      	movs	r2, #1
 8004268:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	187b      	adds	r3, r7, r1
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	187b      	adds	r3, r7, r1
 8004272:	2200      	movs	r2, #0
 8004274:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004276:	187b      	adds	r3, r7, r1
 8004278:	4a06      	ldr	r2, [pc, #24]	; (8004294 <MX_GPIO_Init+0x114>)
 800427a:	0019      	movs	r1, r3
 800427c:	0010      	movs	r0, r2
 800427e:	f000 fcaf 	bl	8004be0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	b009      	add	sp, #36	; 0x24
 8004288:	bd90      	pop	{r4, r7, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	40021000 	.word	0x40021000
 8004290:	00001003 	.word	0x00001003
 8004294:	48000400 	.word	0x48000400

08004298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800429c:	b672      	cpsid	i
}
 800429e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <Error_Handler+0x8>
	...

080042a4 <main_task>:
#include "gps.h"
#include "fs.h"

/** */
void main_task(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
	printf(CLS "GPSRecorder built at %s on %s\n\n", __TIME__, __DATE__);
 80042a8:	4a08      	ldr	r2, [pc, #32]	; (80042cc <main_task+0x28>)
 80042aa:	4909      	ldr	r1, [pc, #36]	; (80042d0 <main_task+0x2c>)
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <main_task+0x30>)
 80042ae:	0018      	movs	r0, r3
 80042b0:	f013 f97c 	bl	80175ac <iprintf>

	console_init();
 80042b4:	f7fe fe56 	bl	8002f64 <console_init>
	fs_init();
 80042b8:	f7ff f964 	bl	8003584 <fs_init>
	gps_init();
 80042bc:	f7ff fb10 	bl	80038e0 <gps_init>

    while (true)
    {
    	console_process_key();
 80042c0:	f7fe fe64 	bl	8002f8c <console_process_key>
    	gps_process_msg();
 80042c4:	f7ff fb74 	bl	80039b0 <gps_process_msg>
    	console_process_key();
 80042c8:	e7fa      	b.n	80042c0 <main_task+0x1c>
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	0801c488 	.word	0x0801c488
 80042d0:	0801c494 	.word	0x0801c494
 80042d4:	0801c4a0 	.word	0x0801c4a0

080042d8 <queue_create>:
#define MIN(a, b)  (((a) < (b)) ? (a) : (b))
#define MAX(a, b)  (((a) > (b)) ? (a) : (b))

/** create an array of fixed length buffers */
queue_t * queue_create(int32_t queue_size, int32_t buffer_size)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
	queue_t *queue = malloc(sizeof(queue_t));
 80042e2:	2014      	movs	r0, #20
 80042e4:	f012 fa7c 	bl	80167e0 <malloc>
 80042e8:	0003      	movs	r3, r0
 80042ea:	60fb      	str	r3, [r7, #12]
	assert(queue!=NULL);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <queue_create+0x26>
 80042f2:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <queue_create+0x90>)
 80042f4:	4a1d      	ldr	r2, [pc, #116]	; (800436c <queue_create+0x94>)
 80042f6:	481e      	ldr	r0, [pc, #120]	; (8004370 <queue_create+0x98>)
 80042f8:	2114      	movs	r1, #20
 80042fa:	f012 f9fb 	bl	80166f4 <__assert_func>
	memset(queue,0, sizeof(queue_t));
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2214      	movs	r2, #20
 8004302:	2100      	movs	r1, #0
 8004304:	0018      	movs	r0, r3
 8004306:	f012 fa96 	bl	8016836 <memset>
	queue->buffers = malloc(queue_size * buffer_size);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	4353      	muls	r3, r2
 8004310:	0018      	movs	r0, r3
 8004312:	f012 fa65 	bl	80167e0 <malloc>
 8004316:	0003      	movs	r3, r0
 8004318:	001a      	movs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	601a      	str	r2, [r3, #0]
	assert(queue->buffers!=NULL);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d105      	bne.n	8004332 <queue_create+0x5a>
 8004326:	4b13      	ldr	r3, [pc, #76]	; (8004374 <queue_create+0x9c>)
 8004328:	4a10      	ldr	r2, [pc, #64]	; (800436c <queue_create+0x94>)
 800432a:	4811      	ldr	r0, [pc, #68]	; (8004370 <queue_create+0x98>)
 800432c:	2117      	movs	r1, #23
 800432e:	f012 f9e1 	bl	80166f4 <__assert_func>
	memset(queue->buffers, 0, queue_size * buffer_size);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	4353      	muls	r3, r2
 800433c:	001a      	movs	r2, r3
 800433e:	2100      	movs	r1, #0
 8004340:	f012 fa79 	bl	8016836 <memset>

	queue->head = 0;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	60da      	str	r2, [r3, #12]
	queue->tail = 0;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	611a      	str	r2, [r3, #16]
	queue->queue_size = queue_size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	605a      	str	r2, [r3, #4]
	queue->buffer_size = buffer_size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	609a      	str	r2, [r3, #8]
	return queue;
 800435c:	68fb      	ldr	r3, [r7, #12]
}
 800435e:	0018      	movs	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	b004      	add	sp, #16
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	0801c4c4 	.word	0x0801c4c4
 800436c:	0801ce28 	.word	0x0801ce28
 8004370:	0801c4d0 	.word	0x0801c4d0
 8004374:	0801c4e4 	.word	0x0801c4e4

08004378 <queue_put>:

/** copy given buffer int32_to free buffer, advance head index */
void queue_put(queue_t * queue, uint8_t * buffer, int32_t buffer_size)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
	int32_t elements_to_copy = MIN(buffer_size, queue->buffer_size);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4293      	cmp	r3, r2
 800438c:	dd00      	ble.n	8004390 <queue_put+0x18>
 800438e:	0013      	movs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

	memset(queue->buffers+queue->head*queue->buffer_size,0,queue->buffer_size);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68d9      	ldr	r1, [r3, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	434b      	muls	r3, r1
 80043a0:	18d0      	adds	r0, r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	001a      	movs	r2, r3
 80043a8:	2100      	movs	r1, #0
 80043aa:	f012 fa44 	bl	8016836 <memset>
	memcpy(queue->buffers+queue->head*queue->buffer_size, buffer, elements_to_copy);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	68d9      	ldr	r1, [r3, #12]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	434b      	muls	r3, r1
 80043bc:	18d3      	adds	r3, r2, r3
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	0018      	movs	r0, r3
 80043c4:	f012 fa2e 	bl	8016824 <memcpy>

	if(++queue->head >= queue->queue_size)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	db02      	blt.n	80043e4 <queue_put+0x6c>
	{
		queue->head = 0;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	60da      	str	r2, [r3, #12]
	}
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b006      	add	sp, #24
 80043ea:	bd80      	pop	{r7, pc}

080043ec <queue_get>:

/** copy tail buffer int32_to given buffer and advance tail index */
void queue_get(queue_t * queue, uint8_t * buffer, int32_t buffer_size)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
	int32_t elements_to_copy = MIN(buffer_size, queue->buffer_size);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4293      	cmp	r3, r2
 8004400:	dd00      	ble.n	8004404 <queue_get+0x18>
 8004402:	0013      	movs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

	memcpy(buffer, queue->buffers+queue->tail*queue->buffer_size,  elements_to_copy);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6919      	ldr	r1, [r3, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	434b      	muls	r3, r1
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	0018      	movs	r0, r3
 800441c:	f012 fa02 	bl	8016824 <memcpy>

	if(++queue->tail >= queue->queue_size)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	611a      	str	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	db02      	blt.n	800443c <queue_get+0x50>
	{
		queue->tail = 0;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	611a      	str	r2, [r3, #16]
	}
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b006      	add	sp, #24
 8004442:	bd80      	pop	{r7, pc}

08004444 <queue_size>:

/** return number if buffers in queue */
int32_t queue_size(queue_t * queue)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	return abs(queue->head - queue->tail);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	17da      	asrs	r2, r3, #31
 8004458:	189b      	adds	r3, r3, r2
 800445a:	4053      	eors	r3, r2
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800446a:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <HAL_MspInit+0x44>)
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <HAL_MspInit+0x44>)
 8004470:	2101      	movs	r1, #1
 8004472:	430a      	orrs	r2, r1
 8004474:	619a      	str	r2, [r3, #24]
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <HAL_MspInit+0x44>)
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2201      	movs	r2, #1
 800447c:	4013      	ands	r3, r2
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_MspInit+0x44>)
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_MspInit+0x44>)
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	0549      	lsls	r1, r1, #21
 800448c:	430a      	orrs	r2, r1
 800448e:	61da      	str	r2, [r3, #28]
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_MspInit+0x44>)
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	055b      	lsls	r3, r3, #21
 8004498:	4013      	ands	r3, r2
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b002      	add	sp, #8
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	40021000 	.word	0x40021000

080044ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a06      	ldr	r2, [pc, #24]	; (80044d4 <HAL_RTC_MspInit+0x28>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d106      	bne.n	80044cc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RTC_MspInit+0x2c>)
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RTC_MspInit+0x2c>)
 80044c4:	2180      	movs	r1, #128	; 0x80
 80044c6:	0209      	lsls	r1, r1, #8
 80044c8:	430a      	orrs	r2, r1
 80044ca:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80044cc:	46c0      	nop			; (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b002      	add	sp, #8
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40002800 	.word	0x40002800
 80044d8:	40021000 	.word	0x40021000

080044dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b08b      	sub	sp, #44	; 0x2c
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e4:	2414      	movs	r4, #20
 80044e6:	193b      	adds	r3, r7, r4
 80044e8:	0018      	movs	r0, r3
 80044ea:	2314      	movs	r3, #20
 80044ec:	001a      	movs	r2, r3
 80044ee:	2100      	movs	r1, #0
 80044f0:	f012 f9a1 	bl	8016836 <memset>
  if(hspi->Instance==SPI2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <HAL_SPI_MspInit+0xbc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d148      	bne.n	8004590 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044fe:	4b27      	ldr	r3, [pc, #156]	; (800459c <HAL_SPI_MspInit+0xc0>)
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	4b26      	ldr	r3, [pc, #152]	; (800459c <HAL_SPI_MspInit+0xc0>)
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	01c9      	lsls	r1, r1, #7
 8004508:	430a      	orrs	r2, r1
 800450a:	61da      	str	r2, [r3, #28]
 800450c:	4b23      	ldr	r3, [pc, #140]	; (800459c <HAL_SPI_MspInit+0xc0>)
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	01db      	lsls	r3, r3, #7
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <HAL_SPI_MspInit+0xc0>)
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	4b1f      	ldr	r3, [pc, #124]	; (800459c <HAL_SPI_MspInit+0xc0>)
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	02c9      	lsls	r1, r1, #11
 8004524:	430a      	orrs	r2, r1
 8004526:	615a      	str	r2, [r3, #20]
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <HAL_SPI_MspInit+0xc0>)
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	02db      	lsls	r3, r3, #11
 8004530:	4013      	ands	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin;
 8004536:	193b      	adds	r3, r7, r4
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	00d2      	lsls	r2, r2, #3
 800453c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453e:	193b      	adds	r3, r7, r4
 8004540:	2202      	movs	r2, #2
 8004542:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	193b      	adds	r3, r7, r4
 8004546:	2200      	movs	r2, #0
 8004548:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800454a:	193b      	adds	r3, r7, r4
 800454c:	2203      	movs	r2, #3
 800454e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004550:	193b      	adds	r3, r7, r4
 8004552:	2205      	movs	r2, #5
 8004554:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FLASH_SCK_GPIO_Port, &GPIO_InitStruct);
 8004556:	193b      	adds	r3, r7, r4
 8004558:	4a11      	ldr	r2, [pc, #68]	; (80045a0 <HAL_SPI_MspInit+0xc4>)
 800455a:	0019      	movs	r1, r3
 800455c:	0010      	movs	r0, r2
 800455e:	f000 fb3f 	bl	8004be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8004562:	0021      	movs	r1, r4
 8004564:	187b      	adds	r3, r7, r1
 8004566:	22c0      	movs	r2, #192	; 0xc0
 8004568:	0212      	lsls	r2, r2, #8
 800456a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456c:	187b      	adds	r3, r7, r1
 800456e:	2202      	movs	r2, #2
 8004570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	187b      	adds	r3, r7, r1
 8004574:	2200      	movs	r2, #0
 8004576:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004578:	187b      	adds	r3, r7, r1
 800457a:	2203      	movs	r2, #3
 800457c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800457e:	187b      	adds	r3, r7, r1
 8004580:	2200      	movs	r2, #0
 8004582:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004584:	187b      	adds	r3, r7, r1
 8004586:	4a06      	ldr	r2, [pc, #24]	; (80045a0 <HAL_SPI_MspInit+0xc4>)
 8004588:	0019      	movs	r1, r3
 800458a:	0010      	movs	r0, r2
 800458c:	f000 fb28 	bl	8004be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b00b      	add	sp, #44	; 0x2c
 8004596:	bd90      	pop	{r4, r7, pc}
 8004598:	40003800 	.word	0x40003800
 800459c:	40021000 	.word	0x40021000
 80045a0:	48000400 	.word	0x48000400

080045a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b08b      	sub	sp, #44	; 0x2c
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	2414      	movs	r4, #20
 80045ae:	193b      	adds	r3, r7, r4
 80045b0:	0018      	movs	r0, r3
 80045b2:	2314      	movs	r3, #20
 80045b4:	001a      	movs	r2, r3
 80045b6:	2100      	movs	r1, #0
 80045b8:	f012 f93d 	bl	8016836 <memset>
  if(huart->Instance==USART1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a21      	ldr	r2, [pc, #132]	; (8004648 <HAL_UART_MspInit+0xa4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d13b      	bne.n	800463e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045c6:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_UART_MspInit+0xa8>)
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <HAL_UART_MspInit+0xa8>)
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	01c9      	lsls	r1, r1, #7
 80045d0:	430a      	orrs	r2, r1
 80045d2:	619a      	str	r2, [r3, #24]
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_UART_MspInit+0xa8>)
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	01db      	lsls	r3, r3, #7
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e2:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_UART_MspInit+0xa8>)
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_UART_MspInit+0xa8>)
 80045e8:	2180      	movs	r1, #128	; 0x80
 80045ea:	0289      	lsls	r1, r1, #10
 80045ec:	430a      	orrs	r2, r1
 80045ee:	615a      	str	r2, [r3, #20]
 80045f0:	4b16      	ldr	r3, [pc, #88]	; (800464c <HAL_UART_MspInit+0xa8>)
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	029b      	lsls	r3, r3, #10
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80045fe:	193b      	adds	r3, r7, r4
 8004600:	22c0      	movs	r2, #192	; 0xc0
 8004602:	00d2      	lsls	r2, r2, #3
 8004604:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004606:	0021      	movs	r1, r4
 8004608:	187b      	adds	r3, r7, r1
 800460a:	2202      	movs	r2, #2
 800460c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460e:	187b      	adds	r3, r7, r1
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004614:	187b      	adds	r3, r7, r1
 8004616:	2203      	movs	r2, #3
 8004618:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800461a:	187b      	adds	r3, r7, r1
 800461c:	2201      	movs	r2, #1
 800461e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004620:	187a      	adds	r2, r7, r1
 8004622:	2390      	movs	r3, #144	; 0x90
 8004624:	05db      	lsls	r3, r3, #23
 8004626:	0011      	movs	r1, r2
 8004628:	0018      	movs	r0, r3
 800462a:	f000 fad9 	bl	8004be0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800462e:	2200      	movs	r2, #0
 8004630:	2100      	movs	r1, #0
 8004632:	201b      	movs	r0, #27
 8004634:	f000 fa24 	bl	8004a80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004638:	201b      	movs	r0, #27
 800463a:	f000 fa36 	bl	8004aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b00b      	add	sp, #44	; 0x2c
 8004644:	bd90      	pop	{r4, r7, pc}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	40013800 	.word	0x40013800
 800464c:	40021000 	.word	0x40021000

08004650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004654:	e7fe      	b.n	8004654 <NMI_Handler+0x4>

08004656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800465a:	e7fe      	b.n	800465a <HardFault_Handler+0x4>

0800465c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004674:	f000 f918 	bl	80048a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <USART1_IRQHandler+0x14>)
 8004686:	0018      	movs	r0, r3
 8004688:	f004 fd16 	bl	80090b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	20000dc4 	.word	0x20000dc4

08004698 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <USB_IRQHandler+0x14>)
 800469e:	0018      	movs	r0, r3
 80046a0:	f000 fd92 	bl	80051c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	200014d4 	.word	0x200014d4

080046b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  return 1;
 80046b4:	2301      	movs	r3, #1
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <_kill>:

int _kill(int pid, int sig)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80046c6:	f012 f83f 	bl	8016748 <__errno>
 80046ca:	0003      	movs	r3, r0
 80046cc:	2216      	movs	r2, #22
 80046ce:	601a      	str	r2, [r3, #0]
  return -1;
 80046d0:	2301      	movs	r3, #1
 80046d2:	425b      	negs	r3, r3
}
 80046d4:	0018      	movs	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b002      	add	sp, #8
 80046da:	bd80      	pop	{r7, pc}

080046dc <_exit>:

void _exit (int status)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046e4:	2301      	movs	r3, #1
 80046e6:	425a      	negs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	0011      	movs	r1, r2
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7ff ffe5 	bl	80046bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80046f2:	e7fe      	b.n	80046f2 <_exit+0x16>

080046f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046fc:	2301      	movs	r3, #1
 80046fe:	425b      	negs	r3, r3
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	b002      	add	sp, #8
 8004706:	bd80      	pop	{r7, pc}

08004708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	0192      	lsls	r2, r2, #6
 8004718:	605a      	str	r2, [r3, #4]
  return 0;
 800471a:	2300      	movs	r3, #0
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b002      	add	sp, #8
 8004722:	bd80      	pop	{r7, pc}

08004724 <_isatty>:

int _isatty(int file)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800472c:	2301      	movs	r3, #1
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b002      	add	sp, #8
 8004734:	bd80      	pop	{r7, pc}

08004736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004742:	2300      	movs	r3, #0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b004      	add	sp, #16
 800474a:	bd80      	pop	{r7, pc}

0800474c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004754:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <_sbrk+0x5c>)
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <_sbrk+0x60>)
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004760:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <_sbrk+0x64>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004768:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <_sbrk+0x64>)
 800476a:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <_sbrk+0x68>)
 800476c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <_sbrk+0x64>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	18d3      	adds	r3, r2, r3
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	429a      	cmp	r2, r3
 800477a:	d207      	bcs.n	800478c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800477c:	f011 ffe4 	bl	8016748 <__errno>
 8004780:	0003      	movs	r3, r0
 8004782:	220c      	movs	r2, #12
 8004784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004786:	2301      	movs	r3, #1
 8004788:	425b      	negs	r3, r3
 800478a:	e009      	b.n	80047a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <_sbrk+0x64>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <_sbrk+0x64>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	18d2      	adds	r2, r2, r3
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <_sbrk+0x64>)
 800479c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	0018      	movs	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b006      	add	sp, #24
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20004000 	.word	0x20004000
 80047ac:	00001000 	.word	0x00001000
 80047b0:	20000e7c 	.word	0x20000e7c
 80047b4:	200019f8 	.word	0x200019f8

080047b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047c4:	480d      	ldr	r0, [pc, #52]	; (80047fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80047c8:	f7ff fff6 	bl	80047b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047cc:	480c      	ldr	r0, [pc, #48]	; (8004800 <LoopForever+0x6>)
  ldr r1, =_edata
 80047ce:	490d      	ldr	r1, [pc, #52]	; (8004804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047d0:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <LoopForever+0xe>)
  movs r3, #0
 80047d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047d4:	e002      	b.n	80047dc <LoopCopyDataInit>

080047d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047da:	3304      	adds	r3, #4

080047dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047e0:	d3f9      	bcc.n	80047d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047e2:	4a0a      	ldr	r2, [pc, #40]	; (800480c <LoopForever+0x12>)
  ldr r4, =_ebss
 80047e4:	4c0a      	ldr	r4, [pc, #40]	; (8004810 <LoopForever+0x16>)
  movs r3, #0
 80047e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047e8:	e001      	b.n	80047ee <LoopFillZerobss>

080047ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047ec:	3204      	adds	r2, #4

080047ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047f0:	d3fb      	bcc.n	80047ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80047f2:	f011 ffd1 	bl	8016798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047f6:	f7ff fb85 	bl	8003f04 <main>

080047fa <LoopForever>:

LoopForever:
    b LoopForever
 80047fa:	e7fe      	b.n	80047fa <LoopForever>
  ldr   r0, =_estack
 80047fc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004804:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 8004808:	0801d5f8 	.word	0x0801d5f8
  ldr r2, =_sbss
 800480c:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 8004810:	200019f8 	.word	0x200019f8

08004814 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004814:	e7fe      	b.n	8004814 <ADC1_COMP_IRQHandler>
	...

08004818 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_Init+0x24>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b06      	ldr	r3, [pc, #24]	; (800483c <HAL_Init+0x24>)
 8004822:	2110      	movs	r1, #16
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004828:	2003      	movs	r0, #3
 800482a:	f000 f809 	bl	8004840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800482e:	f7ff fe19 	bl	8004464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	40022000 	.word	0x40022000

08004840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004848:	4b14      	ldr	r3, [pc, #80]	; (800489c <HAL_InitTick+0x5c>)
 800484a:	681c      	ldr	r4, [r3, #0]
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <HAL_InitTick+0x60>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	0019      	movs	r1, r3
 8004852:	23fa      	movs	r3, #250	; 0xfa
 8004854:	0098      	lsls	r0, r3, #2
 8004856:	f7fb fc7d 	bl	8000154 <__udivsi3>
 800485a:	0003      	movs	r3, r0
 800485c:	0019      	movs	r1, r3
 800485e:	0020      	movs	r0, r4
 8004860:	f7fb fc78 	bl	8000154 <__udivsi3>
 8004864:	0003      	movs	r3, r0
 8004866:	0018      	movs	r0, r3
 8004868:	f000 f92f 	bl	8004aca <HAL_SYSTICK_Config>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d001      	beq.n	8004874 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e00f      	b.n	8004894 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d80b      	bhi.n	8004892 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	2301      	movs	r3, #1
 800487e:	425b      	negs	r3, r3
 8004880:	2200      	movs	r2, #0
 8004882:	0018      	movs	r0, r3
 8004884:	f000 f8fc 	bl	8004a80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_InitTick+0x64>)
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
}
 8004894:	0018      	movs	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	b003      	add	sp, #12
 800489a:	bd90      	pop	{r4, r7, pc}
 800489c:	200000d8 	.word	0x200000d8
 80048a0:	200000e0 	.word	0x200000e0
 80048a4:	200000dc 	.word	0x200000dc

080048a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HAL_IncTick+0x1c>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	001a      	movs	r2, r3
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_IncTick+0x20>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	18d2      	adds	r2, r2, r3
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_IncTick+0x20>)
 80048ba:	601a      	str	r2, [r3, #0]
}
 80048bc:	46c0      	nop			; (mov r8, r8)
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	200000e0 	.word	0x200000e0
 80048c8:	20000e80 	.word	0x20000e80

080048cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  return uwTick;
 80048d0:	4b02      	ldr	r3, [pc, #8]	; (80048dc <HAL_GetTick+0x10>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	20000e80 	.word	0x20000e80

080048e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048e8:	f7ff fff0 	bl	80048cc <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3301      	adds	r3, #1
 80048f8:	d005      	beq.n	8004906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_Delay+0x44>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	001a      	movs	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	189b      	adds	r3, r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	f7ff ffe0 	bl	80048cc <HAL_GetTick>
 800490c:	0002      	movs	r2, r0
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	429a      	cmp	r2, r3
 8004916:	d8f7      	bhi.n	8004908 <HAL_Delay+0x28>
  {
  }
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b004      	add	sp, #16
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	200000e0 	.word	0x200000e0

08004928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	0002      	movs	r2, r0
 8004930:	1dfb      	adds	r3, r7, #7
 8004932:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004934:	1dfb      	adds	r3, r7, #7
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b7f      	cmp	r3, #127	; 0x7f
 800493a:	d809      	bhi.n	8004950 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493c:	1dfb      	adds	r3, r7, #7
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	001a      	movs	r2, r3
 8004942:	231f      	movs	r3, #31
 8004944:	401a      	ands	r2, r3
 8004946:	4b04      	ldr	r3, [pc, #16]	; (8004958 <__NVIC_EnableIRQ+0x30>)
 8004948:	2101      	movs	r1, #1
 800494a:	4091      	lsls	r1, r2
 800494c:	000a      	movs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]
  }
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000e100 	.word	0xe000e100

0800495c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	0002      	movs	r2, r0
 8004964:	6039      	str	r1, [r7, #0]
 8004966:	1dfb      	adds	r3, r7, #7
 8004968:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800496a:	1dfb      	adds	r3, r7, #7
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b7f      	cmp	r3, #127	; 0x7f
 8004970:	d828      	bhi.n	80049c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004972:	4a2f      	ldr	r2, [pc, #188]	; (8004a30 <__NVIC_SetPriority+0xd4>)
 8004974:	1dfb      	adds	r3, r7, #7
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b25b      	sxtb	r3, r3
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	33c0      	adds	r3, #192	; 0xc0
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	589b      	ldr	r3, [r3, r2]
 8004982:	1dfa      	adds	r2, r7, #7
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	0011      	movs	r1, r2
 8004988:	2203      	movs	r2, #3
 800498a:	400a      	ands	r2, r1
 800498c:	00d2      	lsls	r2, r2, #3
 800498e:	21ff      	movs	r1, #255	; 0xff
 8004990:	4091      	lsls	r1, r2
 8004992:	000a      	movs	r2, r1
 8004994:	43d2      	mvns	r2, r2
 8004996:	401a      	ands	r2, r3
 8004998:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	019b      	lsls	r3, r3, #6
 800499e:	22ff      	movs	r2, #255	; 0xff
 80049a0:	401a      	ands	r2, r3
 80049a2:	1dfb      	adds	r3, r7, #7
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	0018      	movs	r0, r3
 80049a8:	2303      	movs	r3, #3
 80049aa:	4003      	ands	r3, r0
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049b0:	481f      	ldr	r0, [pc, #124]	; (8004a30 <__NVIC_SetPriority+0xd4>)
 80049b2:	1dfb      	adds	r3, r7, #7
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	b25b      	sxtb	r3, r3
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	430a      	orrs	r2, r1
 80049bc:	33c0      	adds	r3, #192	; 0xc0
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80049c2:	e031      	b.n	8004a28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <__NVIC_SetPriority+0xd8>)
 80049c6:	1dfb      	adds	r3, r7, #7
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	0019      	movs	r1, r3
 80049cc:	230f      	movs	r3, #15
 80049ce:	400b      	ands	r3, r1
 80049d0:	3b08      	subs	r3, #8
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	3306      	adds	r3, #6
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	18d3      	adds	r3, r2, r3
 80049da:	3304      	adds	r3, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	1dfa      	adds	r2, r7, #7
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	0011      	movs	r1, r2
 80049e4:	2203      	movs	r2, #3
 80049e6:	400a      	ands	r2, r1
 80049e8:	00d2      	lsls	r2, r2, #3
 80049ea:	21ff      	movs	r1, #255	; 0xff
 80049ec:	4091      	lsls	r1, r2
 80049ee:	000a      	movs	r2, r1
 80049f0:	43d2      	mvns	r2, r2
 80049f2:	401a      	ands	r2, r3
 80049f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	019b      	lsls	r3, r3, #6
 80049fa:	22ff      	movs	r2, #255	; 0xff
 80049fc:	401a      	ands	r2, r3
 80049fe:	1dfb      	adds	r3, r7, #7
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	0018      	movs	r0, r3
 8004a04:	2303      	movs	r3, #3
 8004a06:	4003      	ands	r3, r0
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a0c:	4809      	ldr	r0, [pc, #36]	; (8004a34 <__NVIC_SetPriority+0xd8>)
 8004a0e:	1dfb      	adds	r3, r7, #7
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	001c      	movs	r4, r3
 8004a14:	230f      	movs	r3, #15
 8004a16:	4023      	ands	r3, r4
 8004a18:	3b08      	subs	r3, #8
 8004a1a:	089b      	lsrs	r3, r3, #2
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	3306      	adds	r3, #6
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	18c3      	adds	r3, r0, r3
 8004a24:	3304      	adds	r3, #4
 8004a26:	601a      	str	r2, [r3, #0]
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b003      	add	sp, #12
 8004a2e:	bd90      	pop	{r4, r7, pc}
 8004a30:	e000e100 	.word	0xe000e100
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	1e5a      	subs	r2, r3, #1
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	045b      	lsls	r3, r3, #17
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d301      	bcc.n	8004a50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e010      	b.n	8004a72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <SysTick_Config+0x44>)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	3a01      	subs	r2, #1
 8004a56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a58:	2301      	movs	r3, #1
 8004a5a:	425b      	negs	r3, r3
 8004a5c:	2103      	movs	r1, #3
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f7ff ff7c 	bl	800495c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <SysTick_Config+0x44>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a6a:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <SysTick_Config+0x44>)
 8004a6c:	2207      	movs	r2, #7
 8004a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	0018      	movs	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b002      	add	sp, #8
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	e000e010 	.word	0xe000e010

08004a80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
 8004a8a:	210f      	movs	r1, #15
 8004a8c:	187b      	adds	r3, r7, r1
 8004a8e:	1c02      	adds	r2, r0, #0
 8004a90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	187b      	adds	r3, r7, r1
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	0011      	movs	r1, r2
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7ff ff5d 	bl	800495c <__NVIC_SetPriority>
}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b004      	add	sp, #16
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	0002      	movs	r2, r0
 8004ab2:	1dfb      	adds	r3, r7, #7
 8004ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ab6:	1dfb      	adds	r3, r7, #7
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b25b      	sxtb	r3, r3
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7ff ff33 	bl	8004928 <__NVIC_EnableIRQ>
}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b002      	add	sp, #8
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7ff ffaf 	bl	8004a38 <SysTick_Config>
 8004ada:	0003      	movs	r3, r0
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2221      	movs	r2, #33	; 0x21
 8004af0:	5c9b      	ldrb	r3, [r3, r2]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d008      	beq.n	8004b0a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2204      	movs	r2, #4
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	2100      	movs	r1, #0
 8004b04:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e020      	b.n	8004b4c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	210e      	movs	r1, #14
 8004b16:	438a      	bics	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2101      	movs	r1, #1
 8004b26:	438a      	bics	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	2101      	movs	r1, #1
 8004b34:	4091      	lsls	r1, r2
 8004b36:	000a      	movs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2221      	movs	r2, #33	; 0x21
 8004b3e:	2101      	movs	r1, #1
 8004b40:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	2100      	movs	r1, #0
 8004b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5c:	210f      	movs	r1, #15
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2221      	movs	r2, #33	; 0x21
 8004b68:	5c9b      	ldrb	r3, [r3, r2]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d006      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2204      	movs	r2, #4
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004b76:	187b      	adds	r3, r7, r1
 8004b78:	2201      	movs	r2, #1
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	e028      	b.n	8004bd0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	210e      	movs	r1, #14
 8004b8a:	438a      	bics	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2101      	movs	r1, #1
 8004b9a:	438a      	bics	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	4091      	lsls	r1, r2
 8004baa:	000a      	movs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2221      	movs	r2, #33	; 0x21
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	0010      	movs	r0, r2
 8004bce:	4798      	blx	r3
    }
  }
  return status;
 8004bd0:	230f      	movs	r3, #15
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	781b      	ldrb	r3, [r3, #0]
}
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b004      	add	sp, #16
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bee:	e155      	b.n	8004e9c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4091      	lsls	r1, r2
 8004bfa:	000a      	movs	r2, r1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d100      	bne.n	8004c08 <HAL_GPIO_Init+0x28>
 8004c06:	e146      	b.n	8004e96 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d005      	beq.n	8004c20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d130      	bne.n	8004c82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	0013      	movs	r3, r2
 8004c30:	43da      	mvns	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4013      	ands	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	409a      	lsls	r2, r3
 8004c42:	0013      	movs	r3, r2
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c56:	2201      	movs	r2, #1
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	0013      	movs	r3, r2
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	401a      	ands	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	409a      	lsls	r2, r3
 8004c74:	0013      	movs	r3, r2
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2203      	movs	r2, #3
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d017      	beq.n	8004cbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	2203      	movs	r2, #3
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	0013      	movs	r3, r2
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	0013      	movs	r3, r2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d123      	bne.n	8004d12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	08da      	lsrs	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3208      	adds	r2, #8
 8004cd2:	0092      	lsls	r2, r2, #2
 8004cd4:	58d3      	ldr	r3, [r2, r3]
 8004cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2207      	movs	r2, #7
 8004cdc:	4013      	ands	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	220f      	movs	r2, #15
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	0013      	movs	r3, r2
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2107      	movs	r1, #7
 8004cf6:	400b      	ands	r3, r1
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	0013      	movs	r3, r2
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	08da      	lsrs	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3208      	adds	r2, #8
 8004d0c:	0092      	lsls	r2, r2, #2
 8004d0e:	6939      	ldr	r1, [r7, #16]
 8004d10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	0013      	movs	r3, r2
 8004d22:	43da      	mvns	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4013      	ands	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2203      	movs	r2, #3
 8004d30:	401a      	ands	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	409a      	lsls	r2, r3
 8004d38:	0013      	movs	r3, r2
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	23c0      	movs	r3, #192	; 0xc0
 8004d4c:	029b      	lsls	r3, r3, #10
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d100      	bne.n	8004d54 <HAL_GPIO_Init+0x174>
 8004d52:	e0a0      	b.n	8004e96 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d54:	4b57      	ldr	r3, [pc, #348]	; (8004eb4 <HAL_GPIO_Init+0x2d4>)
 8004d56:	699a      	ldr	r2, [r3, #24]
 8004d58:	4b56      	ldr	r3, [pc, #344]	; (8004eb4 <HAL_GPIO_Init+0x2d4>)
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	619a      	str	r2, [r3, #24]
 8004d60:	4b54      	ldr	r3, [pc, #336]	; (8004eb4 <HAL_GPIO_Init+0x2d4>)
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2201      	movs	r2, #1
 8004d66:	4013      	ands	r3, r2
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d6c:	4a52      	ldr	r2, [pc, #328]	; (8004eb8 <HAL_GPIO_Init+0x2d8>)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	089b      	lsrs	r3, r3, #2
 8004d72:	3302      	adds	r3, #2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	589b      	ldr	r3, [r3, r2]
 8004d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	4013      	ands	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	220f      	movs	r2, #15
 8004d84:	409a      	lsls	r2, r3
 8004d86:	0013      	movs	r3, r2
 8004d88:	43da      	mvns	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	2390      	movs	r3, #144	; 0x90
 8004d94:	05db      	lsls	r3, r3, #23
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d019      	beq.n	8004dce <HAL_GPIO_Init+0x1ee>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a47      	ldr	r2, [pc, #284]	; (8004ebc <HAL_GPIO_Init+0x2dc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <HAL_GPIO_Init+0x1ea>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a46      	ldr	r2, [pc, #280]	; (8004ec0 <HAL_GPIO_Init+0x2e0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00d      	beq.n	8004dc6 <HAL_GPIO_Init+0x1e6>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a45      	ldr	r2, [pc, #276]	; (8004ec4 <HAL_GPIO_Init+0x2e4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <HAL_GPIO_Init+0x1e2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a44      	ldr	r2, [pc, #272]	; (8004ec8 <HAL_GPIO_Init+0x2e8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d101      	bne.n	8004dbe <HAL_GPIO_Init+0x1de>
 8004dba:	2304      	movs	r3, #4
 8004dbc:	e008      	b.n	8004dd0 <HAL_GPIO_Init+0x1f0>
 8004dbe:	2305      	movs	r3, #5
 8004dc0:	e006      	b.n	8004dd0 <HAL_GPIO_Init+0x1f0>
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e004      	b.n	8004dd0 <HAL_GPIO_Init+0x1f0>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e002      	b.n	8004dd0 <HAL_GPIO_Init+0x1f0>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <HAL_GPIO_Init+0x1f0>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	2103      	movs	r1, #3
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	0092      	lsls	r2, r2, #2
 8004dd8:	4093      	lsls	r3, r2
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004de0:	4935      	ldr	r1, [pc, #212]	; (8004eb8 <HAL_GPIO_Init+0x2d8>)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	089b      	lsrs	r3, r3, #2
 8004de6:	3302      	adds	r3, #2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dee:	4b37      	ldr	r3, [pc, #220]	; (8004ecc <HAL_GPIO_Init+0x2ec>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	43da      	mvns	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	035b      	lsls	r3, r3, #13
 8004e06:	4013      	ands	r3, r2
 8004e08:	d003      	beq.n	8004e12 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e12:	4b2e      	ldr	r3, [pc, #184]	; (8004ecc <HAL_GPIO_Init+0x2ec>)
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004e18:	4b2c      	ldr	r3, [pc, #176]	; (8004ecc <HAL_GPIO_Init+0x2ec>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	43da      	mvns	r2, r3
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4013      	ands	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	039b      	lsls	r3, r3, #14
 8004e30:	4013      	ands	r3, r2
 8004e32:	d003      	beq.n	8004e3c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e3c:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <HAL_GPIO_Init+0x2ec>)
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004e42:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <HAL_GPIO_Init+0x2ec>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	2380      	movs	r3, #128	; 0x80
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e66:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_GPIO_Init+0x2ec>)
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004e6c:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <HAL_GPIO_Init+0x2ec>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	43da      	mvns	r2, r3
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	025b      	lsls	r3, r3, #9
 8004e84:	4013      	ands	r3, r2
 8004e86:	d003      	beq.n	8004e90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e90:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <HAL_GPIO_Init+0x2ec>)
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	40da      	lsrs	r2, r3
 8004ea4:	1e13      	subs	r3, r2, #0
 8004ea6:	d000      	beq.n	8004eaa <HAL_GPIO_Init+0x2ca>
 8004ea8:	e6a2      	b.n	8004bf0 <HAL_GPIO_Init+0x10>
  } 
}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b006      	add	sp, #24
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	48000400 	.word	0x48000400
 8004ec0:	48000800 	.word	0x48000800
 8004ec4:	48000c00 	.word	0x48000c00
 8004ec8:	48001000 	.word	0x48001000
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	000a      	movs	r2, r1
 8004eda:	1cbb      	adds	r3, r7, #2
 8004edc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	1cba      	adds	r2, r7, #2
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004eea:	230f      	movs	r3, #15
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e003      	b.n	8004efc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ef4:	230f      	movs	r3, #15
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004efc:	230f      	movs	r3, #15
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	781b      	ldrb	r3, [r3, #0]
  }
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b004      	add	sp, #16
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	0008      	movs	r0, r1
 8004f14:	0011      	movs	r1, r2
 8004f16:	1cbb      	adds	r3, r7, #2
 8004f18:	1c02      	adds	r2, r0, #0
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	1c7b      	adds	r3, r7, #1
 8004f1e:	1c0a      	adds	r2, r1, #0
 8004f20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f22:	1c7b      	adds	r3, r7, #1
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d004      	beq.n	8004f34 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f2a:	1cbb      	adds	r3, r7, #2
 8004f2c:	881a      	ldrh	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f32:	e003      	b.n	8004f3c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f34:	1cbb      	adds	r3, r7, #2
 8004f36:	881a      	ldrh	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b002      	add	sp, #8
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	000a      	movs	r2, r1
 8004f4e:	1cbb      	adds	r3, r7, #2
 8004f50:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f58:	1cbb      	adds	r3, r7, #2
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	041a      	lsls	r2, r3, #16
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	1cb9      	adds	r1, r7, #2
 8004f68:	8809      	ldrh	r1, [r1, #0]
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	619a      	str	r2, [r3, #24]
}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b004      	add	sp, #16
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7e:	b08b      	sub	sp, #44	; 0x2c
 8004f80:	af06      	add	r7, sp, #24
 8004f82:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0f0      	b.n	8005170 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a79      	ldr	r2, [pc, #484]	; (8005178 <HAL_PCD_Init+0x1fc>)
 8004f92:	5c9b      	ldrb	r3, [r3, r2]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d108      	bne.n	8004fac <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	23aa      	movs	r3, #170	; 0xaa
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f011 f846 	bl	8016038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a72      	ldr	r2, [pc, #456]	; (8005178 <HAL_PCD_Init+0x1fc>)
 8004fb0:	2103      	movs	r1, #3
 8004fb2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f005 fafb 	bl	800a5b4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fbe:	230f      	movs	r3, #15
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e049      	b.n	800505c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fc8:	200f      	movs	r0, #15
 8004fca:	183b      	adds	r3, r7, r0
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	0013      	movs	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	18cb      	adds	r3, r1, r3
 8004fdc:	3301      	adds	r3, #1
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fe2:	183b      	adds	r3, r7, r0
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	0013      	movs	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	189b      	adds	r3, r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	183a      	adds	r2, r7, r0
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	0013      	movs	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	189b      	adds	r3, r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	18cb      	adds	r3, r1, r3
 800500a:	3303      	adds	r3, #3
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005010:	183b      	adds	r3, r7, r0
 8005012:	781a      	ldrb	r2, [r3, #0]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	0013      	movs	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	189b      	adds	r3, r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	18cb      	adds	r3, r1, r3
 8005020:	3338      	adds	r3, #56	; 0x38
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005026:	183b      	adds	r3, r7, r0
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	0013      	movs	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	189b      	adds	r3, r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	18cb      	adds	r3, r1, r3
 8005036:	333c      	adds	r3, #60	; 0x3c
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800503c:	183b      	adds	r3, r7, r0
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	0013      	movs	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	189b      	adds	r3, r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	18cb      	adds	r3, r1, r3
 800504c:	3340      	adds	r3, #64	; 0x40
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005052:	183b      	adds	r3, r7, r0
 8005054:	781a      	ldrb	r2, [r3, #0]
 8005056:	183b      	adds	r3, r7, r0
 8005058:	3201      	adds	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	210f      	movs	r1, #15
 800505e:	187b      	adds	r3, r7, r1
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d3ae      	bcc.n	8004fc8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800506a:	187b      	adds	r3, r7, r1
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	e056      	b.n	8005120 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005072:	240f      	movs	r4, #15
 8005074:	193b      	adds	r3, r7, r4
 8005076:	781a      	ldrb	r2, [r3, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	236a      	movs	r3, #106	; 0x6a
 800507c:	33ff      	adds	r3, #255	; 0xff
 800507e:	0019      	movs	r1, r3
 8005080:	0013      	movs	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	189b      	adds	r3, r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	18c3      	adds	r3, r0, r3
 800508a:	185b      	adds	r3, r3, r1
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005090:	193b      	adds	r3, r7, r4
 8005092:	781a      	ldrb	r2, [r3, #0]
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	23b4      	movs	r3, #180	; 0xb4
 8005098:	0059      	lsls	r1, r3, #1
 800509a:	0013      	movs	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	18c3      	adds	r3, r0, r3
 80050a4:	185b      	adds	r3, r3, r1
 80050a6:	193a      	adds	r2, r7, r4
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050ac:	193b      	adds	r3, r7, r4
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	236c      	movs	r3, #108	; 0x6c
 80050b4:	33ff      	adds	r3, #255	; 0xff
 80050b6:	0019      	movs	r1, r3
 80050b8:	0013      	movs	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	189b      	adds	r3, r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	18c3      	adds	r3, r0, r3
 80050c2:	185b      	adds	r3, r3, r1
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050c8:	193b      	adds	r3, r7, r4
 80050ca:	781a      	ldrb	r2, [r3, #0]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	23bc      	movs	r3, #188	; 0xbc
 80050d0:	0059      	lsls	r1, r3, #1
 80050d2:	0013      	movs	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	189b      	adds	r3, r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	18c3      	adds	r3, r0, r3
 80050dc:	185b      	adds	r3, r3, r1
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050e2:	193b      	adds	r3, r7, r4
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	23be      	movs	r3, #190	; 0xbe
 80050ea:	0059      	lsls	r1, r3, #1
 80050ec:	0013      	movs	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	189b      	adds	r3, r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	18c3      	adds	r3, r0, r3
 80050f6:	185b      	adds	r3, r3, r1
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050fc:	193b      	adds	r3, r7, r4
 80050fe:	781a      	ldrb	r2, [r3, #0]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	23c0      	movs	r3, #192	; 0xc0
 8005104:	0059      	lsls	r1, r3, #1
 8005106:	0013      	movs	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	189b      	adds	r3, r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	18c3      	adds	r3, r0, r3
 8005110:	185b      	adds	r3, r3, r1
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005116:	193b      	adds	r3, r7, r4
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	193b      	adds	r3, r7, r4
 800511c:	3201      	adds	r2, #1
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	230f      	movs	r3, #15
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d3a1      	bcc.n	8005072 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	466a      	mov	r2, sp
 8005136:	0011      	movs	r1, r2
 8005138:	001a      	movs	r2, r3
 800513a:	3210      	adds	r2, #16
 800513c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800513e:	c170      	stmia	r1!, {r4, r5, r6}
 8005140:	ca30      	ldmia	r2!, {r4, r5}
 8005142:	c130      	stmia	r1!, {r4, r5}
 8005144:	6859      	ldr	r1, [r3, #4]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f005 fa4d 	bl	800a5e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2224      	movs	r2, #36	; 0x24
 8005152:	2100      	movs	r1, #0
 8005154:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a07      	ldr	r2, [pc, #28]	; (8005178 <HAL_PCD_Init+0x1fc>)
 800515a:	2101      	movs	r1, #1
 800515c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d103      	bne.n	800516e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0018      	movs	r0, r3
 800516a:	f001 fd23 	bl	8006bb4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b005      	add	sp, #20
 8005176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005178:	000002a9 	.word	0x000002a9

0800517c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	23aa      	movs	r3, #170	; 0xaa
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	5cd3      	ldrb	r3, [r2, r3]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_PCD_Start+0x18>
 8005190:	2302      	movs	r3, #2
 8005192:	e014      	b.n	80051be <HAL_PCD_Start+0x42>
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	23aa      	movs	r3, #170	; 0xaa
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	2101      	movs	r1, #1
 800519c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f005 f9f0 	bl	800a588 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f007 f9f3 	bl	800c598 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	23aa      	movs	r3, #170	; 0xaa
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	2100      	movs	r1, #0
 80051ba:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	0018      	movs	r0, r3
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b002      	add	sp, #8
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f007 f9f5 	bl	800c5c4 <USB_ReadInterrupts>
 80051da:	0003      	movs	r3, r0
 80051dc:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	4013      	ands	r3, r2
 80051e6:	d004      	beq.n	80051f2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	0018      	movs	r0, r3
 80051ec:	f000 fb62 	bl	80058b4 <PCD_EP_ISR_Handler>

    return;
 80051f0:	e11d      	b.n	800542e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4013      	ands	r3, r2
 80051fa:	d015      	beq.n	8005228 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2244      	movs	r2, #68	; 0x44
 8005202:	5a9b      	ldrh	r3, [r3, r2]
 8005204:	b29a      	uxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	498a      	ldr	r1, [pc, #552]	; (8005434 <HAL_PCD_IRQHandler+0x26c>)
 800520c:	400a      	ands	r2, r1
 800520e:	b291      	uxth	r1, r2
 8005210:	2244      	movs	r2, #68	; 0x44
 8005212:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	0018      	movs	r0, r3
 8005218:	f010 ff99 	bl	801614e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2100      	movs	r1, #0
 8005220:	0018      	movs	r0, r3
 8005222:	f000 f915 	bl	8005450 <HAL_PCD_SetAddress>

    return;
 8005226:	e102      	b.n	800542e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	2380      	movs	r3, #128	; 0x80
 800522c:	01db      	lsls	r3, r3, #7
 800522e:	4013      	ands	r3, r2
 8005230:	d00c      	beq.n	800524c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2244      	movs	r2, #68	; 0x44
 8005238:	5a9b      	ldrh	r3, [r3, r2]
 800523a:	b29a      	uxth	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	497d      	ldr	r1, [pc, #500]	; (8005438 <HAL_PCD_IRQHandler+0x270>)
 8005242:	400a      	ands	r2, r1
 8005244:	b291      	uxth	r1, r2
 8005246:	2244      	movs	r2, #68	; 0x44
 8005248:	5299      	strh	r1, [r3, r2]

    return;
 800524a:	e0f0      	b.n	800542e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	4013      	ands	r3, r2
 8005254:	d00c      	beq.n	8005270 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2244      	movs	r2, #68	; 0x44
 800525c:	5a9b      	ldrh	r3, [r3, r2]
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4975      	ldr	r1, [pc, #468]	; (800543c <HAL_PCD_IRQHandler+0x274>)
 8005266:	400a      	ands	r2, r1
 8005268:	b291      	uxth	r1, r2
 800526a:	2244      	movs	r2, #68	; 0x44
 800526c:	5299      	strh	r1, [r3, r2]

    return;
 800526e:	e0de      	b.n	800542e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	2380      	movs	r3, #128	; 0x80
 8005274:	015b      	lsls	r3, r3, #5
 8005276:	4013      	ands	r3, r2
 8005278:	d038      	beq.n	80052ec <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2240      	movs	r2, #64	; 0x40
 8005280:	5a9b      	ldrh	r3, [r3, r2]
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2104      	movs	r1, #4
 800528a:	438a      	bics	r2, r1
 800528c:	b291      	uxth	r1, r2
 800528e:	2240      	movs	r2, #64	; 0x40
 8005290:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2240      	movs	r2, #64	; 0x40
 8005298:	5a9b      	ldrh	r3, [r3, r2]
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2108      	movs	r1, #8
 80052a2:	438a      	bics	r2, r1
 80052a4:	b291      	uxth	r1, r2
 80052a6:	2240      	movs	r2, #64	; 0x40
 80052a8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	23b8      	movs	r3, #184	; 0xb8
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	5cd3      	ldrb	r3, [r2, r3]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d109      	bne.n	80052ca <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	23b8      	movs	r3, #184	; 0xb8
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	2100      	movs	r1, #0
 80052be:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2100      	movs	r1, #0
 80052c4:	0018      	movs	r0, r3
 80052c6:	f001 fc9f 	bl	8006c08 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f010 ff7f 	bl	80161d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2244      	movs	r2, #68	; 0x44
 80052d8:	5a9b      	ldrh	r3, [r3, r2]
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4957      	ldr	r1, [pc, #348]	; (8005440 <HAL_PCD_IRQHandler+0x278>)
 80052e2:	400a      	ands	r2, r1
 80052e4:	b291      	uxth	r1, r2
 80052e6:	2244      	movs	r2, #68	; 0x44
 80052e8:	5299      	strh	r1, [r3, r2]

    return;
 80052ea:	e0a0      	b.n	800542e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	4013      	ands	r3, r2
 80052f4:	d028      	beq.n	8005348 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2240      	movs	r2, #64	; 0x40
 80052fc:	5a9b      	ldrh	r3, [r3, r2]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2108      	movs	r1, #8
 8005306:	430a      	orrs	r2, r1
 8005308:	b291      	uxth	r1, r2
 800530a:	2240      	movs	r2, #64	; 0x40
 800530c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2244      	movs	r2, #68	; 0x44
 8005314:	5a9b      	ldrh	r3, [r3, r2]
 8005316:	b29a      	uxth	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4949      	ldr	r1, [pc, #292]	; (8005444 <HAL_PCD_IRQHandler+0x27c>)
 800531e:	400a      	ands	r2, r1
 8005320:	b291      	uxth	r1, r2
 8005322:	2244      	movs	r2, #68	; 0x44
 8005324:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2240      	movs	r2, #64	; 0x40
 800532c:	5a9b      	ldrh	r3, [r3, r2]
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2104      	movs	r1, #4
 8005336:	430a      	orrs	r2, r1
 8005338:	b291      	uxth	r1, r2
 800533a:	2240      	movs	r2, #64	; 0x40
 800533c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	0018      	movs	r0, r3
 8005342:	f010 ff29 	bl	8016198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005346:	e072      	b.n	800542e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2280      	movs	r2, #128	; 0x80
 800534c:	4013      	ands	r3, r2
 800534e:	d046      	beq.n	80053de <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2244      	movs	r2, #68	; 0x44
 8005356:	5a9b      	ldrh	r3, [r3, r2]
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	438a      	bics	r2, r1
 8005362:	b291      	uxth	r1, r2
 8005364:	2244      	movs	r2, #68	; 0x44
 8005366:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	23b8      	movs	r3, #184	; 0xb8
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	5cd3      	ldrb	r3, [r2, r3]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d12f      	bne.n	80053d4 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2240      	movs	r2, #64	; 0x40
 800537a:	5a9b      	ldrh	r3, [r3, r2]
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2104      	movs	r1, #4
 8005384:	430a      	orrs	r2, r1
 8005386:	b291      	uxth	r1, r2
 8005388:	2240      	movs	r2, #64	; 0x40
 800538a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2240      	movs	r2, #64	; 0x40
 8005392:	5a9b      	ldrh	r3, [r3, r2]
 8005394:	b29a      	uxth	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2108      	movs	r1, #8
 800539c:	430a      	orrs	r2, r1
 800539e:	b291      	uxth	r1, r2
 80053a0:	2240      	movs	r2, #64	; 0x40
 80053a2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	23b8      	movs	r3, #184	; 0xb8
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	2101      	movs	r1, #1
 80053ac:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2254      	movs	r2, #84	; 0x54
 80053b4:	5a9b      	ldrh	r3, [r3, r2]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	223c      	movs	r2, #60	; 0x3c
 80053bc:	4013      	ands	r3, r2
 80053be:	0019      	movs	r1, r3
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	23b9      	movs	r3, #185	; 0xb9
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2101      	movs	r1, #1
 80053cc:	0018      	movs	r0, r3
 80053ce:	f001 fc1b 	bl	8006c08 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80053d2:	e02c      	b.n	800542e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	0018      	movs	r0, r3
 80053d8:	f010 fede 	bl	8016198 <HAL_PCD_SuspendCallback>
    return;
 80053dc:	e027      	b.n	800542e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4013      	ands	r3, r2
 80053e6:	d010      	beq.n	800540a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2244      	movs	r2, #68	; 0x44
 80053ee:	5a9b      	ldrh	r3, [r3, r2]
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4914      	ldr	r1, [pc, #80]	; (8005448 <HAL_PCD_IRQHandler+0x280>)
 80053f8:	400a      	ands	r2, r1
 80053fa:	b291      	uxth	r1, r2
 80053fc:	2244      	movs	r2, #68	; 0x44
 80053fe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	0018      	movs	r0, r3
 8005404:	f010 fe94 	bl	8016130 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005408:	e011      	b.n	800542e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	4013      	ands	r3, r2
 8005412:	d00c      	beq.n	800542e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2244      	movs	r2, #68	; 0x44
 800541a:	5a9b      	ldrh	r3, [r3, r2]
 800541c:	b29a      	uxth	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	490a      	ldr	r1, [pc, #40]	; (800544c <HAL_PCD_IRQHandler+0x284>)
 8005424:	400a      	ands	r2, r1
 8005426:	b291      	uxth	r1, r2
 8005428:	2244      	movs	r2, #68	; 0x44
 800542a:	5299      	strh	r1, [r3, r2]

    return;
 800542c:	46c0      	nop			; (mov r8, r8)
  }
}
 800542e:	46bd      	mov	sp, r7
 8005430:	b004      	add	sp, #16
 8005432:	bd80      	pop	{r7, pc}
 8005434:	fffffbff 	.word	0xfffffbff
 8005438:	ffffbfff 	.word	0xffffbfff
 800543c:	ffffdfff 	.word	0xffffdfff
 8005440:	ffffefff 	.word	0xffffefff
 8005444:	fffff7ff 	.word	0xfffff7ff
 8005448:	fffffdff 	.word	0xfffffdff
 800544c:	fffffeff 	.word	0xfffffeff

08005450 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	000a      	movs	r2, r1
 800545a:	1cfb      	adds	r3, r7, #3
 800545c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	23aa      	movs	r3, #170	; 0xaa
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	5cd3      	ldrb	r3, [r2, r3]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_PCD_SetAddress+0x1e>
 800546a:	2302      	movs	r3, #2
 800546c:	e017      	b.n	800549e <HAL_PCD_SetAddress+0x4e>
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	23aa      	movs	r3, #170	; 0xaa
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	2101      	movs	r1, #1
 8005476:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	1cfa      	adds	r2, r7, #3
 800547c:	2124      	movs	r1, #36	; 0x24
 800547e:	7812      	ldrb	r2, [r2, #0]
 8005480:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	1cfb      	adds	r3, r7, #3
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	0019      	movs	r1, r3
 800548c:	0010      	movs	r0, r2
 800548e:	f007 f86f 	bl	800c570 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	23aa      	movs	r3, #170	; 0xaa
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	2100      	movs	r1, #0
 800549a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b002      	add	sp, #8
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80054a6:	b590      	push	{r4, r7, lr}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	000c      	movs	r4, r1
 80054b0:	0010      	movs	r0, r2
 80054b2:	0019      	movs	r1, r3
 80054b4:	1cfb      	adds	r3, r7, #3
 80054b6:	1c22      	adds	r2, r4, #0
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	003b      	movs	r3, r7
 80054bc:	1c02      	adds	r2, r0, #0
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	1cbb      	adds	r3, r7, #2
 80054c2:	1c0a      	adds	r2, r1, #0
 80054c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80054c6:	230b      	movs	r3, #11
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054ce:	1cfb      	adds	r3, r7, #3
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	b25b      	sxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	da0f      	bge.n	80054f8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054d8:	1cfb      	adds	r3, r7, #3
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2207      	movs	r2, #7
 80054de:	4013      	ands	r3, r2
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	0013      	movs	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	189b      	adds	r3, r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	705a      	strb	r2, [r3, #1]
 80054f6:	e00f      	b.n	8005518 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054f8:	1cfb      	adds	r3, r7, #3
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2207      	movs	r2, #7
 80054fe:	401a      	ands	r2, r3
 8005500:	0013      	movs	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	189b      	adds	r3, r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	3369      	adds	r3, #105	; 0x69
 800550a:	33ff      	adds	r3, #255	; 0xff
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	18d3      	adds	r3, r2, r3
 8005510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005518:	1cfb      	adds	r3, r7, #3
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2207      	movs	r2, #7
 800551e:	4013      	ands	r3, r2
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005526:	003b      	movs	r3, r7
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1cba      	adds	r2, r7, #2
 8005532:	7812      	ldrb	r2, [r2, #0]
 8005534:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005536:	1cbb      	adds	r3, r7, #2
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d102      	bne.n	8005544 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	23aa      	movs	r3, #170	; 0xaa
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	5cd3      	ldrb	r3, [r2, r3]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_PCD_EP_Open+0xae>
 8005550:	2302      	movs	r3, #2
 8005552:	e013      	b.n	800557c <HAL_PCD_EP_Open+0xd6>
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	23aa      	movs	r3, #170	; 0xaa
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	2101      	movs	r1, #1
 800555c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	0011      	movs	r1, r2
 8005566:	0018      	movs	r0, r3
 8005568:	f005 f866 	bl	800a638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	23aa      	movs	r3, #170	; 0xaa
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	2100      	movs	r1, #0
 8005574:	54d1      	strb	r1, [r2, r3]

  return ret;
 8005576:	230b      	movs	r3, #11
 8005578:	18fb      	adds	r3, r7, r3
 800557a:	781b      	ldrb	r3, [r3, #0]
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b005      	add	sp, #20
 8005582:	bd90      	pop	{r4, r7, pc}

08005584 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	000a      	movs	r2, r1
 800558e:	1cfb      	adds	r3, r7, #3
 8005590:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005592:	1cfb      	adds	r3, r7, #3
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	b25b      	sxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	da0f      	bge.n	80055bc <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800559c:	1cfb      	adds	r3, r7, #3
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2207      	movs	r2, #7
 80055a2:	4013      	ands	r3, r2
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	0013      	movs	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	189b      	adds	r3, r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	18d3      	adds	r3, r2, r3
 80055b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	705a      	strb	r2, [r3, #1]
 80055ba:	e00f      	b.n	80055dc <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055bc:	1cfb      	adds	r3, r7, #3
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2207      	movs	r2, #7
 80055c2:	401a      	ands	r2, r3
 80055c4:	0013      	movs	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	189b      	adds	r3, r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	3369      	adds	r3, #105	; 0x69
 80055ce:	33ff      	adds	r3, #255	; 0xff
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	18d3      	adds	r3, r2, r3
 80055d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80055dc:	1cfb      	adds	r3, r7, #3
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2207      	movs	r2, #7
 80055e2:	4013      	ands	r3, r2
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	23aa      	movs	r3, #170	; 0xaa
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	5cd3      	ldrb	r3, [r2, r3]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_PCD_EP_Close+0x76>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e011      	b.n	800561e <HAL_PCD_EP_Close+0x9a>
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	23aa      	movs	r3, #170	; 0xaa
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	2101      	movs	r1, #1
 8005602:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	0011      	movs	r1, r2
 800560c:	0018      	movs	r0, r3
 800560e:	f005 fbb5 	bl	800ad7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	23aa      	movs	r3, #170	; 0xaa
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	2100      	movs	r1, #0
 800561a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b004      	add	sp, #16
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b086      	sub	sp, #24
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	200b      	movs	r0, #11
 8005634:	183b      	adds	r3, r7, r0
 8005636:	1c0a      	adds	r2, r1, #0
 8005638:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800563a:	0001      	movs	r1, r0
 800563c:	187b      	adds	r3, r7, r1
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2207      	movs	r2, #7
 8005642:	401a      	ands	r2, r3
 8005644:	0013      	movs	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	189b      	adds	r3, r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	3369      	adds	r3, #105	; 0x69
 800564e:	33ff      	adds	r3, #255	; 0xff
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	18d3      	adds	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2200      	movs	r2, #0
 8005666:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2200      	movs	r2, #0
 800566c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800566e:	187b      	adds	r3, r7, r1
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2207      	movs	r2, #7
 8005674:	4013      	ands	r3, r2
 8005676:	b2da      	uxtb	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	0011      	movs	r1, r2
 8005684:	0018      	movs	r0, r3
 8005686:	f005 fd39 	bl	800b0fc <USB_EPStartXfer>

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	0018      	movs	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	b006      	add	sp, #24
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	000a      	movs	r2, r1
 800569e:	1cfb      	adds	r3, r7, #3
 80056a0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80056a2:	1cfb      	adds	r3, r7, #3
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2207      	movs	r2, #7
 80056a8:	401a      	ands	r2, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	23c2      	movs	r3, #194	; 0xc2
 80056ae:	0059      	lsls	r1, r3, #1
 80056b0:	0013      	movs	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	189b      	adds	r3, r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	18c3      	adds	r3, r0, r3
 80056ba:	185b      	adds	r3, r3, r1
 80056bc:	681b      	ldr	r3, [r3, #0]
}
 80056be:	0018      	movs	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b002      	add	sp, #8
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	200b      	movs	r0, #11
 80056d4:	183b      	adds	r3, r7, r0
 80056d6:	1c0a      	adds	r2, r1, #0
 80056d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056da:	183b      	adds	r3, r7, r0
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2207      	movs	r2, #7
 80056e0:	4013      	ands	r3, r2
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	0013      	movs	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	189b      	adds	r3, r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	18d3      	adds	r3, r2, r3
 80056f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	2101      	movs	r1, #1
 8005704:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2200      	movs	r2, #0
 8005710:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2201      	movs	r2, #1
 8005716:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005718:	183b      	adds	r3, r7, r0
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2207      	movs	r2, #7
 800571e:	4013      	ands	r3, r2
 8005720:	b2da      	uxtb	r2, r3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	0011      	movs	r1, r2
 800572e:	0018      	movs	r0, r3
 8005730:	f005 fce4 	bl	800b0fc <USB_EPStartXfer>

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	0018      	movs	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	b006      	add	sp, #24
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	000a      	movs	r2, r1
 8005748:	1cfb      	adds	r3, r7, #3
 800574a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800574c:	1cfb      	adds	r3, r7, #3
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2207      	movs	r2, #7
 8005752:	401a      	ands	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d901      	bls.n	8005760 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e046      	b.n	80057ee <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005760:	1cfb      	adds	r3, r7, #3
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	b25b      	sxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	da0f      	bge.n	800578a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800576a:	1cfb      	adds	r3, r7, #3
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2207      	movs	r2, #7
 8005770:	4013      	ands	r3, r2
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	0013      	movs	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	189b      	adds	r3, r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	18d3      	adds	r3, r2, r3
 8005780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	705a      	strb	r2, [r3, #1]
 8005788:	e00d      	b.n	80057a6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800578a:	1cfb      	adds	r3, r7, #3
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	0013      	movs	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	189b      	adds	r3, r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	3369      	adds	r3, #105	; 0x69
 8005798:	33ff      	adds	r3, #255	; 0xff
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	18d3      	adds	r3, r2, r3
 800579e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ac:	1cfb      	adds	r3, r7, #3
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2207      	movs	r2, #7
 80057b2:	4013      	ands	r3, r2
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	23aa      	movs	r3, #170	; 0xaa
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	5cd3      	ldrb	r3, [r2, r3]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_PCD_EP_SetStall+0x8c>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e011      	b.n	80057ee <HAL_PCD_EP_SetStall+0xb0>
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	23aa      	movs	r3, #170	; 0xaa
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	2101      	movs	r1, #1
 80057d2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	0011      	movs	r1, r2
 80057dc:	0018      	movs	r0, r3
 80057de:	f006 fdc5 	bl	800c36c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	23aa      	movs	r3, #170	; 0xaa
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	2100      	movs	r1, #0
 80057ea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	0018      	movs	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b004      	add	sp, #16
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	000a      	movs	r2, r1
 8005800:	1cfb      	adds	r3, r7, #3
 8005802:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005804:	1cfb      	adds	r3, r7, #3
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	220f      	movs	r2, #15
 800580a:	401a      	ands	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d901      	bls.n	8005818 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e048      	b.n	80058aa <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005818:	1cfb      	adds	r3, r7, #3
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b25b      	sxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	da0f      	bge.n	8005842 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005822:	1cfb      	adds	r3, r7, #3
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2207      	movs	r2, #7
 8005828:	4013      	ands	r3, r2
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	0013      	movs	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	189b      	adds	r3, r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	18d3      	adds	r3, r2, r3
 8005838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	705a      	strb	r2, [r3, #1]
 8005840:	e00f      	b.n	8005862 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005842:	1cfb      	adds	r3, r7, #3
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2207      	movs	r2, #7
 8005848:	401a      	ands	r2, r3
 800584a:	0013      	movs	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	189b      	adds	r3, r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	3369      	adds	r3, #105	; 0x69
 8005854:	33ff      	adds	r3, #255	; 0xff
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	18d3      	adds	r3, r2, r3
 800585a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005868:	1cfb      	adds	r3, r7, #3
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2207      	movs	r2, #7
 800586e:	4013      	ands	r3, r2
 8005870:	b2da      	uxtb	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	23aa      	movs	r3, #170	; 0xaa
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	5cd3      	ldrb	r3, [r2, r3]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_PCD_EP_ClrStall+0x90>
 8005882:	2302      	movs	r3, #2
 8005884:	e011      	b.n	80058aa <HAL_PCD_EP_ClrStall+0xb4>
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	23aa      	movs	r3, #170	; 0xaa
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	2101      	movs	r1, #1
 800588e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	0011      	movs	r1, r2
 8005898:	0018      	movs	r0, r3
 800589a:	f006 fdb7 	bl	800c40c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	23aa      	movs	r3, #170	; 0xaa
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	2100      	movs	r1, #0
 80058a6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b004      	add	sp, #16
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80058b4:	b5b0      	push	{r4, r5, r7, lr}
 80058b6:	b096      	sub	sp, #88	; 0x58
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058bc:	f000 fbec 	bl	8006098 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	204e      	movs	r0, #78	; 0x4e
 80058c6:	183b      	adds	r3, r7, r0
 80058c8:	2144      	movs	r1, #68	; 0x44
 80058ca:	5a52      	ldrh	r2, [r2, r1]
 80058cc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80058ce:	183b      	adds	r3, r7, r0
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	244d      	movs	r4, #77	; 0x4d
 80058d6:	193b      	adds	r3, r7, r4
 80058d8:	210f      	movs	r1, #15
 80058da:	400a      	ands	r2, r1
 80058dc:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80058de:	193b      	adds	r3, r7, r4
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d000      	beq.n	80058e8 <PCD_EP_ISR_Handler+0x34>
 80058e6:	e18f      	b.n	8005c08 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80058e8:	183b      	adds	r3, r7, r0
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	2210      	movs	r2, #16
 80058ee:	4013      	ands	r3, r2
 80058f0:	d155      	bne.n	800599e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	200e      	movs	r0, #14
 80058fc:	183b      	adds	r3, r7, r0
 80058fe:	49bb      	ldr	r1, [pc, #748]	; (8005bec <PCD_EP_ISR_Handler+0x338>)
 8005900:	400a      	ands	r2, r1
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	183a      	adds	r2, r7, r0
 800590a:	8812      	ldrh	r2, [r2, #0]
 800590c:	49b8      	ldr	r1, [pc, #736]	; (8005bf0 <PCD_EP_ISR_Handler+0x33c>)
 800590e:	430a      	orrs	r2, r1
 8005910:	b292      	uxth	r2, r2
 8005912:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3328      	adds	r3, #40	; 0x28
 8005918:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2250      	movs	r2, #80	; 0x50
 8005920:	5a9b      	ldrh	r3, [r3, r2]
 8005922:	b29b      	uxth	r3, r3
 8005924:	001a      	movs	r2, r3
 8005926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	18d2      	adds	r2, r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	18d3      	adds	r3, r2, r3
 8005934:	4aaf      	ldr	r2, [pc, #700]	; (8005bf4 <PCD_EP_ISR_Handler+0x340>)
 8005936:	4694      	mov	ip, r2
 8005938:	4463      	add	r3, ip
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	059b      	lsls	r3, r3, #22
 800593e:	0d9a      	lsrs	r2, r3, #22
 8005940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005942:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	18d2      	adds	r2, r2, r3
 800594e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005950:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2100      	movs	r1, #0
 8005956:	0018      	movs	r0, r3
 8005958:	f010 fbcc 	bl	80160f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2224      	movs	r2, #36	; 0x24
 8005960:	5c9b      	ldrb	r3, [r3, r2]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <PCD_EP_ISR_Handler+0xb8>
 8005968:	f000 fb96 	bl	8006098 <PCD_EP_ISR_Handler+0x7e4>
 800596c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <PCD_EP_ISR_Handler+0xc4>
 8005974:	f000 fb90 	bl	8006098 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	5c9b      	ldrb	r3, [r3, r2]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2280      	movs	r2, #128	; 0x80
 8005982:	4252      	negs	r2, r2
 8005984:	4313      	orrs	r3, r2
 8005986:	b2da      	uxtb	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	b291      	uxth	r1, r2
 800598e:	224c      	movs	r2, #76	; 0x4c
 8005990:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2224      	movs	r2, #36	; 0x24
 8005996:	2100      	movs	r1, #0
 8005998:	5499      	strb	r1, [r3, r2]
 800599a:	f000 fb7d 	bl	8006098 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3369      	adds	r3, #105	; 0x69
 80059a2:	33ff      	adds	r3, #255	; 0xff
 80059a4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	214a      	movs	r1, #74	; 0x4a
 80059ac:	187b      	adds	r3, r7, r1
 80059ae:	8812      	ldrh	r2, [r2, #0]
 80059b0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	881a      	ldrh	r2, [r3, #0]
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	4013      	ands	r3, r2
 80059bc:	d037      	beq.n	8005a2e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2250      	movs	r2, #80	; 0x50
 80059c4:	5a9b      	ldrh	r3, [r3, r2]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	001a      	movs	r2, r3
 80059ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	18d2      	adds	r2, r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	18d3      	adds	r3, r2, r3
 80059d8:	4a87      	ldr	r2, [pc, #540]	; (8005bf8 <PCD_EP_ISR_Handler+0x344>)
 80059da:	4694      	mov	ip, r2
 80059dc:	4463      	add	r3, ip
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	059b      	lsls	r3, r3, #22
 80059e2:	0d9a      	lsrs	r2, r3, #22
 80059e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	22ac      	movs	r2, #172	; 0xac
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	1899      	adds	r1, r3, r2
 80059f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80059f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f006 fe38 	bl	800c672 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	2010      	movs	r0, #16
 8005a0c:	183b      	adds	r3, r7, r0
 8005a0e:	497b      	ldr	r1, [pc, #492]	; (8005bfc <PCD_EP_ISR_Handler+0x348>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	183a      	adds	r2, r7, r0
 8005a1a:	8812      	ldrh	r2, [r2, #0]
 8005a1c:	2180      	movs	r1, #128	; 0x80
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	b292      	uxth	r2, r2
 8005a22:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	0018      	movs	r0, r3
 8005a28:	f010 fb2e 	bl	8016088 <HAL_PCD_SetupStageCallback>
 8005a2c:	e334      	b.n	8006098 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a2e:	234a      	movs	r3, #74	; 0x4a
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	2200      	movs	r2, #0
 8005a34:	5e9b      	ldrsh	r3, [r3, r2]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	db00      	blt.n	8005a3c <PCD_EP_ISR_Handler+0x188>
 8005a3a:	e32d      	b.n	8006098 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	201e      	movs	r0, #30
 8005a46:	183b      	adds	r3, r7, r0
 8005a48:	496c      	ldr	r1, [pc, #432]	; (8005bfc <PCD_EP_ISR_Handler+0x348>)
 8005a4a:	400a      	ands	r2, r1
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	183a      	adds	r2, r7, r0
 8005a54:	8812      	ldrh	r2, [r2, #0]
 8005a56:	2180      	movs	r1, #128	; 0x80
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	b292      	uxth	r2, r2
 8005a5c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2250      	movs	r2, #80	; 0x50
 8005a64:	5a9b      	ldrh	r3, [r3, r2]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	001a      	movs	r2, r3
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	18d2      	adds	r2, r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	18d3      	adds	r3, r2, r3
 8005a78:	4a5f      	ldr	r2, [pc, #380]	; (8005bf8 <PCD_EP_ISR_Handler+0x344>)
 8005a7a:	4694      	mov	ip, r2
 8005a7c:	4463      	add	r3, ip
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	059b      	lsls	r3, r3, #22
 8005a82:	0d9a      	lsrs	r2, r3, #22
 8005a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01a      	beq.n	8005ac6 <PCD_EP_ISR_Handler+0x212>
 8005a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d016      	beq.n	8005ac6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a9e:	6959      	ldr	r1, [r3, #20]
 8005aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f006 fde2 	bl	800c672 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	18d2      	adds	r2, r2, r3
 8005ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f010 faf6 	bl	80160b2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	214a      	movs	r1, #74	; 0x4a
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	8812      	ldrh	r2, [r2, #0]
 8005ad0:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005ad2:	187b      	adds	r3, r7, r1
 8005ad4:	881a      	ldrh	r2, [r3, #0]
 8005ad6:	2380      	movs	r3, #128	; 0x80
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	4013      	ands	r3, r2
 8005adc:	d000      	beq.n	8005ae0 <PCD_EP_ISR_Handler+0x22c>
 8005ade:	e2db      	b.n	8006098 <PCD_EP_ISR_Handler+0x7e4>
 8005ae0:	187b      	adds	r3, r7, r1
 8005ae2:	881a      	ldrh	r2, [r3, #0]
 8005ae4:	23c0      	movs	r3, #192	; 0xc0
 8005ae6:	019b      	lsls	r3, r3, #6
 8005ae8:	401a      	ands	r2, r3
 8005aea:	23c0      	movs	r3, #192	; 0xc0
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d100      	bne.n	8005af4 <PCD_EP_ISR_Handler+0x240>
 8005af2:	e2d1      	b.n	8006098 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2250      	movs	r2, #80	; 0x50
 8005b00:	5a9b      	ldrh	r3, [r3, r2]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	001a      	movs	r2, r3
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	189b      	adds	r3, r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	4a3a      	ldr	r2, [pc, #232]	; (8005bf8 <PCD_EP_ISR_Handler+0x344>)
 8005b10:	4694      	mov	ip, r2
 8005b12:	4463      	add	r3, ip
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	059b      	lsls	r3, r3, #22
 8005b1e:	0d9b      	lsrs	r3, r3, #22
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b2c:	d91a      	bls.n	8005b64 <PCD_EP_ISR_Handler+0x2b0>
 8005b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	647b      	str	r3, [r7, #68]	; 0x44
 8005b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	221f      	movs	r2, #31
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d102      	bne.n	8005b46 <PCD_EP_ISR_Handler+0x292>
 8005b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b42:	3b01      	subs	r3, #1
 8005b44:	647b      	str	r3, [r7, #68]	; 0x44
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	4a25      	ldr	r2, [pc, #148]	; (8005bf0 <PCD_EP_ISR_Handler+0x33c>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	801a      	strh	r2, [r3, #0]
 8005b62:	e023      	b.n	8005bac <PCD_EP_ISR_Handler+0x2f8>
 8005b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d108      	bne.n	8005b7e <PCD_EP_ISR_Handler+0x2ca>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <PCD_EP_ISR_Handler+0x33c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	e016      	b.n	8005bac <PCD_EP_ISR_Handler+0x2f8>
 8005b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	647b      	str	r3, [r7, #68]	; 0x44
 8005b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d002      	beq.n	8005b96 <PCD_EP_ISR_Handler+0x2e2>
 8005b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b92:	3301      	adds	r3, #1
 8005b94:	647b      	str	r3, [r7, #68]	; 0x44
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	2012      	movs	r0, #18
 8005bb6:	183b      	adds	r3, r7, r0
 8005bb8:	4911      	ldr	r1, [pc, #68]	; (8005c00 <PCD_EP_ISR_Handler+0x34c>)
 8005bba:	400a      	ands	r2, r1
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	183b      	adds	r3, r7, r0
 8005bc0:	183a      	adds	r2, r7, r0
 8005bc2:	8812      	ldrh	r2, [r2, #0]
 8005bc4:	2180      	movs	r1, #128	; 0x80
 8005bc6:	0149      	lsls	r1, r1, #5
 8005bc8:	404a      	eors	r2, r1
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	183b      	adds	r3, r7, r0
 8005bce:	183a      	adds	r2, r7, r0
 8005bd0:	8812      	ldrh	r2, [r2, #0]
 8005bd2:	2180      	movs	r1, #128	; 0x80
 8005bd4:	0189      	lsls	r1, r1, #6
 8005bd6:	404a      	eors	r2, r1
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	183a      	adds	r2, r7, r0
 8005be0:	8812      	ldrh	r2, [r2, #0]
 8005be2:	4908      	ldr	r1, [pc, #32]	; (8005c04 <PCD_EP_ISR_Handler+0x350>)
 8005be4:	430a      	orrs	r2, r1
 8005be6:	b292      	uxth	r2, r2
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	e255      	b.n	8006098 <PCD_EP_ISR_Handler+0x7e4>
 8005bec:	ffff8f0f 	.word	0xffff8f0f
 8005bf0:	ffff8000 	.word	0xffff8000
 8005bf4:	00000402 	.word	0x00000402
 8005bf8:	00000406 	.word	0x00000406
 8005bfc:	00000f8f 	.word	0x00000f8f
 8005c00:	ffffbf8f 	.word	0xffffbf8f
 8005c04:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	001a      	movs	r2, r3
 8005c0e:	204d      	movs	r0, #77	; 0x4d
 8005c10:	183b      	adds	r3, r7, r0
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	18d2      	adds	r2, r2, r3
 8005c18:	214a      	movs	r1, #74	; 0x4a
 8005c1a:	187b      	adds	r3, r7, r1
 8005c1c:	8812      	ldrh	r2, [r2, #0]
 8005c1e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c20:	187b      	adds	r3, r7, r1
 8005c22:	2200      	movs	r2, #0
 8005c24:	5e9b      	ldrsh	r3, [r3, r2]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	db00      	blt.n	8005c2c <PCD_EP_ISR_Handler+0x378>
 8005c2a:	e0fa      	b.n	8005e22 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	001a      	movs	r2, r3
 8005c32:	183b      	adds	r3, r7, r0
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	18d3      	adds	r3, r2, r3
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	2448      	movs	r4, #72	; 0x48
 8005c40:	193b      	adds	r3, r7, r4
 8005c42:	49d1      	ldr	r1, [pc, #836]	; (8005f88 <PCD_EP_ISR_Handler+0x6d4>)
 8005c44:	400a      	ands	r2, r1
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	001a      	movs	r2, r3
 8005c4e:	183b      	adds	r3, r7, r0
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	18d3      	adds	r3, r2, r3
 8005c56:	193a      	adds	r2, r7, r4
 8005c58:	8812      	ldrh	r2, [r2, #0]
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005c62:	183b      	adds	r3, r7, r0
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	0013      	movs	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	189b      	adds	r3, r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	3369      	adds	r3, #105	; 0x69
 8005c70:	33ff      	adds	r3, #255	; 0xff
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	18d3      	adds	r3, r2, r3
 8005c76:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c7a:	7b1b      	ldrb	r3, [r3, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d125      	bne.n	8005ccc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2250      	movs	r2, #80	; 0x50
 8005c86:	5a9b      	ldrh	r3, [r3, r2]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	001a      	movs	r2, r3
 8005c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	18d2      	adds	r2, r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	18d3      	adds	r3, r2, r3
 8005c9a:	4abc      	ldr	r2, [pc, #752]	; (8005f8c <PCD_EP_ISR_Handler+0x6d8>)
 8005c9c:	4694      	mov	ip, r2
 8005c9e:	4463      	add	r3, ip
 8005ca0:	881a      	ldrh	r2, [r3, #0]
 8005ca2:	2450      	movs	r4, #80	; 0x50
 8005ca4:	193b      	adds	r3, r7, r4
 8005ca6:	0592      	lsls	r2, r2, #22
 8005ca8:	0d92      	lsrs	r2, r2, #22
 8005caa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8005cac:	193b      	adds	r3, r7, r4
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d100      	bne.n	8005cb6 <PCD_EP_ISR_Handler+0x402>
 8005cb4:	e08d      	b.n	8005dd2 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cbc:	6959      	ldr	r1, [r3, #20]
 8005cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc0:	88da      	ldrh	r2, [r3, #6]
 8005cc2:	193b      	adds	r3, r7, r4
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	f006 fcd4 	bl	800c672 <USB_ReadPMA>
 8005cca:	e082      	b.n	8005dd2 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cce:	78db      	ldrb	r3, [r3, #3]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d10c      	bne.n	8005cee <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005cd4:	2350      	movs	r3, #80	; 0x50
 8005cd6:	18fc      	adds	r4, r7, r3
 8005cd8:	234a      	movs	r3, #74	; 0x4a
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	881a      	ldrh	r2, [r3, #0]
 8005cde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f000 f9ec 	bl	80060c0 <HAL_PCD_EP_DB_Receive>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	8023      	strh	r3, [r4, #0]
 8005cec:	e071      	b.n	8005dd2 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	001a      	movs	r2, r3
 8005cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	18d3      	adds	r3, r2, r3
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	2052      	movs	r0, #82	; 0x52
 8005d02:	183b      	adds	r3, r7, r0
 8005d04:	49a2      	ldr	r1, [pc, #648]	; (8005f90 <PCD_EP_ISR_Handler+0x6dc>)
 8005d06:	400a      	ands	r2, r1
 8005d08:	801a      	strh	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	001a      	movs	r2, r3
 8005d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	18d3      	adds	r3, r2, r3
 8005d18:	183a      	adds	r2, r7, r0
 8005d1a:	8812      	ldrh	r2, [r2, #0]
 8005d1c:	499d      	ldr	r1, [pc, #628]	; (8005f94 <PCD_EP_ISR_Handler+0x6e0>)
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	b292      	uxth	r2, r2
 8005d22:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	001a      	movs	r2, r3
 8005d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	18d3      	adds	r3, r2, r3
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	001a      	movs	r2, r3
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	01db      	lsls	r3, r3, #7
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d024      	beq.n	8005d8a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2250      	movs	r2, #80	; 0x50
 8005d46:	5a9b      	ldrh	r3, [r3, r2]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	001a      	movs	r2, r3
 8005d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	18d2      	adds	r2, r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	18d3      	adds	r3, r2, r3
 8005d5a:	4a8f      	ldr	r2, [pc, #572]	; (8005f98 <PCD_EP_ISR_Handler+0x6e4>)
 8005d5c:	4694      	mov	ip, r2
 8005d5e:	4463      	add	r3, ip
 8005d60:	881a      	ldrh	r2, [r3, #0]
 8005d62:	2450      	movs	r4, #80	; 0x50
 8005d64:	193b      	adds	r3, r7, r4
 8005d66:	0592      	lsls	r2, r2, #22
 8005d68:	0d92      	lsrs	r2, r2, #22
 8005d6a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005d6c:	193b      	adds	r3, r7, r4
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02e      	beq.n	8005dd2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7a:	6959      	ldr	r1, [r3, #20]
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7e:	891a      	ldrh	r2, [r3, #8]
 8005d80:	193b      	adds	r3, r7, r4
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	f006 fc75 	bl	800c672 <USB_ReadPMA>
 8005d88:	e023      	b.n	8005dd2 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2250      	movs	r2, #80	; 0x50
 8005d90:	5a9b      	ldrh	r3, [r3, r2]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	001a      	movs	r2, r3
 8005d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	18d2      	adds	r2, r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	18d3      	adds	r3, r2, r3
 8005da4:	4a79      	ldr	r2, [pc, #484]	; (8005f8c <PCD_EP_ISR_Handler+0x6d8>)
 8005da6:	4694      	mov	ip, r2
 8005da8:	4463      	add	r3, ip
 8005daa:	881a      	ldrh	r2, [r3, #0]
 8005dac:	2450      	movs	r4, #80	; 0x50
 8005dae:	193b      	adds	r3, r7, r4
 8005db0:	0592      	lsls	r2, r2, #22
 8005db2:	0d92      	lsrs	r2, r2, #22
 8005db4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005db6:	193b      	adds	r3, r7, r4
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc4:	6959      	ldr	r1, [r3, #20]
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc8:	895a      	ldrh	r2, [r3, #10]
 8005dca:	193b      	adds	r3, r7, r4
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	f006 fc50 	bl	800c672 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd4:	69da      	ldr	r2, [r3, #28]
 8005dd6:	2150      	movs	r1, #80	; 0x50
 8005dd8:	187b      	adds	r3, r7, r1
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	18d2      	adds	r2, r2, r3
 8005dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	187b      	adds	r3, r7, r1
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	18d2      	adds	r2, r2, r3
 8005dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <PCD_EP_ISR_Handler+0x550>
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d207      	bcs.n	8005e14 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0011      	movs	r1, r2
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f010 f950 	bl	80160b2 <HAL_PCD_DataOutStageCallback>
 8005e12:	e006      	b.n	8005e22 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e1a:	0011      	movs	r1, r2
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f005 f96d 	bl	800b0fc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e22:	244a      	movs	r4, #74	; 0x4a
 8005e24:	193b      	adds	r3, r7, r4
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d100      	bne.n	8005e30 <PCD_EP_ISR_Handler+0x57c>
 8005e2e:	e133      	b.n	8006098 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005e30:	204d      	movs	r0, #77	; 0x4d
 8005e32:	183b      	adds	r3, r7, r0
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	0013      	movs	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	189b      	adds	r3, r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	18d3      	adds	r3, r2, r3
 8005e44:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	001a      	movs	r2, r3
 8005e4c:	183b      	adds	r3, r7, r0
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	18d3      	adds	r3, r2, r3
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	2542      	movs	r5, #66	; 0x42
 8005e5a:	197b      	adds	r3, r7, r5
 8005e5c:	494f      	ldr	r1, [pc, #316]	; (8005f9c <PCD_EP_ISR_Handler+0x6e8>)
 8005e5e:	400a      	ands	r2, r1
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	001a      	movs	r2, r3
 8005e68:	183b      	adds	r3, r7, r0
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	18d3      	adds	r3, r2, r3
 8005e70:	197a      	adds	r2, r7, r5
 8005e72:	8812      	ldrh	r2, [r2, #0]
 8005e74:	494a      	ldr	r1, [pc, #296]	; (8005fa0 <PCD_EP_ISR_Handler+0x6ec>)
 8005e76:	430a      	orrs	r2, r1
 8005e78:	b292      	uxth	r2, r2
 8005e7a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7e:	78db      	ldrb	r3, [r3, #3]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d000      	beq.n	8005e86 <PCD_EP_ISR_Handler+0x5d2>
 8005e84:	e0af      	b.n	8005fe6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8005e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e88:	2200      	movs	r2, #0
 8005e8a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8e:	7b1b      	ldrb	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d100      	bne.n	8005e96 <PCD_EP_ISR_Handler+0x5e2>
 8005e94:	e09f      	b.n	8005fd6 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e96:	193b      	adds	r3, r7, r4
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	2240      	movs	r2, #64	; 0x40
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d046      	beq.n	8005f2e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d125      	bne.n	8005ef4 <PCD_EP_ISR_Handler+0x640>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2250      	movs	r2, #80	; 0x50
 8005eb4:	5a9b      	ldrh	r3, [r3, r2]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	001a      	movs	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	189b      	adds	r3, r3, r2
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	00da      	lsls	r2, r3, #3
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	18d3      	adds	r3, r2, r3
 8005eca:	4a33      	ldr	r2, [pc, #204]	; (8005f98 <PCD_EP_ISR_Handler+0x6e4>)
 8005ecc:	4694      	mov	ip, r2
 8005ece:	4463      	add	r3, ip
 8005ed0:	623b      	str	r3, [r7, #32]
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	059b      	lsls	r3, r3, #22
 8005eda:	0d9b      	lsrs	r3, r3, #22
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	4a2d      	ldr	r2, [pc, #180]	; (8005fa0 <PCD_EP_ISR_Handler+0x6ec>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	e070      	b.n	8005fd6 <PCD_EP_ISR_Handler+0x722>
 8005ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d16c      	bne.n	8005fd6 <PCD_EP_ISR_Handler+0x722>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2250      	movs	r2, #80	; 0x50
 8005f08:	5a9b      	ldrh	r3, [r3, r2]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	189b      	adds	r3, r3, r2
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	00da      	lsls	r2, r3, #3
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	18d3      	adds	r3, r2, r3
 8005f1e:	4a1e      	ldr	r2, [pc, #120]	; (8005f98 <PCD_EP_ISR_Handler+0x6e4>)
 8005f20:	4694      	mov	ip, r2
 8005f22:	4463      	add	r3, ip
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	2200      	movs	r2, #0
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	e053      	b.n	8005fd6 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d133      	bne.n	8005fa4 <PCD_EP_ISR_Handler+0x6f0>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2250      	movs	r2, #80	; 0x50
 8005f48:	5a9b      	ldrh	r3, [r3, r2]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	001a      	movs	r2, r3
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	189b      	adds	r3, r3, r2
 8005f52:	637b      	str	r3, [r7, #52]	; 0x34
 8005f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	00da      	lsls	r2, r3, #3
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	18d3      	adds	r3, r2, r3
 8005f5e:	4a0b      	ldr	r2, [pc, #44]	; (8005f8c <PCD_EP_ISR_Handler+0x6d8>)
 8005f60:	4694      	mov	ip, r2
 8005f62:	4463      	add	r3, ip
 8005f64:	633b      	str	r3, [r7, #48]	; 0x30
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	059b      	lsls	r3, r3, #22
 8005f6e:	0d9b      	lsrs	r3, r3, #22
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	4a08      	ldr	r2, [pc, #32]	; (8005fa0 <PCD_EP_ISR_Handler+0x6ec>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	e026      	b.n	8005fd6 <PCD_EP_ISR_Handler+0x722>
 8005f88:	00000f8f 	.word	0x00000f8f
 8005f8c:	00000406 	.word	0x00000406
 8005f90:	ffff8f8f 	.word	0xffff8f8f
 8005f94:	ffff80c0 	.word	0xffff80c0
 8005f98:	00000402 	.word	0x00000402
 8005f9c:	ffff8f0f 	.word	0xffff8f0f
 8005fa0:	ffff8000 	.word	0xffff8000
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d114      	bne.n	8005fd6 <PCD_EP_ISR_Handler+0x722>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2250      	movs	r2, #80	; 0x50
 8005fb2:	5a9b      	ldrh	r3, [r3, r2]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	001a      	movs	r2, r3
 8005fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fba:	189b      	adds	r3, r3, r2
 8005fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	00da      	lsls	r2, r3, #3
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc6:	18d3      	adds	r3, r2, r3
 8005fc8:	4a3b      	ldr	r2, [pc, #236]	; (80060b8 <PCD_EP_ISR_Handler+0x804>)
 8005fca:	4694      	mov	ip, r2
 8005fcc:	4463      	add	r3, ip
 8005fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	0011      	movs	r1, r2
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f010 f888 	bl	80160f4 <HAL_PCD_DataInStageCallback>
 8005fe4:	e058      	b.n	8006098 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005fe6:	234a      	movs	r3, #74	; 0x4a
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	881a      	ldrh	r2, [r3, #0]
 8005fec:	2380      	movs	r3, #128	; 0x80
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d149      	bne.n	8006088 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2250      	movs	r2, #80	; 0x50
 8005ffa:	5a9b      	ldrh	r3, [r3, r2]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	001a      	movs	r2, r3
 8006000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	18d2      	adds	r2, r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	18d3      	adds	r3, r2, r3
 800600e:	4a2b      	ldr	r2, [pc, #172]	; (80060bc <PCD_EP_ISR_Handler+0x808>)
 8006010:	4694      	mov	ip, r2
 8006012:	4463      	add	r3, ip
 8006014:	881a      	ldrh	r2, [r3, #0]
 8006016:	2140      	movs	r1, #64	; 0x40
 8006018:	187b      	adds	r3, r7, r1
 800601a:	0592      	lsls	r2, r2, #22
 800601c:	0d92      	lsrs	r2, r2, #22
 800601e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8006020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006022:	699a      	ldr	r2, [r3, #24]
 8006024:	187b      	adds	r3, r7, r1
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d907      	bls.n	800603c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800602c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602e:	699a      	ldr	r2, [r3, #24]
 8006030:	187b      	adds	r3, r7, r1
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006038:	619a      	str	r2, [r3, #24]
 800603a:	e002      	b.n	8006042 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800603c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603e:	2200      	movs	r2, #0
 8006040:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800604a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800604c:	781a      	ldrb	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	0011      	movs	r1, r2
 8006052:	0018      	movs	r0, r3
 8006054:	f010 f84e 	bl	80160f4 <HAL_PCD_DataInStageCallback>
 8006058:	e01e      	b.n	8006098 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800605a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	2140      	movs	r1, #64	; 0x40
 8006060:	187b      	adds	r3, r7, r1
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	18d2      	adds	r2, r2, r3
 8006066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006068:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800606a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606c:	69da      	ldr	r2, [r3, #28]
 800606e:	187b      	adds	r3, r7, r1
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	18d2      	adds	r2, r2, r3
 8006074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006076:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800607e:	0011      	movs	r1, r2
 8006080:	0018      	movs	r0, r3
 8006082:	f005 f83b 	bl	800b0fc <USB_EPStartXfer>
 8006086:	e007      	b.n	8006098 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006088:	234a      	movs	r3, #74	; 0x4a
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	881a      	ldrh	r2, [r3, #0]
 800608e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	0018      	movs	r0, r3
 8006094:	f000 f930 	bl	80062f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2244      	movs	r2, #68	; 0x44
 800609e:	5a9b      	ldrh	r3, [r3, r2]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b21b      	sxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	da01      	bge.n	80060ac <PCD_EP_ISR_Handler+0x7f8>
 80060a8:	f7ff fc0a 	bl	80058c0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	0018      	movs	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	b016      	add	sp, #88	; 0x58
 80060b4:	bdb0      	pop	{r4, r5, r7, pc}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	00000406 	.word	0x00000406
 80060bc:	00000402 	.word	0x00000402

080060c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b089      	sub	sp, #36	; 0x24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	1dbb      	adds	r3, r7, #6
 80060cc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060ce:	1dbb      	adds	r3, r7, #6
 80060d0:	881a      	ldrh	r2, [r3, #0]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	01db      	lsls	r3, r3, #7
 80060d6:	4013      	ands	r3, r2
 80060d8:	d100      	bne.n	80060dc <HAL_PCD_EP_DB_Receive+0x1c>
 80060da:	e07d      	b.n	80061d8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2250      	movs	r2, #80	; 0x50
 80060e2:	5a9b      	ldrh	r3, [r3, r2]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	001a      	movs	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	18d2      	adds	r2, r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	18d3      	adds	r3, r2, r3
 80060f6:	4a7a      	ldr	r2, [pc, #488]	; (80062e0 <HAL_PCD_EP_DB_Receive+0x220>)
 80060f8:	4694      	mov	ip, r2
 80060fa:	4463      	add	r3, ip
 80060fc:	881a      	ldrh	r2, [r3, #0]
 80060fe:	211a      	movs	r1, #26
 8006100:	187b      	adds	r3, r7, r1
 8006102:	0592      	lsls	r2, r2, #22
 8006104:	0d92      	lsrs	r2, r2, #22
 8006106:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	187b      	adds	r3, r7, r1
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d307      	bcc.n	8006124 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	699a      	ldr	r2, [r3, #24]
 8006118:	187b      	adds	r3, r7, r1
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	1ad2      	subs	r2, r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	619a      	str	r2, [r3, #24]
 8006122:	e002      	b.n	800612a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d121      	bne.n	8006176 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	001a      	movs	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	18d3      	adds	r3, r2, r3
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29a      	uxth	r2, r3
 8006144:	2018      	movs	r0, #24
 8006146:	183b      	adds	r3, r7, r0
 8006148:	4966      	ldr	r1, [pc, #408]	; (80062e4 <HAL_PCD_EP_DB_Receive+0x224>)
 800614a:	400a      	ands	r2, r1
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	183b      	adds	r3, r7, r0
 8006150:	183a      	adds	r2, r7, r0
 8006152:	8812      	ldrh	r2, [r2, #0]
 8006154:	2180      	movs	r1, #128	; 0x80
 8006156:	0189      	lsls	r1, r1, #6
 8006158:	404a      	eors	r2, r1
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	001a      	movs	r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	18d3      	adds	r3, r2, r3
 800616a:	183a      	adds	r2, r7, r0
 800616c:	8812      	ldrh	r2, [r2, #0]
 800616e:	495e      	ldr	r1, [pc, #376]	; (80062e8 <HAL_PCD_EP_DB_Receive+0x228>)
 8006170:	430a      	orrs	r2, r1
 8006172:	b292      	uxth	r2, r2
 8006174:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006176:	1dbb      	adds	r3, r7, #6
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	2240      	movs	r2, #64	; 0x40
 800617c:	4013      	ands	r3, r2
 800617e:	d01a      	beq.n	80061b6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	001a      	movs	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	18d3      	adds	r3, r2, r3
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29a      	uxth	r2, r3
 8006192:	2016      	movs	r0, #22
 8006194:	183b      	adds	r3, r7, r0
 8006196:	4955      	ldr	r1, [pc, #340]	; (80062ec <HAL_PCD_EP_DB_Receive+0x22c>)
 8006198:	400a      	ands	r2, r1
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	001a      	movs	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	18d3      	adds	r3, r2, r3
 80061aa:	183a      	adds	r2, r7, r0
 80061ac:	8812      	ldrh	r2, [r2, #0]
 80061ae:	4950      	ldr	r1, [pc, #320]	; (80062f0 <HAL_PCD_EP_DB_Receive+0x230>)
 80061b0:	430a      	orrs	r2, r1
 80061b2:	b292      	uxth	r2, r2
 80061b4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80061b6:	241a      	movs	r4, #26
 80061b8:	193b      	adds	r3, r7, r4
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d100      	bne.n	80061c2 <HAL_PCD_EP_DB_Receive+0x102>
 80061c0:	e086      	b.n	80062d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6959      	ldr	r1, [r3, #20]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	891a      	ldrh	r2, [r3, #8]
 80061ce:	193b      	adds	r3, r7, r4
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	f006 fa4e 	bl	800c672 <USB_ReadPMA>
 80061d6:	e07b      	b.n	80062d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2250      	movs	r2, #80	; 0x50
 80061de:	5a9b      	ldrh	r3, [r3, r2]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	001a      	movs	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	18d2      	adds	r2, r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	18d3      	adds	r3, r2, r3
 80061f2:	4a40      	ldr	r2, [pc, #256]	; (80062f4 <HAL_PCD_EP_DB_Receive+0x234>)
 80061f4:	4694      	mov	ip, r2
 80061f6:	4463      	add	r3, ip
 80061f8:	881a      	ldrh	r2, [r3, #0]
 80061fa:	211a      	movs	r1, #26
 80061fc:	187b      	adds	r3, r7, r1
 80061fe:	0592      	lsls	r2, r2, #22
 8006200:	0d92      	lsrs	r2, r2, #22
 8006202:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	187b      	adds	r3, r7, r1
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d307      	bcc.n	8006220 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	699a      	ldr	r2, [r3, #24]
 8006214:	187b      	adds	r3, r7, r1
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	1ad2      	subs	r2, r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	619a      	str	r2, [r3, #24]
 800621e:	e002      	b.n	8006226 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2200      	movs	r2, #0
 8006224:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d121      	bne.n	8006272 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	001a      	movs	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	18d3      	adds	r3, r2, r3
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29a      	uxth	r2, r3
 8006240:	201e      	movs	r0, #30
 8006242:	183b      	adds	r3, r7, r0
 8006244:	4927      	ldr	r1, [pc, #156]	; (80062e4 <HAL_PCD_EP_DB_Receive+0x224>)
 8006246:	400a      	ands	r2, r1
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	183b      	adds	r3, r7, r0
 800624c:	183a      	adds	r2, r7, r0
 800624e:	8812      	ldrh	r2, [r2, #0]
 8006250:	2180      	movs	r1, #128	; 0x80
 8006252:	0189      	lsls	r1, r1, #6
 8006254:	404a      	eors	r2, r1
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	001a      	movs	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	18d3      	adds	r3, r2, r3
 8006266:	183a      	adds	r2, r7, r0
 8006268:	8812      	ldrh	r2, [r2, #0]
 800626a:	491f      	ldr	r1, [pc, #124]	; (80062e8 <HAL_PCD_EP_DB_Receive+0x228>)
 800626c:	430a      	orrs	r2, r1
 800626e:	b292      	uxth	r2, r2
 8006270:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006272:	1dbb      	adds	r3, r7, #6
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	2240      	movs	r2, #64	; 0x40
 8006278:	4013      	ands	r3, r2
 800627a:	d11a      	bne.n	80062b2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	001a      	movs	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	18d3      	adds	r3, r2, r3
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29a      	uxth	r2, r3
 800628e:	201c      	movs	r0, #28
 8006290:	183b      	adds	r3, r7, r0
 8006292:	4916      	ldr	r1, [pc, #88]	; (80062ec <HAL_PCD_EP_DB_Receive+0x22c>)
 8006294:	400a      	ands	r2, r1
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	001a      	movs	r2, r3
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	18d3      	adds	r3, r2, r3
 80062a6:	183a      	adds	r2, r7, r0
 80062a8:	8812      	ldrh	r2, [r2, #0]
 80062aa:	4911      	ldr	r1, [pc, #68]	; (80062f0 <HAL_PCD_EP_DB_Receive+0x230>)
 80062ac:	430a      	orrs	r2, r1
 80062ae:	b292      	uxth	r2, r2
 80062b0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80062b2:	241a      	movs	r4, #26
 80062b4:	193b      	adds	r3, r7, r4
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	6959      	ldr	r1, [r3, #20]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	895a      	ldrh	r2, [r3, #10]
 80062c8:	193b      	adds	r3, r7, r4
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	f006 f9d1 	bl	800c672 <USB_ReadPMA>
    }
  }

  return count;
 80062d0:	231a      	movs	r3, #26
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	881b      	ldrh	r3, [r3, #0]
}
 80062d6:	0018      	movs	r0, r3
 80062d8:	46bd      	mov	sp, r7
 80062da:	b009      	add	sp, #36	; 0x24
 80062dc:	bd90      	pop	{r4, r7, pc}
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	00000402 	.word	0x00000402
 80062e4:	ffffbf8f 	.word	0xffffbf8f
 80062e8:	ffff8080 	.word	0xffff8080
 80062ec:	ffff8f8f 	.word	0xffff8f8f
 80062f0:	ffff80c0 	.word	0xffff80c0
 80062f4:	00000406 	.word	0x00000406

080062f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b0a4      	sub	sp, #144	; 0x90
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	1dbb      	adds	r3, r7, #6
 8006304:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006306:	1dbb      	adds	r3, r7, #6
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	2240      	movs	r2, #64	; 0x40
 800630c:	4013      	ands	r3, r2
 800630e:	d100      	bne.n	8006312 <HAL_PCD_EP_DB_Transmit+0x1a>
 8006310:	e1e4      	b.n	80066dc <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2250      	movs	r2, #80	; 0x50
 8006318:	5a9b      	ldrh	r3, [r3, r2]
 800631a:	b29b      	uxth	r3, r3
 800631c:	001a      	movs	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	18d2      	adds	r2, r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	18d3      	adds	r3, r2, r3
 800632c:	4ad0      	ldr	r2, [pc, #832]	; (8006670 <HAL_PCD_EP_DB_Transmit+0x378>)
 800632e:	4694      	mov	ip, r2
 8006330:	4463      	add	r3, ip
 8006332:	881a      	ldrh	r2, [r3, #0]
 8006334:	2186      	movs	r1, #134	; 0x86
 8006336:	187b      	adds	r3, r7, r1
 8006338:	0592      	lsls	r2, r2, #22
 800633a:	0d92      	lsrs	r2, r2, #22
 800633c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	187b      	adds	r3, r7, r1
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d907      	bls.n	800635a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	187b      	adds	r3, r7, r1
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	1ad2      	subs	r2, r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	619a      	str	r2, [r3, #24]
 8006358:	e002      	b.n	8006360 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d000      	beq.n	800636a <HAL_PCD_EP_DB_Transmit+0x72>
 8006368:	e0b5      	b.n	80064d6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d125      	bne.n	80063be <HAL_PCD_EP_DB_Transmit+0xc6>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2250      	movs	r2, #80	; 0x50
 800637e:	5a9b      	ldrh	r3, [r3, r2]
 8006380:	b29b      	uxth	r3, r3
 8006382:	001a      	movs	r2, r3
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	189b      	adds	r3, r3, r2
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	00da      	lsls	r2, r3, #3
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	18d3      	adds	r3, r2, r3
 8006394:	4ab6      	ldr	r2, [pc, #728]	; (8006670 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006396:	4694      	mov	ip, r2
 8006398:	4463      	add	r3, ip
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	059b      	lsls	r3, r3, #22
 80063a4:	0d9b      	lsrs	r3, r3, #22
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4ab0      	ldr	r2, [pc, #704]	; (8006674 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	e01b      	b.n	80063f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	785b      	ldrb	r3, [r3, #1]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d117      	bne.n	80063f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2250      	movs	r2, #80	; 0x50
 80063d2:	5a9b      	ldrh	r3, [r3, r2]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	001a      	movs	r2, r3
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	189b      	adds	r3, r3, r2
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	00da      	lsls	r2, r3, #3
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	18d3      	adds	r3, r2, r3
 80063e8:	4aa1      	ldr	r2, [pc, #644]	; (8006670 <HAL_PCD_EP_DB_Transmit+0x378>)
 80063ea:	4694      	mov	ip, r2
 80063ec:	4463      	add	r3, ip
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	2200      	movs	r2, #0
 80063f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d125      	bne.n	8006450 <HAL_PCD_EP_DB_Transmit+0x158>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2250      	movs	r2, #80	; 0x50
 8006410:	5a9b      	ldrh	r3, [r3, r2]
 8006412:	b29b      	uxth	r3, r3
 8006414:	001a      	movs	r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	189b      	adds	r3, r3, r2
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	00da      	lsls	r2, r3, #3
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	18d3      	adds	r3, r2, r3
 8006426:	4a94      	ldr	r2, [pc, #592]	; (8006678 <HAL_PCD_EP_DB_Transmit+0x380>)
 8006428:	4694      	mov	ip, r2
 800642a:	4463      	add	r3, ip
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	059b      	lsls	r3, r3, #22
 8006436:	0d9b      	lsrs	r3, r3, #22
 8006438:	b29a      	uxth	r2, r3
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	4a8b      	ldr	r2, [pc, #556]	; (8006674 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006446:	4313      	orrs	r3, r2
 8006448:	b29a      	uxth	r2, r3
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	801a      	strh	r2, [r3, #0]
 800644e:	e018      	b.n	8006482 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d114      	bne.n	8006482 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2250      	movs	r2, #80	; 0x50
 800645e:	5a9b      	ldrh	r3, [r3, r2]
 8006460:	b29b      	uxth	r3, r3
 8006462:	001a      	movs	r2, r3
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	189b      	adds	r3, r3, r2
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	00da      	lsls	r2, r3, #3
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	18d3      	adds	r3, r2, r3
 8006474:	4a80      	ldr	r2, [pc, #512]	; (8006678 <HAL_PCD_EP_DB_Transmit+0x380>)
 8006476:	4694      	mov	ip, r2
 8006478:	4463      	add	r3, ip
 800647a:	623b      	str	r3, [r7, #32]
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	2200      	movs	r2, #0
 8006480:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781a      	ldrb	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	0011      	movs	r1, r2
 800648a:	0018      	movs	r0, r3
 800648c:	f00f fe32 	bl	80160f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006490:	1dbb      	adds	r3, r7, #6
 8006492:	881a      	ldrh	r2, [r3, #0]
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	01db      	lsls	r3, r3, #7
 8006498:	4013      	ands	r3, r2
 800649a:	d100      	bne.n	800649e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800649c:	e309      	b.n	8006ab2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	001a      	movs	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	18d3      	adds	r3, r2, r3
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	2016      	movs	r0, #22
 80064b2:	183b      	adds	r3, r7, r0
 80064b4:	4971      	ldr	r1, [pc, #452]	; (800667c <HAL_PCD_EP_DB_Transmit+0x384>)
 80064b6:	400a      	ands	r2, r1
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	001a      	movs	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	18d3      	adds	r3, r2, r3
 80064c8:	183a      	adds	r2, r7, r0
 80064ca:	8812      	ldrh	r2, [r2, #0]
 80064cc:	496c      	ldr	r1, [pc, #432]	; (8006680 <HAL_PCD_EP_DB_Transmit+0x388>)
 80064ce:	430a      	orrs	r2, r1
 80064d0:	b292      	uxth	r2, r2
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	e2ed      	b.n	8006ab2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064d6:	1dbb      	adds	r3, r7, #6
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	01db      	lsls	r3, r3, #7
 80064de:	4013      	ands	r3, r2
 80064e0:	d01a      	beq.n	8006518 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	001a      	movs	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	18d3      	adds	r3, r2, r3
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	208a      	movs	r0, #138	; 0x8a
 80064f6:	183b      	adds	r3, r7, r0
 80064f8:	4960      	ldr	r1, [pc, #384]	; (800667c <HAL_PCD_EP_DB_Transmit+0x384>)
 80064fa:	400a      	ands	r2, r1
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	001a      	movs	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	18d3      	adds	r3, r2, r3
 800650c:	183a      	adds	r2, r7, r0
 800650e:	8812      	ldrh	r2, [r2, #0]
 8006510:	495b      	ldr	r1, [pc, #364]	; (8006680 <HAL_PCD_EP_DB_Transmit+0x388>)
 8006512:	430a      	orrs	r2, r1
 8006514:	b292      	uxth	r2, r2
 8006516:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2224      	movs	r2, #36	; 0x24
 800651c:	5c9b      	ldrb	r3, [r3, r2]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d000      	beq.n	8006524 <HAL_PCD_EP_DB_Transmit+0x22c>
 8006522:	e2c6      	b.n	8006ab2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	2186      	movs	r1, #134	; 0x86
 800652a:	187b      	adds	r3, r7, r1
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	18d2      	adds	r2, r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	187b      	adds	r3, r7, r1
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	18d2      	adds	r2, r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6a1a      	ldr	r2, [r3, #32]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	d30c      	bcc.n	8006568 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	218c      	movs	r1, #140	; 0x8c
 8006554:	187a      	adds	r2, r7, r1
 8006556:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6a1a      	ldr	r2, [r3, #32]
 800655c:	187b      	adds	r3, r7, r1
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	1ad2      	subs	r2, r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	621a      	str	r2, [r3, #32]
 8006566:	e01a      	b.n	800659e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006570:	2386      	movs	r3, #134	; 0x86
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	228c      	movs	r2, #140	; 0x8c
 8006578:	18ba      	adds	r2, r7, r2
 800657a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2224      	movs	r2, #36	; 0x24
 8006580:	2100      	movs	r1, #0
 8006582:	5499      	strb	r1, [r3, r2]
 8006584:	e00b      	b.n	800659e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2224      	movs	r2, #36	; 0x24
 800658a:	2100      	movs	r1, #0
 800658c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	228c      	movs	r2, #140	; 0x8c
 8006594:	18ba      	adds	r2, r7, r2
 8006596:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d000      	beq.n	80065a8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80065a6:	e06d      	b.n	8006684 <HAL_PCD_EP_DB_Transmit+0x38c>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2250      	movs	r2, #80	; 0x50
 80065b4:	5a9b      	ldrh	r3, [r3, r2]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	001a      	movs	r2, r3
 80065ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065bc:	189b      	adds	r3, r3, r2
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	00da      	lsls	r2, r3, #3
 80065c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c8:	18d3      	adds	r3, r2, r3
 80065ca:	4a29      	ldr	r2, [pc, #164]	; (8006670 <HAL_PCD_EP_DB_Transmit+0x378>)
 80065cc:	4694      	mov	ip, r2
 80065ce:	4463      	add	r3, ip
 80065d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	059b      	lsls	r3, r3, #22
 80065da:	0d9b      	lsrs	r3, r3, #22
 80065dc:	b29a      	uxth	r2, r3
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	228c      	movs	r2, #140	; 0x8c
 80065e4:	18bb      	adds	r3, r7, r2
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b3e      	cmp	r3, #62	; 0x3e
 80065ea:	d91a      	bls.n	8006622 <HAL_PCD_EP_DB_Transmit+0x32a>
 80065ec:	18bb      	adds	r3, r7, r2
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065f4:	18bb      	adds	r3, r7, r2
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	221f      	movs	r2, #31
 80065fa:	4013      	ands	r3, r2
 80065fc:	d102      	bne.n	8006604 <HAL_PCD_EP_DB_Transmit+0x30c>
 80065fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006600:	3b01      	subs	r3, #1
 8006602:	64bb      	str	r3, [r7, #72]	; 0x48
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29a      	uxth	r2, r3
 800660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660c:	b29b      	uxth	r3, r3
 800660e:	029b      	lsls	r3, r3, #10
 8006610:	b29b      	uxth	r3, r3
 8006612:	4313      	orrs	r3, r2
 8006614:	b29b      	uxth	r3, r3
 8006616:	4a17      	ldr	r2, [pc, #92]	; (8006674 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006618:	4313      	orrs	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e04f      	b.n	80066c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006622:	238c      	movs	r3, #140	; 0x8c
 8006624:	18fb      	adds	r3, r7, r3
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d108      	bne.n	800663e <HAL_PCD_EP_DB_Transmit+0x346>
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006634:	4313      	orrs	r3, r2
 8006636:	b29a      	uxth	r2, r3
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	e041      	b.n	80066c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800663e:	228c      	movs	r2, #140	; 0x8c
 8006640:	18bb      	adds	r3, r7, r2
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	64bb      	str	r3, [r7, #72]	; 0x48
 8006648:	18bb      	adds	r3, r7, r2
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2201      	movs	r2, #1
 800664e:	4013      	ands	r3, r2
 8006650:	d002      	beq.n	8006658 <HAL_PCD_EP_DB_Transmit+0x360>
 8006652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006654:	3301      	adds	r3, #1
 8006656:	64bb      	str	r3, [r7, #72]	; 0x48
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29a      	uxth	r2, r3
 800665e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006660:	b29b      	uxth	r3, r3
 8006662:	029b      	lsls	r3, r3, #10
 8006664:	b29b      	uxth	r3, r3
 8006666:	4313      	orrs	r3, r2
 8006668:	b29a      	uxth	r2, r3
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	e028      	b.n	80066c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006670:	00000402 	.word	0x00000402
 8006674:	ffff8000 	.word	0xffff8000
 8006678:	00000406 	.word	0x00000406
 800667c:	ffff8f8f 	.word	0xffff8f8f
 8006680:	ffffc080 	.word	0xffffc080
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	785b      	ldrb	r3, [r3, #1]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d11a      	bne.n	80066c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	647b      	str	r3, [r7, #68]	; 0x44
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2250      	movs	r2, #80	; 0x50
 8006698:	5a9b      	ldrh	r3, [r3, r2]
 800669a:	b29b      	uxth	r3, r3
 800669c:	001a      	movs	r2, r3
 800669e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a0:	189b      	adds	r3, r3, r2
 80066a2:	647b      	str	r3, [r7, #68]	; 0x44
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	00da      	lsls	r2, r3, #3
 80066aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ac:	18d3      	adds	r3, r2, r3
 80066ae:	4adb      	ldr	r2, [pc, #876]	; (8006a1c <HAL_PCD_EP_DB_Transmit+0x724>)
 80066b0:	4694      	mov	ip, r2
 80066b2:	4463      	add	r3, ip
 80066b4:	643b      	str	r3, [r7, #64]	; 0x40
 80066b6:	238c      	movs	r3, #140	; 0x8c
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	b29a      	uxth	r2, r3
 80066be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6959      	ldr	r1, [r3, #20]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	891a      	ldrh	r2, [r3, #8]
 80066ce:	238c      	movs	r3, #140	; 0x8c
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f005 ff83 	bl	800c5e0 <USB_WritePMA>
 80066da:	e1ea      	b.n	8006ab2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2250      	movs	r2, #80	; 0x50
 80066e2:	5a9b      	ldrh	r3, [r3, r2]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	001a      	movs	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	18d2      	adds	r2, r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	18d3      	adds	r3, r2, r3
 80066f6:	4aca      	ldr	r2, [pc, #808]	; (8006a20 <HAL_PCD_EP_DB_Transmit+0x728>)
 80066f8:	4694      	mov	ip, r2
 80066fa:	4463      	add	r3, ip
 80066fc:	881a      	ldrh	r2, [r3, #0]
 80066fe:	2186      	movs	r1, #134	; 0x86
 8006700:	187b      	adds	r3, r7, r1
 8006702:	0592      	lsls	r2, r2, #22
 8006704:	0d92      	lsrs	r2, r2, #22
 8006706:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	187b      	adds	r3, r7, r1
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d307      	bcc.n	8006724 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	187b      	adds	r3, r7, r1
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	1ad2      	subs	r2, r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	619a      	str	r2, [r3, #24]
 8006722:	e002      	b.n	800672a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d000      	beq.n	8006734 <HAL_PCD_EP_DB_Transmit+0x43c>
 8006732:	e0bb      	b.n	80068ac <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d125      	bne.n	8006788 <HAL_PCD_EP_DB_Transmit+0x490>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2250      	movs	r2, #80	; 0x50
 8006748:	5a9b      	ldrh	r3, [r3, r2]
 800674a:	b29b      	uxth	r3, r3
 800674c:	001a      	movs	r2, r3
 800674e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006750:	189b      	adds	r3, r3, r2
 8006752:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	00da      	lsls	r2, r3, #3
 800675a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800675c:	18d3      	adds	r3, r2, r3
 800675e:	4aaf      	ldr	r2, [pc, #700]	; (8006a1c <HAL_PCD_EP_DB_Transmit+0x724>)
 8006760:	4694      	mov	ip, r2
 8006762:	4463      	add	r3, ip
 8006764:	67bb      	str	r3, [r7, #120]	; 0x78
 8006766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	059b      	lsls	r3, r3, #22
 800676e:	0d9b      	lsrs	r3, r3, #22
 8006770:	b29a      	uxth	r2, r3
 8006772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	4aa9      	ldr	r2, [pc, #676]	; (8006a24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800677e:	4313      	orrs	r3, r2
 8006780:	b29a      	uxth	r2, r3
 8006782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	e01b      	b.n	80067c0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	785b      	ldrb	r3, [r3, #1]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d117      	bne.n	80067c0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	667b      	str	r3, [r7, #100]	; 0x64
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2250      	movs	r2, #80	; 0x50
 800679c:	5a9b      	ldrh	r3, [r3, r2]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	001a      	movs	r2, r3
 80067a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a4:	189b      	adds	r3, r3, r2
 80067a6:	667b      	str	r3, [r7, #100]	; 0x64
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	00da      	lsls	r2, r3, #3
 80067ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b0:	18d3      	adds	r3, r2, r3
 80067b2:	4a9a      	ldr	r2, [pc, #616]	; (8006a1c <HAL_PCD_EP_DB_Transmit+0x724>)
 80067b4:	4694      	mov	ip, r2
 80067b6:	4463      	add	r3, ip
 80067b8:	663b      	str	r3, [r7, #96]	; 0x60
 80067ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067bc:	2200      	movs	r2, #0
 80067be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	677b      	str	r3, [r7, #116]	; 0x74
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	785b      	ldrb	r3, [r3, #1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d12b      	bne.n	8006826 <HAL_PCD_EP_DB_Transmit+0x52e>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2250      	movs	r2, #80	; 0x50
 80067da:	5a9b      	ldrh	r3, [r3, r2]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	001a      	movs	r2, r3
 80067e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e2:	189b      	adds	r3, r3, r2
 80067e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	00da      	lsls	r2, r3, #3
 80067ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ee:	18d3      	adds	r3, r2, r3
 80067f0:	4a8b      	ldr	r2, [pc, #556]	; (8006a20 <HAL_PCD_EP_DB_Transmit+0x728>)
 80067f2:	4694      	mov	ip, r2
 80067f4:	4463      	add	r3, ip
 80067f6:	2180      	movs	r1, #128	; 0x80
 80067f8:	187a      	adds	r2, r7, r1
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	059b      	lsls	r3, r3, #22
 8006806:	0d9b      	lsrs	r3, r3, #22
 8006808:	b29a      	uxth	r2, r3
 800680a:	187b      	adds	r3, r7, r1
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	187b      	adds	r3, r7, r1
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	4a82      	ldr	r2, [pc, #520]	; (8006a24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800681a:	4313      	orrs	r3, r2
 800681c:	b29a      	uxth	r2, r3
 800681e:	187b      	adds	r3, r7, r1
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	e018      	b.n	8006858 <HAL_PCD_EP_DB_Transmit+0x560>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d114      	bne.n	8006858 <HAL_PCD_EP_DB_Transmit+0x560>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2250      	movs	r2, #80	; 0x50
 8006834:	5a9b      	ldrh	r3, [r3, r2]
 8006836:	b29b      	uxth	r3, r3
 8006838:	001a      	movs	r2, r3
 800683a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800683c:	189b      	adds	r3, r3, r2
 800683e:	677b      	str	r3, [r7, #116]	; 0x74
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	00da      	lsls	r2, r3, #3
 8006846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006848:	18d3      	adds	r3, r2, r3
 800684a:	4a75      	ldr	r2, [pc, #468]	; (8006a20 <HAL_PCD_EP_DB_Transmit+0x728>)
 800684c:	4694      	mov	ip, r2
 800684e:	4463      	add	r3, ip
 8006850:	673b      	str	r3, [r7, #112]	; 0x70
 8006852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006854:	2200      	movs	r2, #0
 8006856:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	0011      	movs	r1, r2
 8006860:	0018      	movs	r0, r3
 8006862:	f00f fc47 	bl	80160f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006866:	1dbb      	adds	r3, r7, #6
 8006868:	881a      	ldrh	r2, [r3, #0]
 800686a:	2380      	movs	r3, #128	; 0x80
 800686c:	01db      	lsls	r3, r3, #7
 800686e:	4013      	ands	r3, r2
 8006870:	d000      	beq.n	8006874 <HAL_PCD_EP_DB_Transmit+0x57c>
 8006872:	e11e      	b.n	8006ab2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	001a      	movs	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	18d3      	adds	r3, r2, r3
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29a      	uxth	r2, r3
 8006886:	2088      	movs	r0, #136	; 0x88
 8006888:	183b      	adds	r3, r7, r0
 800688a:	4967      	ldr	r1, [pc, #412]	; (8006a28 <HAL_PCD_EP_DB_Transmit+0x730>)
 800688c:	400a      	ands	r2, r1
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	001a      	movs	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	18d3      	adds	r3, r2, r3
 800689e:	183a      	adds	r2, r7, r0
 80068a0:	8812      	ldrh	r2, [r2, #0]
 80068a2:	4962      	ldr	r1, [pc, #392]	; (8006a2c <HAL_PCD_EP_DB_Transmit+0x734>)
 80068a4:	430a      	orrs	r2, r1
 80068a6:	b292      	uxth	r2, r2
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	e102      	b.n	8006ab2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068ac:	1dbb      	adds	r3, r7, #6
 80068ae:	881a      	ldrh	r2, [r3, #0]
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	01db      	lsls	r3, r3, #7
 80068b4:	4013      	ands	r3, r2
 80068b6:	d11a      	bne.n	80068ee <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	001a      	movs	r2, r3
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	18d3      	adds	r3, r2, r3
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	204e      	movs	r0, #78	; 0x4e
 80068cc:	183b      	adds	r3, r7, r0
 80068ce:	4956      	ldr	r1, [pc, #344]	; (8006a28 <HAL_PCD_EP_DB_Transmit+0x730>)
 80068d0:	400a      	ands	r2, r1
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	001a      	movs	r2, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	18d3      	adds	r3, r2, r3
 80068e2:	183a      	adds	r2, r7, r0
 80068e4:	8812      	ldrh	r2, [r2, #0]
 80068e6:	4951      	ldr	r1, [pc, #324]	; (8006a2c <HAL_PCD_EP_DB_Transmit+0x734>)
 80068e8:	430a      	orrs	r2, r1
 80068ea:	b292      	uxth	r2, r2
 80068ec:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2224      	movs	r2, #36	; 0x24
 80068f2:	5c9b      	ldrb	r3, [r3, r2]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d000      	beq.n	80068fa <HAL_PCD_EP_DB_Transmit+0x602>
 80068f8:	e0db      	b.n	8006ab2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	2186      	movs	r1, #134	; 0x86
 8006900:	187b      	adds	r3, r7, r1
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	18d2      	adds	r2, r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	69da      	ldr	r2, [r3, #28]
 800690e:	187b      	adds	r3, r7, r1
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	18d2      	adds	r2, r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6a1a      	ldr	r2, [r3, #32]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	429a      	cmp	r2, r3
 8006922:	d30c      	bcc.n	800693e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	218c      	movs	r1, #140	; 0x8c
 800692a:	187a      	adds	r2, r7, r1
 800692c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	6a1a      	ldr	r2, [r3, #32]
 8006932:	187b      	adds	r3, r7, r1
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	621a      	str	r2, [r3, #32]
 800693c:	e01a      	b.n	8006974 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10a      	bne.n	800695c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8006946:	2386      	movs	r3, #134	; 0x86
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	228c      	movs	r2, #140	; 0x8c
 800694e:	18ba      	adds	r2, r7, r2
 8006950:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2224      	movs	r2, #36	; 0x24
 8006956:	2100      	movs	r1, #0
 8006958:	5499      	strb	r1, [r3, r2]
 800695a:	e00b      	b.n	8006974 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	228c      	movs	r2, #140	; 0x8c
 8006962:	18ba      	adds	r2, r7, r2
 8006964:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2200      	movs	r2, #0
 800696a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2224      	movs	r2, #36	; 0x24
 8006970:	2100      	movs	r1, #0
 8006972:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	657b      	str	r3, [r7, #84]	; 0x54
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d000      	beq.n	8006984 <HAL_PCD_EP_DB_Transmit+0x68c>
 8006982:	e06e      	b.n	8006a62 <HAL_PCD_EP_DB_Transmit+0x76a>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2250      	movs	r2, #80	; 0x50
 8006990:	5a9b      	ldrh	r3, [r3, r2]
 8006992:	b29b      	uxth	r3, r3
 8006994:	001a      	movs	r2, r3
 8006996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006998:	189b      	adds	r3, r3, r2
 800699a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	00da      	lsls	r2, r3, #3
 80069a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069a4:	18d3      	adds	r3, r2, r3
 80069a6:	4a1e      	ldr	r2, [pc, #120]	; (8006a20 <HAL_PCD_EP_DB_Transmit+0x728>)
 80069a8:	4694      	mov	ip, r2
 80069aa:	4463      	add	r3, ip
 80069ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80069ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	059b      	lsls	r3, r3, #22
 80069b6:	0d9b      	lsrs	r3, r3, #22
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	228c      	movs	r2, #140	; 0x8c
 80069c0:	18bb      	adds	r3, r7, r2
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b3e      	cmp	r3, #62	; 0x3e
 80069c6:	d91a      	bls.n	80069fe <HAL_PCD_EP_DB_Transmit+0x706>
 80069c8:	18bb      	adds	r3, r7, r2
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d0:	18bb      	adds	r3, r7, r2
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	221f      	movs	r2, #31
 80069d6:	4013      	ands	r3, r2
 80069d8:	d102      	bne.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80069da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069dc:	3b01      	subs	r3, #1
 80069de:	66bb      	str	r3, [r7, #104]	; 0x68
 80069e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	029b      	lsls	r3, r3, #10
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069fa:	801a      	strh	r2, [r3, #0]
 80069fc:	e04d      	b.n	8006a9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80069fe:	238c      	movs	r3, #140	; 0x8c
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d113      	bne.n	8006a30 <HAL_PCD_EP_DB_Transmit+0x738>
 8006a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4a05      	ldr	r2, [pc, #20]	; (8006a24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e03f      	b.n	8006a9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	00000402 	.word	0x00000402
 8006a20:	00000406 	.word	0x00000406
 8006a24:	ffff8000 	.word	0xffff8000
 8006a28:	ffff8f8f 	.word	0xffff8f8f
 8006a2c:	ffffc080 	.word	0xffffc080
 8006a30:	228c      	movs	r2, #140	; 0x8c
 8006a32:	18bb      	adds	r3, r7, r2
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a3a:	18bb      	adds	r3, r7, r2
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	4013      	ands	r3, r2
 8006a42:	d002      	beq.n	8006a4a <HAL_PCD_EP_DB_Transmit+0x752>
 8006a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a46:	3301      	adds	r3, #1
 8006a48:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	029b      	lsls	r3, r3, #10
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	e01b      	b.n	8006a9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d117      	bne.n	8006a9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2250      	movs	r2, #80	; 0x50
 8006a70:	5a9b      	ldrh	r3, [r3, r2]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	001a      	movs	r2, r3
 8006a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a78:	189b      	adds	r3, r3, r2
 8006a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	00da      	lsls	r2, r3, #3
 8006a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a84:	18d3      	adds	r3, r2, r3
 8006a86:	4a21      	ldr	r2, [pc, #132]	; (8006b0c <HAL_PCD_EP_DB_Transmit+0x814>)
 8006a88:	4694      	mov	ip, r2
 8006a8a:	4463      	add	r3, ip
 8006a8c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a8e:	238c      	movs	r3, #140	; 0x8c
 8006a90:	18fb      	adds	r3, r7, r3
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a98:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6959      	ldr	r1, [r3, #20]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	895a      	ldrh	r2, [r3, #10]
 8006aa6:	238c      	movs	r3, #140	; 0x8c
 8006aa8:	18fb      	adds	r3, r7, r3
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f005 fd97 	bl	800c5e0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	18d3      	adds	r3, r2, r3
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	2014      	movs	r0, #20
 8006ac6:	183b      	adds	r3, r7, r0
 8006ac8:	4911      	ldr	r1, [pc, #68]	; (8006b10 <HAL_PCD_EP_DB_Transmit+0x818>)
 8006aca:	400a      	ands	r2, r1
 8006acc:	801a      	strh	r2, [r3, #0]
 8006ace:	183b      	adds	r3, r7, r0
 8006ad0:	183a      	adds	r2, r7, r0
 8006ad2:	8812      	ldrh	r2, [r2, #0]
 8006ad4:	2110      	movs	r1, #16
 8006ad6:	404a      	eors	r2, r1
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	183b      	adds	r3, r7, r0
 8006adc:	183a      	adds	r2, r7, r0
 8006ade:	8812      	ldrh	r2, [r2, #0]
 8006ae0:	2120      	movs	r1, #32
 8006ae2:	404a      	eors	r2, r1
 8006ae4:	801a      	strh	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	001a      	movs	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	18d3      	adds	r3, r2, r3
 8006af4:	183a      	adds	r2, r7, r0
 8006af6:	8812      	ldrh	r2, [r2, #0]
 8006af8:	4906      	ldr	r1, [pc, #24]	; (8006b14 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8006afa:	430a      	orrs	r2, r1
 8006afc:	b292      	uxth	r2, r2
 8006afe:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	0018      	movs	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b024      	add	sp, #144	; 0x90
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	00000406 	.word	0x00000406
 8006b10:	ffff8fbf 	.word	0xffff8fbf
 8006b14:	ffff8080 	.word	0xffff8080

08006b18 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b18:	b590      	push	{r4, r7, lr}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	0008      	movs	r0, r1
 8006b22:	0011      	movs	r1, r2
 8006b24:	607b      	str	r3, [r7, #4]
 8006b26:	240a      	movs	r4, #10
 8006b28:	193b      	adds	r3, r7, r4
 8006b2a:	1c02      	adds	r2, r0, #0
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	2308      	movs	r3, #8
 8006b30:	18fb      	adds	r3, r7, r3
 8006b32:	1c0a      	adds	r2, r1, #0
 8006b34:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b36:	0021      	movs	r1, r4
 8006b38:	187b      	adds	r3, r7, r1
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	2280      	movs	r2, #128	; 0x80
 8006b3e:	4013      	ands	r3, r2
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00c      	beq.n	8006b60 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b46:	187b      	adds	r3, r7, r1
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	2207      	movs	r2, #7
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	0013      	movs	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	189b      	adds	r3, r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	18d3      	adds	r3, r2, r3
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e00b      	b.n	8006b78 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b60:	230a      	movs	r3, #10
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	881a      	ldrh	r2, [r3, #0]
 8006b66:	0013      	movs	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	3369      	adds	r3, #105	; 0x69
 8006b70:	33ff      	adds	r3, #255	; 0xff
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	18d3      	adds	r3, r2, r3
 8006b76:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006b78:	2308      	movs	r3, #8
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d107      	bne.n	8006b92 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2200      	movs	r2, #0
 8006b86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	80da      	strh	r2, [r3, #6]
 8006b90:	e00b      	b.n	8006baa <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2201      	movs	r2, #1
 8006b96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	0c1b      	lsrs	r3, r3, #16
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	0018      	movs	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	b007      	add	sp, #28
 8006bb2:	bd90      	pop	{r4, r7, pc}

08006bb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	23ba      	movs	r3, #186	; 0xba
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	2101      	movs	r1, #1
 8006bca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	23b8      	movs	r3, #184	; 0xb8
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2254      	movs	r2, #84	; 0x54
 8006bda:	5a9b      	ldrh	r3, [r3, r2]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2201      	movs	r2, #1
 8006be0:	4313      	orrs	r3, r2
 8006be2:	b299      	uxth	r1, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2254      	movs	r2, #84	; 0x54
 8006be8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2254      	movs	r2, #84	; 0x54
 8006bee:	5a9b      	ldrh	r3, [r3, r2]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b299      	uxth	r1, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2254      	movs	r2, #84	; 0x54
 8006bfc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b004      	add	sp, #16
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	000a      	movs	r2, r1
 8006c12:	1cfb      	adds	r3, r7, #3
 8006c14:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006c16:	46c0      	nop			; (mov r8, r8)
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	b002      	add	sp, #8
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f000 fb76 	bl	8007320 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	d100      	bne.n	8006c40 <HAL_RCC_OscConfig+0x20>
 8006c3e:	e08e      	b.n	8006d5e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006c40:	4bc5      	ldr	r3, [pc, #788]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	220c      	movs	r2, #12
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d00e      	beq.n	8006c6a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c4c:	4bc2      	ldr	r3, [pc, #776]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	220c      	movs	r2, #12
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d117      	bne.n	8006c88 <HAL_RCC_OscConfig+0x68>
 8006c58:	4bbf      	ldr	r3, [pc, #764]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	23c0      	movs	r3, #192	; 0xc0
 8006c5e:	025b      	lsls	r3, r3, #9
 8006c60:	401a      	ands	r2, r3
 8006c62:	2380      	movs	r3, #128	; 0x80
 8006c64:	025b      	lsls	r3, r3, #9
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d10e      	bne.n	8006c88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c6a:	4bbb      	ldr	r3, [pc, #748]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	2380      	movs	r3, #128	; 0x80
 8006c70:	029b      	lsls	r3, r3, #10
 8006c72:	4013      	ands	r3, r2
 8006c74:	d100      	bne.n	8006c78 <HAL_RCC_OscConfig+0x58>
 8006c76:	e071      	b.n	8006d5c <HAL_RCC_OscConfig+0x13c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d000      	beq.n	8006c82 <HAL_RCC_OscConfig+0x62>
 8006c80:	e06c      	b.n	8006d5c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f000 fb4c 	bl	8007320 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d107      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x80>
 8006c90:	4bb1      	ldr	r3, [pc, #708]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4bb0      	ldr	r3, [pc, #704]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	0249      	lsls	r1, r1, #9
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	e02f      	b.n	8006d00 <HAL_RCC_OscConfig+0xe0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10c      	bne.n	8006cc2 <HAL_RCC_OscConfig+0xa2>
 8006ca8:	4bab      	ldr	r3, [pc, #684]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	4baa      	ldr	r3, [pc, #680]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cae:	49ab      	ldr	r1, [pc, #684]	; (8006f5c <HAL_RCC_OscConfig+0x33c>)
 8006cb0:	400a      	ands	r2, r1
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	4ba8      	ldr	r3, [pc, #672]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	4ba7      	ldr	r3, [pc, #668]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cba:	49a9      	ldr	r1, [pc, #676]	; (8006f60 <HAL_RCC_OscConfig+0x340>)
 8006cbc:	400a      	ands	r2, r1
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	e01e      	b.n	8006d00 <HAL_RCC_OscConfig+0xe0>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	d10e      	bne.n	8006ce8 <HAL_RCC_OscConfig+0xc8>
 8006cca:	4ba3      	ldr	r3, [pc, #652]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4ba2      	ldr	r3, [pc, #648]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cd0:	2180      	movs	r1, #128	; 0x80
 8006cd2:	02c9      	lsls	r1, r1, #11
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	4b9f      	ldr	r3, [pc, #636]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4b9e      	ldr	r3, [pc, #632]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	0249      	lsls	r1, r1, #9
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e00b      	b.n	8006d00 <HAL_RCC_OscConfig+0xe0>
 8006ce8:	4b9b      	ldr	r3, [pc, #620]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	4b9a      	ldr	r3, [pc, #616]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cee:	499b      	ldr	r1, [pc, #620]	; (8006f5c <HAL_RCC_OscConfig+0x33c>)
 8006cf0:	400a      	ands	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	4b98      	ldr	r3, [pc, #608]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	4b97      	ldr	r3, [pc, #604]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006cfa:	4999      	ldr	r1, [pc, #612]	; (8006f60 <HAL_RCC_OscConfig+0x340>)
 8006cfc:	400a      	ands	r2, r1
 8006cfe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d014      	beq.n	8006d32 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d08:	f7fd fde0 	bl	80048cc <HAL_GetTick>
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d12:	f7fd fddb 	bl	80048cc <HAL_GetTick>
 8006d16:	0002      	movs	r2, r0
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b64      	cmp	r3, #100	; 0x64
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e2fd      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d24:	4b8c      	ldr	r3, [pc, #560]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	2380      	movs	r3, #128	; 0x80
 8006d2a:	029b      	lsls	r3, r3, #10
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0xf2>
 8006d30:	e015      	b.n	8006d5e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d32:	f7fd fdcb 	bl	80048cc <HAL_GetTick>
 8006d36:	0003      	movs	r3, r0
 8006d38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d3c:	f7fd fdc6 	bl	80048cc <HAL_GetTick>
 8006d40:	0002      	movs	r2, r0
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b64      	cmp	r3, #100	; 0x64
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e2e8      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d4e:	4b82      	ldr	r3, [pc, #520]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	2380      	movs	r3, #128	; 0x80
 8006d54:	029b      	lsls	r3, r3, #10
 8006d56:	4013      	ands	r3, r2
 8006d58:	d1f0      	bne.n	8006d3c <HAL_RCC_OscConfig+0x11c>
 8006d5a:	e000      	b.n	8006d5e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2202      	movs	r2, #2
 8006d64:	4013      	ands	r3, r2
 8006d66:	d100      	bne.n	8006d6a <HAL_RCC_OscConfig+0x14a>
 8006d68:	e06c      	b.n	8006e44 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006d6a:	4b7b      	ldr	r3, [pc, #492]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	220c      	movs	r2, #12
 8006d70:	4013      	ands	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006d74:	4b78      	ldr	r3, [pc, #480]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	220c      	movs	r2, #12
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d11f      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x1a0>
 8006d80:	4b75      	ldr	r3, [pc, #468]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	23c0      	movs	r3, #192	; 0xc0
 8006d86:	025b      	lsls	r3, r3, #9
 8006d88:	401a      	ands	r2, r3
 8006d8a:	2380      	movs	r3, #128	; 0x80
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d116      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d92:	4b71      	ldr	r3, [pc, #452]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2202      	movs	r2, #2
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d005      	beq.n	8006da8 <HAL_RCC_OscConfig+0x188>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d001      	beq.n	8006da8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e2bb      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006da8:	4b6b      	ldr	r3, [pc, #428]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	22f8      	movs	r2, #248	; 0xf8
 8006dae:	4393      	bics	r3, r2
 8006db0:	0019      	movs	r1, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	00da      	lsls	r2, r3, #3
 8006db8:	4b67      	ldr	r3, [pc, #412]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dbe:	e041      	b.n	8006e44 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d024      	beq.n	8006e12 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dc8:	4b63      	ldr	r3, [pc, #396]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b62      	ldr	r3, [pc, #392]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006dce:	2101      	movs	r1, #1
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd4:	f7fd fd7a 	bl	80048cc <HAL_GetTick>
 8006dd8:	0003      	movs	r3, r0
 8006dda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dde:	f7fd fd75 	bl	80048cc <HAL_GetTick>
 8006de2:	0002      	movs	r2, r0
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e297      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df0:	4b59      	ldr	r3, [pc, #356]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2202      	movs	r2, #2
 8006df6:	4013      	ands	r3, r2
 8006df8:	d0f1      	beq.n	8006dde <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfa:	4b57      	ldr	r3, [pc, #348]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	22f8      	movs	r2, #248	; 0xf8
 8006e00:	4393      	bics	r3, r2
 8006e02:	0019      	movs	r1, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	00da      	lsls	r2, r3, #3
 8006e0a:	4b53      	ldr	r3, [pc, #332]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	e018      	b.n	8006e44 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e12:	4b51      	ldr	r3, [pc, #324]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b50      	ldr	r3, [pc, #320]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006e18:	2101      	movs	r1, #1
 8006e1a:	438a      	bics	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e1e:	f7fd fd55 	bl	80048cc <HAL_GetTick>
 8006e22:	0003      	movs	r3, r0
 8006e24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e28:	f7fd fd50 	bl	80048cc <HAL_GetTick>
 8006e2c:	0002      	movs	r2, r0
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e272      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e3a:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4013      	ands	r3, r2
 8006e42:	d1f1      	bne.n	8006e28 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2208      	movs	r2, #8
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	d036      	beq.n	8006ebc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d019      	beq.n	8006e8a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e56:	4b40      	ldr	r3, [pc, #256]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e5a:	4b3f      	ldr	r3, [pc, #252]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e62:	f7fd fd33 	bl	80048cc <HAL_GetTick>
 8006e66:	0003      	movs	r3, r0
 8006e68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e6c:	f7fd fd2e 	bl	80048cc <HAL_GetTick>
 8006e70:	0002      	movs	r2, r0
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e250      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e7e:	4b36      	ldr	r3, [pc, #216]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	2202      	movs	r2, #2
 8006e84:	4013      	ands	r3, r2
 8006e86:	d0f1      	beq.n	8006e6c <HAL_RCC_OscConfig+0x24c>
 8006e88:	e018      	b.n	8006ebc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e8a:	4b33      	ldr	r3, [pc, #204]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e8e:	4b32      	ldr	r3, [pc, #200]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006e90:	2101      	movs	r1, #1
 8006e92:	438a      	bics	r2, r1
 8006e94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e96:	f7fd fd19 	bl	80048cc <HAL_GetTick>
 8006e9a:	0003      	movs	r3, r0
 8006e9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ea0:	f7fd fd14 	bl	80048cc <HAL_GetTick>
 8006ea4:	0002      	movs	r2, r0
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e236      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eb2:	4b29      	ldr	r3, [pc, #164]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	4013      	ands	r3, r2
 8006eba:	d1f1      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d100      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x2a8>
 8006ec6:	e0b5      	b.n	8007034 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ec8:	201f      	movs	r0, #31
 8006eca:	183b      	adds	r3, r7, r0
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ed0:	4b21      	ldr	r3, [pc, #132]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	2380      	movs	r3, #128	; 0x80
 8006ed6:	055b      	lsls	r3, r3, #21
 8006ed8:	4013      	ands	r3, r2
 8006eda:	d110      	bne.n	8006efe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006edc:	4b1e      	ldr	r3, [pc, #120]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006ee2:	2180      	movs	r1, #128	; 0x80
 8006ee4:	0549      	lsls	r1, r1, #21
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	61da      	str	r2, [r3, #28]
 8006eea:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006eec:	69da      	ldr	r2, [r3, #28]
 8006eee:	2380      	movs	r3, #128	; 0x80
 8006ef0:	055b      	lsls	r3, r3, #21
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006ef8:	183b      	adds	r3, r7, r0
 8006efa:	2201      	movs	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efe:	4b19      	ldr	r3, [pc, #100]	; (8006f64 <HAL_RCC_OscConfig+0x344>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	2380      	movs	r3, #128	; 0x80
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	4013      	ands	r3, r2
 8006f08:	d11a      	bne.n	8006f40 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f0a:	4b16      	ldr	r3, [pc, #88]	; (8006f64 <HAL_RCC_OscConfig+0x344>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b15      	ldr	r3, [pc, #84]	; (8006f64 <HAL_RCC_OscConfig+0x344>)
 8006f10:	2180      	movs	r1, #128	; 0x80
 8006f12:	0049      	lsls	r1, r1, #1
 8006f14:	430a      	orrs	r2, r1
 8006f16:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f18:	f7fd fcd8 	bl	80048cc <HAL_GetTick>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f22:	f7fd fcd3 	bl	80048cc <HAL_GetTick>
 8006f26:	0002      	movs	r2, r0
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b64      	cmp	r3, #100	; 0x64
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e1f5      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f34:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <HAL_RCC_OscConfig+0x344>)
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d0f0      	beq.n	8006f22 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d10f      	bne.n	8006f68 <HAL_RCC_OscConfig+0x348>
 8006f48:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006f4a:	6a1a      	ldr	r2, [r3, #32]
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <HAL_RCC_OscConfig+0x338>)
 8006f4e:	2101      	movs	r1, #1
 8006f50:	430a      	orrs	r2, r1
 8006f52:	621a      	str	r2, [r3, #32]
 8006f54:	e036      	b.n	8006fc4 <HAL_RCC_OscConfig+0x3a4>
 8006f56:	46c0      	nop			; (mov r8, r8)
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	fffeffff 	.word	0xfffeffff
 8006f60:	fffbffff 	.word	0xfffbffff
 8006f64:	40007000 	.word	0x40007000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10c      	bne.n	8006f8a <HAL_RCC_OscConfig+0x36a>
 8006f70:	4bca      	ldr	r3, [pc, #808]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006f72:	6a1a      	ldr	r2, [r3, #32]
 8006f74:	4bc9      	ldr	r3, [pc, #804]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006f76:	2101      	movs	r1, #1
 8006f78:	438a      	bics	r2, r1
 8006f7a:	621a      	str	r2, [r3, #32]
 8006f7c:	4bc7      	ldr	r3, [pc, #796]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006f7e:	6a1a      	ldr	r2, [r3, #32]
 8006f80:	4bc6      	ldr	r3, [pc, #792]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006f82:	2104      	movs	r1, #4
 8006f84:	438a      	bics	r2, r1
 8006f86:	621a      	str	r2, [r3, #32]
 8006f88:	e01c      	b.n	8006fc4 <HAL_RCC_OscConfig+0x3a4>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	d10c      	bne.n	8006fac <HAL_RCC_OscConfig+0x38c>
 8006f92:	4bc2      	ldr	r3, [pc, #776]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006f94:	6a1a      	ldr	r2, [r3, #32]
 8006f96:	4bc1      	ldr	r3, [pc, #772]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006f98:	2104      	movs	r1, #4
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	621a      	str	r2, [r3, #32]
 8006f9e:	4bbf      	ldr	r3, [pc, #764]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006fa0:	6a1a      	ldr	r2, [r3, #32]
 8006fa2:	4bbe      	ldr	r3, [pc, #760]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	621a      	str	r2, [r3, #32]
 8006faa:	e00b      	b.n	8006fc4 <HAL_RCC_OscConfig+0x3a4>
 8006fac:	4bbb      	ldr	r3, [pc, #748]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006fae:	6a1a      	ldr	r2, [r3, #32]
 8006fb0:	4bba      	ldr	r3, [pc, #744]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	438a      	bics	r2, r1
 8006fb6:	621a      	str	r2, [r3, #32]
 8006fb8:	4bb8      	ldr	r3, [pc, #736]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006fba:	6a1a      	ldr	r2, [r3, #32]
 8006fbc:	4bb7      	ldr	r3, [pc, #732]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006fbe:	2104      	movs	r1, #4
 8006fc0:	438a      	bics	r2, r1
 8006fc2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d014      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fcc:	f7fd fc7e 	bl	80048cc <HAL_GetTick>
 8006fd0:	0003      	movs	r3, r0
 8006fd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd4:	e009      	b.n	8006fea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fd6:	f7fd fc79 	bl	80048cc <HAL_GetTick>
 8006fda:	0002      	movs	r2, r0
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	4aaf      	ldr	r2, [pc, #700]	; (80072a0 <HAL_RCC_OscConfig+0x680>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e19a      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fea:	4bac      	ldr	r3, [pc, #688]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	d0f0      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x3b6>
 8006ff4:	e013      	b.n	800701e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff6:	f7fd fc69 	bl	80048cc <HAL_GetTick>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ffe:	e009      	b.n	8007014 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007000:	f7fd fc64 	bl	80048cc <HAL_GetTick>
 8007004:	0002      	movs	r2, r0
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	4aa5      	ldr	r2, [pc, #660]	; (80072a0 <HAL_RCC_OscConfig+0x680>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e185      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007014:	4ba1      	ldr	r3, [pc, #644]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	2202      	movs	r2, #2
 800701a:	4013      	ands	r3, r2
 800701c:	d1f0      	bne.n	8007000 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800701e:	231f      	movs	r3, #31
 8007020:	18fb      	adds	r3, r7, r3
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d105      	bne.n	8007034 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007028:	4b9c      	ldr	r3, [pc, #624]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800702a:	69da      	ldr	r2, [r3, #28]
 800702c:	4b9b      	ldr	r3, [pc, #620]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800702e:	499d      	ldr	r1, [pc, #628]	; (80072a4 <HAL_RCC_OscConfig+0x684>)
 8007030:	400a      	ands	r2, r1
 8007032:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2210      	movs	r2, #16
 800703a:	4013      	ands	r3, r2
 800703c:	d063      	beq.n	8007106 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d12a      	bne.n	800709c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007046:	4b95      	ldr	r3, [pc, #596]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800704a:	4b94      	ldr	r3, [pc, #592]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800704c:	2104      	movs	r1, #4
 800704e:	430a      	orrs	r2, r1
 8007050:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8007052:	4b92      	ldr	r3, [pc, #584]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007056:	4b91      	ldr	r3, [pc, #580]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007058:	2101      	movs	r1, #1
 800705a:	430a      	orrs	r2, r1
 800705c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705e:	f7fd fc35 	bl	80048cc <HAL_GetTick>
 8007062:	0003      	movs	r3, r0
 8007064:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007068:	f7fd fc30 	bl	80048cc <HAL_GetTick>
 800706c:	0002      	movs	r2, r0
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e152      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800707a:	4b88      	ldr	r3, [pc, #544]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800707c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707e:	2202      	movs	r2, #2
 8007080:	4013      	ands	r3, r2
 8007082:	d0f1      	beq.n	8007068 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007084:	4b85      	ldr	r3, [pc, #532]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007088:	22f8      	movs	r2, #248	; 0xf8
 800708a:	4393      	bics	r3, r2
 800708c:	0019      	movs	r1, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	00da      	lsls	r2, r3, #3
 8007094:	4b81      	ldr	r3, [pc, #516]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007096:	430a      	orrs	r2, r1
 8007098:	635a      	str	r2, [r3, #52]	; 0x34
 800709a:	e034      	b.n	8007106 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	3305      	adds	r3, #5
 80070a2:	d111      	bne.n	80070c8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80070a4:	4b7d      	ldr	r3, [pc, #500]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80070a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070a8:	4b7c      	ldr	r3, [pc, #496]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80070aa:	2104      	movs	r1, #4
 80070ac:	438a      	bics	r2, r1
 80070ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80070b0:	4b7a      	ldr	r3, [pc, #488]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80070b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b4:	22f8      	movs	r2, #248	; 0xf8
 80070b6:	4393      	bics	r3, r2
 80070b8:	0019      	movs	r1, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	00da      	lsls	r2, r3, #3
 80070c0:	4b76      	ldr	r3, [pc, #472]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80070c2:	430a      	orrs	r2, r1
 80070c4:	635a      	str	r2, [r3, #52]	; 0x34
 80070c6:	e01e      	b.n	8007106 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80070c8:	4b74      	ldr	r3, [pc, #464]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80070ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070cc:	4b73      	ldr	r3, [pc, #460]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80070ce:	2104      	movs	r1, #4
 80070d0:	430a      	orrs	r2, r1
 80070d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80070d4:	4b71      	ldr	r3, [pc, #452]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80070d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070d8:	4b70      	ldr	r3, [pc, #448]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80070da:	2101      	movs	r1, #1
 80070dc:	438a      	bics	r2, r1
 80070de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070e0:	f7fd fbf4 	bl	80048cc <HAL_GetTick>
 80070e4:	0003      	movs	r3, r0
 80070e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80070ea:	f7fd fbef 	bl	80048cc <HAL_GetTick>
 80070ee:	0002      	movs	r2, r0
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e111      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80070fc:	4b67      	ldr	r3, [pc, #412]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80070fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007100:	2202      	movs	r2, #2
 8007102:	4013      	ands	r3, r2
 8007104:	d1f1      	bne.n	80070ea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2220      	movs	r2, #32
 800710c:	4013      	ands	r3, r2
 800710e:	d05c      	beq.n	80071ca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007110:	4b62      	ldr	r3, [pc, #392]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	220c      	movs	r2, #12
 8007116:	4013      	ands	r3, r2
 8007118:	2b0c      	cmp	r3, #12
 800711a:	d00e      	beq.n	800713a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800711c:	4b5f      	ldr	r3, [pc, #380]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	220c      	movs	r2, #12
 8007122:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007124:	2b08      	cmp	r3, #8
 8007126:	d114      	bne.n	8007152 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007128:	4b5c      	ldr	r3, [pc, #368]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	23c0      	movs	r3, #192	; 0xc0
 800712e:	025b      	lsls	r3, r3, #9
 8007130:	401a      	ands	r2, r3
 8007132:	23c0      	movs	r3, #192	; 0xc0
 8007134:	025b      	lsls	r3, r3, #9
 8007136:	429a      	cmp	r2, r3
 8007138:	d10b      	bne.n	8007152 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800713a:	4b58      	ldr	r3, [pc, #352]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800713c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800713e:	2380      	movs	r3, #128	; 0x80
 8007140:	029b      	lsls	r3, r3, #10
 8007142:	4013      	ands	r3, r2
 8007144:	d040      	beq.n	80071c8 <HAL_RCC_OscConfig+0x5a8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d03c      	beq.n	80071c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e0e6      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01b      	beq.n	8007192 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800715a:	4b50      	ldr	r3, [pc, #320]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800715c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800715e:	4b4f      	ldr	r3, [pc, #316]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007160:	2180      	movs	r1, #128	; 0x80
 8007162:	0249      	lsls	r1, r1, #9
 8007164:	430a      	orrs	r2, r1
 8007166:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007168:	f7fd fbb0 	bl	80048cc <HAL_GetTick>
 800716c:	0003      	movs	r3, r0
 800716e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007172:	f7fd fbab 	bl	80048cc <HAL_GetTick>
 8007176:	0002      	movs	r2, r0
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e0cd      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007184:	4b45      	ldr	r3, [pc, #276]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	029b      	lsls	r3, r3, #10
 800718c:	4013      	ands	r3, r2
 800718e:	d0f0      	beq.n	8007172 <HAL_RCC_OscConfig+0x552>
 8007190:	e01b      	b.n	80071ca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007192:	4b42      	ldr	r3, [pc, #264]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007196:	4b41      	ldr	r3, [pc, #260]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007198:	4943      	ldr	r1, [pc, #268]	; (80072a8 <HAL_RCC_OscConfig+0x688>)
 800719a:	400a      	ands	r2, r1
 800719c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719e:	f7fd fb95 	bl	80048cc <HAL_GetTick>
 80071a2:	0003      	movs	r3, r0
 80071a4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071a8:	f7fd fb90 	bl	80048cc <HAL_GetTick>
 80071ac:	0002      	movs	r2, r0
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e0b2      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80071ba:	4b38      	ldr	r3, [pc, #224]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80071bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071be:	2380      	movs	r3, #128	; 0x80
 80071c0:	029b      	lsls	r3, r3, #10
 80071c2:	4013      	ands	r3, r2
 80071c4:	d1f0      	bne.n	80071a8 <HAL_RCC_OscConfig+0x588>
 80071c6:	e000      	b.n	80071ca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80071c8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d100      	bne.n	80071d4 <HAL_RCC_OscConfig+0x5b4>
 80071d2:	e0a4      	b.n	800731e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071d4:	4b31      	ldr	r3, [pc, #196]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	220c      	movs	r2, #12
 80071da:	4013      	ands	r3, r2
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d100      	bne.n	80071e2 <HAL_RCC_OscConfig+0x5c2>
 80071e0:	e078      	b.n	80072d4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d14c      	bne.n	8007284 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ea:	4b2c      	ldr	r3, [pc, #176]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b2b      	ldr	r3, [pc, #172]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 80071f0:	492e      	ldr	r1, [pc, #184]	; (80072ac <HAL_RCC_OscConfig+0x68c>)
 80071f2:	400a      	ands	r2, r1
 80071f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f6:	f7fd fb69 	bl	80048cc <HAL_GetTick>
 80071fa:	0003      	movs	r3, r0
 80071fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007200:	f7fd fb64 	bl	80048cc <HAL_GetTick>
 8007204:	0002      	movs	r2, r0
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e086      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007212:	4b22      	ldr	r3, [pc, #136]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	2380      	movs	r3, #128	; 0x80
 8007218:	049b      	lsls	r3, r3, #18
 800721a:	4013      	ands	r3, r2
 800721c:	d1f0      	bne.n	8007200 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800721e:	4b1f      	ldr	r3, [pc, #124]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	220f      	movs	r2, #15
 8007224:	4393      	bics	r3, r2
 8007226:	0019      	movs	r1, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800722c:	4b1b      	ldr	r3, [pc, #108]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800722e:	430a      	orrs	r2, r1
 8007230:	62da      	str	r2, [r3, #44]	; 0x2c
 8007232:	4b1a      	ldr	r3, [pc, #104]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	4a1e      	ldr	r2, [pc, #120]	; (80072b0 <HAL_RCC_OscConfig+0x690>)
 8007238:	4013      	ands	r3, r2
 800723a:	0019      	movs	r1, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	431a      	orrs	r2, r3
 8007246:	4b15      	ldr	r3, [pc, #84]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800724c:	4b13      	ldr	r3, [pc, #76]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4b12      	ldr	r3, [pc, #72]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007252:	2180      	movs	r1, #128	; 0x80
 8007254:	0449      	lsls	r1, r1, #17
 8007256:	430a      	orrs	r2, r1
 8007258:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800725a:	f7fd fb37 	bl	80048cc <HAL_GetTick>
 800725e:	0003      	movs	r3, r0
 8007260:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007264:	f7fd fb32 	bl	80048cc <HAL_GetTick>
 8007268:	0002      	movs	r2, r0
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e054      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007276:	4b09      	ldr	r3, [pc, #36]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	2380      	movs	r3, #128	; 0x80
 800727c:	049b      	lsls	r3, r3, #18
 800727e:	4013      	ands	r3, r2
 8007280:	d0f0      	beq.n	8007264 <HAL_RCC_OscConfig+0x644>
 8007282:	e04c      	b.n	800731e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007284:	4b05      	ldr	r3, [pc, #20]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	4b04      	ldr	r3, [pc, #16]	; (800729c <HAL_RCC_OscConfig+0x67c>)
 800728a:	4908      	ldr	r1, [pc, #32]	; (80072ac <HAL_RCC_OscConfig+0x68c>)
 800728c:	400a      	ands	r2, r1
 800728e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007290:	f7fd fb1c 	bl	80048cc <HAL_GetTick>
 8007294:	0003      	movs	r3, r0
 8007296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007298:	e015      	b.n	80072c6 <HAL_RCC_OscConfig+0x6a6>
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	40021000 	.word	0x40021000
 80072a0:	00001388 	.word	0x00001388
 80072a4:	efffffff 	.word	0xefffffff
 80072a8:	fffeffff 	.word	0xfffeffff
 80072ac:	feffffff 	.word	0xfeffffff
 80072b0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b4:	f7fd fb0a 	bl	80048cc <HAL_GetTick>
 80072b8:	0002      	movs	r2, r0
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e02c      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072c6:	4b18      	ldr	r3, [pc, #96]	; (8007328 <HAL_RCC_OscConfig+0x708>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	2380      	movs	r3, #128	; 0x80
 80072cc:	049b      	lsls	r3, r3, #18
 80072ce:	4013      	ands	r3, r2
 80072d0:	d1f0      	bne.n	80072b4 <HAL_RCC_OscConfig+0x694>
 80072d2:	e024      	b.n	800731e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e01f      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80072e0:	4b11      	ldr	r3, [pc, #68]	; (8007328 <HAL_RCC_OscConfig+0x708>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <HAL_RCC_OscConfig+0x708>)
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	23c0      	movs	r3, #192	; 0xc0
 80072f0:	025b      	lsls	r3, r3, #9
 80072f2:	401a      	ands	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d10e      	bne.n	800731a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	220f      	movs	r2, #15
 8007300:	401a      	ands	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007306:	429a      	cmp	r2, r3
 8007308:	d107      	bne.n	800731a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	23f0      	movs	r3, #240	; 0xf0
 800730e:	039b      	lsls	r3, r3, #14
 8007310:	401a      	ands	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007316:	429a      	cmp	r2, r3
 8007318:	d001      	beq.n	800731e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	0018      	movs	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	b008      	add	sp, #32
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40021000 	.word	0x40021000

0800732c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e0bf      	b.n	80074c0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007340:	4b61      	ldr	r3, [pc, #388]	; (80074c8 <HAL_RCC_ClockConfig+0x19c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2201      	movs	r2, #1
 8007346:	4013      	ands	r3, r2
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d911      	bls.n	8007372 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734e:	4b5e      	ldr	r3, [pc, #376]	; (80074c8 <HAL_RCC_ClockConfig+0x19c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2201      	movs	r2, #1
 8007354:	4393      	bics	r3, r2
 8007356:	0019      	movs	r1, r3
 8007358:	4b5b      	ldr	r3, [pc, #364]	; (80074c8 <HAL_RCC_ClockConfig+0x19c>)
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007360:	4b59      	ldr	r3, [pc, #356]	; (80074c8 <HAL_RCC_ClockConfig+0x19c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2201      	movs	r2, #1
 8007366:	4013      	ands	r3, r2
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d001      	beq.n	8007372 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e0a6      	b.n	80074c0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2202      	movs	r2, #2
 8007378:	4013      	ands	r3, r2
 800737a:	d015      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2204      	movs	r2, #4
 8007382:	4013      	ands	r3, r2
 8007384:	d006      	beq.n	8007394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007386:	4b51      	ldr	r3, [pc, #324]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	4b50      	ldr	r3, [pc, #320]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 800738c:	21e0      	movs	r1, #224	; 0xe0
 800738e:	00c9      	lsls	r1, r1, #3
 8007390:	430a      	orrs	r2, r1
 8007392:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007394:	4b4d      	ldr	r3, [pc, #308]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	22f0      	movs	r2, #240	; 0xf0
 800739a:	4393      	bics	r3, r2
 800739c:	0019      	movs	r1, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	4b4a      	ldr	r3, [pc, #296]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2201      	movs	r2, #1
 80073ae:	4013      	ands	r3, r2
 80073b0:	d04c      	beq.n	800744c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d107      	bne.n	80073ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ba:	4b44      	ldr	r3, [pc, #272]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	2380      	movs	r3, #128	; 0x80
 80073c0:	029b      	lsls	r3, r3, #10
 80073c2:	4013      	ands	r3, r2
 80073c4:	d120      	bne.n	8007408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e07a      	b.n	80074c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d107      	bne.n	80073e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d2:	4b3e      	ldr	r3, [pc, #248]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	2380      	movs	r3, #128	; 0x80
 80073d8:	049b      	lsls	r3, r3, #18
 80073da:	4013      	ands	r3, r2
 80073dc:	d114      	bne.n	8007408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e06e      	b.n	80074c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d107      	bne.n	80073fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80073ea:	4b38      	ldr	r3, [pc, #224]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 80073ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ee:	2380      	movs	r3, #128	; 0x80
 80073f0:	029b      	lsls	r3, r3, #10
 80073f2:	4013      	ands	r3, r2
 80073f4:	d108      	bne.n	8007408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e062      	b.n	80074c0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073fa:	4b34      	ldr	r3, [pc, #208]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2202      	movs	r2, #2
 8007400:	4013      	ands	r3, r2
 8007402:	d101      	bne.n	8007408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e05b      	b.n	80074c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007408:	4b30      	ldr	r3, [pc, #192]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2203      	movs	r2, #3
 800740e:	4393      	bics	r3, r2
 8007410:	0019      	movs	r1, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	4b2d      	ldr	r3, [pc, #180]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800741c:	f7fd fa56 	bl	80048cc <HAL_GetTick>
 8007420:	0003      	movs	r3, r0
 8007422:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007424:	e009      	b.n	800743a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007426:	f7fd fa51 	bl	80048cc <HAL_GetTick>
 800742a:	0002      	movs	r2, r0
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	4a27      	ldr	r2, [pc, #156]	; (80074d0 <HAL_RCC_ClockConfig+0x1a4>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d901      	bls.n	800743a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e042      	b.n	80074c0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743a:	4b24      	ldr	r3, [pc, #144]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	220c      	movs	r2, #12
 8007440:	401a      	ands	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	429a      	cmp	r2, r3
 800744a:	d1ec      	bne.n	8007426 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800744c:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <HAL_RCC_ClockConfig+0x19c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2201      	movs	r2, #1
 8007452:	4013      	ands	r3, r2
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d211      	bcs.n	800747e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800745a:	4b1b      	ldr	r3, [pc, #108]	; (80074c8 <HAL_RCC_ClockConfig+0x19c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2201      	movs	r2, #1
 8007460:	4393      	bics	r3, r2
 8007462:	0019      	movs	r1, r3
 8007464:	4b18      	ldr	r3, [pc, #96]	; (80074c8 <HAL_RCC_ClockConfig+0x19c>)
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <HAL_RCC_ClockConfig+0x19c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2201      	movs	r2, #1
 8007472:	4013      	ands	r3, r2
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d001      	beq.n	800747e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e020      	b.n	80074c0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2204      	movs	r2, #4
 8007484:	4013      	ands	r3, r2
 8007486:	d009      	beq.n	800749c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007488:	4b10      	ldr	r3, [pc, #64]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	4a11      	ldr	r2, [pc, #68]	; (80074d4 <HAL_RCC_ClockConfig+0x1a8>)
 800748e:	4013      	ands	r3, r2
 8007490:	0019      	movs	r1, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800749c:	f000 f820 	bl	80074e0 <HAL_RCC_GetSysClockFreq>
 80074a0:	0001      	movs	r1, r0
 80074a2:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <HAL_RCC_ClockConfig+0x1a0>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	091b      	lsrs	r3, r3, #4
 80074a8:	220f      	movs	r2, #15
 80074aa:	4013      	ands	r3, r2
 80074ac:	4a0a      	ldr	r2, [pc, #40]	; (80074d8 <HAL_RCC_ClockConfig+0x1ac>)
 80074ae:	5cd3      	ldrb	r3, [r2, r3]
 80074b0:	000a      	movs	r2, r1
 80074b2:	40da      	lsrs	r2, r3
 80074b4:	4b09      	ldr	r3, [pc, #36]	; (80074dc <HAL_RCC_ClockConfig+0x1b0>)
 80074b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80074b8:	2003      	movs	r0, #3
 80074ba:	f7fd f9c1 	bl	8004840 <HAL_InitTick>
  
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	0018      	movs	r0, r3
 80074c2:	46bd      	mov	sp, r7
 80074c4:	b004      	add	sp, #16
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40022000 	.word	0x40022000
 80074cc:	40021000 	.word	0x40021000
 80074d0:	00001388 	.word	0x00001388
 80074d4:	fffff8ff 	.word	0xfffff8ff
 80074d8:	0801ce38 	.word	0x0801ce38
 80074dc:	200000d8 	.word	0x200000d8

080074e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	2300      	movs	r3, #0
 80074f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80074fa:	4b2d      	ldr	r3, [pc, #180]	; (80075b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	220c      	movs	r2, #12
 8007504:	4013      	ands	r3, r2
 8007506:	2b0c      	cmp	r3, #12
 8007508:	d046      	beq.n	8007598 <HAL_RCC_GetSysClockFreq+0xb8>
 800750a:	d848      	bhi.n	800759e <HAL_RCC_GetSysClockFreq+0xbe>
 800750c:	2b04      	cmp	r3, #4
 800750e:	d002      	beq.n	8007516 <HAL_RCC_GetSysClockFreq+0x36>
 8007510:	2b08      	cmp	r3, #8
 8007512:	d003      	beq.n	800751c <HAL_RCC_GetSysClockFreq+0x3c>
 8007514:	e043      	b.n	800759e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007516:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007518:	613b      	str	r3, [r7, #16]
      break;
 800751a:	e043      	b.n	80075a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	0c9b      	lsrs	r3, r3, #18
 8007520:	220f      	movs	r2, #15
 8007522:	4013      	ands	r3, r2
 8007524:	4a24      	ldr	r2, [pc, #144]	; (80075b8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007526:	5cd3      	ldrb	r3, [r2, r3]
 8007528:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800752a:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	220f      	movs	r2, #15
 8007530:	4013      	ands	r3, r2
 8007532:	4a22      	ldr	r2, [pc, #136]	; (80075bc <HAL_RCC_GetSysClockFreq+0xdc>)
 8007534:	5cd3      	ldrb	r3, [r2, r3]
 8007536:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	23c0      	movs	r3, #192	; 0xc0
 800753c:	025b      	lsls	r3, r3, #9
 800753e:	401a      	ands	r2, r3
 8007540:	2380      	movs	r3, #128	; 0x80
 8007542:	025b      	lsls	r3, r3, #9
 8007544:	429a      	cmp	r2, r3
 8007546:	d109      	bne.n	800755c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	481a      	ldr	r0, [pc, #104]	; (80075b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800754c:	f7f8 fe02 	bl	8000154 <__udivsi3>
 8007550:	0003      	movs	r3, r0
 8007552:	001a      	movs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4353      	muls	r3, r2
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	e01a      	b.n	8007592 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	23c0      	movs	r3, #192	; 0xc0
 8007560:	025b      	lsls	r3, r3, #9
 8007562:	401a      	ands	r2, r3
 8007564:	23c0      	movs	r3, #192	; 0xc0
 8007566:	025b      	lsls	r3, r3, #9
 8007568:	429a      	cmp	r2, r3
 800756a:	d109      	bne.n	8007580 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800756c:	68b9      	ldr	r1, [r7, #8]
 800756e:	4814      	ldr	r0, [pc, #80]	; (80075c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8007570:	f7f8 fdf0 	bl	8000154 <__udivsi3>
 8007574:	0003      	movs	r3, r0
 8007576:	001a      	movs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4353      	muls	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	e008      	b.n	8007592 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	480c      	ldr	r0, [pc, #48]	; (80075b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007584:	f7f8 fde6 	bl	8000154 <__udivsi3>
 8007588:	0003      	movs	r3, r0
 800758a:	001a      	movs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4353      	muls	r3, r2
 8007590:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	613b      	str	r3, [r7, #16]
      break;
 8007596:	e005      	b.n	80075a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8007598:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800759a:	613b      	str	r3, [r7, #16]
      break;
 800759c:	e002      	b.n	80075a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80075a0:	613b      	str	r3, [r7, #16]
      break;
 80075a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80075a4:	693b      	ldr	r3, [r7, #16]
}
 80075a6:	0018      	movs	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	b006      	add	sp, #24
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	40021000 	.word	0x40021000
 80075b4:	007a1200 	.word	0x007a1200
 80075b8:	0801ce50 	.word	0x0801ce50
 80075bc:	0801ce60 	.word	0x0801ce60
 80075c0:	02dc6c00 	.word	0x02dc6c00

080075c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80075ca:	681b      	ldr	r3, [r3, #0]
}
 80075cc:	0018      	movs	r0, r3
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	200000d8 	.word	0x200000d8

080075d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80075dc:	f7ff fff2 	bl	80075c4 <HAL_RCC_GetHCLKFreq>
 80075e0:	0001      	movs	r1, r0
 80075e2:	4b06      	ldr	r3, [pc, #24]	; (80075fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	2207      	movs	r2, #7
 80075ea:	4013      	ands	r3, r2
 80075ec:	4a04      	ldr	r2, [pc, #16]	; (8007600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80075ee:	5cd3      	ldrb	r3, [r2, r3]
 80075f0:	40d9      	lsrs	r1, r3
 80075f2:	000b      	movs	r3, r1
}    
 80075f4:	0018      	movs	r0, r3
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	40021000 	.word	0x40021000
 8007600:	0801ce48 	.word	0x0801ce48

08007604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	2380      	movs	r3, #128	; 0x80
 800761a:	025b      	lsls	r3, r3, #9
 800761c:	4013      	ands	r3, r2
 800761e:	d100      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007620:	e08e      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8007622:	2017      	movs	r0, #23
 8007624:	183b      	adds	r3, r7, r0
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800762a:	4b6e      	ldr	r3, [pc, #440]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800762c:	69da      	ldr	r2, [r3, #28]
 800762e:	2380      	movs	r3, #128	; 0x80
 8007630:	055b      	lsls	r3, r3, #21
 8007632:	4013      	ands	r3, r2
 8007634:	d110      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007636:	4b6b      	ldr	r3, [pc, #428]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007638:	69da      	ldr	r2, [r3, #28]
 800763a:	4b6a      	ldr	r3, [pc, #424]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800763c:	2180      	movs	r1, #128	; 0x80
 800763e:	0549      	lsls	r1, r1, #21
 8007640:	430a      	orrs	r2, r1
 8007642:	61da      	str	r2, [r3, #28]
 8007644:	4b67      	ldr	r3, [pc, #412]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007646:	69da      	ldr	r2, [r3, #28]
 8007648:	2380      	movs	r3, #128	; 0x80
 800764a:	055b      	lsls	r3, r3, #21
 800764c:	4013      	ands	r3, r2
 800764e:	60bb      	str	r3, [r7, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007652:	183b      	adds	r3, r7, r0
 8007654:	2201      	movs	r2, #1
 8007656:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007658:	4b63      	ldr	r3, [pc, #396]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	2380      	movs	r3, #128	; 0x80
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	4013      	ands	r3, r2
 8007662:	d11a      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007664:	4b60      	ldr	r3, [pc, #384]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	4b5f      	ldr	r3, [pc, #380]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800766a:	2180      	movs	r1, #128	; 0x80
 800766c:	0049      	lsls	r1, r1, #1
 800766e:	430a      	orrs	r2, r1
 8007670:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007672:	f7fd f92b 	bl	80048cc <HAL_GetTick>
 8007676:	0003      	movs	r3, r0
 8007678:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800767a:	e008      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800767c:	f7fd f926 	bl	80048cc <HAL_GetTick>
 8007680:	0002      	movs	r2, r0
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b64      	cmp	r3, #100	; 0x64
 8007688:	d901      	bls.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e0a6      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800768e:	4b56      	ldr	r3, [pc, #344]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	2380      	movs	r3, #128	; 0x80
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4013      	ands	r3, r2
 8007698:	d0f0      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800769a:	4b52      	ldr	r3, [pc, #328]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800769c:	6a1a      	ldr	r2, [r3, #32]
 800769e:	23c0      	movs	r3, #192	; 0xc0
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4013      	ands	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d034      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	23c0      	movs	r3, #192	; 0xc0
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4013      	ands	r3, r2
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d02c      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076bc:	4b49      	ldr	r3, [pc, #292]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	4a4a      	ldr	r2, [pc, #296]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076c6:	4b47      	ldr	r3, [pc, #284]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80076c8:	6a1a      	ldr	r2, [r3, #32]
 80076ca:	4b46      	ldr	r3, [pc, #280]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80076cc:	2180      	movs	r1, #128	; 0x80
 80076ce:	0249      	lsls	r1, r1, #9
 80076d0:	430a      	orrs	r2, r1
 80076d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076d4:	4b43      	ldr	r3, [pc, #268]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80076d6:	6a1a      	ldr	r2, [r3, #32]
 80076d8:	4b42      	ldr	r3, [pc, #264]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80076da:	4945      	ldr	r1, [pc, #276]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80076dc:	400a      	ands	r2, r1
 80076de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80076e0:	4b40      	ldr	r3, [pc, #256]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	4013      	ands	r3, r2
 80076ec:	d013      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ee:	f7fd f8ed 	bl	80048cc <HAL_GetTick>
 80076f2:	0003      	movs	r3, r0
 80076f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f6:	e009      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f8:	f7fd f8e8 	bl	80048cc <HAL_GetTick>
 80076fc:	0002      	movs	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	4a3c      	ldr	r2, [pc, #240]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d901      	bls.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e067      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800770c:	4b35      	ldr	r3, [pc, #212]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	2202      	movs	r2, #2
 8007712:	4013      	ands	r3, r2
 8007714:	d0f0      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007716:	4b33      	ldr	r3, [pc, #204]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	4a34      	ldr	r2, [pc, #208]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800771c:	4013      	ands	r3, r2
 800771e:	0019      	movs	r1, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	4b2f      	ldr	r3, [pc, #188]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007726:	430a      	orrs	r2, r1
 8007728:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800772a:	2317      	movs	r3, #23
 800772c:	18fb      	adds	r3, r7, r3
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d105      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007734:	4b2b      	ldr	r3, [pc, #172]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007736:	69da      	ldr	r2, [r3, #28]
 8007738:	4b2a      	ldr	r3, [pc, #168]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800773a:	492f      	ldr	r1, [pc, #188]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800773c:	400a      	ands	r2, r1
 800773e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2201      	movs	r2, #1
 8007746:	4013      	ands	r3, r2
 8007748:	d009      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800774a:	4b26      	ldr	r3, [pc, #152]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	2203      	movs	r2, #3
 8007750:	4393      	bics	r3, r2
 8007752:	0019      	movs	r1, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	4b22      	ldr	r3, [pc, #136]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800775a:	430a      	orrs	r2, r1
 800775c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2202      	movs	r2, #2
 8007764:	4013      	ands	r3, r2
 8007766:	d009      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007768:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	4a23      	ldr	r2, [pc, #140]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800776e:	4013      	ands	r3, r2
 8007770:	0019      	movs	r1, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007778:	430a      	orrs	r2, r1
 800777a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2220      	movs	r2, #32
 8007782:	4013      	ands	r3, r2
 8007784:	d009      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007786:	4b17      	ldr	r3, [pc, #92]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	2210      	movs	r2, #16
 800778c:	4393      	bics	r3, r2
 800778e:	0019      	movs	r1, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007796:	430a      	orrs	r2, r1
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	2380      	movs	r3, #128	; 0x80
 80077a0:	029b      	lsls	r3, r3, #10
 80077a2:	4013      	ands	r3, r2
 80077a4:	d009      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077a6:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	2280      	movs	r2, #128	; 0x80
 80077ac:	4393      	bics	r3, r2
 80077ae:	0019      	movs	r1, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699a      	ldr	r2, [r3, #24]
 80077b4:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80077b6:	430a      	orrs	r2, r1
 80077b8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	2380      	movs	r3, #128	; 0x80
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	4013      	ands	r3, r2
 80077c4:	d009      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077c6:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	2240      	movs	r2, #64	; 0x40
 80077cc:	4393      	bics	r3, r2
 80077ce:	0019      	movs	r1, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	695a      	ldr	r2, [r3, #20]
 80077d4:	4b03      	ldr	r3, [pc, #12]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80077d6:	430a      	orrs	r2, r1
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	0018      	movs	r0, r3
 80077de:	46bd      	mov	sp, r7
 80077e0:	b006      	add	sp, #24
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40021000 	.word	0x40021000
 80077e8:	40007000 	.word	0x40007000
 80077ec:	fffffcff 	.word	0xfffffcff
 80077f0:	fffeffff 	.word	0xfffeffff
 80077f4:	00001388 	.word	0x00001388
 80077f8:	efffffff 	.word	0xefffffff
 80077fc:	fffcffff 	.word	0xfffcffff

08007800 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007800:	b5b0      	push	{r4, r5, r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007808:	230f      	movs	r3, #15
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	2201      	movs	r2, #1
 800780e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e081      	b.n	800791e <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7f5b      	ldrb	r3, [r3, #29]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	d106      	bne.n	8007832 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	0018      	movs	r0, r3
 800782e:	f7fc fe3d 	bl	80044ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	2210      	movs	r2, #16
 8007840:	4013      	ands	r3, r2
 8007842:	2b10      	cmp	r3, #16
 8007844:	d05c      	beq.n	8007900 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	22ca      	movs	r2, #202	; 0xca
 800784c:	625a      	str	r2, [r3, #36]	; 0x24
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2253      	movs	r2, #83	; 0x53
 8007854:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007856:	250f      	movs	r5, #15
 8007858:	197c      	adds	r4, r7, r5
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	0018      	movs	r0, r3
 800785e:	f000 fa73 	bl	8007d48 <RTC_EnterInitMode>
 8007862:	0003      	movs	r3, r0
 8007864:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8007866:	0028      	movs	r0, r5
 8007868:	183b      	adds	r3, r7, r0
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d12c      	bne.n	80078ca <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	492b      	ldr	r1, [pc, #172]	; (8007928 <HAL_RTC_Init+0x128>)
 800787c:	400a      	ands	r2, r1
 800787e:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6899      	ldr	r1, [r3, #8]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	68d2      	ldr	r2, [r2, #12]
 80078a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6919      	ldr	r1, [r3, #16]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	041a      	lsls	r2, r3, #16
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80078bc:	183c      	adds	r4, r7, r0
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	0018      	movs	r0, r3
 80078c2:	f000 fa84 	bl	8007dce <RTC_ExitInitMode>
 80078c6:	0003      	movs	r3, r0
 80078c8:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80078ca:	230f      	movs	r3, #15
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d110      	bne.n	80078f6 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4913      	ldr	r1, [pc, #76]	; (800792c <HAL_RTC_Init+0x12c>)
 80078e0:	400a      	ands	r2, r1
 80078e2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	22ff      	movs	r2, #255	; 0xff
 80078fc:	625a      	str	r2, [r3, #36]	; 0x24
 80078fe:	e003      	b.n	8007908 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007900:	230f      	movs	r3, #15
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8007908:	230f      	movs	r3, #15
 800790a:	18fb      	adds	r3, r7, r3
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007918:	230f      	movs	r3, #15
 800791a:	18fb      	adds	r3, r7, r3
 800791c:	781b      	ldrb	r3, [r3, #0]
}
 800791e:	0018      	movs	r0, r3
 8007920:	46bd      	mov	sp, r7
 8007922:	b004      	add	sp, #16
 8007924:	bdb0      	pop	{r4, r5, r7, pc}
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	ff8fffbf 	.word	0xff8fffbf
 800792c:	fffbffff 	.word	0xfffbffff

08007930 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007930:	b5b0      	push	{r4, r5, r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	7f1b      	ldrb	r3, [r3, #28]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_RTC_SetTime+0x1c>
 8007948:	2302      	movs	r3, #2
 800794a:	e08e      	b.n	8007a6a <HAL_RTC_SetTime+0x13a>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2202      	movs	r2, #2
 8007956:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d125      	bne.n	80079aa <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2240      	movs	r2, #64	; 0x40
 8007966:	4013      	ands	r3, r2
 8007968:	d102      	bne.n	8007970 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2200      	movs	r2, #0
 800796e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	0018      	movs	r0, r3
 8007976:	f000 fa53 	bl	8007e20 <RTC_ByteToBcd2>
 800797a:	0003      	movs	r3, r0
 800797c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	785b      	ldrb	r3, [r3, #1]
 8007982:	0018      	movs	r0, r3
 8007984:	f000 fa4c 	bl	8007e20 <RTC_ByteToBcd2>
 8007988:	0003      	movs	r3, r0
 800798a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800798c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	789b      	ldrb	r3, [r3, #2]
 8007992:	0018      	movs	r0, r3
 8007994:	f000 fa44 	bl	8007e20 <RTC_ByteToBcd2>
 8007998:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800799a:	0022      	movs	r2, r4
 800799c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	78db      	ldrb	r3, [r3, #3]
 80079a2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	e017      	b.n	80079da <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2240      	movs	r2, #64	; 0x40
 80079b2:	4013      	ands	r3, r2
 80079b4:	d102      	bne.n	80079bc <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2200      	movs	r2, #0
 80079ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80079c8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80079ce:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	78db      	ldrb	r3, [r3, #3]
 80079d4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	22ca      	movs	r2, #202	; 0xca
 80079e0:	625a      	str	r2, [r3, #36]	; 0x24
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2253      	movs	r2, #83	; 0x53
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079ea:	2513      	movs	r5, #19
 80079ec:	197c      	adds	r4, r7, r5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	0018      	movs	r0, r3
 80079f2:	f000 f9a9 	bl	8007d48 <RTC_EnterInitMode>
 80079f6:	0003      	movs	r3, r0
 80079f8:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80079fa:	0028      	movs	r0, r5
 80079fc:	183b      	adds	r3, r7, r0
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d120      	bne.n	8007a46 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	491a      	ldr	r1, [pc, #104]	; (8007a74 <HAL_RTC_SetTime+0x144>)
 8007a0c:	400a      	ands	r2, r1
 8007a0e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4917      	ldr	r1, [pc, #92]	; (8007a78 <HAL_RTC_SetTime+0x148>)
 8007a1c:	400a      	ands	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6899      	ldr	r1, [r3, #8]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a38:	183c      	adds	r4, r7, r0
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f000 f9c6 	bl	8007dce <RTC_ExitInitMode>
 8007a42:	0003      	movs	r3, r0
 8007a44:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8007a46:	2313      	movs	r3, #19
 8007a48:	18fb      	adds	r3, r7, r3
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	22ff      	movs	r2, #255	; 0xff
 8007a5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	771a      	strb	r2, [r3, #28]

  return status;
 8007a64:	2313      	movs	r3, #19
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	781b      	ldrb	r3, [r3, #0]
}
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	b006      	add	sp, #24
 8007a70:	bdb0      	pop	{r4, r5, r7, pc}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	007f7f7f 	.word	0x007f7f7f
 8007a78:	fffbffff 	.word	0xfffbffff

08007a7c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	045b      	lsls	r3, r3, #17
 8007a9e:	0c5a      	lsrs	r2, r3, #17
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a22      	ldr	r2, [pc, #136]	; (8007b34 <HAL_RTC_GetTime+0xb8>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	0c1b      	lsrs	r3, r3, #16
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	223f      	movs	r2, #63	; 0x3f
 8007ab8:	4013      	ands	r3, r2
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	0a1b      	lsrs	r3, r3, #8
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	227f      	movs	r2, #127	; 0x7f
 8007ac8:	4013      	ands	r3, r2
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	227f      	movs	r2, #127	; 0x7f
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	0d9b      	lsrs	r3, r3, #22
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d11a      	bne.n	8007b2a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	0018      	movs	r0, r3
 8007afa:	f000 f9b2 	bl	8007e62 <RTC_Bcd2ToByte>
 8007afe:	0003      	movs	r3, r0
 8007b00:	001a      	movs	r2, r3
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f000 f9a9 	bl	8007e62 <RTC_Bcd2ToByte>
 8007b10:	0003      	movs	r3, r0
 8007b12:	001a      	movs	r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	789b      	ldrb	r3, [r3, #2]
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	f000 f9a0 	bl	8007e62 <RTC_Bcd2ToByte>
 8007b22:	0003      	movs	r3, r0
 8007b24:	001a      	movs	r2, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	b006      	add	sp, #24
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	007f7f7f 	.word	0x007f7f7f

08007b38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b38:	b5b0      	push	{r4, r5, r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	7f1b      	ldrb	r3, [r3, #28]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d101      	bne.n	8007b54 <HAL_RTC_SetDate+0x1c>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e07a      	b.n	8007c4a <HAL_RTC_SetDate+0x112>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10e      	bne.n	8007b84 <HAL_RTC_SetDate+0x4c>
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	001a      	movs	r2, r3
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	4013      	ands	r3, r2
 8007b70:	d008      	beq.n	8007b84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	2210      	movs	r2, #16
 8007b78:	4393      	bics	r3, r2
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	330a      	adds	r3, #10
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d11c      	bne.n	8007bc4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	78db      	ldrb	r3, [r3, #3]
 8007b8e:	0018      	movs	r0, r3
 8007b90:	f000 f946 	bl	8007e20 <RTC_ByteToBcd2>
 8007b94:	0003      	movs	r3, r0
 8007b96:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f000 f93f 	bl	8007e20 <RTC_ByteToBcd2>
 8007ba2:	0003      	movs	r3, r0
 8007ba4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007ba6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	789b      	ldrb	r3, [r3, #2]
 8007bac:	0018      	movs	r0, r3
 8007bae:	f000 f937 	bl	8007e20 <RTC_ByteToBcd2>
 8007bb2:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007bb4:	0022      	movs	r2, r4
 8007bb6:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	e00e      	b.n	8007be2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	785b      	ldrb	r3, [r3, #1]
 8007bce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007bd0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007bd6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	22ca      	movs	r2, #202	; 0xca
 8007be8:	625a      	str	r2, [r3, #36]	; 0x24
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2253      	movs	r2, #83	; 0x53
 8007bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007bf2:	2513      	movs	r5, #19
 8007bf4:	197c      	adds	r4, r7, r5
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	f000 f8a5 	bl	8007d48 <RTC_EnterInitMode>
 8007bfe:	0003      	movs	r3, r0
 8007c00:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8007c02:	0028      	movs	r0, r5
 8007c04:	183b      	adds	r3, r7, r0
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10c      	bne.n	8007c26 <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4910      	ldr	r1, [pc, #64]	; (8007c54 <HAL_RTC_SetDate+0x11c>)
 8007c14:	400a      	ands	r2, r1
 8007c16:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c18:	183c      	adds	r4, r7, r0
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	f000 f8d6 	bl	8007dce <RTC_ExitInitMode>
 8007c22:	0003      	movs	r3, r0
 8007c24:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8007c26:	2313      	movs	r3, #19
 8007c28:	18fb      	adds	r3, r7, r3
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	22ff      	movs	r2, #255	; 0xff
 8007c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]

  return status;
 8007c44:	2313      	movs	r3, #19
 8007c46:	18fb      	adds	r3, r7, r3
 8007c48:	781b      	ldrb	r3, [r3, #0]
}
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b006      	add	sp, #24
 8007c50:	bdb0      	pop	{r4, r5, r7, pc}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	00ffff3f 	.word	0x00ffff3f

08007c58 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	4a21      	ldr	r2, [pc, #132]	; (8007cf4 <HAL_RTC_GetDate+0x9c>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	0c1b      	lsrs	r3, r3, #16
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	0a1b      	lsrs	r3, r3, #8
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	221f      	movs	r2, #31
 8007c86:	4013      	ands	r3, r2
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	223f      	movs	r2, #63	; 0x3f
 8007c94:	4013      	ands	r3, r2
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	0b5b      	lsrs	r3, r3, #13
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2207      	movs	r2, #7
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d11a      	bne.n	8007ce8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	78db      	ldrb	r3, [r3, #3]
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f000 f8d3 	bl	8007e62 <RTC_Bcd2ToByte>
 8007cbc:	0003      	movs	r3, r0
 8007cbe:	001a      	movs	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	785b      	ldrb	r3, [r3, #1]
 8007cc8:	0018      	movs	r0, r3
 8007cca:	f000 f8ca 	bl	8007e62 <RTC_Bcd2ToByte>
 8007cce:	0003      	movs	r3, r0
 8007cd0:	001a      	movs	r2, r3
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	789b      	ldrb	r3, [r3, #2]
 8007cda:	0018      	movs	r0, r3
 8007cdc:	f000 f8c1 	bl	8007e62 <RTC_Bcd2ToByte>
 8007ce0:	0003      	movs	r3, r0
 8007ce2:	001a      	movs	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	0018      	movs	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	b006      	add	sp, #24
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	00ffff3f 	.word	0x00ffff3f

08007cf8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a0e      	ldr	r2, [pc, #56]	; (8007d44 <HAL_RTC_WaitForSynchro+0x4c>)
 8007d0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d0c:	f7fc fdde 	bl	80048cc <HAL_GetTick>
 8007d10:	0003      	movs	r3, r0
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d14:	e00a      	b.n	8007d2c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d16:	f7fc fdd9 	bl	80048cc <HAL_GetTick>
 8007d1a:	0002      	movs	r2, r0
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	1ad2      	subs	r2, r2, r3
 8007d20:	23fa      	movs	r3, #250	; 0xfa
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d901      	bls.n	8007d2c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e006      	b.n	8007d3a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2220      	movs	r2, #32
 8007d34:	4013      	ands	r3, r2
 8007d36:	d0ee      	beq.n	8007d16 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	b004      	add	sp, #16
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	0001fd5d 	.word	0x0001fd5d

08007d48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007d54:	230f      	movs	r3, #15
 8007d56:	18fb      	adds	r3, r7, r3
 8007d58:	2200      	movs	r2, #0
 8007d5a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2240      	movs	r2, #64	; 0x40
 8007d64:	4013      	ands	r3, r2
 8007d66:	d12b      	bne.n	8007dc0 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2180      	movs	r1, #128	; 0x80
 8007d74:	430a      	orrs	r2, r1
 8007d76:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d78:	f7fc fda8 	bl	80048cc <HAL_GetTick>
 8007d7c:	0003      	movs	r3, r0
 8007d7e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007d80:	e013      	b.n	8007daa <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d82:	f7fc fda3 	bl	80048cc <HAL_GetTick>
 8007d86:	0002      	movs	r2, r0
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	1ad2      	subs	r2, r2, r3
 8007d8c:	200f      	movs	r0, #15
 8007d8e:	183b      	adds	r3, r7, r0
 8007d90:	1839      	adds	r1, r7, r0
 8007d92:	7809      	ldrb	r1, [r1, #0]
 8007d94:	7019      	strb	r1, [r3, #0]
 8007d96:	23fa      	movs	r3, #250	; 0xfa
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d905      	bls.n	8007daa <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2204      	movs	r2, #4
 8007da2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007da4:	183b      	adds	r3, r7, r0
 8007da6:	2201      	movs	r2, #1
 8007da8:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2240      	movs	r2, #64	; 0x40
 8007db2:	4013      	ands	r3, r2
 8007db4:	d104      	bne.n	8007dc0 <RTC_EnterInitMode+0x78>
 8007db6:	230f      	movs	r3, #15
 8007db8:	18fb      	adds	r3, r7, r3
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d1e0      	bne.n	8007d82 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8007dc0:	230f      	movs	r3, #15
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	781b      	ldrb	r3, [r3, #0]
}
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b004      	add	sp, #16
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dce:	b590      	push	{r4, r7, lr}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd6:	240f      	movs	r4, #15
 8007dd8:	193b      	adds	r3, r7, r4
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2180      	movs	r1, #128	; 0x80
 8007dea:	438a      	bics	r2, r1
 8007dec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	2220      	movs	r2, #32
 8007df6:	4013      	ands	r3, r2
 8007df8:	d10b      	bne.n	8007e12 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f7ff ff7b 	bl	8007cf8 <HAL_RTC_WaitForSynchro>
 8007e02:	1e03      	subs	r3, r0, #0
 8007e04:	d005      	beq.n	8007e12 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2204      	movs	r2, #4
 8007e0a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007e0c:	193b      	adds	r3, r7, r4
 8007e0e:	2201      	movs	r2, #1
 8007e10:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8007e12:	230f      	movs	r3, #15
 8007e14:	18fb      	adds	r3, r7, r3
 8007e16:	781b      	ldrb	r3, [r3, #0]
}
 8007e18:	0018      	movs	r0, r3
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	b005      	add	sp, #20
 8007e1e:	bd90      	pop	{r4, r7, pc}

08007e20 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	0002      	movs	r2, r0
 8007e28:	1dfb      	adds	r3, r7, #7
 8007e2a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007e30:	e007      	b.n	8007e42 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3301      	adds	r3, #1
 8007e36:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007e38:	1dfb      	adds	r3, r7, #7
 8007e3a:	1dfa      	adds	r2, r7, #7
 8007e3c:	7812      	ldrb	r2, [r2, #0]
 8007e3e:	3a0a      	subs	r2, #10
 8007e40:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8007e42:	1dfb      	adds	r3, r7, #7
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b09      	cmp	r3, #9
 8007e48:	d8f3      	bhi.n	8007e32 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	1dfb      	adds	r3, r7, #7
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	b2db      	uxtb	r3, r3
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b004      	add	sp, #16
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	0002      	movs	r2, r0
 8007e6a:	1dfb      	adds	r3, r7, #7
 8007e6c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007e72:	1dfb      	adds	r3, r7, #7
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	091b      	lsrs	r3, r3, #4
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	001a      	movs	r2, r3
 8007e7c:	0013      	movs	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	189b      	adds	r3, r3, r2
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	1dfb      	adds	r3, r7, #7
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	210f      	movs	r1, #15
 8007e90:	400b      	ands	r3, r1
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	18d3      	adds	r3, r2, r3
 8007e96:	b2db      	uxtb	r3, r3
}
 8007e98:	0018      	movs	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b004      	add	sp, #16
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e0a8      	b.n	8008004 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	2382      	movs	r3, #130	; 0x82
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d009      	beq.n	8007eda <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	61da      	str	r2, [r3, #28]
 8007ecc:	e005      	b.n	8007eda <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	225d      	movs	r2, #93	; 0x5d
 8007ee4:	5c9b      	ldrb	r3, [r3, r2]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d107      	bne.n	8007efc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	225c      	movs	r2, #92	; 0x5c
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f7fc faf0 	bl	80044dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	225d      	movs	r2, #93	; 0x5d
 8007f00:	2102      	movs	r1, #2
 8007f02:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2140      	movs	r1, #64	; 0x40
 8007f10:	438a      	bics	r2, r1
 8007f12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	23e0      	movs	r3, #224	; 0xe0
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d902      	bls.n	8007f26 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e002      	b.n	8007f2c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f26:	2380      	movs	r3, #128	; 0x80
 8007f28:	015b      	lsls	r3, r3, #5
 8007f2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	23f0      	movs	r3, #240	; 0xf0
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d008      	beq.n	8007f4a <HAL_SPI_Init+0xaa>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	23e0      	movs	r3, #224	; 0xe0
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d002      	beq.n	8007f4a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	2382      	movs	r3, #130	; 0x82
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	401a      	ands	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6899      	ldr	r1, [r3, #8]
 8007f58:	2384      	movs	r3, #132	; 0x84
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	400b      	ands	r3, r1
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2102      	movs	r1, #2
 8007f66:	400b      	ands	r3, r1
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	2101      	movs	r1, #1
 8007f70:	400b      	ands	r3, r1
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6999      	ldr	r1, [r3, #24]
 8007f78:	2380      	movs	r3, #128	; 0x80
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	400b      	ands	r3, r1
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	2138      	movs	r1, #56	; 0x38
 8007f86:	400b      	ands	r3, r1
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	2180      	movs	r1, #128	; 0x80
 8007f90:	400b      	ands	r3, r1
 8007f92:	431a      	orrs	r2, r3
 8007f94:	0011      	movs	r1, r2
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f9a:	2380      	movs	r3, #128	; 0x80
 8007f9c:	019b      	lsls	r3, r3, #6
 8007f9e:	401a      	ands	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	0c1b      	lsrs	r3, r3, #16
 8007fae:	2204      	movs	r2, #4
 8007fb0:	401a      	ands	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	2110      	movs	r1, #16
 8007fb8:	400b      	ands	r3, r1
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc0:	2108      	movs	r1, #8
 8007fc2:	400b      	ands	r3, r1
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68d9      	ldr	r1, [r3, #12]
 8007fca:	23f0      	movs	r3, #240	; 0xf0
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	400b      	ands	r3, r1
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	0011      	movs	r1, r2
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	2380      	movs	r3, #128	; 0x80
 8007fd8:	015b      	lsls	r3, r3, #5
 8007fda:	401a      	ands	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69da      	ldr	r2, [r3, #28]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4907      	ldr	r1, [pc, #28]	; (800800c <HAL_SPI_Init+0x16c>)
 8007ff0:	400a      	ands	r2, r1
 8007ff2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	225d      	movs	r2, #93	; 0x5d
 8007ffe:	2101      	movs	r1, #1
 8008000:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	0018      	movs	r0, r3
 8008006:	46bd      	mov	sp, r7
 8008008:	b004      	add	sp, #16
 800800a:	bd80      	pop	{r7, pc}
 800800c:	fffff7ff 	.word	0xfffff7ff

08008010 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	1dbb      	adds	r3, r7, #6
 800801e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008020:	231f      	movs	r3, #31
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	225c      	movs	r2, #92	; 0x5c
 800802c:	5c9b      	ldrb	r3, [r3, r2]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_SPI_Transmit+0x26>
 8008032:	2302      	movs	r3, #2
 8008034:	e147      	b.n	80082c6 <HAL_SPI_Transmit+0x2b6>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	225c      	movs	r2, #92	; 0x5c
 800803a:	2101      	movs	r1, #1
 800803c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800803e:	f7fc fc45 	bl	80048cc <HAL_GetTick>
 8008042:	0003      	movs	r3, r0
 8008044:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008046:	2316      	movs	r3, #22
 8008048:	18fb      	adds	r3, r7, r3
 800804a:	1dba      	adds	r2, r7, #6
 800804c:	8812      	ldrh	r2, [r2, #0]
 800804e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	225d      	movs	r2, #93	; 0x5d
 8008054:	5c9b      	ldrb	r3, [r3, r2]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d004      	beq.n	8008066 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800805c:	231f      	movs	r3, #31
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	2202      	movs	r2, #2
 8008062:	701a      	strb	r2, [r3, #0]
    goto error;
 8008064:	e128      	b.n	80082b8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <HAL_SPI_Transmit+0x64>
 800806c:	1dbb      	adds	r3, r7, #6
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d104      	bne.n	800807e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008074:	231f      	movs	r3, #31
 8008076:	18fb      	adds	r3, r7, r3
 8008078:	2201      	movs	r2, #1
 800807a:	701a      	strb	r2, [r3, #0]
    goto error;
 800807c:	e11c      	b.n	80082b8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	225d      	movs	r2, #93	; 0x5d
 8008082:	2103      	movs	r1, #3
 8008084:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1dba      	adds	r2, r7, #6
 8008096:	8812      	ldrh	r2, [r2, #0]
 8008098:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	1dba      	adds	r2, r7, #6
 800809e:	8812      	ldrh	r2, [r2, #0]
 80080a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2244      	movs	r2, #68	; 0x44
 80080ac:	2100      	movs	r1, #0
 80080ae:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2246      	movs	r2, #70	; 0x46
 80080b4:	2100      	movs	r1, #0
 80080b6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	689a      	ldr	r2, [r3, #8]
 80080c8:	2380      	movs	r3, #128	; 0x80
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d110      	bne.n	80080f2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2140      	movs	r1, #64	; 0x40
 80080dc:	438a      	bics	r2, r1
 80080de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2180      	movs	r1, #128	; 0x80
 80080ec:	01c9      	lsls	r1, r1, #7
 80080ee:	430a      	orrs	r2, r1
 80080f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2240      	movs	r2, #64	; 0x40
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b40      	cmp	r3, #64	; 0x40
 80080fe:	d007      	beq.n	8008110 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2140      	movs	r1, #64	; 0x40
 800810c:	430a      	orrs	r2, r1
 800810e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	23e0      	movs	r3, #224	; 0xe0
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	429a      	cmp	r2, r3
 800811a:	d952      	bls.n	80081c2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <HAL_SPI_Transmit+0x11e>
 8008124:	2316      	movs	r3, #22
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d143      	bne.n	80081b6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	881a      	ldrh	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	1c9a      	adds	r2, r3, #2
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008152:	e030      	b.n	80081b6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2202      	movs	r2, #2
 800815c:	4013      	ands	r3, r2
 800815e:	2b02      	cmp	r3, #2
 8008160:	d112      	bne.n	8008188 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	881a      	ldrh	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	1c9a      	adds	r2, r3, #2
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008186:	e016      	b.n	80081b6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008188:	f7fc fba0 	bl	80048cc <HAL_GetTick>
 800818c:	0002      	movs	r2, r0
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d802      	bhi.n	800819e <HAL_SPI_Transmit+0x18e>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	3301      	adds	r3, #1
 800819c:	d102      	bne.n	80081a4 <HAL_SPI_Transmit+0x194>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d108      	bne.n	80081b6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80081a4:	231f      	movs	r3, #31
 80081a6:	18fb      	adds	r3, r7, r3
 80081a8:	2203      	movs	r2, #3
 80081aa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	225d      	movs	r2, #93	; 0x5d
 80081b0:	2101      	movs	r1, #1
 80081b2:	5499      	strb	r1, [r3, r2]
          goto error;
 80081b4:	e080      	b.n	80082b8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1c9      	bne.n	8008154 <HAL_SPI_Transmit+0x144>
 80081c0:	e053      	b.n	800826a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <HAL_SPI_Transmit+0x1c4>
 80081ca:	2316      	movs	r3, #22
 80081cc:	18fb      	adds	r3, r7, r3
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d145      	bne.n	8008260 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	330c      	adds	r3, #12
 80081de:	7812      	ldrb	r2, [r2, #0]
 80081e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80081fa:	e031      	b.n	8008260 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	2202      	movs	r2, #2
 8008204:	4013      	ands	r3, r2
 8008206:	2b02      	cmp	r3, #2
 8008208:	d113      	bne.n	8008232 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	330c      	adds	r3, #12
 8008214:	7812      	ldrb	r2, [r2, #0]
 8008216:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008226:	b29b      	uxth	r3, r3
 8008228:	3b01      	subs	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008230:	e016      	b.n	8008260 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008232:	f7fc fb4b 	bl	80048cc <HAL_GetTick>
 8008236:	0002      	movs	r2, r0
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	429a      	cmp	r2, r3
 8008240:	d802      	bhi.n	8008248 <HAL_SPI_Transmit+0x238>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	d102      	bne.n	800824e <HAL_SPI_Transmit+0x23e>
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d108      	bne.n	8008260 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800824e:	231f      	movs	r3, #31
 8008250:	18fb      	adds	r3, r7, r3
 8008252:	2203      	movs	r2, #3
 8008254:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	225d      	movs	r2, #93	; 0x5d
 800825a:	2101      	movs	r1, #1
 800825c:	5499      	strb	r1, [r3, r2]
          goto error;
 800825e:	e02b      	b.n	80082b8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008264:	b29b      	uxth	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1c8      	bne.n	80081fc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	0018      	movs	r0, r3
 8008272:	f000 fcef 	bl	8008c54 <SPI_EndRxTxTransaction>
 8008276:	1e03      	subs	r3, r0, #0
 8008278:	d002      	beq.n	8008280 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2220      	movs	r2, #32
 800827e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008288:	2300      	movs	r3, #0
 800828a:	613b      	str	r3, [r7, #16]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	613b      	str	r3, [r7, #16]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d004      	beq.n	80082b0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80082a6:	231f      	movs	r3, #31
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	2201      	movs	r2, #1
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	e003      	b.n	80082b8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	225d      	movs	r2, #93	; 0x5d
 80082b4:	2101      	movs	r1, #1
 80082b6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	225c      	movs	r2, #92	; 0x5c
 80082bc:	2100      	movs	r1, #0
 80082be:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80082c0:	231f      	movs	r3, #31
 80082c2:	18fb      	adds	r3, r7, r3
 80082c4:	781b      	ldrb	r3, [r3, #0]
}
 80082c6:	0018      	movs	r0, r3
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b008      	add	sp, #32
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082d0:	b590      	push	{r4, r7, lr}
 80082d2:	b089      	sub	sp, #36	; 0x24
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	1dbb      	adds	r3, r7, #6
 80082de:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082e0:	2117      	movs	r1, #23
 80082e2:	187b      	adds	r3, r7, r1
 80082e4:	2200      	movs	r2, #0
 80082e6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	225d      	movs	r2, #93	; 0x5d
 80082ec:	5c9b      	ldrb	r3, [r3, r2]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d003      	beq.n	80082fc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80082f4:	187b      	adds	r3, r7, r1
 80082f6:	2202      	movs	r2, #2
 80082f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80082fa:	e12b      	b.n	8008554 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	2382      	movs	r3, #130	; 0x82
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	429a      	cmp	r2, r3
 8008306:	d113      	bne.n	8008330 <HAL_SPI_Receive+0x60>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10f      	bne.n	8008330 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	225d      	movs	r2, #93	; 0x5d
 8008314:	2104      	movs	r1, #4
 8008316:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008318:	1dbb      	adds	r3, r7, #6
 800831a:	881c      	ldrh	r4, [r3, #0]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	0023      	movs	r3, r4
 8008328:	f000 f924 	bl	8008574 <HAL_SPI_TransmitReceive>
 800832c:	0003      	movs	r3, r0
 800832e:	e118      	b.n	8008562 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	225c      	movs	r2, #92	; 0x5c
 8008334:	5c9b      	ldrb	r3, [r3, r2]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d101      	bne.n	800833e <HAL_SPI_Receive+0x6e>
 800833a:	2302      	movs	r3, #2
 800833c:	e111      	b.n	8008562 <HAL_SPI_Receive+0x292>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	225c      	movs	r2, #92	; 0x5c
 8008342:	2101      	movs	r1, #1
 8008344:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008346:	f7fc fac1 	bl	80048cc <HAL_GetTick>
 800834a:	0003      	movs	r3, r0
 800834c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <HAL_SPI_Receive+0x8c>
 8008354:	1dbb      	adds	r3, r7, #6
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800835c:	2317      	movs	r3, #23
 800835e:	18fb      	adds	r3, r7, r3
 8008360:	2201      	movs	r2, #1
 8008362:	701a      	strb	r2, [r3, #0]
    goto error;
 8008364:	e0f6      	b.n	8008554 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	225d      	movs	r2, #93	; 0x5d
 800836a:	2104      	movs	r1, #4
 800836c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1dba      	adds	r2, r7, #6
 800837e:	2144      	movs	r1, #68	; 0x44
 8008380:	8812      	ldrh	r2, [r2, #0]
 8008382:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	1dba      	adds	r2, r7, #6
 8008388:	2146      	movs	r1, #70	; 0x46
 800838a:	8812      	ldrh	r2, [r2, #0]
 800838c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	23e0      	movs	r3, #224	; 0xe0
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d908      	bls.n	80083ca <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	496a      	ldr	r1, [pc, #424]	; (800856c <HAL_SPI_Receive+0x29c>)
 80083c4:	400a      	ands	r2, r1
 80083c6:	605a      	str	r2, [r3, #4]
 80083c8:	e008      	b.n	80083dc <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2180      	movs	r1, #128	; 0x80
 80083d6:	0149      	lsls	r1, r1, #5
 80083d8:	430a      	orrs	r2, r1
 80083da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d10f      	bne.n	8008408 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2140      	movs	r1, #64	; 0x40
 80083f4:	438a      	bics	r2, r1
 80083f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	495b      	ldr	r1, [pc, #364]	; (8008570 <HAL_SPI_Receive+0x2a0>)
 8008404:	400a      	ands	r2, r1
 8008406:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2240      	movs	r2, #64	; 0x40
 8008410:	4013      	ands	r3, r2
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d007      	beq.n	8008426 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2140      	movs	r1, #64	; 0x40
 8008422:	430a      	orrs	r2, r1
 8008424:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	23e0      	movs	r3, #224	; 0xe0
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	429a      	cmp	r2, r3
 8008430:	d900      	bls.n	8008434 <HAL_SPI_Receive+0x164>
 8008432:	e071      	b.n	8008518 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008434:	e035      	b.n	80084a2 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	2201      	movs	r2, #1
 800843e:	4013      	ands	r3, r2
 8008440:	2b01      	cmp	r3, #1
 8008442:	d117      	bne.n	8008474 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	330c      	adds	r3, #12
 800844a:	001a      	movs	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2246      	movs	r2, #70	; 0x46
 8008464:	5a9b      	ldrh	r3, [r3, r2]
 8008466:	b29b      	uxth	r3, r3
 8008468:	3b01      	subs	r3, #1
 800846a:	b299      	uxth	r1, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2246      	movs	r2, #70	; 0x46
 8008470:	5299      	strh	r1, [r3, r2]
 8008472:	e016      	b.n	80084a2 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008474:	f7fc fa2a 	bl	80048cc <HAL_GetTick>
 8008478:	0002      	movs	r2, r0
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d802      	bhi.n	800848a <HAL_SPI_Receive+0x1ba>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	3301      	adds	r3, #1
 8008488:	d102      	bne.n	8008490 <HAL_SPI_Receive+0x1c0>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d108      	bne.n	80084a2 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8008490:	2317      	movs	r3, #23
 8008492:	18fb      	adds	r3, r7, r3
 8008494:	2203      	movs	r2, #3
 8008496:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	225d      	movs	r2, #93	; 0x5d
 800849c:	2101      	movs	r1, #1
 800849e:	5499      	strb	r1, [r3, r2]
          goto error;
 80084a0:	e058      	b.n	8008554 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2246      	movs	r2, #70	; 0x46
 80084a6:	5a9b      	ldrh	r3, [r3, r2]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1c3      	bne.n	8008436 <HAL_SPI_Receive+0x166>
 80084ae:	e039      	b.n	8008524 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	2201      	movs	r2, #1
 80084b8:	4013      	ands	r3, r2
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d115      	bne.n	80084ea <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68da      	ldr	r2, [r3, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c8:	b292      	uxth	r2, r2
 80084ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	1c9a      	adds	r2, r3, #2
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2246      	movs	r2, #70	; 0x46
 80084da:	5a9b      	ldrh	r3, [r3, r2]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b299      	uxth	r1, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2246      	movs	r2, #70	; 0x46
 80084e6:	5299      	strh	r1, [r3, r2]
 80084e8:	e016      	b.n	8008518 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ea:	f7fc f9ef 	bl	80048cc <HAL_GetTick>
 80084ee:	0002      	movs	r2, r0
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d802      	bhi.n	8008500 <HAL_SPI_Receive+0x230>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	3301      	adds	r3, #1
 80084fe:	d102      	bne.n	8008506 <HAL_SPI_Receive+0x236>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d108      	bne.n	8008518 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8008506:	2317      	movs	r3, #23
 8008508:	18fb      	adds	r3, r7, r3
 800850a:	2203      	movs	r2, #3
 800850c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	225d      	movs	r2, #93	; 0x5d
 8008512:	2101      	movs	r1, #1
 8008514:	5499      	strb	r1, [r3, r2]
          goto error;
 8008516:	e01d      	b.n	8008554 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2246      	movs	r2, #70	; 0x46
 800851c:	5a9b      	ldrh	r3, [r3, r2]
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1c5      	bne.n	80084b0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	0018      	movs	r0, r3
 800852c:	f000 fb34 	bl	8008b98 <SPI_EndRxTransaction>
 8008530:	1e03      	subs	r3, r0, #0
 8008532:	d002      	beq.n	800853a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2220      	movs	r2, #32
 8008538:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8008542:	2317      	movs	r3, #23
 8008544:	18fb      	adds	r3, r7, r3
 8008546:	2201      	movs	r2, #1
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	e003      	b.n	8008554 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	225d      	movs	r2, #93	; 0x5d
 8008550:	2101      	movs	r1, #1
 8008552:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	225c      	movs	r2, #92	; 0x5c
 8008558:	2100      	movs	r1, #0
 800855a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800855c:	2317      	movs	r3, #23
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	781b      	ldrb	r3, [r3, #0]
}
 8008562:	0018      	movs	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	b007      	add	sp, #28
 8008568:	bd90      	pop	{r4, r7, pc}
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	ffffefff 	.word	0xffffefff
 8008570:	ffffbfff 	.word	0xffffbfff

08008574 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	001a      	movs	r2, r3
 8008582:	1cbb      	adds	r3, r7, #2
 8008584:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008586:	2301      	movs	r3, #1
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800858a:	2323      	movs	r3, #35	; 0x23
 800858c:	18fb      	adds	r3, r7, r3
 800858e:	2200      	movs	r2, #0
 8008590:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	225c      	movs	r2, #92	; 0x5c
 8008596:	5c9b      	ldrb	r3, [r3, r2]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_SPI_TransmitReceive+0x2c>
 800859c:	2302      	movs	r3, #2
 800859e:	e1c4      	b.n	800892a <HAL_SPI_TransmitReceive+0x3b6>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	225c      	movs	r2, #92	; 0x5c
 80085a4:	2101      	movs	r1, #1
 80085a6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085a8:	f7fc f990 	bl	80048cc <HAL_GetTick>
 80085ac:	0003      	movs	r3, r0
 80085ae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085b0:	201b      	movs	r0, #27
 80085b2:	183b      	adds	r3, r7, r0
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	215d      	movs	r1, #93	; 0x5d
 80085b8:	5c52      	ldrb	r2, [r2, r1]
 80085ba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80085c2:	2312      	movs	r3, #18
 80085c4:	18fb      	adds	r3, r7, r3
 80085c6:	1cba      	adds	r2, r7, #2
 80085c8:	8812      	ldrh	r2, [r2, #0]
 80085ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085cc:	183b      	adds	r3, r7, r0
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d011      	beq.n	80085f8 <HAL_SPI_TransmitReceive+0x84>
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	2382      	movs	r3, #130	; 0x82
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	429a      	cmp	r2, r3
 80085dc:	d107      	bne.n	80085ee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <HAL_SPI_TransmitReceive+0x7a>
 80085e6:	183b      	adds	r3, r7, r0
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d004      	beq.n	80085f8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80085ee:	2323      	movs	r3, #35	; 0x23
 80085f0:	18fb      	adds	r3, r7, r3
 80085f2:	2202      	movs	r2, #2
 80085f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80085f6:	e191      	b.n	800891c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d006      	beq.n	800860c <HAL_SPI_TransmitReceive+0x98>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <HAL_SPI_TransmitReceive+0x98>
 8008604:	1cbb      	adds	r3, r7, #2
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d104      	bne.n	8008616 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800860c:	2323      	movs	r3, #35	; 0x23
 800860e:	18fb      	adds	r3, r7, r3
 8008610:	2201      	movs	r2, #1
 8008612:	701a      	strb	r2, [r3, #0]
    goto error;
 8008614:	e182      	b.n	800891c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	225d      	movs	r2, #93	; 0x5d
 800861a:	5c9b      	ldrb	r3, [r3, r2]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b04      	cmp	r3, #4
 8008620:	d003      	beq.n	800862a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	225d      	movs	r2, #93	; 0x5d
 8008626:	2105      	movs	r1, #5
 8008628:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	1cba      	adds	r2, r7, #2
 800863a:	2146      	movs	r1, #70	; 0x46
 800863c:	8812      	ldrh	r2, [r2, #0]
 800863e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	1cba      	adds	r2, r7, #2
 8008644:	2144      	movs	r1, #68	; 0x44
 8008646:	8812      	ldrh	r2, [r2, #0]
 8008648:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	1cba      	adds	r2, r7, #2
 8008654:	8812      	ldrh	r2, [r2, #0]
 8008656:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1cba      	adds	r2, r7, #2
 800865c:	8812      	ldrh	r2, [r2, #0]
 800865e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	23e0      	movs	r3, #224	; 0xe0
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	429a      	cmp	r2, r3
 8008676:	d908      	bls.n	800868a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	49ac      	ldr	r1, [pc, #688]	; (8008934 <HAL_SPI_TransmitReceive+0x3c0>)
 8008684:	400a      	ands	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
 8008688:	e008      	b.n	800869c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2180      	movs	r1, #128	; 0x80
 8008696:	0149      	lsls	r1, r1, #5
 8008698:	430a      	orrs	r2, r1
 800869a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2240      	movs	r2, #64	; 0x40
 80086a4:	4013      	ands	r3, r2
 80086a6:	2b40      	cmp	r3, #64	; 0x40
 80086a8:	d007      	beq.n	80086ba <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2140      	movs	r1, #64	; 0x40
 80086b6:	430a      	orrs	r2, r1
 80086b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	23e0      	movs	r3, #224	; 0xe0
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d800      	bhi.n	80086c8 <HAL_SPI_TransmitReceive+0x154>
 80086c6:	e083      	b.n	80087d0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <HAL_SPI_TransmitReceive+0x168>
 80086d0:	2312      	movs	r3, #18
 80086d2:	18fb      	adds	r3, r7, r3
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d000      	beq.n	80086dc <HAL_SPI_TransmitReceive+0x168>
 80086da:	e06d      	b.n	80087b8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	881a      	ldrh	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	1c9a      	adds	r2, r3, #2
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008700:	e05a      	b.n	80087b8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2202      	movs	r2, #2
 800870a:	4013      	ands	r3, r2
 800870c:	2b02      	cmp	r3, #2
 800870e:	d11b      	bne.n	8008748 <HAL_SPI_TransmitReceive+0x1d4>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d016      	beq.n	8008748 <HAL_SPI_TransmitReceive+0x1d4>
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	2b01      	cmp	r3, #1
 800871e:	d113      	bne.n	8008748 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	881a      	ldrh	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008730:	1c9a      	adds	r2, r3, #2
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2201      	movs	r2, #1
 8008750:	4013      	ands	r3, r2
 8008752:	2b01      	cmp	r3, #1
 8008754:	d11c      	bne.n	8008790 <HAL_SPI_TransmitReceive+0x21c>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2246      	movs	r2, #70	; 0x46
 800875a:	5a9b      	ldrh	r3, [r3, r2]
 800875c:	b29b      	uxth	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d016      	beq.n	8008790 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	b292      	uxth	r2, r2
 800876e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	1c9a      	adds	r2, r3, #2
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2246      	movs	r2, #70	; 0x46
 800877e:	5a9b      	ldrh	r3, [r3, r2]
 8008780:	b29b      	uxth	r3, r3
 8008782:	3b01      	subs	r3, #1
 8008784:	b299      	uxth	r1, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2246      	movs	r2, #70	; 0x46
 800878a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800878c:	2301      	movs	r3, #1
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008790:	f7fc f89c 	bl	80048cc <HAL_GetTick>
 8008794:	0002      	movs	r2, r0
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879c:	429a      	cmp	r2, r3
 800879e:	d80b      	bhi.n	80087b8 <HAL_SPI_TransmitReceive+0x244>
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	3301      	adds	r3, #1
 80087a4:	d008      	beq.n	80087b8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80087a6:	2323      	movs	r3, #35	; 0x23
 80087a8:	18fb      	adds	r3, r7, r3
 80087aa:	2203      	movs	r2, #3
 80087ac:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	225d      	movs	r2, #93	; 0x5d
 80087b2:	2101      	movs	r1, #1
 80087b4:	5499      	strb	r1, [r3, r2]
        goto error;
 80087b6:	e0b1      	b.n	800891c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d19f      	bne.n	8008702 <HAL_SPI_TransmitReceive+0x18e>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2246      	movs	r2, #70	; 0x46
 80087c6:	5a9b      	ldrh	r3, [r3, r2]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d199      	bne.n	8008702 <HAL_SPI_TransmitReceive+0x18e>
 80087ce:	e089      	b.n	80088e4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <HAL_SPI_TransmitReceive+0x270>
 80087d8:	2312      	movs	r3, #18
 80087da:	18fb      	adds	r3, r7, r3
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d000      	beq.n	80087e4 <HAL_SPI_TransmitReceive+0x270>
 80087e2:	e074      	b.n	80088ce <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	330c      	adds	r3, #12
 80087ee:	7812      	ldrb	r2, [r2, #0]
 80087f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800880a:	e060      	b.n	80088ce <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2202      	movs	r2, #2
 8008814:	4013      	ands	r3, r2
 8008816:	2b02      	cmp	r3, #2
 8008818:	d11c      	bne.n	8008854 <HAL_SPI_TransmitReceive+0x2e0>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d017      	beq.n	8008854 <HAL_SPI_TransmitReceive+0x2e0>
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	2b01      	cmp	r3, #1
 8008828:	d114      	bne.n	8008854 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	330c      	adds	r3, #12
 8008834:	7812      	ldrb	r2, [r2, #0]
 8008836:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008846:	b29b      	uxth	r3, r3
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	2201      	movs	r2, #1
 800885c:	4013      	ands	r3, r2
 800885e:	2b01      	cmp	r3, #1
 8008860:	d11e      	bne.n	80088a0 <HAL_SPI_TransmitReceive+0x32c>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2246      	movs	r2, #70	; 0x46
 8008866:	5a9b      	ldrh	r3, [r3, r2]
 8008868:	b29b      	uxth	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d018      	beq.n	80088a0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	330c      	adds	r3, #12
 8008874:	001a      	movs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	7812      	ldrb	r2, [r2, #0]
 800887c:	b2d2      	uxtb	r2, r2
 800887e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2246      	movs	r2, #70	; 0x46
 800888e:	5a9b      	ldrh	r3, [r3, r2]
 8008890:	b29b      	uxth	r3, r3
 8008892:	3b01      	subs	r3, #1
 8008894:	b299      	uxth	r1, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2246      	movs	r2, #70	; 0x46
 800889a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800889c:	2301      	movs	r3, #1
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088a0:	f7fc f814 	bl	80048cc <HAL_GetTick>
 80088a4:	0002      	movs	r2, r0
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d802      	bhi.n	80088b6 <HAL_SPI_TransmitReceive+0x342>
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	3301      	adds	r3, #1
 80088b4:	d102      	bne.n	80088bc <HAL_SPI_TransmitReceive+0x348>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d108      	bne.n	80088ce <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80088bc:	2323      	movs	r3, #35	; 0x23
 80088be:	18fb      	adds	r3, r7, r3
 80088c0:	2203      	movs	r2, #3
 80088c2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	225d      	movs	r2, #93	; 0x5d
 80088c8:	2101      	movs	r1, #1
 80088ca:	5499      	strb	r1, [r3, r2]
        goto error;
 80088cc:	e026      	b.n	800891c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d199      	bne.n	800880c <HAL_SPI_TransmitReceive+0x298>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2246      	movs	r2, #70	; 0x46
 80088dc:	5a9b      	ldrh	r3, [r3, r2]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d193      	bne.n	800880c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088e4:	69fa      	ldr	r2, [r7, #28]
 80088e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	0018      	movs	r0, r3
 80088ec:	f000 f9b2 	bl	8008c54 <SPI_EndRxTxTransaction>
 80088f0:	1e03      	subs	r3, r0, #0
 80088f2:	d006      	beq.n	8008902 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80088f4:	2323      	movs	r3, #35	; 0x23
 80088f6:	18fb      	adds	r3, r7, r3
 80088f8:	2201      	movs	r2, #1
 80088fa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2220      	movs	r2, #32
 8008900:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008906:	2b00      	cmp	r3, #0
 8008908:	d004      	beq.n	8008914 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800890a:	2323      	movs	r3, #35	; 0x23
 800890c:	18fb      	adds	r3, r7, r3
 800890e:	2201      	movs	r2, #1
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	e003      	b.n	800891c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	225d      	movs	r2, #93	; 0x5d
 8008918:	2101      	movs	r1, #1
 800891a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	225c      	movs	r2, #92	; 0x5c
 8008920:	2100      	movs	r1, #0
 8008922:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008924:	2323      	movs	r3, #35	; 0x23
 8008926:	18fb      	adds	r3, r7, r3
 8008928:	781b      	ldrb	r3, [r3, #0]
}
 800892a:	0018      	movs	r0, r3
 800892c:	46bd      	mov	sp, r7
 800892e:	b00a      	add	sp, #40	; 0x28
 8008930:	bd80      	pop	{r7, pc}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	ffffefff 	.word	0xffffefff

08008938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	1dfb      	adds	r3, r7, #7
 8008946:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008948:	f7fb ffc0 	bl	80048cc <HAL_GetTick>
 800894c:	0002      	movs	r2, r0
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	18d3      	adds	r3, r2, r3
 8008956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008958:	f7fb ffb8 	bl	80048cc <HAL_GetTick>
 800895c:	0003      	movs	r3, r0
 800895e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008960:	4b3a      	ldr	r3, [pc, #232]	; (8008a4c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	015b      	lsls	r3, r3, #5
 8008966:	0d1b      	lsrs	r3, r3, #20
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	4353      	muls	r3, r2
 800896c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800896e:	e058      	b.n	8008a22 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	d055      	beq.n	8008a22 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008976:	f7fb ffa9 	bl	80048cc <HAL_GetTick>
 800897a:	0002      	movs	r2, r0
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	429a      	cmp	r2, r3
 8008984:	d902      	bls.n	800898c <SPI_WaitFlagStateUntilTimeout+0x54>
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d142      	bne.n	8008a12 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	21e0      	movs	r1, #224	; 0xe0
 8008998:	438a      	bics	r2, r1
 800899a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	2382      	movs	r3, #130	; 0x82
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d113      	bne.n	80089d0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	2380      	movs	r3, #128	; 0x80
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d005      	beq.n	80089c0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	2380      	movs	r3, #128	; 0x80
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	429a      	cmp	r2, r3
 80089be:	d107      	bne.n	80089d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2140      	movs	r1, #64	; 0x40
 80089cc:	438a      	bics	r2, r1
 80089ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089d4:	2380      	movs	r3, #128	; 0x80
 80089d6:	019b      	lsls	r3, r3, #6
 80089d8:	429a      	cmp	r2, r3
 80089da:	d110      	bne.n	80089fe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	491a      	ldr	r1, [pc, #104]	; (8008a50 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80089e8:	400a      	ands	r2, r1
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2180      	movs	r1, #128	; 0x80
 80089f8:	0189      	lsls	r1, r1, #6
 80089fa:	430a      	orrs	r2, r1
 80089fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	225d      	movs	r2, #93	; 0x5d
 8008a02:	2101      	movs	r1, #1
 8008a04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	225c      	movs	r2, #92	; 0x5c
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e017      	b.n	8008a42 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	425a      	negs	r2, r3
 8008a32:	4153      	adcs	r3, r2
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	001a      	movs	r2, r3
 8008a38:	1dfb      	adds	r3, r7, #7
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d197      	bne.n	8008970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	0018      	movs	r0, r3
 8008a44:	46bd      	mov	sp, r7
 8008a46:	b008      	add	sp, #32
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	46c0      	nop			; (mov r8, r8)
 8008a4c:	200000d8 	.word	0x200000d8
 8008a50:	ffffdfff 	.word	0xffffdfff

08008a54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	; 0x28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a62:	2317      	movs	r3, #23
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a6a:	f7fb ff2f 	bl	80048cc <HAL_GetTick>
 8008a6e:	0002      	movs	r2, r0
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	18d3      	adds	r3, r2, r3
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008a7a:	f7fb ff27 	bl	80048cc <HAL_GetTick>
 8008a7e:	0003      	movs	r3, r0
 8008a80:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	330c      	adds	r3, #12
 8008a88:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a8a:	4b41      	ldr	r3, [pc, #260]	; (8008b90 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	0013      	movs	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	189b      	adds	r3, r3, r2
 8008a94:	00da      	lsls	r2, r3, #3
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	0d1b      	lsrs	r3, r3, #20
 8008a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a9c:	4353      	muls	r3, r2
 8008a9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008aa0:	e068      	b.n	8008b74 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	23c0      	movs	r3, #192	; 0xc0
 8008aa6:	00db      	lsls	r3, r3, #3
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d10a      	bne.n	8008ac2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d107      	bne.n	8008ac2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	2117      	movs	r1, #23
 8008aba:	187b      	adds	r3, r7, r1
 8008abc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008abe:	187b      	adds	r3, r7, r1
 8008ac0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	d055      	beq.n	8008b74 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ac8:	f7fb ff00 	bl	80048cc <HAL_GetTick>
 8008acc:	0002      	movs	r2, r0
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d902      	bls.n	8008ade <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d142      	bne.n	8008b64 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	21e0      	movs	r1, #224	; 0xe0
 8008aea:	438a      	bics	r2, r1
 8008aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	2382      	movs	r3, #130	; 0x82
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d113      	bne.n	8008b22 <SPI_WaitFifoStateUntilTimeout+0xce>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	2380      	movs	r3, #128	; 0x80
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d005      	beq.n	8008b12 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689a      	ldr	r2, [r3, #8]
 8008b0a:	2380      	movs	r3, #128	; 0x80
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d107      	bne.n	8008b22 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2140      	movs	r1, #64	; 0x40
 8008b1e:	438a      	bics	r2, r1
 8008b20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b26:	2380      	movs	r3, #128	; 0x80
 8008b28:	019b      	lsls	r3, r3, #6
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d110      	bne.n	8008b50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4916      	ldr	r1, [pc, #88]	; (8008b94 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008b3a:	400a      	ands	r2, r1
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2180      	movs	r1, #128	; 0x80
 8008b4a:	0189      	lsls	r1, r1, #6
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	225d      	movs	r2, #93	; 0x5d
 8008b54:	2101      	movs	r1, #1
 8008b56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	225c      	movs	r2, #92	; 0x5c
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e010      	b.n	8008b86 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d18e      	bne.n	8008aa2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	0018      	movs	r0, r3
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	b00a      	add	sp, #40	; 0x28
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	200000d8 	.word	0x200000d8
 8008b94:	ffffdfff 	.word	0xffffdfff

08008b98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	2382      	movs	r3, #130	; 0x82
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d113      	bne.n	8008bd8 <SPI_EndRxTransaction+0x40>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	2380      	movs	r3, #128	; 0x80
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d005      	beq.n	8008bc8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	2380      	movs	r3, #128	; 0x80
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d107      	bne.n	8008bd8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2140      	movs	r1, #64	; 0x40
 8008bd4:	438a      	bics	r2, r1
 8008bd6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	0013      	movs	r3, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	2180      	movs	r1, #128	; 0x80
 8008be6:	f7ff fea7 	bl	8008938 <SPI_WaitFlagStateUntilTimeout>
 8008bea:	1e03      	subs	r3, r0, #0
 8008bec:	d007      	beq.n	8008bfe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e026      	b.n	8008c4c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	2382      	movs	r3, #130	; 0x82
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d11f      	bne.n	8008c4a <SPI_EndRxTransaction+0xb2>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	2380      	movs	r3, #128	; 0x80
 8008c10:	021b      	lsls	r3, r3, #8
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d005      	beq.n	8008c22 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	2380      	movs	r3, #128	; 0x80
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d113      	bne.n	8008c4a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	23c0      	movs	r3, #192	; 0xc0
 8008c26:	00d9      	lsls	r1, r3, #3
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	0013      	movs	r3, r2
 8008c30:	2200      	movs	r2, #0
 8008c32:	f7ff ff0f 	bl	8008a54 <SPI_WaitFifoStateUntilTimeout>
 8008c36:	1e03      	subs	r3, r0, #0
 8008c38:	d007      	beq.n	8008c4a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3e:	2220      	movs	r2, #32
 8008c40:	431a      	orrs	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e000      	b.n	8008c4c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b004      	add	sp, #16
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	23c0      	movs	r3, #192	; 0xc0
 8008c64:	0159      	lsls	r1, r3, #5
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	0013      	movs	r3, r2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f7ff fef0 	bl	8008a54 <SPI_WaitFifoStateUntilTimeout>
 8008c74:	1e03      	subs	r3, r0, #0
 8008c76:	d007      	beq.n	8008c88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e027      	b.n	8008cd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	0013      	movs	r3, r2
 8008c92:	2200      	movs	r2, #0
 8008c94:	2180      	movs	r1, #128	; 0x80
 8008c96:	f7ff fe4f 	bl	8008938 <SPI_WaitFlagStateUntilTimeout>
 8008c9a:	1e03      	subs	r3, r0, #0
 8008c9c:	d007      	beq.n	8008cae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e014      	b.n	8008cd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	23c0      	movs	r3, #192	; 0xc0
 8008cb2:	00d9      	lsls	r1, r3, #3
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	0013      	movs	r3, r2
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f7ff fec9 	bl	8008a54 <SPI_WaitFifoStateUntilTimeout>
 8008cc2:	1e03      	subs	r3, r0, #0
 8008cc4:	d007      	beq.n	8008cd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cca:	2220      	movs	r2, #32
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e000      	b.n	8008cd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	0018      	movs	r0, r3
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	b004      	add	sp, #16
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e053      	b.n	8008d9a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d116      	bne.n	8008d28 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2278      	movs	r2, #120	; 0x78
 8008cfe:	2100      	movs	r1, #0
 8008d00:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	0018      	movs	r0, r3
 8008d06:	f000 fd0d 	bl	8009724 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	22b0      	movs	r2, #176	; 0xb0
 8008d0e:	589b      	ldr	r3, [r3, r2]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d103      	bne.n	8008d1c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	21b0      	movs	r1, #176	; 0xb0
 8008d18:	4a22      	ldr	r2, [pc, #136]	; (8008da4 <HAL_UART_Init+0xc4>)
 8008d1a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	22b0      	movs	r2, #176	; 0xb0
 8008d20:	589b      	ldr	r3, [r3, r2]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	0010      	movs	r0, r2
 8008d26:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2224      	movs	r2, #36	; 0x24
 8008d2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2101      	movs	r1, #1
 8008d3a:	438a      	bics	r2, r1
 8008d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	0018      	movs	r0, r3
 8008d42:	f000 fd33 	bl	80097ac <UART_SetConfig>
 8008d46:	0003      	movs	r3, r0
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d101      	bne.n	8008d50 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e024      	b.n	8008d9a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d003      	beq.n	8008d60 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f000 feae 	bl	8009abc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	490f      	ldr	r1, [pc, #60]	; (8008da8 <HAL_UART_Init+0xc8>)
 8008d6c:	400a      	ands	r2, r1
 8008d6e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	212a      	movs	r1, #42	; 0x2a
 8008d7c:	438a      	bics	r2, r1
 8008d7e:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	0018      	movs	r0, r3
 8008d94:	f000 ff46 	bl	8009c24 <UART_CheckIdleState>
 8008d98:	0003      	movs	r3, r0
}
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	b002      	add	sp, #8
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	080045a5 	.word	0x080045a5
 8008da8:	ffffb7ff 	.word	0xffffb7ff

08008dac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	607a      	str	r2, [r7, #4]
 8008db6:	230b      	movs	r3, #11
 8008db8:	18fb      	adds	r3, r7, r3
 8008dba:	1c0a      	adds	r2, r1, #0
 8008dbc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dbe:	2317      	movs	r3, #23
 8008dc0:	18fb      	adds	r3, r7, r3
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d109      	bne.n	8008de0 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2284      	movs	r2, #132	; 0x84
 8008dd0:	589b      	ldr	r3, [r3, r2]
 8008dd2:	2240      	movs	r2, #64	; 0x40
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2184      	movs	r1, #132	; 0x84
 8008dda:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e083      	b.n	8008ee8 <HAL_UART_RegisterCallback+0x13c>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	d14d      	bne.n	8008e84 <HAL_UART_RegisterCallback+0xd8>
  {
    switch (CallbackID)
 8008de8:	230b      	movs	r3, #11
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b0c      	cmp	r3, #12
 8008df0:	d83b      	bhi.n	8008e6a <HAL_UART_RegisterCallback+0xbe>
 8008df2:	009a      	lsls	r2, r3, #2
 8008df4:	4b3e      	ldr	r3, [pc, #248]	; (8008ef0 <HAL_UART_RegisterCallback+0x144>)
 8008df6:	18d3      	adds	r3, r2, r3
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2188      	movs	r1, #136	; 0x88
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	505a      	str	r2, [r3, r1]
        break;
 8008e04:	e06d      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	218c      	movs	r1, #140	; 0x8c
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	505a      	str	r2, [r3, r1]
        break;
 8008e0e:	e068      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2190      	movs	r1, #144	; 0x90
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	505a      	str	r2, [r3, r1]
        break;
 8008e18:	e063      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2194      	movs	r1, #148	; 0x94
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	505a      	str	r2, [r3, r1]
        break;
 8008e22:	e05e      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2198      	movs	r1, #152	; 0x98
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	505a      	str	r2, [r3, r1]
        break;
 8008e2c:	e059      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	219c      	movs	r1, #156	; 0x9c
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	505a      	str	r2, [r3, r1]
        break;
 8008e36:	e054      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	21a0      	movs	r1, #160	; 0xa0
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	505a      	str	r2, [r3, r1]
        break;
 8008e40:	e04f      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	21a4      	movs	r1, #164	; 0xa4
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	505a      	str	r2, [r3, r1]
        break;
 8008e4a:	e04a      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	21a8      	movs	r1, #168	; 0xa8
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	505a      	str	r2, [r3, r1]
        break;
 8008e54:	e045      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	21b0      	movs	r1, #176	; 0xb0
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	505a      	str	r2, [r3, r1]
        break;
 8008e5e:	e040      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	21b4      	movs	r1, #180	; 0xb4
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	505a      	str	r2, [r3, r1]
        break;
 8008e68:	e03b      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2284      	movs	r2, #132	; 0x84
 8008e6e:	589b      	ldr	r3, [r3, r2]
 8008e70:	2240      	movs	r2, #64	; 0x40
 8008e72:	431a      	orrs	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2184      	movs	r1, #132	; 0x84
 8008e78:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 8008e7a:	2317      	movs	r3, #23
 8008e7c:	18fb      	adds	r3, r7, r3
 8008e7e:	2201      	movs	r2, #1
 8008e80:	701a      	strb	r2, [r3, #0]
        break;
 8008e82:	e02e      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d11e      	bne.n	8008eca <HAL_UART_RegisterCallback+0x11e>
  {
    switch (CallbackID)
 8008e8c:	230b      	movs	r3, #11
 8008e8e:	18fb      	adds	r3, r7, r3
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b0b      	cmp	r3, #11
 8008e94:	d002      	beq.n	8008e9c <HAL_UART_RegisterCallback+0xf0>
 8008e96:	2b0c      	cmp	r3, #12
 8008e98:	d005      	beq.n	8008ea6 <HAL_UART_RegisterCallback+0xfa>
 8008e9a:	e009      	b.n	8008eb0 <HAL_UART_RegisterCallback+0x104>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	21b0      	movs	r1, #176	; 0xb0
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	505a      	str	r2, [r3, r1]
        break;
 8008ea4:	e01d      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	21b4      	movs	r1, #180	; 0xb4
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	505a      	str	r2, [r3, r1]
        break;
 8008eae:	e018      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2284      	movs	r2, #132	; 0x84
 8008eb4:	589b      	ldr	r3, [r3, r2]
 8008eb6:	2240      	movs	r2, #64	; 0x40
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2184      	movs	r1, #132	; 0x84
 8008ebe:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 8008ec0:	2317      	movs	r3, #23
 8008ec2:	18fb      	adds	r3, r7, r3
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
        break;
 8008ec8:	e00b      	b.n	8008ee2 <HAL_UART_RegisterCallback+0x136>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2284      	movs	r2, #132	; 0x84
 8008ece:	589b      	ldr	r3, [r3, r2]
 8008ed0:	2240      	movs	r2, #64	; 0x40
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2184      	movs	r1, #132	; 0x84
 8008ed8:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 8008eda:	2317      	movs	r3, #23
 8008edc:	18fb      	adds	r3, r7, r3
 8008ede:	2201      	movs	r2, #1
 8008ee0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008ee2:	2317      	movs	r3, #23
 8008ee4:	18fb      	adds	r3, r7, r3
 8008ee6:	781b      	ldrb	r3, [r3, #0]
}
 8008ee8:	0018      	movs	r0, r3
 8008eea:	46bd      	mov	sp, r7
 8008eec:	b006      	add	sp, #24
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	0801ce70 	.word	0x0801ce70

08008ef4 <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008efe:	230f      	movs	r3, #15
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d109      	bne.n	8008f20 <HAL_UART_RegisterRxEventCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2284      	movs	r2, #132	; 0x84
 8008f10:	589b      	ldr	r3, [r3, r2]
 8008f12:	2240      	movs	r2, #64	; 0x40
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2184      	movs	r1, #132	; 0x84
 8008f1a:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e026      	b.n	8008f6e <HAL_UART_RegisterRxEventCallback+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(huart);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2278      	movs	r2, #120	; 0x78
 8008f24:	5c9b      	ldrb	r3, [r3, r2]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d101      	bne.n	8008f2e <HAL_UART_RegisterRxEventCallback+0x3a>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	e01f      	b.n	8008f6e <HAL_UART_RegisterRxEventCallback+0x7a>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2278      	movs	r2, #120	; 0x78
 8008f32:	2101      	movs	r1, #1
 8008f34:	5499      	strb	r1, [r3, r2]

  if (huart->gState == HAL_UART_STATE_READY)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	d104      	bne.n	8008f48 <HAL_UART_RegisterRxEventCallback+0x54>
  {
    huart->RxEventCallback = pCallback;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	21ac      	movs	r1, #172	; 0xac
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	505a      	str	r2, [r3, r1]
 8008f46:	e00b      	b.n	8008f60 <HAL_UART_RegisterRxEventCallback+0x6c>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2284      	movs	r2, #132	; 0x84
 8008f4c:	589b      	ldr	r3, [r3, r2]
 8008f4e:	2240      	movs	r2, #64	; 0x40
 8008f50:	431a      	orrs	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2184      	movs	r1, #132	; 0x84
 8008f56:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 8008f58:	230f      	movs	r3, #15
 8008f5a:	18fb      	adds	r3, r7, r3
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	701a      	strb	r2, [r3, #0]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2278      	movs	r2, #120	; 0x78
 8008f64:	2100      	movs	r1, #0
 8008f66:	5499      	strb	r1, [r3, r2]

  return status;
 8008f68:	230f      	movs	r3, #15
 8008f6a:	18fb      	adds	r3, r7, r3
 8008f6c:	781b      	ldrb	r3, [r3, #0]
}
 8008f6e:	0018      	movs	r0, r3
 8008f70:	46bd      	mov	sp, r7
 8008f72:	b004      	add	sp, #16
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b08a      	sub	sp, #40	; 0x28
 8008f7a:	af02      	add	r7, sp, #8
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	603b      	str	r3, [r7, #0]
 8008f82:	1dbb      	adds	r3, r7, #6
 8008f84:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	d000      	beq.n	8008f90 <HAL_UART_Transmit+0x1a>
 8008f8e:	e08d      	b.n	80090ac <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <HAL_UART_Transmit+0x28>
 8008f96:	1dbb      	adds	r3, r7, #6
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e085      	b.n	80090ae <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	689a      	ldr	r2, [r3, #8]
 8008fa6:	2380      	movs	r3, #128	; 0x80
 8008fa8:	015b      	lsls	r3, r3, #5
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d109      	bne.n	8008fc2 <HAL_UART_Transmit+0x4c>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d105      	bne.n	8008fc2 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	4013      	ands	r3, r2
 8008fbc:	d001      	beq.n	8008fc2 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e075      	b.n	80090ae <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2284      	movs	r2, #132	; 0x84
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2221      	movs	r2, #33	; 0x21
 8008fce:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fd0:	f7fb fc7c 	bl	80048cc <HAL_GetTick>
 8008fd4:	0003      	movs	r3, r0
 8008fd6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	1dba      	adds	r2, r7, #6
 8008fdc:	2150      	movs	r1, #80	; 0x50
 8008fde:	8812      	ldrh	r2, [r2, #0]
 8008fe0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	1dba      	adds	r2, r7, #6
 8008fe6:	2152      	movs	r1, #82	; 0x52
 8008fe8:	8812      	ldrh	r2, [r2, #0]
 8008fea:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	2380      	movs	r3, #128	; 0x80
 8008ff2:	015b      	lsls	r3, r3, #5
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d108      	bne.n	800900a <HAL_UART_Transmit+0x94>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d104      	bne.n	800900a <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8009000:	2300      	movs	r3, #0
 8009002:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	e003      	b.n	8009012 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009012:	e030      	b.n	8009076 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	0013      	movs	r3, r2
 800901e:	2200      	movs	r2, #0
 8009020:	2180      	movs	r1, #128	; 0x80
 8009022:	f000 fea7 	bl	8009d74 <UART_WaitOnFlagUntilTimeout>
 8009026:	1e03      	subs	r3, r0, #0
 8009028:	d004      	beq.n	8009034 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2220      	movs	r2, #32
 800902e:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e03c      	b.n	80090ae <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10b      	bne.n	8009052 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	881a      	ldrh	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	05d2      	lsls	r2, r2, #23
 8009044:	0dd2      	lsrs	r2, r2, #23
 8009046:	b292      	uxth	r2, r2
 8009048:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	3302      	adds	r3, #2
 800904e:	61bb      	str	r3, [r7, #24]
 8009050:	e008      	b.n	8009064 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	781a      	ldrb	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	b292      	uxth	r2, r2
 800905c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	3301      	adds	r3, #1
 8009062:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2252      	movs	r2, #82	; 0x52
 8009068:	5a9b      	ldrh	r3, [r3, r2]
 800906a:	b29b      	uxth	r3, r3
 800906c:	3b01      	subs	r3, #1
 800906e:	b299      	uxth	r1, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2252      	movs	r2, #82	; 0x52
 8009074:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2252      	movs	r2, #82	; 0x52
 800907a:	5a9b      	ldrh	r3, [r3, r2]
 800907c:	b29b      	uxth	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1c8      	bne.n	8009014 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	0013      	movs	r3, r2
 800908c:	2200      	movs	r2, #0
 800908e:	2140      	movs	r1, #64	; 0x40
 8009090:	f000 fe70 	bl	8009d74 <UART_WaitOnFlagUntilTimeout>
 8009094:	1e03      	subs	r3, r0, #0
 8009096:	d004      	beq.n	80090a2 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2220      	movs	r2, #32
 800909c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e005      	b.n	80090ae <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2220      	movs	r2, #32
 80090a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	e000      	b.n	80090ae <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80090ac:	2302      	movs	r3, #2
  }
}
 80090ae:	0018      	movs	r0, r3
 80090b0:	46bd      	mov	sp, r7
 80090b2:	b008      	add	sp, #32
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090b8:	b590      	push	{r4, r7, lr}
 80090ba:	b0ab      	sub	sp, #172	; 0xac
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	22a4      	movs	r2, #164	; 0xa4
 80090c8:	18b9      	adds	r1, r7, r2
 80090ca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	20a0      	movs	r0, #160	; 0xa0
 80090d4:	1839      	adds	r1, r7, r0
 80090d6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	219c      	movs	r1, #156	; 0x9c
 80090e0:	1879      	adds	r1, r7, r1
 80090e2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090e4:	0011      	movs	r1, r2
 80090e6:	18bb      	adds	r3, r7, r2
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a9c      	ldr	r2, [pc, #624]	; (800935c <HAL_UART_IRQHandler+0x2a4>)
 80090ec:	4013      	ands	r3, r2
 80090ee:	2298      	movs	r2, #152	; 0x98
 80090f0:	18bc      	adds	r4, r7, r2
 80090f2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80090f4:	18bb      	adds	r3, r7, r2
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d114      	bne.n	8009126 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80090fc:	187b      	adds	r3, r7, r1
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2220      	movs	r2, #32
 8009102:	4013      	ands	r3, r2
 8009104:	d00f      	beq.n	8009126 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009106:	183b      	adds	r3, r7, r0
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2220      	movs	r2, #32
 800910c:	4013      	ands	r3, r2
 800910e:	d00a      	beq.n	8009126 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009114:	2b00      	cmp	r3, #0
 8009116:	d100      	bne.n	800911a <HAL_UART_IRQHandler+0x62>
 8009118:	e2a8      	b.n	800966c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	0010      	movs	r0, r2
 8009122:	4798      	blx	r3
      }
      return;
 8009124:	e2a2      	b.n	800966c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009126:	2398      	movs	r3, #152	; 0x98
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d100      	bne.n	8009132 <HAL_UART_IRQHandler+0x7a>
 8009130:	e11a      	b.n	8009368 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009132:	239c      	movs	r3, #156	; 0x9c
 8009134:	18fb      	adds	r3, r7, r3
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2201      	movs	r2, #1
 800913a:	4013      	ands	r3, r2
 800913c:	d106      	bne.n	800914c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800913e:	23a0      	movs	r3, #160	; 0xa0
 8009140:	18fb      	adds	r3, r7, r3
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a86      	ldr	r2, [pc, #536]	; (8009360 <HAL_UART_IRQHandler+0x2a8>)
 8009146:	4013      	ands	r3, r2
 8009148:	d100      	bne.n	800914c <HAL_UART_IRQHandler+0x94>
 800914a:	e10d      	b.n	8009368 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800914c:	23a4      	movs	r3, #164	; 0xa4
 800914e:	18fb      	adds	r3, r7, r3
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2201      	movs	r2, #1
 8009154:	4013      	ands	r3, r2
 8009156:	d012      	beq.n	800917e <HAL_UART_IRQHandler+0xc6>
 8009158:	23a0      	movs	r3, #160	; 0xa0
 800915a:	18fb      	adds	r3, r7, r3
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	2380      	movs	r3, #128	; 0x80
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	4013      	ands	r3, r2
 8009164:	d00b      	beq.n	800917e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2201      	movs	r2, #1
 800916c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2284      	movs	r2, #132	; 0x84
 8009172:	589b      	ldr	r3, [r3, r2]
 8009174:	2201      	movs	r2, #1
 8009176:	431a      	orrs	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2184      	movs	r1, #132	; 0x84
 800917c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800917e:	23a4      	movs	r3, #164	; 0xa4
 8009180:	18fb      	adds	r3, r7, r3
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2202      	movs	r2, #2
 8009186:	4013      	ands	r3, r2
 8009188:	d011      	beq.n	80091ae <HAL_UART_IRQHandler+0xf6>
 800918a:	239c      	movs	r3, #156	; 0x9c
 800918c:	18fb      	adds	r3, r7, r3
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2201      	movs	r2, #1
 8009192:	4013      	ands	r3, r2
 8009194:	d00b      	beq.n	80091ae <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2202      	movs	r2, #2
 800919c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2284      	movs	r2, #132	; 0x84
 80091a2:	589b      	ldr	r3, [r3, r2]
 80091a4:	2204      	movs	r2, #4
 80091a6:	431a      	orrs	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2184      	movs	r1, #132	; 0x84
 80091ac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ae:	23a4      	movs	r3, #164	; 0xa4
 80091b0:	18fb      	adds	r3, r7, r3
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2204      	movs	r2, #4
 80091b6:	4013      	ands	r3, r2
 80091b8:	d011      	beq.n	80091de <HAL_UART_IRQHandler+0x126>
 80091ba:	239c      	movs	r3, #156	; 0x9c
 80091bc:	18fb      	adds	r3, r7, r3
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2201      	movs	r2, #1
 80091c2:	4013      	ands	r3, r2
 80091c4:	d00b      	beq.n	80091de <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2204      	movs	r2, #4
 80091cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2284      	movs	r2, #132	; 0x84
 80091d2:	589b      	ldr	r3, [r3, r2]
 80091d4:	2202      	movs	r2, #2
 80091d6:	431a      	orrs	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2184      	movs	r1, #132	; 0x84
 80091dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091de:	23a4      	movs	r3, #164	; 0xa4
 80091e0:	18fb      	adds	r3, r7, r3
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2208      	movs	r2, #8
 80091e6:	4013      	ands	r3, r2
 80091e8:	d017      	beq.n	800921a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80091ea:	23a0      	movs	r3, #160	; 0xa0
 80091ec:	18fb      	adds	r3, r7, r3
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2220      	movs	r2, #32
 80091f2:	4013      	ands	r3, r2
 80091f4:	d105      	bne.n	8009202 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80091f6:	239c      	movs	r3, #156	; 0x9c
 80091f8:	18fb      	adds	r3, r7, r3
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2201      	movs	r2, #1
 80091fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009200:	d00b      	beq.n	800921a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2208      	movs	r2, #8
 8009208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2284      	movs	r2, #132	; 0x84
 800920e:	589b      	ldr	r3, [r3, r2]
 8009210:	2208      	movs	r2, #8
 8009212:	431a      	orrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2184      	movs	r1, #132	; 0x84
 8009218:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800921a:	23a4      	movs	r3, #164	; 0xa4
 800921c:	18fb      	adds	r3, r7, r3
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	2380      	movs	r3, #128	; 0x80
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	4013      	ands	r3, r2
 8009226:	d013      	beq.n	8009250 <HAL_UART_IRQHandler+0x198>
 8009228:	23a0      	movs	r3, #160	; 0xa0
 800922a:	18fb      	adds	r3, r7, r3
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	2380      	movs	r3, #128	; 0x80
 8009230:	04db      	lsls	r3, r3, #19
 8009232:	4013      	ands	r3, r2
 8009234:	d00c      	beq.n	8009250 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2280      	movs	r2, #128	; 0x80
 800923c:	0112      	lsls	r2, r2, #4
 800923e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2284      	movs	r2, #132	; 0x84
 8009244:	589b      	ldr	r3, [r3, r2]
 8009246:	2220      	movs	r2, #32
 8009248:	431a      	orrs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2184      	movs	r1, #132	; 0x84
 800924e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2284      	movs	r2, #132	; 0x84
 8009254:	589b      	ldr	r3, [r3, r2]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d100      	bne.n	800925c <HAL_UART_IRQHandler+0x1a4>
 800925a:	e209      	b.n	8009670 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800925c:	23a4      	movs	r3, #164	; 0xa4
 800925e:	18fb      	adds	r3, r7, r3
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2220      	movs	r2, #32
 8009264:	4013      	ands	r3, r2
 8009266:	d00e      	beq.n	8009286 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009268:	23a0      	movs	r3, #160	; 0xa0
 800926a:	18fb      	adds	r3, r7, r3
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2220      	movs	r2, #32
 8009270:	4013      	ands	r3, r2
 8009272:	d008      	beq.n	8009286 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009278:	2b00      	cmp	r3, #0
 800927a:	d004      	beq.n	8009286 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	0010      	movs	r0, r2
 8009284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2284      	movs	r2, #132	; 0x84
 800928a:	589b      	ldr	r3, [r3, r2]
 800928c:	2194      	movs	r1, #148	; 0x94
 800928e:	187a      	adds	r2, r7, r1
 8009290:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	2240      	movs	r2, #64	; 0x40
 800929a:	4013      	ands	r3, r2
 800929c:	2b40      	cmp	r3, #64	; 0x40
 800929e:	d004      	beq.n	80092aa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092a0:	187b      	adds	r3, r7, r1
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2228      	movs	r2, #40	; 0x28
 80092a6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092a8:	d04b      	beq.n	8009342 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	0018      	movs	r0, r3
 80092ae:	f000 fe95 	bl	8009fdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	2240      	movs	r2, #64	; 0x40
 80092ba:	4013      	ands	r3, r2
 80092bc:	2b40      	cmp	r3, #64	; 0x40
 80092be:	d139      	bne.n	8009334 <HAL_UART_IRQHandler+0x27c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c0:	f3ef 8310 	mrs	r3, PRIMASK
 80092c4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80092c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092c8:	2090      	movs	r0, #144	; 0x90
 80092ca:	183a      	adds	r2, r7, r0
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	2301      	movs	r3, #1
 80092d0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092d4:	f383 8810 	msr	PRIMASK, r3
}
 80092d8:	46c0      	nop			; (mov r8, r8)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689a      	ldr	r2, [r3, #8]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2140      	movs	r1, #64	; 0x40
 80092e6:	438a      	bics	r2, r1
 80092e8:	609a      	str	r2, [r3, #8]
 80092ea:	183b      	adds	r3, r7, r0
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092f2:	f383 8810 	msr	PRIMASK, r3
}
 80092f6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d012      	beq.n	8009326 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009304:	4a17      	ldr	r2, [pc, #92]	; (8009364 <HAL_UART_IRQHandler+0x2ac>)
 8009306:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800930c:	0018      	movs	r0, r3
 800930e:	f7fb fc21 	bl	8004b54 <HAL_DMA_Abort_IT>
 8009312:	1e03      	subs	r3, r0, #0
 8009314:	d020      	beq.n	8009358 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800931a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009320:	0018      	movs	r0, r3
 8009322:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009324:	e018      	b.n	8009358 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2298      	movs	r2, #152	; 0x98
 800932a:	589b      	ldr	r3, [r3, r2]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	0010      	movs	r0, r2
 8009330:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009332:	e011      	b.n	8009358 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2298      	movs	r2, #152	; 0x98
 8009338:	589b      	ldr	r3, [r3, r2]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	0010      	movs	r0, r2
 800933e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009340:	e00a      	b.n	8009358 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2298      	movs	r2, #152	; 0x98
 8009346:	589b      	ldr	r3, [r3, r2]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	0010      	movs	r0, r2
 800934c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2284      	movs	r2, #132	; 0x84
 8009352:	2100      	movs	r1, #0
 8009354:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009356:	e18b      	b.n	8009670 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009358:	46c0      	nop			; (mov r8, r8)
    return;
 800935a:	e189      	b.n	8009670 <HAL_UART_IRQHandler+0x5b8>
 800935c:	0000080f 	.word	0x0000080f
 8009360:	04000120 	.word	0x04000120
 8009364:	0800a0a5 	.word	0x0800a0a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800936c:	2b01      	cmp	r3, #1
 800936e:	d000      	beq.n	8009372 <HAL_UART_IRQHandler+0x2ba>
 8009370:	e13b      	b.n	80095ea <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009372:	23a4      	movs	r3, #164	; 0xa4
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2210      	movs	r2, #16
 800937a:	4013      	ands	r3, r2
 800937c:	d100      	bne.n	8009380 <HAL_UART_IRQHandler+0x2c8>
 800937e:	e134      	b.n	80095ea <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009380:	23a0      	movs	r3, #160	; 0xa0
 8009382:	18fb      	adds	r3, r7, r3
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2210      	movs	r2, #16
 8009388:	4013      	ands	r3, r2
 800938a:	d100      	bne.n	800938e <HAL_UART_IRQHandler+0x2d6>
 800938c:	e12d      	b.n	80095ea <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2210      	movs	r2, #16
 8009394:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	2240      	movs	r2, #64	; 0x40
 800939e:	4013      	ands	r3, r2
 80093a0:	2b40      	cmp	r3, #64	; 0x40
 80093a2:	d000      	beq.n	80093a6 <HAL_UART_IRQHandler+0x2ee>
 80093a4:	e0a0      	b.n	80094e8 <HAL_UART_IRQHandler+0x430>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	217e      	movs	r1, #126	; 0x7e
 80093b0:	187b      	adds	r3, r7, r1
 80093b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80093b4:	187b      	adds	r3, r7, r1
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d100      	bne.n	80093be <HAL_UART_IRQHandler+0x306>
 80093bc:	e15a      	b.n	8009674 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2258      	movs	r2, #88	; 0x58
 80093c2:	5a9b      	ldrh	r3, [r3, r2]
 80093c4:	187a      	adds	r2, r7, r1
 80093c6:	8812      	ldrh	r2, [r2, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d300      	bcc.n	80093ce <HAL_UART_IRQHandler+0x316>
 80093cc:	e152      	b.n	8009674 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	187a      	adds	r2, r7, r1
 80093d2:	215a      	movs	r1, #90	; 0x5a
 80093d4:	8812      	ldrh	r2, [r2, #0]
 80093d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2b20      	cmp	r3, #32
 80093e0:	d06f      	beq.n	80094c2 <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093e2:	f3ef 8310 	mrs	r3, PRIMASK
 80093e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80093ec:	2301      	movs	r3, #1
 80093ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f2:	f383 8810 	msr	PRIMASK, r3
}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	49a0      	ldr	r1, [pc, #640]	; (8009684 <HAL_UART_IRQHandler+0x5cc>)
 8009404:	400a      	ands	r2, r1
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800940a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f383 8810 	msr	PRIMASK, r3
}
 8009412:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009414:	f3ef 8310 	mrs	r3, PRIMASK
 8009418:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800941a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941c:	677b      	str	r3, [r7, #116]	; 0x74
 800941e:	2301      	movs	r3, #1
 8009420:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009424:	f383 8810 	msr	PRIMASK, r3
}
 8009428:	46c0      	nop			; (mov r8, r8)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2101      	movs	r1, #1
 8009436:	438a      	bics	r2, r1
 8009438:	609a      	str	r2, [r3, #8]
 800943a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800943c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800943e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009440:	f383 8810 	msr	PRIMASK, r3
}
 8009444:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009446:	f3ef 8310 	mrs	r3, PRIMASK
 800944a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800944c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800944e:	673b      	str	r3, [r7, #112]	; 0x70
 8009450:	2301      	movs	r3, #1
 8009452:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009456:	f383 8810 	msr	PRIMASK, r3
}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2140      	movs	r1, #64	; 0x40
 8009468:	438a      	bics	r2, r1
 800946a:	609a      	str	r2, [r3, #8]
 800946c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800946e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009472:	f383 8810 	msr	PRIMASK, r3
}
 8009476:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2280      	movs	r2, #128	; 0x80
 800947c:	2120      	movs	r1, #32
 800947e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009486:	f3ef 8310 	mrs	r3, PRIMASK
 800948a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800948c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009490:	2301      	movs	r3, #1
 8009492:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009496:	f383 8810 	msr	PRIMASK, r3
}
 800949a:	46c0      	nop			; (mov r8, r8)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2110      	movs	r1, #16
 80094a8:	438a      	bics	r2, r1
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094b2:	f383 8810 	msr	PRIMASK, r3
}
 80094b6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094bc:	0018      	movs	r0, r3
 80094be:	f7fb fb11 	bl	8004ae4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2202      	movs	r2, #2
 80094c6:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	22ac      	movs	r2, #172	; 0xac
 80094cc:	589b      	ldr	r3, [r3, r2]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	2158      	movs	r1, #88	; 0x58
 80094d2:	5a51      	ldrh	r1, [r2, r1]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	205a      	movs	r0, #90	; 0x5a
 80094d8:	5a12      	ldrh	r2, [r2, r0]
 80094da:	b292      	uxth	r2, r2
 80094dc:	1a8a      	subs	r2, r1, r2
 80094de:	b291      	uxth	r1, r2
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	0010      	movs	r0, r2
 80094e4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094e6:	e0c5      	b.n	8009674 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2258      	movs	r2, #88	; 0x58
 80094ec:	5a99      	ldrh	r1, [r3, r2]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	225a      	movs	r2, #90	; 0x5a
 80094f2:	5a9b      	ldrh	r3, [r3, r2]
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	208e      	movs	r0, #142	; 0x8e
 80094f8:	183b      	adds	r3, r7, r0
 80094fa:	1a8a      	subs	r2, r1, r2
 80094fc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	225a      	movs	r2, #90	; 0x5a
 8009502:	5a9b      	ldrh	r3, [r3, r2]
 8009504:	b29b      	uxth	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d100      	bne.n	800950c <HAL_UART_IRQHandler+0x454>
 800950a:	e0b5      	b.n	8009678 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800950c:	183b      	adds	r3, r7, r0
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d100      	bne.n	8009516 <HAL_UART_IRQHandler+0x45e>
 8009514:	e0b0      	b.n	8009678 <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009516:	f3ef 8310 	mrs	r3, PRIMASK
 800951a:	60fb      	str	r3, [r7, #12]
  return(result);
 800951c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800951e:	2488      	movs	r4, #136	; 0x88
 8009520:	193a      	adds	r2, r7, r4
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	2301      	movs	r3, #1
 8009526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f383 8810 	msr	PRIMASK, r3
}
 800952e:	46c0      	nop			; (mov r8, r8)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4953      	ldr	r1, [pc, #332]	; (8009688 <HAL_UART_IRQHandler+0x5d0>)
 800953c:	400a      	ands	r2, r1
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	193b      	adds	r3, r7, r4
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f383 8810 	msr	PRIMASK, r3
}
 800954c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800954e:	f3ef 8310 	mrs	r3, PRIMASK
 8009552:	61bb      	str	r3, [r7, #24]
  return(result);
 8009554:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009556:	2484      	movs	r4, #132	; 0x84
 8009558:	193a      	adds	r2, r7, r4
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	2301      	movs	r3, #1
 800955e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	f383 8810 	msr	PRIMASK, r3
}
 8009566:	46c0      	nop			; (mov r8, r8)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689a      	ldr	r2, [r3, #8]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2101      	movs	r1, #1
 8009574:	438a      	bics	r2, r1
 8009576:	609a      	str	r2, [r3, #8]
 8009578:	193b      	adds	r3, r7, r4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	f383 8810 	msr	PRIMASK, r3
}
 8009584:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2280      	movs	r2, #128	; 0x80
 800958a:	2120      	movs	r1, #32
 800958c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800959a:	f3ef 8310 	mrs	r3, PRIMASK
 800959e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a2:	2480      	movs	r4, #128	; 0x80
 80095a4:	193a      	adds	r2, r7, r4
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	2301      	movs	r3, #1
 80095aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	f383 8810 	msr	PRIMASK, r3
}
 80095b2:	46c0      	nop			; (mov r8, r8)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2110      	movs	r1, #16
 80095c0:	438a      	bics	r2, r1
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	193b      	adds	r3, r7, r4
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	f383 8810 	msr	PRIMASK, r3
}
 80095d0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2202      	movs	r2, #2
 80095d6:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	22ac      	movs	r2, #172	; 0xac
 80095dc:	589b      	ldr	r3, [r3, r2]
 80095de:	183a      	adds	r2, r7, r0
 80095e0:	8811      	ldrh	r1, [r2, #0]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	0010      	movs	r0, r2
 80095e6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095e8:	e046      	b.n	8009678 <HAL_UART_IRQHandler+0x5c0>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80095ea:	23a4      	movs	r3, #164	; 0xa4
 80095ec:	18fb      	adds	r3, r7, r3
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	2380      	movs	r3, #128	; 0x80
 80095f2:	035b      	lsls	r3, r3, #13
 80095f4:	4013      	ands	r3, r2
 80095f6:	d012      	beq.n	800961e <HAL_UART_IRQHandler+0x566>
 80095f8:	239c      	movs	r3, #156	; 0x9c
 80095fa:	18fb      	adds	r3, r7, r3
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	2380      	movs	r3, #128	; 0x80
 8009600:	03db      	lsls	r3, r3, #15
 8009602:	4013      	ands	r3, r2
 8009604:	d00b      	beq.n	800961e <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2280      	movs	r2, #128	; 0x80
 800960c:	0352      	lsls	r2, r2, #13
 800960e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	22a8      	movs	r2, #168	; 0xa8
 8009614:	589b      	ldr	r3, [r3, r2]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	0010      	movs	r0, r2
 800961a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800961c:	e02f      	b.n	800967e <HAL_UART_IRQHandler+0x5c6>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800961e:	23a4      	movs	r3, #164	; 0xa4
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2280      	movs	r2, #128	; 0x80
 8009626:	4013      	ands	r3, r2
 8009628:	d00f      	beq.n	800964a <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800962a:	23a0      	movs	r3, #160	; 0xa0
 800962c:	18fb      	adds	r3, r7, r3
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2280      	movs	r2, #128	; 0x80
 8009632:	4013      	ands	r3, r2
 8009634:	d009      	beq.n	800964a <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d01e      	beq.n	800967c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	0010      	movs	r0, r2
 8009646:	4798      	blx	r3
    }
    return;
 8009648:	e018      	b.n	800967c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800964a:	23a4      	movs	r3, #164	; 0xa4
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2240      	movs	r2, #64	; 0x40
 8009652:	4013      	ands	r3, r2
 8009654:	d013      	beq.n	800967e <HAL_UART_IRQHandler+0x5c6>
 8009656:	23a0      	movs	r3, #160	; 0xa0
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2240      	movs	r2, #64	; 0x40
 800965e:	4013      	ands	r3, r2
 8009660:	d00d      	beq.n	800967e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	0018      	movs	r0, r3
 8009666:	f000 fd36 	bl	800a0d6 <UART_EndTransmit_IT>
    return;
 800966a:	e008      	b.n	800967e <HAL_UART_IRQHandler+0x5c6>
      return;
 800966c:	46c0      	nop			; (mov r8, r8)
 800966e:	e006      	b.n	800967e <HAL_UART_IRQHandler+0x5c6>
    return;
 8009670:	46c0      	nop			; (mov r8, r8)
 8009672:	e004      	b.n	800967e <HAL_UART_IRQHandler+0x5c6>
      return;
 8009674:	46c0      	nop			; (mov r8, r8)
 8009676:	e002      	b.n	800967e <HAL_UART_IRQHandler+0x5c6>
      return;
 8009678:	46c0      	nop			; (mov r8, r8)
 800967a:	e000      	b.n	800967e <HAL_UART_IRQHandler+0x5c6>
    return;
 800967c:	46c0      	nop			; (mov r8, r8)
  }

}
 800967e:	46bd      	mov	sp, r7
 8009680:	b02b      	add	sp, #172	; 0xac
 8009682:	bd90      	pop	{r4, r7, pc}
 8009684:	fffffeff 	.word	0xfffffeff
 8009688:	fffffedf 	.word	0xfffffedf

0800968c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009694:	46c0      	nop			; (mov r8, r8)
 8009696:	46bd      	mov	sp, r7
 8009698:	b002      	add	sp, #8
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80096a4:	46c0      	nop			; (mov r8, r8)
 80096a6:	46bd      	mov	sp, r7
 80096a8:	b002      	add	sp, #8
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80096b4:	46c0      	nop			; (mov r8, r8)
 80096b6:	46bd      	mov	sp, r7
 80096b8:	b002      	add	sp, #8
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80096c4:	46c0      	nop			; (mov r8, r8)
 80096c6:	46bd      	mov	sp, r7
 80096c8:	b002      	add	sp, #8
 80096ca:	bd80      	pop	{r7, pc}

080096cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096d4:	46c0      	nop			; (mov r8, r8)
 80096d6:	46bd      	mov	sp, r7
 80096d8:	b002      	add	sp, #8
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80096e4:	46c0      	nop			; (mov r8, r8)
 80096e6:	46bd      	mov	sp, r7
 80096e8:	b002      	add	sp, #8
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80096f4:	46c0      	nop			; (mov r8, r8)
 80096f6:	46bd      	mov	sp, r7
 80096f8:	b002      	add	sp, #8
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009704:	46c0      	nop			; (mov r8, r8)
 8009706:	46bd      	mov	sp, r7
 8009708:	b002      	add	sp, #8
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	000a      	movs	r2, r1
 8009716:	1cbb      	adds	r3, r7, #2
 8009718:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	46bd      	mov	sp, r7
 800971e:	b002      	add	sp, #8
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2188      	movs	r1, #136	; 0x88
 8009730:	4a14      	ldr	r2, [pc, #80]	; (8009784 <UART_InitCallbacksToDefault+0x60>)
 8009732:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	218c      	movs	r1, #140	; 0x8c
 8009738:	4a13      	ldr	r2, [pc, #76]	; (8009788 <UART_InitCallbacksToDefault+0x64>)
 800973a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2190      	movs	r1, #144	; 0x90
 8009740:	4a12      	ldr	r2, [pc, #72]	; (800978c <UART_InitCallbacksToDefault+0x68>)
 8009742:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2194      	movs	r1, #148	; 0x94
 8009748:	4a11      	ldr	r2, [pc, #68]	; (8009790 <UART_InitCallbacksToDefault+0x6c>)
 800974a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2198      	movs	r1, #152	; 0x98
 8009750:	4a10      	ldr	r2, [pc, #64]	; (8009794 <UART_InitCallbacksToDefault+0x70>)
 8009752:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	219c      	movs	r1, #156	; 0x9c
 8009758:	4a0f      	ldr	r2, [pc, #60]	; (8009798 <UART_InitCallbacksToDefault+0x74>)
 800975a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	21a0      	movs	r1, #160	; 0xa0
 8009760:	4a0e      	ldr	r2, [pc, #56]	; (800979c <UART_InitCallbacksToDefault+0x78>)
 8009762:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	21a4      	movs	r1, #164	; 0xa4
 8009768:	4a0d      	ldr	r2, [pc, #52]	; (80097a0 <UART_InitCallbacksToDefault+0x7c>)
 800976a:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	21a8      	movs	r1, #168	; 0xa8
 8009770:	4a0c      	ldr	r2, [pc, #48]	; (80097a4 <UART_InitCallbacksToDefault+0x80>)
 8009772:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	21ac      	movs	r1, #172	; 0xac
 8009778:	4a0b      	ldr	r2, [pc, #44]	; (80097a8 <UART_InitCallbacksToDefault+0x84>)
 800977a:	505a      	str	r2, [r3, r1]

}
 800977c:	46c0      	nop			; (mov r8, r8)
 800977e:	46bd      	mov	sp, r7
 8009780:	b002      	add	sp, #8
 8009782:	bd80      	pop	{r7, pc}
 8009784:	0800969d 	.word	0x0800969d
 8009788:	0800968d 	.word	0x0800968d
 800978c:	080096bd 	.word	0x080096bd
 8009790:	080096ad 	.word	0x080096ad
 8009794:	080096cd 	.word	0x080096cd
 8009798:	080096dd 	.word	0x080096dd
 800979c:	080096ed 	.word	0x080096ed
 80097a0:	080096fd 	.word	0x080096fd
 80097a4:	0800a4a9 	.word	0x0800a4a9
 80097a8:	0800970d 	.word	0x0800970d

080097ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097b4:	231e      	movs	r3, #30
 80097b6:	18fb      	adds	r3, r7, r3
 80097b8:	2200      	movs	r2, #0
 80097ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	431a      	orrs	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4aaf      	ldr	r2, [pc, #700]	; (8009a98 <UART_SetConfig+0x2ec>)
 80097dc:	4013      	ands	r3, r2
 80097de:	0019      	movs	r1, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	4aaa      	ldr	r2, [pc, #680]	; (8009a9c <UART_SetConfig+0x2f0>)
 80097f2:	4013      	ands	r3, r2
 80097f4:	0019      	movs	r1, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	4313      	orrs	r3, r2
 8009810:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	4aa1      	ldr	r2, [pc, #644]	; (8009aa0 <UART_SetConfig+0x2f4>)
 800981a:	4013      	ands	r3, r2
 800981c:	0019      	movs	r1, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	430a      	orrs	r2, r1
 8009826:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a9d      	ldr	r2, [pc, #628]	; (8009aa4 <UART_SetConfig+0x2f8>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d127      	bne.n	8009882 <UART_SetConfig+0xd6>
 8009832:	4b9d      	ldr	r3, [pc, #628]	; (8009aa8 <UART_SetConfig+0x2fc>)
 8009834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009836:	2203      	movs	r2, #3
 8009838:	4013      	ands	r3, r2
 800983a:	2b03      	cmp	r3, #3
 800983c:	d00d      	beq.n	800985a <UART_SetConfig+0xae>
 800983e:	d81b      	bhi.n	8009878 <UART_SetConfig+0xcc>
 8009840:	2b02      	cmp	r3, #2
 8009842:	d014      	beq.n	800986e <UART_SetConfig+0xc2>
 8009844:	d818      	bhi.n	8009878 <UART_SetConfig+0xcc>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <UART_SetConfig+0xa4>
 800984a:	2b01      	cmp	r3, #1
 800984c:	d00a      	beq.n	8009864 <UART_SetConfig+0xb8>
 800984e:	e013      	b.n	8009878 <UART_SetConfig+0xcc>
 8009850:	231f      	movs	r3, #31
 8009852:	18fb      	adds	r3, r7, r3
 8009854:	2200      	movs	r2, #0
 8009856:	701a      	strb	r2, [r3, #0]
 8009858:	e065      	b.n	8009926 <UART_SetConfig+0x17a>
 800985a:	231f      	movs	r3, #31
 800985c:	18fb      	adds	r3, r7, r3
 800985e:	2202      	movs	r2, #2
 8009860:	701a      	strb	r2, [r3, #0]
 8009862:	e060      	b.n	8009926 <UART_SetConfig+0x17a>
 8009864:	231f      	movs	r3, #31
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	2204      	movs	r2, #4
 800986a:	701a      	strb	r2, [r3, #0]
 800986c:	e05b      	b.n	8009926 <UART_SetConfig+0x17a>
 800986e:	231f      	movs	r3, #31
 8009870:	18fb      	adds	r3, r7, r3
 8009872:	2208      	movs	r2, #8
 8009874:	701a      	strb	r2, [r3, #0]
 8009876:	e056      	b.n	8009926 <UART_SetConfig+0x17a>
 8009878:	231f      	movs	r3, #31
 800987a:	18fb      	adds	r3, r7, r3
 800987c:	2210      	movs	r2, #16
 800987e:	701a      	strb	r2, [r3, #0]
 8009880:	e051      	b.n	8009926 <UART_SetConfig+0x17a>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a89      	ldr	r2, [pc, #548]	; (8009aac <UART_SetConfig+0x300>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d134      	bne.n	80098f6 <UART_SetConfig+0x14a>
 800988c:	4b86      	ldr	r3, [pc, #536]	; (8009aa8 <UART_SetConfig+0x2fc>)
 800988e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009890:	23c0      	movs	r3, #192	; 0xc0
 8009892:	029b      	lsls	r3, r3, #10
 8009894:	4013      	ands	r3, r2
 8009896:	22c0      	movs	r2, #192	; 0xc0
 8009898:	0292      	lsls	r2, r2, #10
 800989a:	4293      	cmp	r3, r2
 800989c:	d017      	beq.n	80098ce <UART_SetConfig+0x122>
 800989e:	22c0      	movs	r2, #192	; 0xc0
 80098a0:	0292      	lsls	r2, r2, #10
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d822      	bhi.n	80098ec <UART_SetConfig+0x140>
 80098a6:	2280      	movs	r2, #128	; 0x80
 80098a8:	0292      	lsls	r2, r2, #10
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d019      	beq.n	80098e2 <UART_SetConfig+0x136>
 80098ae:	2280      	movs	r2, #128	; 0x80
 80098b0:	0292      	lsls	r2, r2, #10
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d81a      	bhi.n	80098ec <UART_SetConfig+0x140>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d004      	beq.n	80098c4 <UART_SetConfig+0x118>
 80098ba:	2280      	movs	r2, #128	; 0x80
 80098bc:	0252      	lsls	r2, r2, #9
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00a      	beq.n	80098d8 <UART_SetConfig+0x12c>
 80098c2:	e013      	b.n	80098ec <UART_SetConfig+0x140>
 80098c4:	231f      	movs	r3, #31
 80098c6:	18fb      	adds	r3, r7, r3
 80098c8:	2200      	movs	r2, #0
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	e02b      	b.n	8009926 <UART_SetConfig+0x17a>
 80098ce:	231f      	movs	r3, #31
 80098d0:	18fb      	adds	r3, r7, r3
 80098d2:	2202      	movs	r2, #2
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	e026      	b.n	8009926 <UART_SetConfig+0x17a>
 80098d8:	231f      	movs	r3, #31
 80098da:	18fb      	adds	r3, r7, r3
 80098dc:	2204      	movs	r2, #4
 80098de:	701a      	strb	r2, [r3, #0]
 80098e0:	e021      	b.n	8009926 <UART_SetConfig+0x17a>
 80098e2:	231f      	movs	r3, #31
 80098e4:	18fb      	adds	r3, r7, r3
 80098e6:	2208      	movs	r2, #8
 80098e8:	701a      	strb	r2, [r3, #0]
 80098ea:	e01c      	b.n	8009926 <UART_SetConfig+0x17a>
 80098ec:	231f      	movs	r3, #31
 80098ee:	18fb      	adds	r3, r7, r3
 80098f0:	2210      	movs	r2, #16
 80098f2:	701a      	strb	r2, [r3, #0]
 80098f4:	e017      	b.n	8009926 <UART_SetConfig+0x17a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a6d      	ldr	r2, [pc, #436]	; (8009ab0 <UART_SetConfig+0x304>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d104      	bne.n	800990a <UART_SetConfig+0x15e>
 8009900:	231f      	movs	r3, #31
 8009902:	18fb      	adds	r3, r7, r3
 8009904:	2200      	movs	r2, #0
 8009906:	701a      	strb	r2, [r3, #0]
 8009908:	e00d      	b.n	8009926 <UART_SetConfig+0x17a>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a69      	ldr	r2, [pc, #420]	; (8009ab4 <UART_SetConfig+0x308>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d104      	bne.n	800991e <UART_SetConfig+0x172>
 8009914:	231f      	movs	r3, #31
 8009916:	18fb      	adds	r3, r7, r3
 8009918:	2200      	movs	r2, #0
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	e003      	b.n	8009926 <UART_SetConfig+0x17a>
 800991e:	231f      	movs	r3, #31
 8009920:	18fb      	adds	r3, r7, r3
 8009922:	2210      	movs	r2, #16
 8009924:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69da      	ldr	r2, [r3, #28]
 800992a:	2380      	movs	r3, #128	; 0x80
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	429a      	cmp	r2, r3
 8009930:	d15c      	bne.n	80099ec <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8009932:	231f      	movs	r3, #31
 8009934:	18fb      	adds	r3, r7, r3
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b08      	cmp	r3, #8
 800993a:	d015      	beq.n	8009968 <UART_SetConfig+0x1bc>
 800993c:	dc18      	bgt.n	8009970 <UART_SetConfig+0x1c4>
 800993e:	2b04      	cmp	r3, #4
 8009940:	d00d      	beq.n	800995e <UART_SetConfig+0x1b2>
 8009942:	dc15      	bgt.n	8009970 <UART_SetConfig+0x1c4>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <UART_SetConfig+0x1a2>
 8009948:	2b02      	cmp	r3, #2
 800994a:	d005      	beq.n	8009958 <UART_SetConfig+0x1ac>
 800994c:	e010      	b.n	8009970 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800994e:	f7fd fe43 	bl	80075d8 <HAL_RCC_GetPCLK1Freq>
 8009952:	0003      	movs	r3, r0
 8009954:	61bb      	str	r3, [r7, #24]
        break;
 8009956:	e012      	b.n	800997e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009958:	4b57      	ldr	r3, [pc, #348]	; (8009ab8 <UART_SetConfig+0x30c>)
 800995a:	61bb      	str	r3, [r7, #24]
        break;
 800995c:	e00f      	b.n	800997e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800995e:	f7fd fdbf 	bl	80074e0 <HAL_RCC_GetSysClockFreq>
 8009962:	0003      	movs	r3, r0
 8009964:	61bb      	str	r3, [r7, #24]
        break;
 8009966:	e00a      	b.n	800997e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009968:	2380      	movs	r3, #128	; 0x80
 800996a:	021b      	lsls	r3, r3, #8
 800996c:	61bb      	str	r3, [r7, #24]
        break;
 800996e:	e006      	b.n	800997e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009974:	231e      	movs	r3, #30
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	2201      	movs	r2, #1
 800997a:	701a      	strb	r2, [r3, #0]
        break;
 800997c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d100      	bne.n	8009986 <UART_SetConfig+0x1da>
 8009984:	e07a      	b.n	8009a7c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	005a      	lsls	r2, r3, #1
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	085b      	lsrs	r3, r3, #1
 8009990:	18d2      	adds	r2, r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	0019      	movs	r1, r3
 8009998:	0010      	movs	r0, r2
 800999a:	f7f6 fbdb 	bl	8000154 <__udivsi3>
 800999e:	0003      	movs	r3, r0
 80099a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b0f      	cmp	r3, #15
 80099a6:	d91c      	bls.n	80099e2 <UART_SetConfig+0x236>
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	2380      	movs	r3, #128	; 0x80
 80099ac:	025b      	lsls	r3, r3, #9
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d217      	bcs.n	80099e2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	200e      	movs	r0, #14
 80099b8:	183b      	adds	r3, r7, r0
 80099ba:	210f      	movs	r1, #15
 80099bc:	438a      	bics	r2, r1
 80099be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	085b      	lsrs	r3, r3, #1
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2207      	movs	r2, #7
 80099c8:	4013      	ands	r3, r2
 80099ca:	b299      	uxth	r1, r3
 80099cc:	183b      	adds	r3, r7, r0
 80099ce:	183a      	adds	r2, r7, r0
 80099d0:	8812      	ldrh	r2, [r2, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	183a      	adds	r2, r7, r0
 80099dc:	8812      	ldrh	r2, [r2, #0]
 80099de:	60da      	str	r2, [r3, #12]
 80099e0:	e04c      	b.n	8009a7c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80099e2:	231e      	movs	r3, #30
 80099e4:	18fb      	adds	r3, r7, r3
 80099e6:	2201      	movs	r2, #1
 80099e8:	701a      	strb	r2, [r3, #0]
 80099ea:	e047      	b.n	8009a7c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099ec:	231f      	movs	r3, #31
 80099ee:	18fb      	adds	r3, r7, r3
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	2b08      	cmp	r3, #8
 80099f4:	d015      	beq.n	8009a22 <UART_SetConfig+0x276>
 80099f6:	dc18      	bgt.n	8009a2a <UART_SetConfig+0x27e>
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d00d      	beq.n	8009a18 <UART_SetConfig+0x26c>
 80099fc:	dc15      	bgt.n	8009a2a <UART_SetConfig+0x27e>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <UART_SetConfig+0x25c>
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d005      	beq.n	8009a12 <UART_SetConfig+0x266>
 8009a06:	e010      	b.n	8009a2a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a08:	f7fd fde6 	bl	80075d8 <HAL_RCC_GetPCLK1Freq>
 8009a0c:	0003      	movs	r3, r0
 8009a0e:	61bb      	str	r3, [r7, #24]
        break;
 8009a10:	e012      	b.n	8009a38 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a12:	4b29      	ldr	r3, [pc, #164]	; (8009ab8 <UART_SetConfig+0x30c>)
 8009a14:	61bb      	str	r3, [r7, #24]
        break;
 8009a16:	e00f      	b.n	8009a38 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a18:	f7fd fd62 	bl	80074e0 <HAL_RCC_GetSysClockFreq>
 8009a1c:	0003      	movs	r3, r0
 8009a1e:	61bb      	str	r3, [r7, #24]
        break;
 8009a20:	e00a      	b.n	8009a38 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a22:	2380      	movs	r3, #128	; 0x80
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	61bb      	str	r3, [r7, #24]
        break;
 8009a28:	e006      	b.n	8009a38 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a2e:	231e      	movs	r3, #30
 8009a30:	18fb      	adds	r3, r7, r3
 8009a32:	2201      	movs	r2, #1
 8009a34:	701a      	strb	r2, [r3, #0]
        break;
 8009a36:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d01e      	beq.n	8009a7c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	085a      	lsrs	r2, r3, #1
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	18d2      	adds	r2, r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	0019      	movs	r1, r3
 8009a4e:	0010      	movs	r0, r2
 8009a50:	f7f6 fb80 	bl	8000154 <__udivsi3>
 8009a54:	0003      	movs	r3, r0
 8009a56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	2b0f      	cmp	r3, #15
 8009a5c:	d90a      	bls.n	8009a74 <UART_SetConfig+0x2c8>
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	2380      	movs	r3, #128	; 0x80
 8009a62:	025b      	lsls	r3, r3, #9
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d205      	bcs.n	8009a74 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60da      	str	r2, [r3, #12]
 8009a72:	e003      	b.n	8009a7c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8009a74:	231e      	movs	r3, #30
 8009a76:	18fb      	adds	r3, r7, r3
 8009a78:	2201      	movs	r2, #1
 8009a7a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009a88:	231e      	movs	r3, #30
 8009a8a:	18fb      	adds	r3, r7, r3
 8009a8c:	781b      	ldrb	r3, [r3, #0]
}
 8009a8e:	0018      	movs	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	b008      	add	sp, #32
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	46c0      	nop			; (mov r8, r8)
 8009a98:	efff69f3 	.word	0xefff69f3
 8009a9c:	ffffcfff 	.word	0xffffcfff
 8009aa0:	fffff4ff 	.word	0xfffff4ff
 8009aa4:	40013800 	.word	0x40013800
 8009aa8:	40021000 	.word	0x40021000
 8009aac:	40004400 	.word	0x40004400
 8009ab0:	40004800 	.word	0x40004800
 8009ab4:	40004c00 	.word	0x40004c00
 8009ab8:	007a1200 	.word	0x007a1200

08009abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2201      	movs	r2, #1
 8009aca:	4013      	ands	r3, r2
 8009acc:	d00b      	beq.n	8009ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4a4a      	ldr	r2, [pc, #296]	; (8009c00 <UART_AdvFeatureConfig+0x144>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	0019      	movs	r1, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	2202      	movs	r2, #2
 8009aec:	4013      	ands	r3, r2
 8009aee:	d00b      	beq.n	8009b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	4a43      	ldr	r2, [pc, #268]	; (8009c04 <UART_AdvFeatureConfig+0x148>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	0019      	movs	r1, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	4013      	ands	r3, r2
 8009b10:	d00b      	beq.n	8009b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	4a3b      	ldr	r2, [pc, #236]	; (8009c08 <UART_AdvFeatureConfig+0x14c>)
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	0019      	movs	r1, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	2208      	movs	r2, #8
 8009b30:	4013      	ands	r3, r2
 8009b32:	d00b      	beq.n	8009b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	4a34      	ldr	r2, [pc, #208]	; (8009c0c <UART_AdvFeatureConfig+0x150>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	0019      	movs	r1, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b50:	2210      	movs	r2, #16
 8009b52:	4013      	ands	r3, r2
 8009b54:	d00b      	beq.n	8009b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	4a2c      	ldr	r2, [pc, #176]	; (8009c10 <UART_AdvFeatureConfig+0x154>)
 8009b5e:	4013      	ands	r3, r2
 8009b60:	0019      	movs	r1, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	2220      	movs	r2, #32
 8009b74:	4013      	ands	r3, r2
 8009b76:	d00b      	beq.n	8009b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	4a25      	ldr	r2, [pc, #148]	; (8009c14 <UART_AdvFeatureConfig+0x158>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	0019      	movs	r1, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2240      	movs	r2, #64	; 0x40
 8009b96:	4013      	ands	r3, r2
 8009b98:	d01d      	beq.n	8009bd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	4a1d      	ldr	r2, [pc, #116]	; (8009c18 <UART_AdvFeatureConfig+0x15c>)
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	0019      	movs	r1, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bb6:	2380      	movs	r3, #128	; 0x80
 8009bb8:	035b      	lsls	r3, r3, #13
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d10b      	bne.n	8009bd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	4a15      	ldr	r2, [pc, #84]	; (8009c1c <UART_AdvFeatureConfig+0x160>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	0019      	movs	r1, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	2280      	movs	r2, #128	; 0x80
 8009bdc:	4013      	ands	r3, r2
 8009bde:	d00b      	beq.n	8009bf8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	4a0e      	ldr	r2, [pc, #56]	; (8009c20 <UART_AdvFeatureConfig+0x164>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	0019      	movs	r1, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	605a      	str	r2, [r3, #4]
  }
}
 8009bf8:	46c0      	nop			; (mov r8, r8)
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	fffdffff 	.word	0xfffdffff
 8009c04:	fffeffff 	.word	0xfffeffff
 8009c08:	fffbffff 	.word	0xfffbffff
 8009c0c:	ffff7fff 	.word	0xffff7fff
 8009c10:	ffffefff 	.word	0xffffefff
 8009c14:	ffffdfff 	.word	0xffffdfff
 8009c18:	ffefffff 	.word	0xffefffff
 8009c1c:	ff9fffff 	.word	0xff9fffff
 8009c20:	fff7ffff 	.word	0xfff7ffff

08009c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b092      	sub	sp, #72	; 0x48
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2284      	movs	r2, #132	; 0x84
 8009c30:	2100      	movs	r1, #0
 8009c32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c34:	f7fa fe4a 	bl	80048cc <HAL_GetTick>
 8009c38:	0003      	movs	r3, r0
 8009c3a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2208      	movs	r2, #8
 8009c44:	4013      	ands	r3, r2
 8009c46:	2b08      	cmp	r3, #8
 8009c48:	d12c      	bne.n	8009ca4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4c:	2280      	movs	r2, #128	; 0x80
 8009c4e:	0391      	lsls	r1, r2, #14
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4a46      	ldr	r2, [pc, #280]	; (8009d6c <UART_CheckIdleState+0x148>)
 8009c54:	9200      	str	r2, [sp, #0]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f000 f88c 	bl	8009d74 <UART_WaitOnFlagUntilTimeout>
 8009c5c:	1e03      	subs	r3, r0, #0
 8009c5e:	d021      	beq.n	8009ca4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c60:	f3ef 8310 	mrs	r3, PRIMASK
 8009c64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009c68:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	f383 8810 	msr	PRIMASK, r3
}
 8009c74:	46c0      	nop			; (mov r8, r8)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2180      	movs	r1, #128	; 0x80
 8009c82:	438a      	bics	r2, r1
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	f383 8810 	msr	PRIMASK, r3
}
 8009c90:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2220      	movs	r2, #32
 8009c96:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2278      	movs	r2, #120	; 0x78
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e05f      	b.n	8009d64 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2204      	movs	r2, #4
 8009cac:	4013      	ands	r3, r2
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	d146      	bne.n	8009d40 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb4:	2280      	movs	r2, #128	; 0x80
 8009cb6:	03d1      	lsls	r1, r2, #15
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	4a2c      	ldr	r2, [pc, #176]	; (8009d6c <UART_CheckIdleState+0x148>)
 8009cbc:	9200      	str	r2, [sp, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f000 f858 	bl	8009d74 <UART_WaitOnFlagUntilTimeout>
 8009cc4:	1e03      	subs	r3, r0, #0
 8009cc6:	d03b      	beq.n	8009d40 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8009ccc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f383 8810 	msr	PRIMASK, r3
}
 8009cdc:	46c0      	nop			; (mov r8, r8)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4921      	ldr	r1, [pc, #132]	; (8009d70 <UART_CheckIdleState+0x14c>)
 8009cea:	400a      	ands	r2, r1
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f383 8810 	msr	PRIMASK, r3
}
 8009cf8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009cfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d00:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d02:	633b      	str	r3, [r7, #48]	; 0x30
 8009d04:	2301      	movs	r3, #1
 8009d06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	f383 8810 	msr	PRIMASK, r3
}
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	438a      	bics	r2, r1
 8009d1e:	609a      	str	r2, [r3, #8]
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	f383 8810 	msr	PRIMASK, r3
}
 8009d2a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2280      	movs	r2, #128	; 0x80
 8009d30:	2120      	movs	r1, #32
 8009d32:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2278      	movs	r2, #120	; 0x78
 8009d38:	2100      	movs	r1, #0
 8009d3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e011      	b.n	8009d64 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2280      	movs	r2, #128	; 0x80
 8009d4a:	2120      	movs	r1, #32
 8009d4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2278      	movs	r2, #120	; 0x78
 8009d5e:	2100      	movs	r1, #0
 8009d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	0018      	movs	r0, r3
 8009d66:	46bd      	mov	sp, r7
 8009d68:	b010      	add	sp, #64	; 0x40
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	01ffffff 	.word	0x01ffffff
 8009d70:	fffffedf 	.word	0xfffffedf

08009d74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	603b      	str	r3, [r7, #0]
 8009d80:	1dfb      	adds	r3, r7, #7
 8009d82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d84:	e04b      	b.n	8009e1e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	d048      	beq.n	8009e1e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d8c:	f7fa fd9e 	bl	80048cc <HAL_GetTick>
 8009d90:	0002      	movs	r2, r0
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	69ba      	ldr	r2, [r7, #24]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d302      	bcc.n	8009da2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009da2:	2303      	movs	r3, #3
 8009da4:	e04b      	b.n	8009e3e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2204      	movs	r2, #4
 8009dae:	4013      	ands	r3, r2
 8009db0:	d035      	beq.n	8009e1e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	2208      	movs	r2, #8
 8009dba:	4013      	ands	r3, r2
 8009dbc:	2b08      	cmp	r3, #8
 8009dbe:	d111      	bne.n	8009de4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2208      	movs	r2, #8
 8009dc6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f000 f906 	bl	8009fdc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2284      	movs	r2, #132	; 0x84
 8009dd4:	2108      	movs	r1, #8
 8009dd6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2278      	movs	r2, #120	; 0x78
 8009ddc:	2100      	movs	r1, #0
 8009dde:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e02c      	b.n	8009e3e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	69da      	ldr	r2, [r3, #28]
 8009dea:	2380      	movs	r3, #128	; 0x80
 8009dec:	011b      	lsls	r3, r3, #4
 8009dee:	401a      	ands	r2, r3
 8009df0:	2380      	movs	r3, #128	; 0x80
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d112      	bne.n	8009e1e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2280      	movs	r2, #128	; 0x80
 8009dfe:	0112      	lsls	r2, r2, #4
 8009e00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	0018      	movs	r0, r3
 8009e06:	f000 f8e9 	bl	8009fdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2284      	movs	r2, #132	; 0x84
 8009e0e:	2120      	movs	r1, #32
 8009e10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2278      	movs	r2, #120	; 0x78
 8009e16:	2100      	movs	r1, #0
 8009e18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e00f      	b.n	8009e3e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	4013      	ands	r3, r2
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	425a      	negs	r2, r3
 8009e2e:	4153      	adcs	r3, r2
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	001a      	movs	r2, r3
 8009e34:	1dfb      	adds	r3, r7, #7
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d0a4      	beq.n	8009d86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	0018      	movs	r0, r3
 8009e40:	46bd      	mov	sp, r7
 8009e42:	b004      	add	sp, #16
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b090      	sub	sp, #64	; 0x40
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	1dbb      	adds	r3, r7, #6
 8009e54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	1dba      	adds	r2, r7, #6
 8009e60:	2158      	movs	r1, #88	; 0x58
 8009e62:	8812      	ldrh	r2, [r2, #0]
 8009e64:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	1dba      	adds	r2, r7, #6
 8009e6a:	215a      	movs	r1, #90	; 0x5a
 8009e6c:	8812      	ldrh	r2, [r2, #0]
 8009e6e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	2380      	movs	r3, #128	; 0x80
 8009e7c:	015b      	lsls	r3, r3, #5
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d10d      	bne.n	8009e9e <UART_Start_Receive_IT+0x56>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d104      	bne.n	8009e94 <UART_Start_Receive_IT+0x4c>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	225c      	movs	r2, #92	; 0x5c
 8009e8e:	4950      	ldr	r1, [pc, #320]	; (8009fd0 <UART_Start_Receive_IT+0x188>)
 8009e90:	5299      	strh	r1, [r3, r2]
 8009e92:	e02e      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	225c      	movs	r2, #92	; 0x5c
 8009e98:	21ff      	movs	r1, #255	; 0xff
 8009e9a:	5299      	strh	r1, [r3, r2]
 8009e9c:	e029      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10d      	bne.n	8009ec2 <UART_Start_Receive_IT+0x7a>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d104      	bne.n	8009eb8 <UART_Start_Receive_IT+0x70>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	225c      	movs	r2, #92	; 0x5c
 8009eb2:	21ff      	movs	r1, #255	; 0xff
 8009eb4:	5299      	strh	r1, [r3, r2]
 8009eb6:	e01c      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	225c      	movs	r2, #92	; 0x5c
 8009ebc:	217f      	movs	r1, #127	; 0x7f
 8009ebe:	5299      	strh	r1, [r3, r2]
 8009ec0:	e017      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	689a      	ldr	r2, [r3, #8]
 8009ec6:	2380      	movs	r3, #128	; 0x80
 8009ec8:	055b      	lsls	r3, r3, #21
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d10d      	bne.n	8009eea <UART_Start_Receive_IT+0xa2>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d104      	bne.n	8009ee0 <UART_Start_Receive_IT+0x98>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	225c      	movs	r2, #92	; 0x5c
 8009eda:	217f      	movs	r1, #127	; 0x7f
 8009edc:	5299      	strh	r1, [r3, r2]
 8009ede:	e008      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	225c      	movs	r2, #92	; 0x5c
 8009ee4:	213f      	movs	r1, #63	; 0x3f
 8009ee6:	5299      	strh	r1, [r3, r2]
 8009ee8:	e003      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	225c      	movs	r2, #92	; 0x5c
 8009eee:	2100      	movs	r1, #0
 8009ef0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2284      	movs	r2, #132	; 0x84
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2280      	movs	r2, #128	; 0x80
 8009efe:	2122      	movs	r1, #34	; 0x22
 8009f00:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f02:	f3ef 8310 	mrs	r3, PRIMASK
 8009f06:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f12:	f383 8810 	msr	PRIMASK, r3
}
 8009f16:	46c0      	nop			; (mov r8, r8)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2101      	movs	r1, #1
 8009f24:	430a      	orrs	r2, r1
 8009f26:	609a      	str	r2, [r3, #8]
 8009f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	f383 8810 	msr	PRIMASK, r3
}
 8009f32:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	2380      	movs	r3, #128	; 0x80
 8009f3a:	015b      	lsls	r3, r3, #5
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d107      	bne.n	8009f50 <UART_Start_Receive_IT+0x108>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d103      	bne.n	8009f50 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	4a22      	ldr	r2, [pc, #136]	; (8009fd4 <UART_Start_Receive_IT+0x18c>)
 8009f4c:	669a      	str	r2, [r3, #104]	; 0x68
 8009f4e:	e002      	b.n	8009f56 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4a21      	ldr	r2, [pc, #132]	; (8009fd8 <UART_Start_Receive_IT+0x190>)
 8009f54:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d019      	beq.n	8009f92 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8009f62:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f64:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009f66:	637b      	str	r3, [r7, #52]	; 0x34
 8009f68:	2301      	movs	r3, #1
 8009f6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	f383 8810 	msr	PRIMASK, r3
}
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2190      	movs	r1, #144	; 0x90
 8009f80:	0049      	lsls	r1, r1, #1
 8009f82:	430a      	orrs	r2, r1
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	f383 8810 	msr	PRIMASK, r3
}
 8009f90:	e018      	b.n	8009fc4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f92:	f3ef 8310 	mrs	r3, PRIMASK
 8009f96:	613b      	str	r3, [r7, #16]
  return(result);
 8009f98:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f383 8810 	msr	PRIMASK, r3
}
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2120      	movs	r1, #32
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	f383 8810 	msr	PRIMASK, r3
}
 8009fc2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	0018      	movs	r0, r3
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	b010      	add	sp, #64	; 0x40
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	46c0      	nop			; (mov r8, r8)
 8009fd0:	000001ff 	.word	0x000001ff
 8009fd4:	0800a2ed 	.word	0x0800a2ed
 8009fd8:	0800a131 	.word	0x0800a131

08009fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08e      	sub	sp, #56	; 0x38
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8009fe8:	617b      	str	r3, [r7, #20]
  return(result);
 8009fea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fec:	637b      	str	r3, [r7, #52]	; 0x34
 8009fee:	2301      	movs	r3, #1
 8009ff0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f383 8810 	msr	PRIMASK, r3
}
 8009ff8:	46c0      	nop			; (mov r8, r8)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4926      	ldr	r1, [pc, #152]	; (800a0a0 <UART_EndRxTransfer+0xc4>)
 800a006:	400a      	ands	r2, r1
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	f383 8810 	msr	PRIMASK, r3
}
 800a014:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a016:	f3ef 8310 	mrs	r3, PRIMASK
 800a01a:	623b      	str	r3, [r7, #32]
  return(result);
 800a01c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a01e:	633b      	str	r3, [r7, #48]	; 0x30
 800a020:	2301      	movs	r3, #1
 800a022:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	f383 8810 	msr	PRIMASK, r3
}
 800a02a:	46c0      	nop			; (mov r8, r8)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	689a      	ldr	r2, [r3, #8]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2101      	movs	r1, #1
 800a038:	438a      	bics	r2, r1
 800a03a:	609a      	str	r2, [r3, #8]
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	f383 8810 	msr	PRIMASK, r3
}
 800a046:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d118      	bne.n	800a082 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a050:	f3ef 8310 	mrs	r3, PRIMASK
 800a054:	60bb      	str	r3, [r7, #8]
  return(result);
 800a056:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a05a:	2301      	movs	r3, #1
 800a05c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f383 8810 	msr	PRIMASK, r3
}
 800a064:	46c0      	nop			; (mov r8, r8)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2110      	movs	r1, #16
 800a072:	438a      	bics	r2, r1
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f383 8810 	msr	PRIMASK, r3
}
 800a080:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2280      	movs	r2, #128	; 0x80
 800a086:	2120      	movs	r1, #32
 800a088:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a096:	46c0      	nop			; (mov r8, r8)
 800a098:	46bd      	mov	sp, r7
 800a09a:	b00e      	add	sp, #56	; 0x38
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	fffffedf 	.word	0xfffffedf

0800a0a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	225a      	movs	r2, #90	; 0x5a
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2252      	movs	r2, #82	; 0x52
 800a0be:	2100      	movs	r1, #0
 800a0c0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2298      	movs	r2, #152	; 0x98
 800a0c6:	589b      	ldr	r3, [r3, r2]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	0010      	movs	r0, r2
 800a0cc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0ce:	46c0      	nop			; (mov r8, r8)
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	b004      	add	sp, #16
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b086      	sub	sp, #24
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0de:	f3ef 8310 	mrs	r3, PRIMASK
 800a0e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f383 8810 	msr	PRIMASK, r3
}
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2140      	movs	r1, #64	; 0x40
 800a100:	438a      	bics	r2, r1
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f383 8810 	msr	PRIMASK, r3
}
 800a10e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2220      	movs	r2, #32
 800a114:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	228c      	movs	r2, #140	; 0x8c
 800a120:	589b      	ldr	r3, [r3, r2]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	0010      	movs	r0, r2
 800a126:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a128:	46c0      	nop			; (mov r8, r8)
 800a12a:	46bd      	mov	sp, r7
 800a12c:	b006      	add	sp, #24
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b094      	sub	sp, #80	; 0x50
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a138:	204e      	movs	r0, #78	; 0x4e
 800a13a:	183b      	adds	r3, r7, r0
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	215c      	movs	r1, #92	; 0x5c
 800a140:	5a52      	ldrh	r2, [r2, r1]
 800a142:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2280      	movs	r2, #128	; 0x80
 800a148:	589b      	ldr	r3, [r3, r2]
 800a14a:	2b22      	cmp	r3, #34	; 0x22
 800a14c:	d000      	beq.n	800a150 <UART_RxISR_8BIT+0x20>
 800a14e:	e0bd      	b.n	800a2cc <UART_RxISR_8BIT+0x19c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	214c      	movs	r1, #76	; 0x4c
 800a156:	187b      	adds	r3, r7, r1
 800a158:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800a15a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a15c:	187b      	adds	r3, r7, r1
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	b2da      	uxtb	r2, r3
 800a162:	183b      	adds	r3, r7, r0
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b2d9      	uxtb	r1, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16c:	400a      	ands	r2, r1
 800a16e:	b2d2      	uxtb	r2, r2
 800a170:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	225a      	movs	r2, #90	; 0x5a
 800a180:	5a9b      	ldrh	r3, [r3, r2]
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b299      	uxth	r1, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	225a      	movs	r2, #90	; 0x5a
 800a18c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	225a      	movs	r2, #90	; 0x5a
 800a192:	5a9b      	ldrh	r3, [r3, r2]
 800a194:	b29b      	uxth	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d000      	beq.n	800a19c <UART_RxISR_8BIT+0x6c>
 800a19a:	e09f      	b.n	800a2dc <UART_RxISR_8BIT+0x1ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a19c:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	f383 8810 	msr	PRIMASK, r3
}
 800a1b0:	46c0      	nop			; (mov r8, r8)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4949      	ldr	r1, [pc, #292]	; (800a2e4 <UART_RxISR_8BIT+0x1b4>)
 800a1be:	400a      	ands	r2, r1
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c8:	f383 8810 	msr	PRIMASK, r3
}
 800a1cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a1d8:	2301      	movs	r3, #1
 800a1da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1de:	f383 8810 	msr	PRIMASK, r3
}
 800a1e2:	46c0      	nop			; (mov r8, r8)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	438a      	bics	r2, r1
 800a1f2:	609a      	str	r2, [r3, #8]
 800a1f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	f383 8810 	msr	PRIMASK, r3
}
 800a1fe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2280      	movs	r2, #128	; 0x80
 800a204:	2120      	movs	r1, #32
 800a206:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	2380      	movs	r3, #128	; 0x80
 800a21c:	041b      	lsls	r3, r3, #16
 800a21e:	4013      	ands	r3, r2
 800a220:	d018      	beq.n	800a254 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a222:	f3ef 8310 	mrs	r3, PRIMASK
 800a226:	61bb      	str	r3, [r7, #24]
  return(result);
 800a228:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a22a:	643b      	str	r3, [r7, #64]	; 0x40
 800a22c:	2301      	movs	r3, #1
 800a22e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	f383 8810 	msr	PRIMASK, r3
}
 800a236:	46c0      	nop			; (mov r8, r8)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4929      	ldr	r1, [pc, #164]	; (800a2e8 <UART_RxISR_8BIT+0x1b8>)
 800a244:	400a      	ands	r2, r1
 800a246:	601a      	str	r2, [r3, #0]
 800a248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a24a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a24c:	6a3b      	ldr	r3, [r7, #32]
 800a24e:	f383 8810 	msr	PRIMASK, r3
}
 800a252:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d130      	bne.n	800a2be <UART_RxISR_8BIT+0x18e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a262:	f3ef 8310 	mrs	r3, PRIMASK
 800a266:	60fb      	str	r3, [r7, #12]
  return(result);
 800a268:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a26a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a26c:	2301      	movs	r3, #1
 800a26e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f383 8810 	msr	PRIMASK, r3
}
 800a276:	46c0      	nop			; (mov r8, r8)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2110      	movs	r1, #16
 800a284:	438a      	bics	r2, r1
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f383 8810 	msr	PRIMASK, r3
}
 800a292:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	2210      	movs	r2, #16
 800a29c:	4013      	ands	r3, r2
 800a29e:	2b10      	cmp	r3, #16
 800a2a0:	d103      	bne.n	800a2aa <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2210      	movs	r2, #16
 800a2a8:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	22ac      	movs	r2, #172	; 0xac
 800a2ae:	589b      	ldr	r3, [r3, r2]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	2158      	movs	r1, #88	; 0x58
 800a2b4:	5a51      	ldrh	r1, [r2, r1]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	0010      	movs	r0, r2
 800a2ba:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2bc:	e00e      	b.n	800a2dc <UART_RxISR_8BIT+0x1ac>
        huart->RxCpltCallback(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2294      	movs	r2, #148	; 0x94
 800a2c2:	589b      	ldr	r3, [r3, r2]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	0010      	movs	r0, r2
 800a2c8:	4798      	blx	r3
}
 800a2ca:	e007      	b.n	800a2dc <UART_RxISR_8BIT+0x1ac>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	699a      	ldr	r2, [r3, #24]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2108      	movs	r1, #8
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	619a      	str	r2, [r3, #24]
}
 800a2dc:	46c0      	nop			; (mov r8, r8)
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	b014      	add	sp, #80	; 0x50
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	fffffedf 	.word	0xfffffedf
 800a2e8:	fbffffff 	.word	0xfbffffff

0800a2ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b094      	sub	sp, #80	; 0x50
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a2f4:	204e      	movs	r0, #78	; 0x4e
 800a2f6:	183b      	adds	r3, r7, r0
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	215c      	movs	r1, #92	; 0x5c
 800a2fc:	5a52      	ldrh	r2, [r2, r1]
 800a2fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2280      	movs	r2, #128	; 0x80
 800a304:	589b      	ldr	r3, [r3, r2]
 800a306:	2b22      	cmp	r3, #34	; 0x22
 800a308:	d000      	beq.n	800a30c <UART_RxISR_16BIT+0x20>
 800a30a:	e0bd      	b.n	800a488 <UART_RxISR_16BIT+0x19c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	214c      	movs	r1, #76	; 0x4c
 800a312:	187b      	adds	r3, r7, r1
 800a314:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800a316:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a31c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800a31e:	187b      	adds	r3, r7, r1
 800a320:	183a      	adds	r2, r7, r0
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	8812      	ldrh	r2, [r2, #0]
 800a326:	4013      	ands	r3, r2
 800a328:	b29a      	uxth	r2, r3
 800a32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a32c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a332:	1c9a      	adds	r2, r3, #2
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	225a      	movs	r2, #90	; 0x5a
 800a33c:	5a9b      	ldrh	r3, [r3, r2]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	3b01      	subs	r3, #1
 800a342:	b299      	uxth	r1, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	225a      	movs	r2, #90	; 0x5a
 800a348:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	225a      	movs	r2, #90	; 0x5a
 800a34e:	5a9b      	ldrh	r3, [r3, r2]
 800a350:	b29b      	uxth	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d000      	beq.n	800a358 <UART_RxISR_16BIT+0x6c>
 800a356:	e09f      	b.n	800a498 <UART_RxISR_16BIT+0x1ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a358:	f3ef 8310 	mrs	r3, PRIMASK
 800a35c:	623b      	str	r3, [r7, #32]
  return(result);
 800a35e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a360:	647b      	str	r3, [r7, #68]	; 0x44
 800a362:	2301      	movs	r3, #1
 800a364:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	f383 8810 	msr	PRIMASK, r3
}
 800a36c:	46c0      	nop			; (mov r8, r8)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4949      	ldr	r1, [pc, #292]	; (800a4a0 <UART_RxISR_16BIT+0x1b4>)
 800a37a:	400a      	ands	r2, r1
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a380:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	f383 8810 	msr	PRIMASK, r3
}
 800a388:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a38a:	f3ef 8310 	mrs	r3, PRIMASK
 800a38e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a392:	643b      	str	r3, [r7, #64]	; 0x40
 800a394:	2301      	movs	r3, #1
 800a396:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	f383 8810 	msr	PRIMASK, r3
}
 800a39e:	46c0      	nop			; (mov r8, r8)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	438a      	bics	r2, r1
 800a3ae:	609a      	str	r2, [r3, #8]
 800a3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b6:	f383 8810 	msr	PRIMASK, r3
}
 800a3ba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2280      	movs	r2, #128	; 0x80
 800a3c0:	2120      	movs	r1, #32
 800a3c2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	2380      	movs	r3, #128	; 0x80
 800a3d8:	041b      	lsls	r3, r3, #16
 800a3da:	4013      	ands	r3, r2
 800a3dc:	d018      	beq.n	800a410 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3de:	f3ef 8310 	mrs	r3, PRIMASK
 800a3e2:	617b      	str	r3, [r7, #20]
  return(result);
 800a3e4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	f383 8810 	msr	PRIMASK, r3
}
 800a3f2:	46c0      	nop			; (mov r8, r8)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4929      	ldr	r1, [pc, #164]	; (800a4a4 <UART_RxISR_16BIT+0x1b8>)
 800a400:	400a      	ands	r2, r1
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a406:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	f383 8810 	msr	PRIMASK, r3
}
 800a40e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a414:	2b01      	cmp	r3, #1
 800a416:	d130      	bne.n	800a47a <UART_RxISR_16BIT+0x18e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a41e:	f3ef 8310 	mrs	r3, PRIMASK
 800a422:	60bb      	str	r3, [r7, #8]
  return(result);
 800a424:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a426:	63bb      	str	r3, [r7, #56]	; 0x38
 800a428:	2301      	movs	r3, #1
 800a42a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f383 8810 	msr	PRIMASK, r3
}
 800a432:	46c0      	nop			; (mov r8, r8)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2110      	movs	r1, #16
 800a440:	438a      	bics	r2, r1
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f383 8810 	msr	PRIMASK, r3
}
 800a44e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	2210      	movs	r2, #16
 800a458:	4013      	ands	r3, r2
 800a45a:	2b10      	cmp	r3, #16
 800a45c:	d103      	bne.n	800a466 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2210      	movs	r2, #16
 800a464:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	22ac      	movs	r2, #172	; 0xac
 800a46a:	589b      	ldr	r3, [r3, r2]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	2158      	movs	r1, #88	; 0x58
 800a470:	5a51      	ldrh	r1, [r2, r1]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	0010      	movs	r0, r2
 800a476:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a478:	e00e      	b.n	800a498 <UART_RxISR_16BIT+0x1ac>
        huart->RxCpltCallback(huart);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2294      	movs	r2, #148	; 0x94
 800a47e:	589b      	ldr	r3, [r3, r2]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	0010      	movs	r0, r2
 800a484:	4798      	blx	r3
}
 800a486:	e007      	b.n	800a498 <UART_RxISR_16BIT+0x1ac>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	699a      	ldr	r2, [r3, #24]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2108      	movs	r1, #8
 800a494:	430a      	orrs	r2, r1
 800a496:	619a      	str	r2, [r3, #24]
}
 800a498:	46c0      	nop			; (mov r8, r8)
 800a49a:	46bd      	mov	sp, r7
 800a49c:	b014      	add	sp, #80	; 0x50
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	fffffedf 	.word	0xfffffedf
 800a4a4:	fbffffff 	.word	0xfbffffff

0800a4a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4b0:	46c0      	nop			; (mov r8, r8)
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	b002      	add	sp, #8
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4b8:	b5b0      	push	{r4, r5, r7, lr}
 800a4ba:	b08a      	sub	sp, #40	; 0x28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	1dbb      	adds	r3, r7, #6
 800a4c4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2280      	movs	r2, #128	; 0x80
 800a4ca:	589b      	ldr	r3, [r3, r2]
 800a4cc:	2b20      	cmp	r3, #32
 800a4ce:	d156      	bne.n	800a57e <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800a4d6:	1dbb      	adds	r3, r7, #6
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e04e      	b.n	800a580 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	2380      	movs	r3, #128	; 0x80
 800a4e8:	015b      	lsls	r3, r3, #5
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d109      	bne.n	800a502 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d105      	bne.n	800a502 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	d001      	beq.n	800a502 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e03e      	b.n	800a580 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2201      	movs	r2, #1
 800a506:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800a50e:	2527      	movs	r5, #39	; 0x27
 800a510:	197c      	adds	r4, r7, r5
 800a512:	1dbb      	adds	r3, r7, #6
 800a514:	881a      	ldrh	r2, [r3, #0]
 800a516:	68b9      	ldr	r1, [r7, #8]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	0018      	movs	r0, r3
 800a51c:	f7ff fc94 	bl	8009e48 <UART_Start_Receive_IT>
 800a520:	0003      	movs	r3, r0
 800a522:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a524:	197b      	adds	r3, r7, r5
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d124      	bne.n	800a576 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a530:	2b01      	cmp	r3, #1
 800a532:	d11c      	bne.n	800a56e <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2210      	movs	r2, #16
 800a53a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a53c:	f3ef 8310 	mrs	r3, PRIMASK
 800a540:	617b      	str	r3, [r7, #20]
  return(result);
 800a542:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a544:	623b      	str	r3, [r7, #32]
 800a546:	2301      	movs	r3, #1
 800a548:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	f383 8810 	msr	PRIMASK, r3
}
 800a550:	46c0      	nop			; (mov r8, r8)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2110      	movs	r1, #16
 800a55e:	430a      	orrs	r2, r1
 800a560:	601a      	str	r2, [r3, #0]
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	f383 8810 	msr	PRIMASK, r3
}
 800a56c:	e003      	b.n	800a576 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a56e:	2327      	movs	r3, #39	; 0x27
 800a570:	18fb      	adds	r3, r7, r3
 800a572:	2201      	movs	r2, #1
 800a574:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800a576:	2327      	movs	r3, #39	; 0x27
 800a578:	18fb      	adds	r3, r7, r3
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	e000      	b.n	800a580 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800a57e:	2302      	movs	r3, #2
  }
}
 800a580:	0018      	movs	r0, r3
 800a582:	46bd      	mov	sp, r7
 800a584:	b00a      	add	sp, #40	; 0x28
 800a586:	bdb0      	pop	{r4, r5, r7, pc}

0800a588 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2244      	movs	r2, #68	; 0x44
 800a594:	2100      	movs	r1, #0
 800a596:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a598:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <USB_EnableGlobalInt+0x28>)
 800a59a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	b299      	uxth	r1, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2240      	movs	r2, #64	; 0x40
 800a5a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	b004      	add	sp, #16
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	0000bf80 	.word	0x0000bf80

0800a5b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a5bc:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <USB_DisableGlobalInt+0x30>)
 800a5be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2240      	movs	r2, #64	; 0x40
 800a5c4:	5a9b      	ldrh	r3, [r3, r2]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	b292      	uxth	r2, r2
 800a5cc:	43d2      	mvns	r2, r2
 800a5ce:	b292      	uxth	r2, r2
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	b299      	uxth	r1, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2240      	movs	r2, #64	; 0x40
 800a5d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	0018      	movs	r0, r3
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	b004      	add	sp, #16
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	0000bf80 	.word	0x0000bf80

0800a5e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	b590      	push	{r4, r7, lr}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	2004      	movs	r0, #4
 800a5f4:	2410      	movs	r4, #16
 800a5f6:	1900      	adds	r0, r0, r4
 800a5f8:	2408      	movs	r4, #8
 800a5fa:	46a4      	mov	ip, r4
 800a5fc:	44bc      	add	ip, r7
 800a5fe:	4460      	add	r0, ip
 800a600:	6001      	str	r1, [r0, #0]
 800a602:	6042      	str	r2, [r0, #4]
 800a604:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2240      	movs	r2, #64	; 0x40
 800a60a:	2101      	movs	r1, #1
 800a60c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2240      	movs	r2, #64	; 0x40
 800a612:	2100      	movs	r1, #0
 800a614:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2244      	movs	r2, #68	; 0x44
 800a61a:	2100      	movs	r1, #0
 800a61c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2250      	movs	r2, #80	; 0x50
 800a622:	2100      	movs	r1, #0
 800a624:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	0018      	movs	r0, r3
 800a62a:	46bd      	mov	sp, r7
 800a62c:	b003      	add	sp, #12
 800a62e:	bc90      	pop	{r4, r7}
 800a630:	bc08      	pop	{r3}
 800a632:	b004      	add	sp, #16
 800a634:	4718      	bx	r3
	...

0800a638 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b09c      	sub	sp, #112	; 0x70
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a642:	236f      	movs	r3, #111	; 0x6f
 800a644:	18fb      	adds	r3, r7, r3
 800a646:	2200      	movs	r2, #0
 800a648:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	18d3      	adds	r3, r2, r3
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	b29a      	uxth	r2, r3
 800a658:	236c      	movs	r3, #108	; 0x6c
 800a65a:	18fb      	adds	r3, r7, r3
 800a65c:	49a3      	ldr	r1, [pc, #652]	; (800a8ec <USB_ActivateEndpoint+0x2b4>)
 800a65e:	400a      	ands	r2, r1
 800a660:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	78db      	ldrb	r3, [r3, #3]
 800a666:	2b03      	cmp	r3, #3
 800a668:	d017      	beq.n	800a69a <USB_ActivateEndpoint+0x62>
 800a66a:	dc28      	bgt.n	800a6be <USB_ActivateEndpoint+0x86>
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d00e      	beq.n	800a68e <USB_ActivateEndpoint+0x56>
 800a670:	dc25      	bgt.n	800a6be <USB_ActivateEndpoint+0x86>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <USB_ActivateEndpoint+0x44>
 800a676:	2b01      	cmp	r3, #1
 800a678:	d018      	beq.n	800a6ac <USB_ActivateEndpoint+0x74>
 800a67a:	e020      	b.n	800a6be <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a67c:	226c      	movs	r2, #108	; 0x6c
 800a67e:	18bb      	adds	r3, r7, r2
 800a680:	18ba      	adds	r2, r7, r2
 800a682:	8812      	ldrh	r2, [r2, #0]
 800a684:	2180      	movs	r1, #128	; 0x80
 800a686:	0089      	lsls	r1, r1, #2
 800a688:	430a      	orrs	r2, r1
 800a68a:	801a      	strh	r2, [r3, #0]
      break;
 800a68c:	e01c      	b.n	800a6c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800a68e:	226c      	movs	r2, #108	; 0x6c
 800a690:	18bb      	adds	r3, r7, r2
 800a692:	18ba      	adds	r2, r7, r2
 800a694:	8812      	ldrh	r2, [r2, #0]
 800a696:	801a      	strh	r2, [r3, #0]
      break;
 800a698:	e016      	b.n	800a6c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a69a:	226c      	movs	r2, #108	; 0x6c
 800a69c:	18bb      	adds	r3, r7, r2
 800a69e:	18ba      	adds	r2, r7, r2
 800a6a0:	8812      	ldrh	r2, [r2, #0]
 800a6a2:	21c0      	movs	r1, #192	; 0xc0
 800a6a4:	00c9      	lsls	r1, r1, #3
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	801a      	strh	r2, [r3, #0]
      break;
 800a6aa:	e00d      	b.n	800a6c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a6ac:	226c      	movs	r2, #108	; 0x6c
 800a6ae:	18bb      	adds	r3, r7, r2
 800a6b0:	18ba      	adds	r2, r7, r2
 800a6b2:	8812      	ldrh	r2, [r2, #0]
 800a6b4:	2180      	movs	r1, #128	; 0x80
 800a6b6:	00c9      	lsls	r1, r1, #3
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	801a      	strh	r2, [r3, #0]
      break;
 800a6bc:	e004      	b.n	800a6c8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800a6be:	236f      	movs	r3, #111	; 0x6f
 800a6c0:	18fb      	adds	r3, r7, r3
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	701a      	strb	r2, [r3, #0]
      break;
 800a6c6:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	18d3      	adds	r3, r2, r3
 800a6d2:	226c      	movs	r2, #108	; 0x6c
 800a6d4:	18ba      	adds	r2, r7, r2
 800a6d6:	8812      	ldrh	r2, [r2, #0]
 800a6d8:	4985      	ldr	r1, [pc, #532]	; (800a8f0 <USB_ActivateEndpoint+0x2b8>)
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	b292      	uxth	r2, r2
 800a6de:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	18d3      	adds	r3, r2, r3
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	b21b      	sxth	r3, r3
 800a6f0:	4a80      	ldr	r2, [pc, #512]	; (800a8f4 <USB_ActivateEndpoint+0x2bc>)
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	b21a      	sxth	r2, r3
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	b21b      	sxth	r3, r3
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	b21a      	sxth	r2, r3
 800a700:	2166      	movs	r1, #102	; 0x66
 800a702:	187b      	adds	r3, r7, r1
 800a704:	801a      	strh	r2, [r3, #0]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	18d3      	adds	r3, r2, r3
 800a710:	187a      	adds	r2, r7, r1
 800a712:	8812      	ldrh	r2, [r2, #0]
 800a714:	4976      	ldr	r1, [pc, #472]	; (800a8f0 <USB_ActivateEndpoint+0x2b8>)
 800a716:	430a      	orrs	r2, r1
 800a718:	b292      	uxth	r2, r2
 800a71a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	7b1b      	ldrb	r3, [r3, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d000      	beq.n	800a726 <USB_ActivateEndpoint+0xee>
 800a724:	e178      	b.n	800aa18 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	785b      	ldrb	r3, [r3, #1]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d100      	bne.n	800a730 <USB_ActivateEndpoint+0xf8>
 800a72e:	e07a      	b.n	800a826 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	61bb      	str	r3, [r7, #24]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2250      	movs	r2, #80	; 0x50
 800a738:	5a9b      	ldrh	r3, [r3, r2]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	001a      	movs	r2, r3
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	189b      	adds	r3, r3, r2
 800a742:	61bb      	str	r3, [r7, #24]
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	00da      	lsls	r2, r3, #3
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	18d3      	adds	r3, r2, r3
 800a74e:	2280      	movs	r2, #128	; 0x80
 800a750:	00d2      	lsls	r2, r2, #3
 800a752:	4694      	mov	ip, r2
 800a754:	4463      	add	r3, ip
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	88db      	ldrh	r3, [r3, #6]
 800a75c:	085b      	lsrs	r3, r3, #1
 800a75e:	b29b      	uxth	r3, r3
 800a760:	18db      	adds	r3, r3, r3
 800a762:	b29a      	uxth	r2, r3
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	18d2      	adds	r2, r2, r3
 800a772:	2112      	movs	r1, #18
 800a774:	187b      	adds	r3, r7, r1
 800a776:	8812      	ldrh	r2, [r2, #0]
 800a778:	801a      	strh	r2, [r3, #0]
 800a77a:	187b      	adds	r3, r7, r1
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	2240      	movs	r2, #64	; 0x40
 800a780:	4013      	ands	r3, r2
 800a782:	d016      	beq.n	800a7b2 <USB_ActivateEndpoint+0x17a>
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	18d3      	adds	r3, r2, r3
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	b29a      	uxth	r2, r3
 800a792:	2010      	movs	r0, #16
 800a794:	183b      	adds	r3, r7, r0
 800a796:	4957      	ldr	r1, [pc, #348]	; (800a8f4 <USB_ActivateEndpoint+0x2bc>)
 800a798:	400a      	ands	r2, r1
 800a79a:	801a      	strh	r2, [r3, #0]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	18d3      	adds	r3, r2, r3
 800a7a6:	183a      	adds	r2, r7, r0
 800a7a8:	8812      	ldrh	r2, [r2, #0]
 800a7aa:	4953      	ldr	r1, [pc, #332]	; (800a8f8 <USB_ActivateEndpoint+0x2c0>)
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	b292      	uxth	r2, r2
 800a7b0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	78db      	ldrb	r3, [r3, #3]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d01d      	beq.n	800a7f6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	18d3      	adds	r3, r2, r3
 800a7c4:	881b      	ldrh	r3, [r3, #0]
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	200c      	movs	r0, #12
 800a7ca:	183b      	adds	r3, r7, r0
 800a7cc:	494b      	ldr	r1, [pc, #300]	; (800a8fc <USB_ActivateEndpoint+0x2c4>)
 800a7ce:	400a      	ands	r2, r1
 800a7d0:	801a      	strh	r2, [r3, #0]
 800a7d2:	183b      	adds	r3, r7, r0
 800a7d4:	183a      	adds	r2, r7, r0
 800a7d6:	8812      	ldrh	r2, [r2, #0]
 800a7d8:	2120      	movs	r1, #32
 800a7da:	404a      	eors	r2, r1
 800a7dc:	801a      	strh	r2, [r3, #0]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	18d3      	adds	r3, r2, r3
 800a7e8:	183a      	adds	r2, r7, r0
 800a7ea:	8812      	ldrh	r2, [r2, #0]
 800a7ec:	4940      	ldr	r1, [pc, #256]	; (800a8f0 <USB_ActivateEndpoint+0x2b8>)
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	801a      	strh	r2, [r3, #0]
 800a7f4:	e2b4      	b.n	800ad60 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	18d3      	adds	r3, r2, r3
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	b29a      	uxth	r2, r3
 800a804:	200e      	movs	r0, #14
 800a806:	183b      	adds	r3, r7, r0
 800a808:	493c      	ldr	r1, [pc, #240]	; (800a8fc <USB_ActivateEndpoint+0x2c4>)
 800a80a:	400a      	ands	r2, r1
 800a80c:	801a      	strh	r2, [r3, #0]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	18d3      	adds	r3, r2, r3
 800a818:	183a      	adds	r2, r7, r0
 800a81a:	8812      	ldrh	r2, [r2, #0]
 800a81c:	4934      	ldr	r1, [pc, #208]	; (800a8f0 <USB_ActivateEndpoint+0x2b8>)
 800a81e:	430a      	orrs	r2, r1
 800a820:	b292      	uxth	r2, r2
 800a822:	801a      	strh	r2, [r3, #0]
 800a824:	e29c      	b.n	800ad60 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	633b      	str	r3, [r7, #48]	; 0x30
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2250      	movs	r2, #80	; 0x50
 800a82e:	5a9b      	ldrh	r3, [r3, r2]
 800a830:	b29b      	uxth	r3, r3
 800a832:	001a      	movs	r2, r3
 800a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a836:	189b      	adds	r3, r3, r2
 800a838:	633b      	str	r3, [r7, #48]	; 0x30
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	00da      	lsls	r2, r3, #3
 800a840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a842:	18d3      	adds	r3, r2, r3
 800a844:	4a2e      	ldr	r2, [pc, #184]	; (800a900 <USB_ActivateEndpoint+0x2c8>)
 800a846:	4694      	mov	ip, r2
 800a848:	4463      	add	r3, ip
 800a84a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	88db      	ldrh	r3, [r3, #6]
 800a850:	085b      	lsrs	r3, r3, #1
 800a852:	b29b      	uxth	r3, r3
 800a854:	18db      	adds	r3, r3, r3
 800a856:	b29a      	uxth	r2, r3
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2250      	movs	r2, #80	; 0x50
 800a864:	5a9b      	ldrh	r3, [r3, r2]
 800a866:	b29b      	uxth	r3, r3
 800a868:	001a      	movs	r2, r3
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	189b      	adds	r3, r3, r2
 800a86e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	00da      	lsls	r2, r3, #3
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	18d3      	adds	r3, r2, r3
 800a87a:	4a22      	ldr	r2, [pc, #136]	; (800a904 <USB_ActivateEndpoint+0x2cc>)
 800a87c:	4694      	mov	ip, r2
 800a87e:	4463      	add	r3, ip
 800a880:	627b      	str	r3, [r7, #36]	; 0x24
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	b29b      	uxth	r3, r3
 800a888:	059b      	lsls	r3, r3, #22
 800a88a:	0d9b      	lsrs	r3, r3, #22
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a890:	801a      	strh	r2, [r3, #0]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	2b3e      	cmp	r3, #62	; 0x3e
 800a898:	d91a      	bls.n	800a8d0 <USB_ActivateEndpoint+0x298>
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	095b      	lsrs	r3, r3, #5
 800a8a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	221f      	movs	r2, #31
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	d102      	bne.n	800a8b2 <USB_ActivateEndpoint+0x27a>
 800a8ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	029b      	lsls	r3, r3, #10
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	4a10      	ldr	r2, [pc, #64]	; (800a908 <USB_ActivateEndpoint+0x2d0>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	801a      	strh	r2, [r3, #0]
 800a8ce:	e034      	b.n	800a93a <USB_ActivateEndpoint+0x302>
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d119      	bne.n	800a90c <USB_ActivateEndpoint+0x2d4>
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	4a0a      	ldr	r2, [pc, #40]	; (800a908 <USB_ActivateEndpoint+0x2d0>)
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	801a      	strh	r2, [r3, #0]
 800a8e8:	e027      	b.n	800a93a <USB_ActivateEndpoint+0x302>
 800a8ea:	46c0      	nop			; (mov r8, r8)
 800a8ec:	ffff898f 	.word	0xffff898f
 800a8f0:	ffff8080 	.word	0xffff8080
 800a8f4:	ffff8f8f 	.word	0xffff8f8f
 800a8f8:	ffff80c0 	.word	0xffff80c0
 800a8fc:	ffff8fbf 	.word	0xffff8fbf
 800a900:	00000404 	.word	0x00000404
 800a904:	00000406 	.word	0x00000406
 800a908:	ffff8000 	.word	0xffff8000
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	085b      	lsrs	r3, r3, #1
 800a912:	66bb      	str	r3, [r7, #104]	; 0x68
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	2201      	movs	r2, #1
 800a91a:	4013      	ands	r3, r2
 800a91c:	d002      	beq.n	800a924 <USB_ActivateEndpoint+0x2ec>
 800a91e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a920:	3301      	adds	r3, #1
 800a922:	66bb      	str	r3, [r7, #104]	; 0x68
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	b29a      	uxth	r2, r3
 800a92a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	029b      	lsls	r3, r3, #10
 800a930:	b29b      	uxth	r3, r3
 800a932:	4313      	orrs	r3, r2
 800a934:	b29a      	uxth	r2, r3
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	18d2      	adds	r2, r2, r3
 800a944:	2122      	movs	r1, #34	; 0x22
 800a946:	187b      	adds	r3, r7, r1
 800a948:	8812      	ldrh	r2, [r2, #0]
 800a94a:	801a      	strh	r2, [r3, #0]
 800a94c:	187b      	adds	r3, r7, r1
 800a94e:	881a      	ldrh	r2, [r3, #0]
 800a950:	2380      	movs	r3, #128	; 0x80
 800a952:	01db      	lsls	r3, r3, #7
 800a954:	4013      	ands	r3, r2
 800a956:	d016      	beq.n	800a986 <USB_ActivateEndpoint+0x34e>
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	18d3      	adds	r3, r2, r3
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b29a      	uxth	r2, r3
 800a966:	2020      	movs	r0, #32
 800a968:	183b      	adds	r3, r7, r0
 800a96a:	49dd      	ldr	r1, [pc, #884]	; (800ace0 <USB_ActivateEndpoint+0x6a8>)
 800a96c:	400a      	ands	r2, r1
 800a96e:	801a      	strh	r2, [r3, #0]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	18d3      	adds	r3, r2, r3
 800a97a:	183a      	adds	r2, r7, r0
 800a97c:	8812      	ldrh	r2, [r2, #0]
 800a97e:	49d9      	ldr	r1, [pc, #868]	; (800ace4 <USB_ActivateEndpoint+0x6ac>)
 800a980:	430a      	orrs	r2, r1
 800a982:	b292      	uxth	r2, r2
 800a984:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d125      	bne.n	800a9da <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	18d3      	adds	r3, r2, r3
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	201c      	movs	r0, #28
 800a99e:	183b      	adds	r3, r7, r0
 800a9a0:	49d1      	ldr	r1, [pc, #836]	; (800ace8 <USB_ActivateEndpoint+0x6b0>)
 800a9a2:	400a      	ands	r2, r1
 800a9a4:	801a      	strh	r2, [r3, #0]
 800a9a6:	183b      	adds	r3, r7, r0
 800a9a8:	183a      	adds	r2, r7, r0
 800a9aa:	8812      	ldrh	r2, [r2, #0]
 800a9ac:	2180      	movs	r1, #128	; 0x80
 800a9ae:	0149      	lsls	r1, r1, #5
 800a9b0:	404a      	eors	r2, r1
 800a9b2:	801a      	strh	r2, [r3, #0]
 800a9b4:	183b      	adds	r3, r7, r0
 800a9b6:	183a      	adds	r2, r7, r0
 800a9b8:	8812      	ldrh	r2, [r2, #0]
 800a9ba:	2180      	movs	r1, #128	; 0x80
 800a9bc:	0189      	lsls	r1, r1, #6
 800a9be:	404a      	eors	r2, r1
 800a9c0:	801a      	strh	r2, [r3, #0]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	18d3      	adds	r3, r2, r3
 800a9cc:	183a      	adds	r2, r7, r0
 800a9ce:	8812      	ldrh	r2, [r2, #0]
 800a9d0:	49c6      	ldr	r1, [pc, #792]	; (800acec <USB_ActivateEndpoint+0x6b4>)
 800a9d2:	430a      	orrs	r2, r1
 800a9d4:	b292      	uxth	r2, r2
 800a9d6:	801a      	strh	r2, [r3, #0]
 800a9d8:	e1c2      	b.n	800ad60 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	18d3      	adds	r3, r2, r3
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	201e      	movs	r0, #30
 800a9ea:	183b      	adds	r3, r7, r0
 800a9ec:	49be      	ldr	r1, [pc, #760]	; (800ace8 <USB_ActivateEndpoint+0x6b0>)
 800a9ee:	400a      	ands	r2, r1
 800a9f0:	801a      	strh	r2, [r3, #0]
 800a9f2:	183b      	adds	r3, r7, r0
 800a9f4:	183a      	adds	r2, r7, r0
 800a9f6:	8812      	ldrh	r2, [r2, #0]
 800a9f8:	2180      	movs	r1, #128	; 0x80
 800a9fa:	0189      	lsls	r1, r1, #6
 800a9fc:	404a      	eors	r2, r1
 800a9fe:	801a      	strh	r2, [r3, #0]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	18d3      	adds	r3, r2, r3
 800aa0a:	183a      	adds	r2, r7, r0
 800aa0c:	8812      	ldrh	r2, [r2, #0]
 800aa0e:	49b7      	ldr	r1, [pc, #732]	; (800acec <USB_ActivateEndpoint+0x6b4>)
 800aa10:	430a      	orrs	r2, r1
 800aa12:	b292      	uxth	r2, r2
 800aa14:	801a      	strh	r2, [r3, #0]
 800aa16:	e1a3      	b.n	800ad60 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	78db      	ldrb	r3, [r3, #3]
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d117      	bne.n	800aa50 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	18d3      	adds	r3, r2, r3
 800aa2a:	881b      	ldrh	r3, [r3, #0]
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	2062      	movs	r0, #98	; 0x62
 800aa30:	183b      	adds	r3, r7, r0
 800aa32:	49ab      	ldr	r1, [pc, #684]	; (800ace0 <USB_ActivateEndpoint+0x6a8>)
 800aa34:	400a      	ands	r2, r1
 800aa36:	801a      	strh	r2, [r3, #0]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	18d3      	adds	r3, r2, r3
 800aa42:	183a      	adds	r2, r7, r0
 800aa44:	8812      	ldrh	r2, [r2, #0]
 800aa46:	49aa      	ldr	r1, [pc, #680]	; (800acf0 <USB_ActivateEndpoint+0x6b8>)
 800aa48:	430a      	orrs	r2, r1
 800aa4a:	b292      	uxth	r2, r2
 800aa4c:	801a      	strh	r2, [r3, #0]
 800aa4e:	e016      	b.n	800aa7e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	18d3      	adds	r3, r2, r3
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	2064      	movs	r0, #100	; 0x64
 800aa60:	183b      	adds	r3, r7, r0
 800aa62:	49a4      	ldr	r1, [pc, #656]	; (800acf4 <USB_ActivateEndpoint+0x6bc>)
 800aa64:	400a      	ands	r2, r1
 800aa66:	801a      	strh	r2, [r3, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	18d3      	adds	r3, r2, r3
 800aa72:	183a      	adds	r2, r7, r0
 800aa74:	8812      	ldrh	r2, [r2, #0]
 800aa76:	499d      	ldr	r1, [pc, #628]	; (800acec <USB_ActivateEndpoint+0x6b4>)
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	b292      	uxth	r2, r2
 800aa7c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2250      	movs	r2, #80	; 0x50
 800aa86:	5a9b      	ldrh	r3, [r3, r2]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	001a      	movs	r2, r3
 800aa8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa8e:	189b      	adds	r3, r3, r2
 800aa90:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	00da      	lsls	r2, r3, #3
 800aa98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa9a:	18d3      	adds	r3, r2, r3
 800aa9c:	2280      	movs	r2, #128	; 0x80
 800aa9e:	00d2      	lsls	r2, r2, #3
 800aaa0:	4694      	mov	ip, r2
 800aaa2:	4463      	add	r3, ip
 800aaa4:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	891b      	ldrh	r3, [r3, #8]
 800aaaa:	085b      	lsrs	r3, r3, #1
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	18db      	adds	r3, r3, r3
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aab4:	801a      	strh	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	657b      	str	r3, [r7, #84]	; 0x54
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2250      	movs	r2, #80	; 0x50
 800aabe:	5a9b      	ldrh	r3, [r3, r2]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	001a      	movs	r2, r3
 800aac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac6:	189b      	adds	r3, r3, r2
 800aac8:	657b      	str	r3, [r7, #84]	; 0x54
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	00da      	lsls	r2, r3, #3
 800aad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad2:	18d3      	adds	r3, r2, r3
 800aad4:	4a88      	ldr	r2, [pc, #544]	; (800acf8 <USB_ActivateEndpoint+0x6c0>)
 800aad6:	4694      	mov	ip, r2
 800aad8:	4463      	add	r3, ip
 800aada:	653b      	str	r3, [r7, #80]	; 0x50
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	895b      	ldrh	r3, [r3, #10]
 800aae0:	085b      	lsrs	r3, r3, #1
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	18db      	adds	r3, r3, r3
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	785b      	ldrb	r3, [r3, #1]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d000      	beq.n	800aaf6 <USB_ActivateEndpoint+0x4be>
 800aaf4:	e087      	b.n	800ac06 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	18d2      	adds	r2, r2, r3
 800ab00:	2140      	movs	r1, #64	; 0x40
 800ab02:	187b      	adds	r3, r7, r1
 800ab04:	8812      	ldrh	r2, [r2, #0]
 800ab06:	801a      	strh	r2, [r3, #0]
 800ab08:	187b      	adds	r3, r7, r1
 800ab0a:	881a      	ldrh	r2, [r3, #0]
 800ab0c:	2380      	movs	r3, #128	; 0x80
 800ab0e:	01db      	lsls	r3, r3, #7
 800ab10:	4013      	ands	r3, r2
 800ab12:	d016      	beq.n	800ab42 <USB_ActivateEndpoint+0x50a>
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	18d3      	adds	r3, r2, r3
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	203e      	movs	r0, #62	; 0x3e
 800ab24:	183b      	adds	r3, r7, r0
 800ab26:	496e      	ldr	r1, [pc, #440]	; (800ace0 <USB_ActivateEndpoint+0x6a8>)
 800ab28:	400a      	ands	r2, r1
 800ab2a:	801a      	strh	r2, [r3, #0]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	18d3      	adds	r3, r2, r3
 800ab36:	183a      	adds	r2, r7, r0
 800ab38:	8812      	ldrh	r2, [r2, #0]
 800ab3a:	496a      	ldr	r1, [pc, #424]	; (800ace4 <USB_ActivateEndpoint+0x6ac>)
 800ab3c:	430a      	orrs	r2, r1
 800ab3e:	b292      	uxth	r2, r2
 800ab40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	18d2      	adds	r2, r2, r3
 800ab4c:	213c      	movs	r1, #60	; 0x3c
 800ab4e:	187b      	adds	r3, r7, r1
 800ab50:	8812      	ldrh	r2, [r2, #0]
 800ab52:	801a      	strh	r2, [r3, #0]
 800ab54:	187b      	adds	r3, r7, r1
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	2240      	movs	r2, #64	; 0x40
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	d016      	beq.n	800ab8c <USB_ActivateEndpoint+0x554>
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	18d3      	adds	r3, r2, r3
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	203a      	movs	r0, #58	; 0x3a
 800ab6e:	183b      	adds	r3, r7, r0
 800ab70:	495b      	ldr	r1, [pc, #364]	; (800ace0 <USB_ActivateEndpoint+0x6a8>)
 800ab72:	400a      	ands	r2, r1
 800ab74:	801a      	strh	r2, [r3, #0]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	18d3      	adds	r3, r2, r3
 800ab80:	183a      	adds	r2, r7, r0
 800ab82:	8812      	ldrh	r2, [r2, #0]
 800ab84:	495d      	ldr	r1, [pc, #372]	; (800acfc <USB_ActivateEndpoint+0x6c4>)
 800ab86:	430a      	orrs	r2, r1
 800ab88:	b292      	uxth	r2, r2
 800ab8a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	18d3      	adds	r3, r2, r3
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	2038      	movs	r0, #56	; 0x38
 800ab9c:	183b      	adds	r3, r7, r0
 800ab9e:	4952      	ldr	r1, [pc, #328]	; (800ace8 <USB_ActivateEndpoint+0x6b0>)
 800aba0:	400a      	ands	r2, r1
 800aba2:	801a      	strh	r2, [r3, #0]
 800aba4:	183b      	adds	r3, r7, r0
 800aba6:	183a      	adds	r2, r7, r0
 800aba8:	8812      	ldrh	r2, [r2, #0]
 800abaa:	2180      	movs	r1, #128	; 0x80
 800abac:	0149      	lsls	r1, r1, #5
 800abae:	404a      	eors	r2, r1
 800abb0:	801a      	strh	r2, [r3, #0]
 800abb2:	183b      	adds	r3, r7, r0
 800abb4:	183a      	adds	r2, r7, r0
 800abb6:	8812      	ldrh	r2, [r2, #0]
 800abb8:	2180      	movs	r1, #128	; 0x80
 800abba:	0189      	lsls	r1, r1, #6
 800abbc:	404a      	eors	r2, r1
 800abbe:	801a      	strh	r2, [r3, #0]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	18d3      	adds	r3, r2, r3
 800abca:	183a      	adds	r2, r7, r0
 800abcc:	8812      	ldrh	r2, [r2, #0]
 800abce:	4947      	ldr	r1, [pc, #284]	; (800acec <USB_ActivateEndpoint+0x6b4>)
 800abd0:	430a      	orrs	r2, r1
 800abd2:	b292      	uxth	r2, r2
 800abd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	18d3      	adds	r3, r2, r3
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	2036      	movs	r0, #54	; 0x36
 800abe6:	183b      	adds	r3, r7, r0
 800abe8:	4945      	ldr	r1, [pc, #276]	; (800ad00 <USB_ActivateEndpoint+0x6c8>)
 800abea:	400a      	ands	r2, r1
 800abec:	801a      	strh	r2, [r3, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	18d3      	adds	r3, r2, r3
 800abf8:	183a      	adds	r2, r7, r0
 800abfa:	8812      	ldrh	r2, [r2, #0]
 800abfc:	493b      	ldr	r1, [pc, #236]	; (800acec <USB_ActivateEndpoint+0x6b4>)
 800abfe:	430a      	orrs	r2, r1
 800ac00:	b292      	uxth	r2, r2
 800ac02:	801a      	strh	r2, [r3, #0]
 800ac04:	e0ac      	b.n	800ad60 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	18d2      	adds	r2, r2, r3
 800ac10:	214e      	movs	r1, #78	; 0x4e
 800ac12:	187b      	adds	r3, r7, r1
 800ac14:	8812      	ldrh	r2, [r2, #0]
 800ac16:	801a      	strh	r2, [r3, #0]
 800ac18:	187b      	adds	r3, r7, r1
 800ac1a:	881a      	ldrh	r2, [r3, #0]
 800ac1c:	2380      	movs	r3, #128	; 0x80
 800ac1e:	01db      	lsls	r3, r3, #7
 800ac20:	4013      	ands	r3, r2
 800ac22:	d016      	beq.n	800ac52 <USB_ActivateEndpoint+0x61a>
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	18d3      	adds	r3, r2, r3
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	204c      	movs	r0, #76	; 0x4c
 800ac34:	183b      	adds	r3, r7, r0
 800ac36:	492a      	ldr	r1, [pc, #168]	; (800ace0 <USB_ActivateEndpoint+0x6a8>)
 800ac38:	400a      	ands	r2, r1
 800ac3a:	801a      	strh	r2, [r3, #0]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	18d3      	adds	r3, r2, r3
 800ac46:	183a      	adds	r2, r7, r0
 800ac48:	8812      	ldrh	r2, [r2, #0]
 800ac4a:	4926      	ldr	r1, [pc, #152]	; (800ace4 <USB_ActivateEndpoint+0x6ac>)
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	b292      	uxth	r2, r2
 800ac50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	18d2      	adds	r2, r2, r3
 800ac5c:	214a      	movs	r1, #74	; 0x4a
 800ac5e:	187b      	adds	r3, r7, r1
 800ac60:	8812      	ldrh	r2, [r2, #0]
 800ac62:	801a      	strh	r2, [r3, #0]
 800ac64:	187b      	adds	r3, r7, r1
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	2240      	movs	r2, #64	; 0x40
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	d016      	beq.n	800ac9c <USB_ActivateEndpoint+0x664>
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	18d3      	adds	r3, r2, r3
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	2048      	movs	r0, #72	; 0x48
 800ac7e:	183b      	adds	r3, r7, r0
 800ac80:	4917      	ldr	r1, [pc, #92]	; (800ace0 <USB_ActivateEndpoint+0x6a8>)
 800ac82:	400a      	ands	r2, r1
 800ac84:	801a      	strh	r2, [r3, #0]
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	18d3      	adds	r3, r2, r3
 800ac90:	183a      	adds	r2, r7, r0
 800ac92:	8812      	ldrh	r2, [r2, #0]
 800ac94:	4919      	ldr	r1, [pc, #100]	; (800acfc <USB_ActivateEndpoint+0x6c4>)
 800ac96:	430a      	orrs	r2, r1
 800ac98:	b292      	uxth	r2, r2
 800ac9a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	78db      	ldrb	r3, [r3, #3]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d02f      	beq.n	800ad04 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	18d3      	adds	r3, r2, r3
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	2044      	movs	r0, #68	; 0x44
 800acb4:	183b      	adds	r3, r7, r0
 800acb6:	4912      	ldr	r1, [pc, #72]	; (800ad00 <USB_ActivateEndpoint+0x6c8>)
 800acb8:	400a      	ands	r2, r1
 800acba:	801a      	strh	r2, [r3, #0]
 800acbc:	183b      	adds	r3, r7, r0
 800acbe:	183a      	adds	r2, r7, r0
 800acc0:	8812      	ldrh	r2, [r2, #0]
 800acc2:	2120      	movs	r1, #32
 800acc4:	404a      	eors	r2, r1
 800acc6:	801a      	strh	r2, [r3, #0]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	18d3      	adds	r3, r2, r3
 800acd2:	183a      	adds	r2, r7, r0
 800acd4:	8812      	ldrh	r2, [r2, #0]
 800acd6:	4905      	ldr	r1, [pc, #20]	; (800acec <USB_ActivateEndpoint+0x6b4>)
 800acd8:	430a      	orrs	r2, r1
 800acda:	b292      	uxth	r2, r2
 800acdc:	801a      	strh	r2, [r3, #0]
 800acde:	e028      	b.n	800ad32 <USB_ActivateEndpoint+0x6fa>
 800ace0:	ffff8f8f 	.word	0xffff8f8f
 800ace4:	ffffc080 	.word	0xffffc080
 800ace8:	ffffbf8f 	.word	0xffffbf8f
 800acec:	ffff8080 	.word	0xffff8080
 800acf0:	ffff8180 	.word	0xffff8180
 800acf4:	ffff8e8f 	.word	0xffff8e8f
 800acf8:	00000404 	.word	0x00000404
 800acfc:	ffff80c0 	.word	0xffff80c0
 800ad00:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	18d3      	adds	r3, r2, r3
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	2046      	movs	r0, #70	; 0x46
 800ad14:	183b      	adds	r3, r7, r0
 800ad16:	4916      	ldr	r1, [pc, #88]	; (800ad70 <USB_ActivateEndpoint+0x738>)
 800ad18:	400a      	ands	r2, r1
 800ad1a:	801a      	strh	r2, [r3, #0]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	18d3      	adds	r3, r2, r3
 800ad26:	183a      	adds	r2, r7, r0
 800ad28:	8812      	ldrh	r2, [r2, #0]
 800ad2a:	4912      	ldr	r1, [pc, #72]	; (800ad74 <USB_ActivateEndpoint+0x73c>)
 800ad2c:	430a      	orrs	r2, r1
 800ad2e:	b292      	uxth	r2, r2
 800ad30:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	18d3      	adds	r3, r2, r3
 800ad3c:	881b      	ldrh	r3, [r3, #0]
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	2042      	movs	r0, #66	; 0x42
 800ad42:	183b      	adds	r3, r7, r0
 800ad44:	490c      	ldr	r1, [pc, #48]	; (800ad78 <USB_ActivateEndpoint+0x740>)
 800ad46:	400a      	ands	r2, r1
 800ad48:	801a      	strh	r2, [r3, #0]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	18d3      	adds	r3, r2, r3
 800ad54:	183a      	adds	r2, r7, r0
 800ad56:	8812      	ldrh	r2, [r2, #0]
 800ad58:	4906      	ldr	r1, [pc, #24]	; (800ad74 <USB_ActivateEndpoint+0x73c>)
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	b292      	uxth	r2, r2
 800ad5e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ad60:	236f      	movs	r3, #111	; 0x6f
 800ad62:	18fb      	adds	r3, r7, r3
 800ad64:	781b      	ldrb	r3, [r3, #0]
}
 800ad66:	0018      	movs	r0, r3
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	b01c      	add	sp, #112	; 0x70
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	ffff8fbf 	.word	0xffff8fbf
 800ad74:	ffff8080 	.word	0xffff8080
 800ad78:	ffffbf8f 	.word	0xffffbf8f

0800ad7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08c      	sub	sp, #48	; 0x30
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	7b1b      	ldrb	r3, [r3, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d000      	beq.n	800ad90 <USB_DeactivateEndpoint+0x14>
 800ad8e:	e07e      	b.n	800ae8e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	785b      	ldrb	r3, [r3, #1]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d03c      	beq.n	800ae12 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	18d2      	adds	r2, r2, r3
 800ada2:	210c      	movs	r1, #12
 800ada4:	187b      	adds	r3, r7, r1
 800ada6:	8812      	ldrh	r2, [r2, #0]
 800ada8:	801a      	strh	r2, [r3, #0]
 800adaa:	187b      	adds	r3, r7, r1
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	2240      	movs	r2, #64	; 0x40
 800adb0:	4013      	ands	r3, r2
 800adb2:	d016      	beq.n	800ade2 <USB_DeactivateEndpoint+0x66>
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	18d3      	adds	r3, r2, r3
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	200a      	movs	r0, #10
 800adc4:	183b      	adds	r3, r7, r0
 800adc6:	49c7      	ldr	r1, [pc, #796]	; (800b0e4 <USB_DeactivateEndpoint+0x368>)
 800adc8:	400a      	ands	r2, r1
 800adca:	801a      	strh	r2, [r3, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	18d3      	adds	r3, r2, r3
 800add6:	183a      	adds	r2, r7, r0
 800add8:	8812      	ldrh	r2, [r2, #0]
 800adda:	49c3      	ldr	r1, [pc, #780]	; (800b0e8 <USB_DeactivateEndpoint+0x36c>)
 800addc:	430a      	orrs	r2, r1
 800adde:	b292      	uxth	r2, r2
 800ade0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	18d3      	adds	r3, r2, r3
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	b29a      	uxth	r2, r3
 800adf0:	2008      	movs	r0, #8
 800adf2:	183b      	adds	r3, r7, r0
 800adf4:	49bd      	ldr	r1, [pc, #756]	; (800b0ec <USB_DeactivateEndpoint+0x370>)
 800adf6:	400a      	ands	r2, r1
 800adf8:	801a      	strh	r2, [r3, #0]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	18d3      	adds	r3, r2, r3
 800ae04:	183a      	adds	r2, r7, r0
 800ae06:	8812      	ldrh	r2, [r2, #0]
 800ae08:	49b9      	ldr	r1, [pc, #740]	; (800b0f0 <USB_DeactivateEndpoint+0x374>)
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	b292      	uxth	r2, r2
 800ae0e:	801a      	strh	r2, [r3, #0]
 800ae10:	e163      	b.n	800b0da <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	18d2      	adds	r2, r2, r3
 800ae1c:	2112      	movs	r1, #18
 800ae1e:	187b      	adds	r3, r7, r1
 800ae20:	8812      	ldrh	r2, [r2, #0]
 800ae22:	801a      	strh	r2, [r3, #0]
 800ae24:	187b      	adds	r3, r7, r1
 800ae26:	881a      	ldrh	r2, [r3, #0]
 800ae28:	2380      	movs	r3, #128	; 0x80
 800ae2a:	01db      	lsls	r3, r3, #7
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	d016      	beq.n	800ae5e <USB_DeactivateEndpoint+0xe2>
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	18d3      	adds	r3, r2, r3
 800ae3a:	881b      	ldrh	r3, [r3, #0]
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	2010      	movs	r0, #16
 800ae40:	183b      	adds	r3, r7, r0
 800ae42:	49a8      	ldr	r1, [pc, #672]	; (800b0e4 <USB_DeactivateEndpoint+0x368>)
 800ae44:	400a      	ands	r2, r1
 800ae46:	801a      	strh	r2, [r3, #0]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	18d3      	adds	r3, r2, r3
 800ae52:	183a      	adds	r2, r7, r0
 800ae54:	8812      	ldrh	r2, [r2, #0]
 800ae56:	49a7      	ldr	r1, [pc, #668]	; (800b0f4 <USB_DeactivateEndpoint+0x378>)
 800ae58:	430a      	orrs	r2, r1
 800ae5a:	b292      	uxth	r2, r2
 800ae5c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	18d3      	adds	r3, r2, r3
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	200e      	movs	r0, #14
 800ae6e:	183b      	adds	r3, r7, r0
 800ae70:	49a1      	ldr	r1, [pc, #644]	; (800b0f8 <USB_DeactivateEndpoint+0x37c>)
 800ae72:	400a      	ands	r2, r1
 800ae74:	801a      	strh	r2, [r3, #0]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	18d3      	adds	r3, r2, r3
 800ae80:	183a      	adds	r2, r7, r0
 800ae82:	8812      	ldrh	r2, [r2, #0]
 800ae84:	499a      	ldr	r1, [pc, #616]	; (800b0f0 <USB_DeactivateEndpoint+0x374>)
 800ae86:	430a      	orrs	r2, r1
 800ae88:	b292      	uxth	r2, r2
 800ae8a:	801a      	strh	r2, [r3, #0]
 800ae8c:	e125      	b.n	800b0da <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	785b      	ldrb	r3, [r3, #1]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d000      	beq.n	800ae98 <USB_DeactivateEndpoint+0x11c>
 800ae96:	e090      	b.n	800afba <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	18d2      	adds	r2, r2, r3
 800aea2:	2120      	movs	r1, #32
 800aea4:	187b      	adds	r3, r7, r1
 800aea6:	8812      	ldrh	r2, [r2, #0]
 800aea8:	801a      	strh	r2, [r3, #0]
 800aeaa:	187b      	adds	r3, r7, r1
 800aeac:	881a      	ldrh	r2, [r3, #0]
 800aeae:	2380      	movs	r3, #128	; 0x80
 800aeb0:	01db      	lsls	r3, r3, #7
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	d016      	beq.n	800aee4 <USB_DeactivateEndpoint+0x168>
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	18d3      	adds	r3, r2, r3
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	201e      	movs	r0, #30
 800aec6:	183b      	adds	r3, r7, r0
 800aec8:	4986      	ldr	r1, [pc, #536]	; (800b0e4 <USB_DeactivateEndpoint+0x368>)
 800aeca:	400a      	ands	r2, r1
 800aecc:	801a      	strh	r2, [r3, #0]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	18d3      	adds	r3, r2, r3
 800aed8:	183a      	adds	r2, r7, r0
 800aeda:	8812      	ldrh	r2, [r2, #0]
 800aedc:	4985      	ldr	r1, [pc, #532]	; (800b0f4 <USB_DeactivateEndpoint+0x378>)
 800aede:	430a      	orrs	r2, r1
 800aee0:	b292      	uxth	r2, r2
 800aee2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	18d2      	adds	r2, r2, r3
 800aeee:	211c      	movs	r1, #28
 800aef0:	187b      	adds	r3, r7, r1
 800aef2:	8812      	ldrh	r2, [r2, #0]
 800aef4:	801a      	strh	r2, [r3, #0]
 800aef6:	187b      	adds	r3, r7, r1
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	2240      	movs	r2, #64	; 0x40
 800aefc:	4013      	ands	r3, r2
 800aefe:	d016      	beq.n	800af2e <USB_DeactivateEndpoint+0x1b2>
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	18d3      	adds	r3, r2, r3
 800af0a:	881b      	ldrh	r3, [r3, #0]
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	201a      	movs	r0, #26
 800af10:	183b      	adds	r3, r7, r0
 800af12:	4974      	ldr	r1, [pc, #464]	; (800b0e4 <USB_DeactivateEndpoint+0x368>)
 800af14:	400a      	ands	r2, r1
 800af16:	801a      	strh	r2, [r3, #0]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	18d3      	adds	r3, r2, r3
 800af22:	183a      	adds	r2, r7, r0
 800af24:	8812      	ldrh	r2, [r2, #0]
 800af26:	4970      	ldr	r1, [pc, #448]	; (800b0e8 <USB_DeactivateEndpoint+0x36c>)
 800af28:	430a      	orrs	r2, r1
 800af2a:	b292      	uxth	r2, r2
 800af2c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	18d3      	adds	r3, r2, r3
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	2018      	movs	r0, #24
 800af3e:	183b      	adds	r3, r7, r0
 800af40:	4968      	ldr	r1, [pc, #416]	; (800b0e4 <USB_DeactivateEndpoint+0x368>)
 800af42:	400a      	ands	r2, r1
 800af44:	801a      	strh	r2, [r3, #0]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	18d3      	adds	r3, r2, r3
 800af50:	183a      	adds	r2, r7, r0
 800af52:	8812      	ldrh	r2, [r2, #0]
 800af54:	4964      	ldr	r1, [pc, #400]	; (800b0e8 <USB_DeactivateEndpoint+0x36c>)
 800af56:	430a      	orrs	r2, r1
 800af58:	b292      	uxth	r2, r2
 800af5a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	18d3      	adds	r3, r2, r3
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	b29a      	uxth	r2, r3
 800af6a:	2016      	movs	r0, #22
 800af6c:	183b      	adds	r3, r7, r0
 800af6e:	4962      	ldr	r1, [pc, #392]	; (800b0f8 <USB_DeactivateEndpoint+0x37c>)
 800af70:	400a      	ands	r2, r1
 800af72:	801a      	strh	r2, [r3, #0]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	18d3      	adds	r3, r2, r3
 800af7e:	183a      	adds	r2, r7, r0
 800af80:	8812      	ldrh	r2, [r2, #0]
 800af82:	495b      	ldr	r1, [pc, #364]	; (800b0f0 <USB_DeactivateEndpoint+0x374>)
 800af84:	430a      	orrs	r2, r1
 800af86:	b292      	uxth	r2, r2
 800af88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	18d3      	adds	r3, r2, r3
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	b29a      	uxth	r2, r3
 800af98:	2014      	movs	r0, #20
 800af9a:	183b      	adds	r3, r7, r0
 800af9c:	4953      	ldr	r1, [pc, #332]	; (800b0ec <USB_DeactivateEndpoint+0x370>)
 800af9e:	400a      	ands	r2, r1
 800afa0:	801a      	strh	r2, [r3, #0]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	18d3      	adds	r3, r2, r3
 800afac:	183a      	adds	r2, r7, r0
 800afae:	8812      	ldrh	r2, [r2, #0]
 800afb0:	494f      	ldr	r1, [pc, #316]	; (800b0f0 <USB_DeactivateEndpoint+0x374>)
 800afb2:	430a      	orrs	r2, r1
 800afb4:	b292      	uxth	r2, r2
 800afb6:	801a      	strh	r2, [r3, #0]
 800afb8:	e08f      	b.n	800b0da <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	18d2      	adds	r2, r2, r3
 800afc4:	212e      	movs	r1, #46	; 0x2e
 800afc6:	187b      	adds	r3, r7, r1
 800afc8:	8812      	ldrh	r2, [r2, #0]
 800afca:	801a      	strh	r2, [r3, #0]
 800afcc:	187b      	adds	r3, r7, r1
 800afce:	881a      	ldrh	r2, [r3, #0]
 800afd0:	2380      	movs	r3, #128	; 0x80
 800afd2:	01db      	lsls	r3, r3, #7
 800afd4:	4013      	ands	r3, r2
 800afd6:	d016      	beq.n	800b006 <USB_DeactivateEndpoint+0x28a>
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	18d3      	adds	r3, r2, r3
 800afe2:	881b      	ldrh	r3, [r3, #0]
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	202c      	movs	r0, #44	; 0x2c
 800afe8:	183b      	adds	r3, r7, r0
 800afea:	493e      	ldr	r1, [pc, #248]	; (800b0e4 <USB_DeactivateEndpoint+0x368>)
 800afec:	400a      	ands	r2, r1
 800afee:	801a      	strh	r2, [r3, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	18d3      	adds	r3, r2, r3
 800affa:	183a      	adds	r2, r7, r0
 800affc:	8812      	ldrh	r2, [r2, #0]
 800affe:	493d      	ldr	r1, [pc, #244]	; (800b0f4 <USB_DeactivateEndpoint+0x378>)
 800b000:	430a      	orrs	r2, r1
 800b002:	b292      	uxth	r2, r2
 800b004:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	18d2      	adds	r2, r2, r3
 800b010:	212a      	movs	r1, #42	; 0x2a
 800b012:	187b      	adds	r3, r7, r1
 800b014:	8812      	ldrh	r2, [r2, #0]
 800b016:	801a      	strh	r2, [r3, #0]
 800b018:	187b      	adds	r3, r7, r1
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	2240      	movs	r2, #64	; 0x40
 800b01e:	4013      	ands	r3, r2
 800b020:	d016      	beq.n	800b050 <USB_DeactivateEndpoint+0x2d4>
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	18d3      	adds	r3, r2, r3
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	b29a      	uxth	r2, r3
 800b030:	2028      	movs	r0, #40	; 0x28
 800b032:	183b      	adds	r3, r7, r0
 800b034:	492b      	ldr	r1, [pc, #172]	; (800b0e4 <USB_DeactivateEndpoint+0x368>)
 800b036:	400a      	ands	r2, r1
 800b038:	801a      	strh	r2, [r3, #0]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	18d3      	adds	r3, r2, r3
 800b044:	183a      	adds	r2, r7, r0
 800b046:	8812      	ldrh	r2, [r2, #0]
 800b048:	4927      	ldr	r1, [pc, #156]	; (800b0e8 <USB_DeactivateEndpoint+0x36c>)
 800b04a:	430a      	orrs	r2, r1
 800b04c:	b292      	uxth	r2, r2
 800b04e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	18d3      	adds	r3, r2, r3
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	2026      	movs	r0, #38	; 0x26
 800b060:	183b      	adds	r3, r7, r0
 800b062:	4920      	ldr	r1, [pc, #128]	; (800b0e4 <USB_DeactivateEndpoint+0x368>)
 800b064:	400a      	ands	r2, r1
 800b066:	801a      	strh	r2, [r3, #0]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	18d3      	adds	r3, r2, r3
 800b072:	183a      	adds	r2, r7, r0
 800b074:	8812      	ldrh	r2, [r2, #0]
 800b076:	491f      	ldr	r1, [pc, #124]	; (800b0f4 <USB_DeactivateEndpoint+0x378>)
 800b078:	430a      	orrs	r2, r1
 800b07a:	b292      	uxth	r2, r2
 800b07c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	18d3      	adds	r3, r2, r3
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	2024      	movs	r0, #36	; 0x24
 800b08e:	183b      	adds	r3, r7, r0
 800b090:	4916      	ldr	r1, [pc, #88]	; (800b0ec <USB_DeactivateEndpoint+0x370>)
 800b092:	400a      	ands	r2, r1
 800b094:	801a      	strh	r2, [r3, #0]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	18d3      	adds	r3, r2, r3
 800b0a0:	183a      	adds	r2, r7, r0
 800b0a2:	8812      	ldrh	r2, [r2, #0]
 800b0a4:	4912      	ldr	r1, [pc, #72]	; (800b0f0 <USB_DeactivateEndpoint+0x374>)
 800b0a6:	430a      	orrs	r2, r1
 800b0a8:	b292      	uxth	r2, r2
 800b0aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	18d3      	adds	r3, r2, r3
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	2022      	movs	r0, #34	; 0x22
 800b0bc:	183b      	adds	r3, r7, r0
 800b0be:	490e      	ldr	r1, [pc, #56]	; (800b0f8 <USB_DeactivateEndpoint+0x37c>)
 800b0c0:	400a      	ands	r2, r1
 800b0c2:	801a      	strh	r2, [r3, #0]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	18d3      	adds	r3, r2, r3
 800b0ce:	183a      	adds	r2, r7, r0
 800b0d0:	8812      	ldrh	r2, [r2, #0]
 800b0d2:	4907      	ldr	r1, [pc, #28]	; (800b0f0 <USB_DeactivateEndpoint+0x374>)
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	b292      	uxth	r2, r2
 800b0d8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	0018      	movs	r0, r3
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	b00c      	add	sp, #48	; 0x30
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	ffff8f8f 	.word	0xffff8f8f
 800b0e8:	ffff80c0 	.word	0xffff80c0
 800b0ec:	ffff8fbf 	.word	0xffff8fbf
 800b0f0:	ffff8080 	.word	0xffff8080
 800b0f4:	ffffc080 	.word	0xffffc080
 800b0f8:	ffffbf8f 	.word	0xffffbf8f

0800b0fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0fc:	b590      	push	{r4, r7, lr}
 800b0fe:	b0c3      	sub	sp, #268	; 0x10c
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	785b      	ldrb	r3, [r3, #1]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d001      	beq.n	800b112 <USB_EPStartXfer+0x16>
 800b10e:	f000 fd2d 	bl	800bb6c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	699a      	ldr	r2, [r3, #24]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d905      	bls.n	800b12a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	1d7a      	adds	r2, r7, #5
 800b124:	32ff      	adds	r2, #255	; 0xff
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	e004      	b.n	800b134 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	1d7a      	adds	r2, r7, #5
 800b130:	32ff      	adds	r2, #255	; 0xff
 800b132:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	7b1b      	ldrb	r3, [r3, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d125      	bne.n	800b188 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	6959      	ldr	r1, [r3, #20]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	88da      	ldrh	r2, [r3, #6]
 800b144:	1d7b      	adds	r3, r7, #5
 800b146:	33ff      	adds	r3, #255	; 0xff
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 fa47 	bl	800c5e0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	613b      	str	r3, [r7, #16]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2250      	movs	r2, #80	; 0x50
 800b15a:	5a9b      	ldrh	r3, [r3, r2]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	001a      	movs	r2, r3
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	189b      	adds	r3, r3, r2
 800b164:	613b      	str	r3, [r7, #16]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	00da      	lsls	r2, r3, #3
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	18d3      	adds	r3, r2, r3
 800b170:	4ad7      	ldr	r2, [pc, #860]	; (800b4d0 <USB_EPStartXfer+0x3d4>)
 800b172:	4694      	mov	ip, r2
 800b174:	4463      	add	r3, ip
 800b176:	60fb      	str	r3, [r7, #12]
 800b178:	1d7b      	adds	r3, r7, #5
 800b17a:	33ff      	adds	r3, #255	; 0xff
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	b29a      	uxth	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	801a      	strh	r2, [r3, #0]
 800b184:	f000 fccd 	bl	800bb22 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	78db      	ldrb	r3, [r3, #3]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d000      	beq.n	800b192 <USB_EPStartXfer+0x96>
 800b190:	e362      	b.n	800b858 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6a1a      	ldr	r2, [r3, #32]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d800      	bhi.n	800b1a0 <USB_EPStartXfer+0xa4>
 800b19e:	e309      	b.n	800b7b4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	18d3      	adds	r3, r2, r3
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	2056      	movs	r0, #86	; 0x56
 800b1b0:	183b      	adds	r3, r7, r0
 800b1b2:	49c8      	ldr	r1, [pc, #800]	; (800b4d4 <USB_EPStartXfer+0x3d8>)
 800b1b4:	400a      	ands	r2, r1
 800b1b6:	801a      	strh	r2, [r3, #0]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	18d3      	adds	r3, r2, r3
 800b1c2:	183a      	adds	r2, r7, r0
 800b1c4:	8812      	ldrh	r2, [r2, #0]
 800b1c6:	49c4      	ldr	r1, [pc, #784]	; (800b4d8 <USB_EPStartXfer+0x3dc>)
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	b292      	uxth	r2, r2
 800b1cc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	6a1a      	ldr	r2, [r3, #32]
 800b1d2:	1d7b      	adds	r3, r7, #5
 800b1d4:	33ff      	adds	r3, #255	; 0xff
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	1ad2      	subs	r2, r2, r3
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	18d3      	adds	r3, r2, r3
 800b1e8:	881b      	ldrh	r3, [r3, #0]
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	001a      	movs	r2, r3
 800b1ee:	2340      	movs	r3, #64	; 0x40
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	d100      	bne.n	800b1f6 <USB_EPStartXfer+0xfa>
 800b1f4:	e176      	b.n	800b4e4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	633b      	str	r3, [r7, #48]	; 0x30
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	785b      	ldrb	r3, [r3, #1]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d000      	beq.n	800b204 <USB_EPStartXfer+0x108>
 800b202:	e074      	b.n	800b2ee <USB_EPStartXfer+0x1f2>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	62bb      	str	r3, [r7, #40]	; 0x28
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2250      	movs	r2, #80	; 0x50
 800b20c:	5a9b      	ldrh	r3, [r3, r2]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	001a      	movs	r2, r3
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	189b      	adds	r3, r3, r2
 800b216:	62bb      	str	r3, [r7, #40]	; 0x28
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	00da      	lsls	r2, r3, #3
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	18d3      	adds	r3, r2, r3
 800b222:	4aae      	ldr	r2, [pc, #696]	; (800b4dc <USB_EPStartXfer+0x3e0>)
 800b224:	4694      	mov	ip, r2
 800b226:	4463      	add	r3, ip
 800b228:	627b      	str	r3, [r7, #36]	; 0x24
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	b29b      	uxth	r3, r3
 800b230:	059b      	lsls	r3, r3, #22
 800b232:	0d9b      	lsrs	r3, r3, #22
 800b234:	b29a      	uxth	r2, r3
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	801a      	strh	r2, [r3, #0]
 800b23a:	1d7b      	adds	r3, r7, #5
 800b23c:	33ff      	adds	r3, #255	; 0xff
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b3e      	cmp	r3, #62	; 0x3e
 800b242:	d924      	bls.n	800b28e <USB_EPStartXfer+0x192>
 800b244:	1d7b      	adds	r3, r7, #5
 800b246:	33ff      	adds	r3, #255	; 0xff
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	095b      	lsrs	r3, r3, #5
 800b24c:	1c7a      	adds	r2, r7, #1
 800b24e:	32ff      	adds	r2, #255	; 0xff
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	1d7b      	adds	r3, r7, #5
 800b254:	33ff      	adds	r3, #255	; 0xff
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	221f      	movs	r2, #31
 800b25a:	4013      	ands	r3, r2
 800b25c:	d106      	bne.n	800b26c <USB_EPStartXfer+0x170>
 800b25e:	1c7b      	adds	r3, r7, #1
 800b260:	33ff      	adds	r3, #255	; 0xff
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3b01      	subs	r3, #1
 800b266:	1c7a      	adds	r2, r7, #1
 800b268:	32ff      	adds	r2, #255	; 0xff
 800b26a:	6013      	str	r3, [r2, #0]
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	881b      	ldrh	r3, [r3, #0]
 800b270:	b29a      	uxth	r2, r3
 800b272:	1c7b      	adds	r3, r7, #1
 800b274:	33ff      	adds	r3, #255	; 0xff
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	029b      	lsls	r3, r3, #10
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	4313      	orrs	r3, r2
 800b280:	b29b      	uxth	r3, r3
 800b282:	4a97      	ldr	r2, [pc, #604]	; (800b4e0 <USB_EPStartXfer+0x3e4>)
 800b284:	4313      	orrs	r3, r2
 800b286:	b29a      	uxth	r2, r3
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	801a      	strh	r2, [r3, #0]
 800b28c:	e04a      	b.n	800b324 <USB_EPStartXfer+0x228>
 800b28e:	1d7b      	adds	r3, r7, #5
 800b290:	33ff      	adds	r3, #255	; 0xff
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d108      	bne.n	800b2aa <USB_EPStartXfer+0x1ae>
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	881b      	ldrh	r3, [r3, #0]
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	4a90      	ldr	r2, [pc, #576]	; (800b4e0 <USB_EPStartXfer+0x3e4>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	801a      	strh	r2, [r3, #0]
 800b2a8:	e03c      	b.n	800b324 <USB_EPStartXfer+0x228>
 800b2aa:	1d7b      	adds	r3, r7, #5
 800b2ac:	33ff      	adds	r3, #255	; 0xff
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	085b      	lsrs	r3, r3, #1
 800b2b2:	1c7a      	adds	r2, r7, #1
 800b2b4:	32ff      	adds	r2, #255	; 0xff
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	1d7b      	adds	r3, r7, #5
 800b2ba:	33ff      	adds	r3, #255	; 0xff
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	d006      	beq.n	800b2d2 <USB_EPStartXfer+0x1d6>
 800b2c4:	1c7b      	adds	r3, r7, #1
 800b2c6:	33ff      	adds	r3, #255	; 0xff
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	1c7a      	adds	r2, r7, #1
 800b2ce:	32ff      	adds	r2, #255	; 0xff
 800b2d0:	6013      	str	r3, [r2, #0]
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	1c7b      	adds	r3, r7, #1
 800b2da:	33ff      	adds	r3, #255	; 0xff
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	029b      	lsls	r3, r3, #10
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	801a      	strh	r2, [r3, #0]
 800b2ec:	e01a      	b.n	800b324 <USB_EPStartXfer+0x228>
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	785b      	ldrb	r3, [r3, #1]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d116      	bne.n	800b324 <USB_EPStartXfer+0x228>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2250      	movs	r2, #80	; 0x50
 800b2fa:	5a9b      	ldrh	r3, [r3, r2]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	001a      	movs	r2, r3
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	189b      	adds	r3, r3, r2
 800b304:	633b      	str	r3, [r7, #48]	; 0x30
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	00da      	lsls	r2, r3, #3
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	18d3      	adds	r3, r2, r3
 800b310:	4a72      	ldr	r2, [pc, #456]	; (800b4dc <USB_EPStartXfer+0x3e0>)
 800b312:	4694      	mov	ip, r2
 800b314:	4463      	add	r3, ip
 800b316:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b318:	1d7b      	adds	r3, r7, #5
 800b31a:	33ff      	adds	r3, #255	; 0xff
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	b29a      	uxth	r2, r3
 800b320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b322:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b324:	2076      	movs	r0, #118	; 0x76
 800b326:	183b      	adds	r3, r7, r0
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	8952      	ldrh	r2, [r2, #10]
 800b32c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	6959      	ldr	r1, [r3, #20]
 800b332:	1d7b      	adds	r3, r7, #5
 800b334:	33ff      	adds	r3, #255	; 0xff
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	b29c      	uxth	r4, r3
 800b33a:	183b      	adds	r3, r7, r0
 800b33c:	881a      	ldrh	r2, [r3, #0]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	0023      	movs	r3, r4
 800b342:	f001 f94d 	bl	800c5e0 <USB_WritePMA>
            ep->xfer_buff += len;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	695a      	ldr	r2, [r3, #20]
 800b34a:	1d7b      	adds	r3, r7, #5
 800b34c:	33ff      	adds	r3, #255	; 0xff
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	18d2      	adds	r2, r2, r3
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	6a1a      	ldr	r2, [r3, #32]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d908      	bls.n	800b374 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	6a1a      	ldr	r2, [r3, #32]
 800b366:	1d7b      	adds	r3, r7, #5
 800b368:	33ff      	adds	r3, #255	; 0xff
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	1ad2      	subs	r2, r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	621a      	str	r2, [r3, #32]
 800b372:	e007      	b.n	800b384 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	6a1b      	ldr	r3, [r3, #32]
 800b378:	1d7a      	adds	r2, r7, #5
 800b37a:	32ff      	adds	r2, #255	; 0xff
 800b37c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2200      	movs	r2, #0
 800b382:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	785b      	ldrb	r3, [r3, #1]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d000      	beq.n	800b38e <USB_EPStartXfer+0x292>
 800b38c:	e070      	b.n	800b470 <USB_EPStartXfer+0x374>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	61bb      	str	r3, [r7, #24]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2250      	movs	r2, #80	; 0x50
 800b396:	5a9b      	ldrh	r3, [r3, r2]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	001a      	movs	r2, r3
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	189b      	adds	r3, r3, r2
 800b3a0:	61bb      	str	r3, [r7, #24]
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	00da      	lsls	r2, r3, #3
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	18d3      	adds	r3, r2, r3
 800b3ac:	4a48      	ldr	r2, [pc, #288]	; (800b4d0 <USB_EPStartXfer+0x3d4>)
 800b3ae:	4694      	mov	ip, r2
 800b3b0:	4463      	add	r3, ip
 800b3b2:	617b      	str	r3, [r7, #20]
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	059b      	lsls	r3, r3, #22
 800b3bc:	0d9b      	lsrs	r3, r3, #22
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	801a      	strh	r2, [r3, #0]
 800b3c4:	1d7b      	adds	r3, r7, #5
 800b3c6:	33ff      	adds	r3, #255	; 0xff
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b3e      	cmp	r3, #62	; 0x3e
 800b3cc:	d922      	bls.n	800b414 <USB_EPStartXfer+0x318>
 800b3ce:	1d7b      	adds	r3, r7, #5
 800b3d0:	33ff      	adds	r3, #255	; 0xff
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	095b      	lsrs	r3, r3, #5
 800b3d6:	21fc      	movs	r1, #252	; 0xfc
 800b3d8:	187a      	adds	r2, r7, r1
 800b3da:	6013      	str	r3, [r2, #0]
 800b3dc:	1d7b      	adds	r3, r7, #5
 800b3de:	33ff      	adds	r3, #255	; 0xff
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	221f      	movs	r2, #31
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	d104      	bne.n	800b3f2 <USB_EPStartXfer+0x2f6>
 800b3e8:	187b      	adds	r3, r7, r1
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	187a      	adds	r2, r7, r1
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	b29a      	uxth	r2, r3
 800b3f8:	23fc      	movs	r3, #252	; 0xfc
 800b3fa:	18fb      	adds	r3, r7, r3
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	029b      	lsls	r3, r3, #10
 800b402:	b29b      	uxth	r3, r3
 800b404:	4313      	orrs	r3, r2
 800b406:	b29b      	uxth	r3, r3
 800b408:	4a35      	ldr	r2, [pc, #212]	; (800b4e0 <USB_EPStartXfer+0x3e4>)
 800b40a:	4313      	orrs	r3, r2
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	801a      	strh	r2, [r3, #0]
 800b412:	e04a      	b.n	800b4aa <USB_EPStartXfer+0x3ae>
 800b414:	1d7b      	adds	r3, r7, #5
 800b416:	33ff      	adds	r3, #255	; 0xff
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d108      	bne.n	800b430 <USB_EPStartXfer+0x334>
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	b29b      	uxth	r3, r3
 800b424:	4a2e      	ldr	r2, [pc, #184]	; (800b4e0 <USB_EPStartXfer+0x3e4>)
 800b426:	4313      	orrs	r3, r2
 800b428:	b29a      	uxth	r2, r3
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	801a      	strh	r2, [r3, #0]
 800b42e:	e03c      	b.n	800b4aa <USB_EPStartXfer+0x3ae>
 800b430:	1d7b      	adds	r3, r7, #5
 800b432:	33ff      	adds	r3, #255	; 0xff
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	085b      	lsrs	r3, r3, #1
 800b438:	21fc      	movs	r1, #252	; 0xfc
 800b43a:	187a      	adds	r2, r7, r1
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	1d7b      	adds	r3, r7, #5
 800b440:	33ff      	adds	r3, #255	; 0xff
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2201      	movs	r2, #1
 800b446:	4013      	ands	r3, r2
 800b448:	d004      	beq.n	800b454 <USB_EPStartXfer+0x358>
 800b44a:	187b      	adds	r3, r7, r1
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3301      	adds	r3, #1
 800b450:	187a      	adds	r2, r7, r1
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	b29a      	uxth	r2, r3
 800b45a:	23fc      	movs	r3, #252	; 0xfc
 800b45c:	18fb      	adds	r3, r7, r3
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	b29b      	uxth	r3, r3
 800b462:	029b      	lsls	r3, r3, #10
 800b464:	b29b      	uxth	r3, r3
 800b466:	4313      	orrs	r3, r2
 800b468:	b29a      	uxth	r2, r3
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	801a      	strh	r2, [r3, #0]
 800b46e:	e01c      	b.n	800b4aa <USB_EPStartXfer+0x3ae>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	785b      	ldrb	r3, [r3, #1]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d118      	bne.n	800b4aa <USB_EPStartXfer+0x3ae>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	623b      	str	r3, [r7, #32]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2250      	movs	r2, #80	; 0x50
 800b480:	5a9b      	ldrh	r3, [r3, r2]
 800b482:	b29b      	uxth	r3, r3
 800b484:	001a      	movs	r2, r3
 800b486:	6a3b      	ldr	r3, [r7, #32]
 800b488:	189b      	adds	r3, r3, r2
 800b48a:	623b      	str	r3, [r7, #32]
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	00da      	lsls	r2, r3, #3
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	18d3      	adds	r3, r2, r3
 800b496:	4a0e      	ldr	r2, [pc, #56]	; (800b4d0 <USB_EPStartXfer+0x3d4>)
 800b498:	4694      	mov	ip, r2
 800b49a:	4463      	add	r3, ip
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	1d7b      	adds	r3, r7, #5
 800b4a0:	33ff      	adds	r3, #255	; 0xff
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b4aa:	2076      	movs	r0, #118	; 0x76
 800b4ac:	183b      	adds	r3, r7, r0
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	8912      	ldrh	r2, [r2, #8]
 800b4b2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	6959      	ldr	r1, [r3, #20]
 800b4b8:	1d7b      	adds	r3, r7, #5
 800b4ba:	33ff      	adds	r3, #255	; 0xff
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	b29c      	uxth	r4, r3
 800b4c0:	183b      	adds	r3, r7, r0
 800b4c2:	881a      	ldrh	r2, [r3, #0]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	0023      	movs	r3, r4
 800b4c8:	f001 f88a 	bl	800c5e0 <USB_WritePMA>
 800b4cc:	e329      	b.n	800bb22 <USB_EPStartXfer+0xa26>
 800b4ce:	46c0      	nop			; (mov r8, r8)
 800b4d0:	00000402 	.word	0x00000402
 800b4d4:	ffff8f8f 	.word	0xffff8f8f
 800b4d8:	ffff8180 	.word	0xffff8180
 800b4dc:	00000406 	.word	0x00000406
 800b4e0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	785b      	ldrb	r3, [r3, #1]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d000      	beq.n	800b4ee <USB_EPStartXfer+0x3f2>
 800b4ec:	e070      	b.n	800b5d0 <USB_EPStartXfer+0x4d4>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2250      	movs	r2, #80	; 0x50
 800b4f6:	5a9b      	ldrh	r3, [r3, r2]
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	001a      	movs	r2, r3
 800b4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4fe:	189b      	adds	r3, r3, r2
 800b500:	64bb      	str	r3, [r7, #72]	; 0x48
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	00da      	lsls	r2, r3, #3
 800b508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b50a:	18d3      	adds	r3, r2, r3
 800b50c:	4acd      	ldr	r2, [pc, #820]	; (800b844 <USB_EPStartXfer+0x748>)
 800b50e:	4694      	mov	ip, r2
 800b510:	4463      	add	r3, ip
 800b512:	647b      	str	r3, [r7, #68]	; 0x44
 800b514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	059b      	lsls	r3, r3, #22
 800b51c:	0d9b      	lsrs	r3, r3, #22
 800b51e:	b29a      	uxth	r2, r3
 800b520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b522:	801a      	strh	r2, [r3, #0]
 800b524:	1d7b      	adds	r3, r7, #5
 800b526:	33ff      	adds	r3, #255	; 0xff
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b3e      	cmp	r3, #62	; 0x3e
 800b52c:	d922      	bls.n	800b574 <USB_EPStartXfer+0x478>
 800b52e:	1d7b      	adds	r3, r7, #5
 800b530:	33ff      	adds	r3, #255	; 0xff
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	095b      	lsrs	r3, r3, #5
 800b536:	21f8      	movs	r1, #248	; 0xf8
 800b538:	187a      	adds	r2, r7, r1
 800b53a:	6013      	str	r3, [r2, #0]
 800b53c:	1d7b      	adds	r3, r7, #5
 800b53e:	33ff      	adds	r3, #255	; 0xff
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	221f      	movs	r2, #31
 800b544:	4013      	ands	r3, r2
 800b546:	d104      	bne.n	800b552 <USB_EPStartXfer+0x456>
 800b548:	187b      	adds	r3, r7, r1
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	187a      	adds	r2, r7, r1
 800b550:	6013      	str	r3, [r2, #0]
 800b552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	b29a      	uxth	r2, r3
 800b558:	23f8      	movs	r3, #248	; 0xf8
 800b55a:	18fb      	adds	r3, r7, r3
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	029b      	lsls	r3, r3, #10
 800b562:	b29b      	uxth	r3, r3
 800b564:	4313      	orrs	r3, r2
 800b566:	b29b      	uxth	r3, r3
 800b568:	4ab7      	ldr	r2, [pc, #732]	; (800b848 <USB_EPStartXfer+0x74c>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b570:	801a      	strh	r2, [r3, #0]
 800b572:	e04a      	b.n	800b60a <USB_EPStartXfer+0x50e>
 800b574:	1d7b      	adds	r3, r7, #5
 800b576:	33ff      	adds	r3, #255	; 0xff
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d108      	bne.n	800b590 <USB_EPStartXfer+0x494>
 800b57e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	b29b      	uxth	r3, r3
 800b584:	4ab0      	ldr	r2, [pc, #704]	; (800b848 <USB_EPStartXfer+0x74c>)
 800b586:	4313      	orrs	r3, r2
 800b588:	b29a      	uxth	r2, r3
 800b58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b58c:	801a      	strh	r2, [r3, #0]
 800b58e:	e03c      	b.n	800b60a <USB_EPStartXfer+0x50e>
 800b590:	1d7b      	adds	r3, r7, #5
 800b592:	33ff      	adds	r3, #255	; 0xff
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	085b      	lsrs	r3, r3, #1
 800b598:	21f8      	movs	r1, #248	; 0xf8
 800b59a:	187a      	adds	r2, r7, r1
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	1d7b      	adds	r3, r7, #5
 800b5a0:	33ff      	adds	r3, #255	; 0xff
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	d004      	beq.n	800b5b4 <USB_EPStartXfer+0x4b8>
 800b5aa:	187b      	adds	r3, r7, r1
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	187a      	adds	r2, r7, r1
 800b5b2:	6013      	str	r3, [r2, #0]
 800b5b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	23f8      	movs	r3, #248	; 0xf8
 800b5bc:	18fb      	adds	r3, r7, r3
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	029b      	lsls	r3, r3, #10
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5cc:	801a      	strh	r2, [r3, #0]
 800b5ce:	e01c      	b.n	800b60a <USB_EPStartXfer+0x50e>
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	785b      	ldrb	r3, [r3, #1]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d118      	bne.n	800b60a <USB_EPStartXfer+0x50e>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	653b      	str	r3, [r7, #80]	; 0x50
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2250      	movs	r2, #80	; 0x50
 800b5e0:	5a9b      	ldrh	r3, [r3, r2]
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	001a      	movs	r2, r3
 800b5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5e8:	189b      	adds	r3, r3, r2
 800b5ea:	653b      	str	r3, [r7, #80]	; 0x50
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	00da      	lsls	r2, r3, #3
 800b5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f4:	18d3      	adds	r3, r2, r3
 800b5f6:	4a93      	ldr	r2, [pc, #588]	; (800b844 <USB_EPStartXfer+0x748>)
 800b5f8:	4694      	mov	ip, r2
 800b5fa:	4463      	add	r3, ip
 800b5fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5fe:	1d7b      	adds	r3, r7, #5
 800b600:	33ff      	adds	r3, #255	; 0xff
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	b29a      	uxth	r2, r3
 800b606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b608:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b60a:	2076      	movs	r0, #118	; 0x76
 800b60c:	183b      	adds	r3, r7, r0
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	8912      	ldrh	r2, [r2, #8]
 800b612:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	6959      	ldr	r1, [r3, #20]
 800b618:	1d7b      	adds	r3, r7, #5
 800b61a:	33ff      	adds	r3, #255	; 0xff
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	b29c      	uxth	r4, r3
 800b620:	183b      	adds	r3, r7, r0
 800b622:	881a      	ldrh	r2, [r3, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	0023      	movs	r3, r4
 800b628:	f000 ffda 	bl	800c5e0 <USB_WritePMA>
            ep->xfer_buff += len;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	695a      	ldr	r2, [r3, #20]
 800b630:	1d7b      	adds	r3, r7, #5
 800b632:	33ff      	adds	r3, #255	; 0xff
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	18d2      	adds	r2, r2, r3
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	6a1a      	ldr	r2, [r3, #32]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	429a      	cmp	r2, r3
 800b646:	d908      	bls.n	800b65a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	6a1a      	ldr	r2, [r3, #32]
 800b64c:	1d7b      	adds	r3, r7, #5
 800b64e:	33ff      	adds	r3, #255	; 0xff
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	1ad2      	subs	r2, r2, r3
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	621a      	str	r2, [r3, #32]
 800b658:	e007      	b.n	800b66a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	1d7a      	adds	r2, r7, #5
 800b660:	32ff      	adds	r2, #255	; 0xff
 800b662:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2200      	movs	r2, #0
 800b668:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	643b      	str	r3, [r7, #64]	; 0x40
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	785b      	ldrb	r3, [r3, #1]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d000      	beq.n	800b678 <USB_EPStartXfer+0x57c>
 800b676:	e070      	b.n	800b75a <USB_EPStartXfer+0x65e>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2250      	movs	r2, #80	; 0x50
 800b680:	5a9b      	ldrh	r3, [r3, r2]
 800b682:	b29b      	uxth	r3, r3
 800b684:	001a      	movs	r2, r3
 800b686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b688:	189b      	adds	r3, r3, r2
 800b68a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	00da      	lsls	r2, r3, #3
 800b692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b694:	18d3      	adds	r3, r2, r3
 800b696:	4a6d      	ldr	r2, [pc, #436]	; (800b84c <USB_EPStartXfer+0x750>)
 800b698:	4694      	mov	ip, r2
 800b69a:	4463      	add	r3, ip
 800b69c:	637b      	str	r3, [r7, #52]	; 0x34
 800b69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	059b      	lsls	r3, r3, #22
 800b6a6:	0d9b      	lsrs	r3, r3, #22
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ac:	801a      	strh	r2, [r3, #0]
 800b6ae:	1d7b      	adds	r3, r7, #5
 800b6b0:	33ff      	adds	r3, #255	; 0xff
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b3e      	cmp	r3, #62	; 0x3e
 800b6b6:	d922      	bls.n	800b6fe <USB_EPStartXfer+0x602>
 800b6b8:	1d7b      	adds	r3, r7, #5
 800b6ba:	33ff      	adds	r3, #255	; 0xff
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	095b      	lsrs	r3, r3, #5
 800b6c0:	21f4      	movs	r1, #244	; 0xf4
 800b6c2:	187a      	adds	r2, r7, r1
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	1d7b      	adds	r3, r7, #5
 800b6c8:	33ff      	adds	r3, #255	; 0xff
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	221f      	movs	r2, #31
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	d104      	bne.n	800b6dc <USB_EPStartXfer+0x5e0>
 800b6d2:	187b      	adds	r3, r7, r1
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	187a      	adds	r2, r7, r1
 800b6da:	6013      	str	r3, [r2, #0]
 800b6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6de:	881b      	ldrh	r3, [r3, #0]
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	23f4      	movs	r3, #244	; 0xf4
 800b6e4:	18fb      	adds	r3, r7, r3
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	029b      	lsls	r3, r3, #10
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	4a55      	ldr	r2, [pc, #340]	; (800b848 <USB_EPStartXfer+0x74c>)
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	801a      	strh	r2, [r3, #0]
 800b6fc:	e048      	b.n	800b790 <USB_EPStartXfer+0x694>
 800b6fe:	1d7b      	adds	r3, r7, #5
 800b700:	33ff      	adds	r3, #255	; 0xff
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d108      	bne.n	800b71a <USB_EPStartXfer+0x61e>
 800b708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	4a4e      	ldr	r2, [pc, #312]	; (800b848 <USB_EPStartXfer+0x74c>)
 800b710:	4313      	orrs	r3, r2
 800b712:	b29a      	uxth	r2, r3
 800b714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b716:	801a      	strh	r2, [r3, #0]
 800b718:	e03a      	b.n	800b790 <USB_EPStartXfer+0x694>
 800b71a:	1d7b      	adds	r3, r7, #5
 800b71c:	33ff      	adds	r3, #255	; 0xff
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	085b      	lsrs	r3, r3, #1
 800b722:	21f4      	movs	r1, #244	; 0xf4
 800b724:	187a      	adds	r2, r7, r1
 800b726:	6013      	str	r3, [r2, #0]
 800b728:	1d7b      	adds	r3, r7, #5
 800b72a:	33ff      	adds	r3, #255	; 0xff
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2201      	movs	r2, #1
 800b730:	4013      	ands	r3, r2
 800b732:	d004      	beq.n	800b73e <USB_EPStartXfer+0x642>
 800b734:	187b      	adds	r3, r7, r1
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3301      	adds	r3, #1
 800b73a:	187a      	adds	r2, r7, r1
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b740:	881b      	ldrh	r3, [r3, #0]
 800b742:	b29a      	uxth	r2, r3
 800b744:	23f4      	movs	r3, #244	; 0xf4
 800b746:	18fb      	adds	r3, r7, r3
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	029b      	lsls	r3, r3, #10
 800b74e:	b29b      	uxth	r3, r3
 800b750:	4313      	orrs	r3, r2
 800b752:	b29a      	uxth	r2, r3
 800b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b756:	801a      	strh	r2, [r3, #0]
 800b758:	e01a      	b.n	800b790 <USB_EPStartXfer+0x694>
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d116      	bne.n	800b790 <USB_EPStartXfer+0x694>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2250      	movs	r2, #80	; 0x50
 800b766:	5a9b      	ldrh	r3, [r3, r2]
 800b768:	b29b      	uxth	r3, r3
 800b76a:	001a      	movs	r2, r3
 800b76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76e:	189b      	adds	r3, r3, r2
 800b770:	643b      	str	r3, [r7, #64]	; 0x40
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	00da      	lsls	r2, r3, #3
 800b778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b77a:	18d3      	adds	r3, r2, r3
 800b77c:	4a33      	ldr	r2, [pc, #204]	; (800b84c <USB_EPStartXfer+0x750>)
 800b77e:	4694      	mov	ip, r2
 800b780:	4463      	add	r3, ip
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b784:	1d7b      	adds	r3, r7, #5
 800b786:	33ff      	adds	r3, #255	; 0xff
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b78e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b790:	2076      	movs	r0, #118	; 0x76
 800b792:	183b      	adds	r3, r7, r0
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	8952      	ldrh	r2, [r2, #10]
 800b798:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	6959      	ldr	r1, [r3, #20]
 800b79e:	1d7b      	adds	r3, r7, #5
 800b7a0:	33ff      	adds	r3, #255	; 0xff
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	b29c      	uxth	r4, r3
 800b7a6:	183b      	adds	r3, r7, r0
 800b7a8:	881a      	ldrh	r2, [r3, #0]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	0023      	movs	r3, r4
 800b7ae:	f000 ff17 	bl	800c5e0 <USB_WritePMA>
 800b7b2:	e1b6      	b.n	800bb22 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	1d7a      	adds	r2, r7, #5
 800b7ba:	32ff      	adds	r2, #255	; 0xff
 800b7bc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	18d3      	adds	r3, r2, r3
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	2062      	movs	r0, #98	; 0x62
 800b7ce:	183b      	adds	r3, r7, r0
 800b7d0:	491f      	ldr	r1, [pc, #124]	; (800b850 <USB_EPStartXfer+0x754>)
 800b7d2:	400a      	ands	r2, r1
 800b7d4:	801a      	strh	r2, [r3, #0]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	18d3      	adds	r3, r2, r3
 800b7e0:	183a      	adds	r2, r7, r0
 800b7e2:	8812      	ldrh	r2, [r2, #0]
 800b7e4:	491b      	ldr	r1, [pc, #108]	; (800b854 <USB_EPStartXfer+0x758>)
 800b7e6:	430a      	orrs	r2, r1
 800b7e8:	b292      	uxth	r2, r2
 800b7ea:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2250      	movs	r2, #80	; 0x50
 800b7f4:	5a9b      	ldrh	r3, [r3, r2]
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	001a      	movs	r2, r3
 800b7fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7fc:	189b      	adds	r3, r3, r2
 800b7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	00da      	lsls	r2, r3, #3
 800b806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b808:	18d3      	adds	r3, r2, r3
 800b80a:	4a0e      	ldr	r2, [pc, #56]	; (800b844 <USB_EPStartXfer+0x748>)
 800b80c:	4694      	mov	ip, r2
 800b80e:	4463      	add	r3, ip
 800b810:	65bb      	str	r3, [r7, #88]	; 0x58
 800b812:	1d7b      	adds	r3, r7, #5
 800b814:	33ff      	adds	r3, #255	; 0xff
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	b29a      	uxth	r2, r3
 800b81a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b81c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b81e:	2076      	movs	r0, #118	; 0x76
 800b820:	183b      	adds	r3, r7, r0
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	8912      	ldrh	r2, [r2, #8]
 800b826:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	6959      	ldr	r1, [r3, #20]
 800b82c:	1d7b      	adds	r3, r7, #5
 800b82e:	33ff      	adds	r3, #255	; 0xff
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	b29c      	uxth	r4, r3
 800b834:	183b      	adds	r3, r7, r0
 800b836:	881a      	ldrh	r2, [r3, #0]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	0023      	movs	r3, r4
 800b83c:	f000 fed0 	bl	800c5e0 <USB_WritePMA>
 800b840:	e16f      	b.n	800bb22 <USB_EPStartXfer+0xa26>
 800b842:	46c0      	nop			; (mov r8, r8)
 800b844:	00000402 	.word	0x00000402
 800b848:	ffff8000 	.word	0xffff8000
 800b84c:	00000406 	.word	0x00000406
 800b850:	ffff8e8f 	.word	0xffff8e8f
 800b854:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	6a1a      	ldr	r2, [r3, #32]
 800b85c:	1d7b      	adds	r3, r7, #5
 800b85e:	33ff      	adds	r3, #255	; 0xff
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	1ad2      	subs	r2, r2, r3
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	18d3      	adds	r3, r2, r3
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	b29b      	uxth	r3, r3
 800b876:	001a      	movs	r2, r3
 800b878:	2340      	movs	r3, #64	; 0x40
 800b87a:	4013      	ands	r3, r2
 800b87c:	d100      	bne.n	800b880 <USB_EPStartXfer+0x784>
 800b87e:	e0a4      	b.n	800b9ca <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	673b      	str	r3, [r7, #112]	; 0x70
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	785b      	ldrb	r3, [r3, #1]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d000      	beq.n	800b88e <USB_EPStartXfer+0x792>
 800b88c:	e070      	b.n	800b970 <USB_EPStartXfer+0x874>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	66bb      	str	r3, [r7, #104]	; 0x68
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2250      	movs	r2, #80	; 0x50
 800b896:	5a9b      	ldrh	r3, [r3, r2]
 800b898:	b29b      	uxth	r3, r3
 800b89a:	001a      	movs	r2, r3
 800b89c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b89e:	189b      	adds	r3, r3, r2
 800b8a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	00da      	lsls	r2, r3, #3
 800b8a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8aa:	18d3      	adds	r3, r2, r3
 800b8ac:	4abc      	ldr	r2, [pc, #752]	; (800bba0 <USB_EPStartXfer+0xaa4>)
 800b8ae:	4694      	mov	ip, r2
 800b8b0:	4463      	add	r3, ip
 800b8b2:	667b      	str	r3, [r7, #100]	; 0x64
 800b8b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	059b      	lsls	r3, r3, #22
 800b8bc:	0d9b      	lsrs	r3, r3, #22
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8c2:	801a      	strh	r2, [r3, #0]
 800b8c4:	1d7b      	adds	r3, r7, #5
 800b8c6:	33ff      	adds	r3, #255	; 0xff
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b3e      	cmp	r3, #62	; 0x3e
 800b8cc:	d922      	bls.n	800b914 <USB_EPStartXfer+0x818>
 800b8ce:	1d7b      	adds	r3, r7, #5
 800b8d0:	33ff      	adds	r3, #255	; 0xff
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	095b      	lsrs	r3, r3, #5
 800b8d6:	21f0      	movs	r1, #240	; 0xf0
 800b8d8:	187a      	adds	r2, r7, r1
 800b8da:	6013      	str	r3, [r2, #0]
 800b8dc:	1d7b      	adds	r3, r7, #5
 800b8de:	33ff      	adds	r3, #255	; 0xff
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	221f      	movs	r2, #31
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	d104      	bne.n	800b8f2 <USB_EPStartXfer+0x7f6>
 800b8e8:	187b      	adds	r3, r7, r1
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	187a      	adds	r2, r7, r1
 800b8f0:	6013      	str	r3, [r2, #0]
 800b8f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8f4:	881b      	ldrh	r3, [r3, #0]
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	23f0      	movs	r3, #240	; 0xf0
 800b8fa:	18fb      	adds	r3, r7, r3
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	029b      	lsls	r3, r3, #10
 800b902:	b29b      	uxth	r3, r3
 800b904:	4313      	orrs	r3, r2
 800b906:	b29b      	uxth	r3, r3
 800b908:	4aa6      	ldr	r2, [pc, #664]	; (800bba4 <USB_EPStartXfer+0xaa8>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b910:	801a      	strh	r2, [r3, #0]
 800b912:	e048      	b.n	800b9a6 <USB_EPStartXfer+0x8aa>
 800b914:	1d7b      	adds	r3, r7, #5
 800b916:	33ff      	adds	r3, #255	; 0xff
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d108      	bne.n	800b930 <USB_EPStartXfer+0x834>
 800b91e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b920:	881b      	ldrh	r3, [r3, #0]
 800b922:	b29b      	uxth	r3, r3
 800b924:	4a9f      	ldr	r2, [pc, #636]	; (800bba4 <USB_EPStartXfer+0xaa8>)
 800b926:	4313      	orrs	r3, r2
 800b928:	b29a      	uxth	r2, r3
 800b92a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b92c:	801a      	strh	r2, [r3, #0]
 800b92e:	e03a      	b.n	800b9a6 <USB_EPStartXfer+0x8aa>
 800b930:	1d7b      	adds	r3, r7, #5
 800b932:	33ff      	adds	r3, #255	; 0xff
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	085b      	lsrs	r3, r3, #1
 800b938:	21f0      	movs	r1, #240	; 0xf0
 800b93a:	187a      	adds	r2, r7, r1
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	1d7b      	adds	r3, r7, #5
 800b940:	33ff      	adds	r3, #255	; 0xff
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2201      	movs	r2, #1
 800b946:	4013      	ands	r3, r2
 800b948:	d004      	beq.n	800b954 <USB_EPStartXfer+0x858>
 800b94a:	187b      	adds	r3, r7, r1
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3301      	adds	r3, #1
 800b950:	187a      	adds	r2, r7, r1
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	b29a      	uxth	r2, r3
 800b95a:	23f0      	movs	r3, #240	; 0xf0
 800b95c:	18fb      	adds	r3, r7, r3
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	b29b      	uxth	r3, r3
 800b962:	029b      	lsls	r3, r3, #10
 800b964:	b29b      	uxth	r3, r3
 800b966:	4313      	orrs	r3, r2
 800b968:	b29a      	uxth	r2, r3
 800b96a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b96c:	801a      	strh	r2, [r3, #0]
 800b96e:	e01a      	b.n	800b9a6 <USB_EPStartXfer+0x8aa>
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	785b      	ldrb	r3, [r3, #1]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d116      	bne.n	800b9a6 <USB_EPStartXfer+0x8aa>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2250      	movs	r2, #80	; 0x50
 800b97c:	5a9b      	ldrh	r3, [r3, r2]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	001a      	movs	r2, r3
 800b982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b984:	189b      	adds	r3, r3, r2
 800b986:	673b      	str	r3, [r7, #112]	; 0x70
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	00da      	lsls	r2, r3, #3
 800b98e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b990:	18d3      	adds	r3, r2, r3
 800b992:	4a83      	ldr	r2, [pc, #524]	; (800bba0 <USB_EPStartXfer+0xaa4>)
 800b994:	4694      	mov	ip, r2
 800b996:	4463      	add	r3, ip
 800b998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b99a:	1d7b      	adds	r3, r7, #5
 800b99c:	33ff      	adds	r3, #255	; 0xff
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b9a6:	2076      	movs	r0, #118	; 0x76
 800b9a8:	183b      	adds	r3, r7, r0
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	8952      	ldrh	r2, [r2, #10]
 800b9ae:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	6959      	ldr	r1, [r3, #20]
 800b9b4:	1d7b      	adds	r3, r7, #5
 800b9b6:	33ff      	adds	r3, #255	; 0xff
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	b29c      	uxth	r4, r3
 800b9bc:	183b      	adds	r3, r7, r0
 800b9be:	881a      	ldrh	r2, [r3, #0]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	0023      	movs	r3, r4
 800b9c4:	f000 fe0c 	bl	800c5e0 <USB_WritePMA>
 800b9c8:	e0ab      	b.n	800bb22 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	785b      	ldrb	r3, [r3, #1]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d000      	beq.n	800b9d4 <USB_EPStartXfer+0x8d8>
 800b9d2:	e070      	b.n	800bab6 <USB_EPStartXfer+0x9ba>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2250      	movs	r2, #80	; 0x50
 800b9dc:	5a9b      	ldrh	r3, [r3, r2]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	001a      	movs	r2, r3
 800b9e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9e4:	189b      	adds	r3, r3, r2
 800b9e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	00da      	lsls	r2, r3, #3
 800b9ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9f0:	18d3      	adds	r3, r2, r3
 800b9f2:	4a6d      	ldr	r2, [pc, #436]	; (800bba8 <USB_EPStartXfer+0xaac>)
 800b9f4:	4694      	mov	ip, r2
 800b9f6:	4463      	add	r3, ip
 800b9f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	059b      	lsls	r3, r3, #22
 800ba02:	0d9b      	lsrs	r3, r3, #22
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba08:	801a      	strh	r2, [r3, #0]
 800ba0a:	1d7b      	adds	r3, r7, #5
 800ba0c:	33ff      	adds	r3, #255	; 0xff
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b3e      	cmp	r3, #62	; 0x3e
 800ba12:	d922      	bls.n	800ba5a <USB_EPStartXfer+0x95e>
 800ba14:	1d7b      	adds	r3, r7, #5
 800ba16:	33ff      	adds	r3, #255	; 0xff
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	095b      	lsrs	r3, r3, #5
 800ba1c:	21ec      	movs	r1, #236	; 0xec
 800ba1e:	187a      	adds	r2, r7, r1
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	1d7b      	adds	r3, r7, #5
 800ba24:	33ff      	adds	r3, #255	; 0xff
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	221f      	movs	r2, #31
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	d104      	bne.n	800ba38 <USB_EPStartXfer+0x93c>
 800ba2e:	187b      	adds	r3, r7, r1
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3b01      	subs	r3, #1
 800ba34:	187a      	adds	r2, r7, r1
 800ba36:	6013      	str	r3, [r2, #0]
 800ba38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	23ec      	movs	r3, #236	; 0xec
 800ba40:	18fb      	adds	r3, r7, r3
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	029b      	lsls	r3, r3, #10
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	4a55      	ldr	r2, [pc, #340]	; (800bba4 <USB_EPStartXfer+0xaa8>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba56:	801a      	strh	r2, [r3, #0]
 800ba58:	e052      	b.n	800bb00 <USB_EPStartXfer+0xa04>
 800ba5a:	1d7b      	adds	r3, r7, #5
 800ba5c:	33ff      	adds	r3, #255	; 0xff
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d108      	bne.n	800ba76 <USB_EPStartXfer+0x97a>
 800ba64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba66:	881b      	ldrh	r3, [r3, #0]
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	4a4e      	ldr	r2, [pc, #312]	; (800bba4 <USB_EPStartXfer+0xaa8>)
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba72:	801a      	strh	r2, [r3, #0]
 800ba74:	e044      	b.n	800bb00 <USB_EPStartXfer+0xa04>
 800ba76:	1d7b      	adds	r3, r7, #5
 800ba78:	33ff      	adds	r3, #255	; 0xff
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	085b      	lsrs	r3, r3, #1
 800ba7e:	21ec      	movs	r1, #236	; 0xec
 800ba80:	187a      	adds	r2, r7, r1
 800ba82:	6013      	str	r3, [r2, #0]
 800ba84:	1d7b      	adds	r3, r7, #5
 800ba86:	33ff      	adds	r3, #255	; 0xff
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	d004      	beq.n	800ba9a <USB_EPStartXfer+0x99e>
 800ba90:	187b      	adds	r3, r7, r1
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	187a      	adds	r2, r7, r1
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	23ec      	movs	r3, #236	; 0xec
 800baa2:	18fb      	adds	r3, r7, r3
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	029b      	lsls	r3, r3, #10
 800baaa:	b29b      	uxth	r3, r3
 800baac:	4313      	orrs	r3, r2
 800baae:	b29a      	uxth	r2, r3
 800bab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bab2:	801a      	strh	r2, [r3, #0]
 800bab4:	e024      	b.n	800bb00 <USB_EPStartXfer+0xa04>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	785b      	ldrb	r3, [r3, #1]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d120      	bne.n	800bb00 <USB_EPStartXfer+0xa04>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2184      	movs	r1, #132	; 0x84
 800bac2:	187a      	adds	r2, r7, r1
 800bac4:	6013      	str	r3, [r2, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2250      	movs	r2, #80	; 0x50
 800baca:	5a9b      	ldrh	r3, [r3, r2]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	001a      	movs	r2, r3
 800bad0:	187b      	adds	r3, r7, r1
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	189b      	adds	r3, r3, r2
 800bad6:	187a      	adds	r2, r7, r1
 800bad8:	6013      	str	r3, [r2, #0]
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	00da      	lsls	r2, r3, #3
 800bae0:	187b      	adds	r3, r7, r1
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	18d3      	adds	r3, r2, r3
 800bae6:	4a30      	ldr	r2, [pc, #192]	; (800bba8 <USB_EPStartXfer+0xaac>)
 800bae8:	4694      	mov	ip, r2
 800baea:	4463      	add	r3, ip
 800baec:	2180      	movs	r1, #128	; 0x80
 800baee:	187a      	adds	r2, r7, r1
 800baf0:	6013      	str	r3, [r2, #0]
 800baf2:	1d7b      	adds	r3, r7, #5
 800baf4:	33ff      	adds	r3, #255	; 0xff
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	187b      	adds	r3, r7, r1
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bb00:	2076      	movs	r0, #118	; 0x76
 800bb02:	183b      	adds	r3, r7, r0
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	8912      	ldrh	r2, [r2, #8]
 800bb08:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	6959      	ldr	r1, [r3, #20]
 800bb0e:	1d7b      	adds	r3, r7, #5
 800bb10:	33ff      	adds	r3, #255	; 0xff
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	b29c      	uxth	r4, r3
 800bb16:	183b      	adds	r3, r7, r0
 800bb18:	881a      	ldrh	r2, [r3, #0]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	0023      	movs	r3, r4
 800bb1e:	f000 fd5f 	bl	800c5e0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	18d3      	adds	r3, r2, r3
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	200a      	movs	r0, #10
 800bb32:	183b      	adds	r3, r7, r0
 800bb34:	491d      	ldr	r1, [pc, #116]	; (800bbac <USB_EPStartXfer+0xab0>)
 800bb36:	400a      	ands	r2, r1
 800bb38:	801a      	strh	r2, [r3, #0]
 800bb3a:	183b      	adds	r3, r7, r0
 800bb3c:	183a      	adds	r2, r7, r0
 800bb3e:	8812      	ldrh	r2, [r2, #0]
 800bb40:	2110      	movs	r1, #16
 800bb42:	404a      	eors	r2, r1
 800bb44:	801a      	strh	r2, [r3, #0]
 800bb46:	183b      	adds	r3, r7, r0
 800bb48:	183a      	adds	r2, r7, r0
 800bb4a:	8812      	ldrh	r2, [r2, #0]
 800bb4c:	2120      	movs	r1, #32
 800bb4e:	404a      	eors	r2, r1
 800bb50:	801a      	strh	r2, [r3, #0]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	18d3      	adds	r3, r2, r3
 800bb5c:	183a      	adds	r2, r7, r0
 800bb5e:	8812      	ldrh	r2, [r2, #0]
 800bb60:	4913      	ldr	r1, [pc, #76]	; (800bbb0 <USB_EPStartXfer+0xab4>)
 800bb62:	430a      	orrs	r2, r1
 800bb64:	b292      	uxth	r2, r2
 800bb66:	801a      	strh	r2, [r3, #0]
 800bb68:	f000 fbf4 	bl	800c354 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	7b1b      	ldrb	r3, [r3, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d000      	beq.n	800bb76 <USB_EPStartXfer+0xa7a>
 800bb74:	e0a9      	b.n	800bcca <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	699a      	ldr	r2, [r3, #24]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d918      	bls.n	800bbb4 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	1d7a      	adds	r2, r7, #5
 800bb88:	32ff      	adds	r2, #255	; 0xff
 800bb8a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	699a      	ldr	r2, [r3, #24]
 800bb90:	1d7b      	adds	r3, r7, #5
 800bb92:	33ff      	adds	r3, #255	; 0xff
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	1ad2      	subs	r2, r2, r3
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	619a      	str	r2, [r3, #24]
 800bb9c:	e012      	b.n	800bbc4 <USB_EPStartXfer+0xac8>
 800bb9e:	46c0      	nop			; (mov r8, r8)
 800bba0:	00000406 	.word	0x00000406
 800bba4:	ffff8000 	.word	0xffff8000
 800bba8:	00000402 	.word	0x00000402
 800bbac:	ffff8fbf 	.word	0xffff8fbf
 800bbb0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	1d7a      	adds	r2, r7, #5
 800bbba:	32ff      	adds	r2, #255	; 0xff
 800bbbc:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2190      	movs	r1, #144	; 0x90
 800bbc8:	187a      	adds	r2, r7, r1
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2250      	movs	r2, #80	; 0x50
 800bbd0:	5a9b      	ldrh	r3, [r3, r2]
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	001a      	movs	r2, r3
 800bbd6:	187b      	adds	r3, r7, r1
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	189b      	adds	r3, r3, r2
 800bbdc:	187a      	adds	r2, r7, r1
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	00da      	lsls	r2, r3, #3
 800bbe6:	187b      	adds	r3, r7, r1
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	18d3      	adds	r3, r2, r3
 800bbec:	4acf      	ldr	r2, [pc, #828]	; (800bf2c <USB_EPStartXfer+0xe30>)
 800bbee:	4694      	mov	ip, r2
 800bbf0:	4463      	add	r3, ip
 800bbf2:	218c      	movs	r1, #140	; 0x8c
 800bbf4:	187a      	adds	r2, r7, r1
 800bbf6:	6013      	str	r3, [r2, #0]
 800bbf8:	187b      	adds	r3, r7, r1
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	059b      	lsls	r3, r3, #22
 800bc02:	0d9b      	lsrs	r3, r3, #22
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	187b      	adds	r3, r7, r1
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	801a      	strh	r2, [r3, #0]
 800bc0c:	1d7b      	adds	r3, r7, #5
 800bc0e:	33ff      	adds	r3, #255	; 0xff
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b3e      	cmp	r3, #62	; 0x3e
 800bc14:	d925      	bls.n	800bc62 <USB_EPStartXfer+0xb66>
 800bc16:	1d7b      	adds	r3, r7, #5
 800bc18:	33ff      	adds	r3, #255	; 0xff
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	095b      	lsrs	r3, r3, #5
 800bc1e:	21e8      	movs	r1, #232	; 0xe8
 800bc20:	187a      	adds	r2, r7, r1
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	1d7b      	adds	r3, r7, #5
 800bc26:	33ff      	adds	r3, #255	; 0xff
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	221f      	movs	r2, #31
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	d104      	bne.n	800bc3a <USB_EPStartXfer+0xb3e>
 800bc30:	187b      	adds	r3, r7, r1
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3b01      	subs	r3, #1
 800bc36:	187a      	adds	r2, r7, r1
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	218c      	movs	r1, #140	; 0x8c
 800bc3c:	187b      	adds	r3, r7, r1
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	23e8      	movs	r3, #232	; 0xe8
 800bc46:	18fb      	adds	r3, r7, r3
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	029b      	lsls	r3, r3, #10
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	4313      	orrs	r3, r2
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	4ab6      	ldr	r2, [pc, #728]	; (800bf30 <USB_EPStartXfer+0xe34>)
 800bc56:	4313      	orrs	r3, r2
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	187b      	adds	r3, r7, r1
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	801a      	strh	r2, [r3, #0]
 800bc60:	e353      	b.n	800c30a <USB_EPStartXfer+0x120e>
 800bc62:	1d7b      	adds	r3, r7, #5
 800bc64:	33ff      	adds	r3, #255	; 0xff
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10b      	bne.n	800bc84 <USB_EPStartXfer+0xb88>
 800bc6c:	218c      	movs	r1, #140	; 0x8c
 800bc6e:	187b      	adds	r3, r7, r1
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	4aae      	ldr	r2, [pc, #696]	; (800bf30 <USB_EPStartXfer+0xe34>)
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	187b      	adds	r3, r7, r1
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	801a      	strh	r2, [r3, #0]
 800bc82:	e342      	b.n	800c30a <USB_EPStartXfer+0x120e>
 800bc84:	1d7b      	adds	r3, r7, #5
 800bc86:	33ff      	adds	r3, #255	; 0xff
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	085b      	lsrs	r3, r3, #1
 800bc8c:	21e8      	movs	r1, #232	; 0xe8
 800bc8e:	187a      	adds	r2, r7, r1
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	1d7b      	adds	r3, r7, #5
 800bc94:	33ff      	adds	r3, #255	; 0xff
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	4013      	ands	r3, r2
 800bc9c:	d004      	beq.n	800bca8 <USB_EPStartXfer+0xbac>
 800bc9e:	187b      	adds	r3, r7, r1
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3301      	adds	r3, #1
 800bca4:	187a      	adds	r2, r7, r1
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	218c      	movs	r1, #140	; 0x8c
 800bcaa:	187b      	adds	r3, r7, r1
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	23e8      	movs	r3, #232	; 0xe8
 800bcb4:	18fb      	adds	r3, r7, r3
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	029b      	lsls	r3, r3, #10
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	187b      	adds	r3, r7, r1
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	801a      	strh	r2, [r3, #0]
 800bcc8:	e31f      	b.n	800c30a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	78db      	ldrb	r3, [r3, #3]
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d000      	beq.n	800bcd4 <USB_EPStartXfer+0xbd8>
 800bcd2:	e191      	b.n	800bff8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	785b      	ldrb	r3, [r3, #1]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d000      	beq.n	800bcde <USB_EPStartXfer+0xbe2>
 800bcdc:	e07c      	b.n	800bdd8 <USB_EPStartXfer+0xcdc>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	21ac      	movs	r1, #172	; 0xac
 800bce2:	187a      	adds	r2, r7, r1
 800bce4:	6013      	str	r3, [r2, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2250      	movs	r2, #80	; 0x50
 800bcea:	5a9b      	ldrh	r3, [r3, r2]
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	001a      	movs	r2, r3
 800bcf0:	187b      	adds	r3, r7, r1
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	189b      	adds	r3, r3, r2
 800bcf6:	187a      	adds	r2, r7, r1
 800bcf8:	6013      	str	r3, [r2, #0]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	00da      	lsls	r2, r3, #3
 800bd00:	187b      	adds	r3, r7, r1
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	18d3      	adds	r3, r2, r3
 800bd06:	4a8b      	ldr	r2, [pc, #556]	; (800bf34 <USB_EPStartXfer+0xe38>)
 800bd08:	4694      	mov	ip, r2
 800bd0a:	4463      	add	r3, ip
 800bd0c:	21a8      	movs	r1, #168	; 0xa8
 800bd0e:	187a      	adds	r2, r7, r1
 800bd10:	6013      	str	r3, [r2, #0]
 800bd12:	187b      	adds	r3, r7, r1
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	881b      	ldrh	r3, [r3, #0]
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	059b      	lsls	r3, r3, #22
 800bd1c:	0d9b      	lsrs	r3, r3, #22
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	187b      	adds	r3, r7, r1
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	801a      	strh	r2, [r3, #0]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	2b3e      	cmp	r3, #62	; 0x3e
 800bd2c:	d923      	bls.n	800bd76 <USB_EPStartXfer+0xc7a>
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	095b      	lsrs	r3, r3, #5
 800bd34:	21e4      	movs	r1, #228	; 0xe4
 800bd36:	187a      	adds	r2, r7, r1
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	221f      	movs	r2, #31
 800bd40:	4013      	ands	r3, r2
 800bd42:	d104      	bne.n	800bd4e <USB_EPStartXfer+0xc52>
 800bd44:	187b      	adds	r3, r7, r1
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	187a      	adds	r2, r7, r1
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	21a8      	movs	r1, #168	; 0xa8
 800bd50:	187b      	adds	r3, r7, r1
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	23e4      	movs	r3, #228	; 0xe4
 800bd5a:	18fb      	adds	r3, r7, r3
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	029b      	lsls	r3, r3, #10
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	4313      	orrs	r3, r2
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	4a71      	ldr	r2, [pc, #452]	; (800bf30 <USB_EPStartXfer+0xe34>)
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	187b      	adds	r3, r7, r1
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	801a      	strh	r2, [r3, #0]
 800bd74:	e054      	b.n	800be20 <USB_EPStartXfer+0xd24>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10b      	bne.n	800bd96 <USB_EPStartXfer+0xc9a>
 800bd7e:	21a8      	movs	r1, #168	; 0xa8
 800bd80:	187b      	adds	r3, r7, r1
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	881b      	ldrh	r3, [r3, #0]
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	4a69      	ldr	r2, [pc, #420]	; (800bf30 <USB_EPStartXfer+0xe34>)
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	187b      	adds	r3, r7, r1
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	801a      	strh	r2, [r3, #0]
 800bd94:	e044      	b.n	800be20 <USB_EPStartXfer+0xd24>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	085b      	lsrs	r3, r3, #1
 800bd9c:	21e4      	movs	r1, #228	; 0xe4
 800bd9e:	187a      	adds	r2, r7, r1
 800bda0:	6013      	str	r3, [r2, #0]
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	2201      	movs	r2, #1
 800bda8:	4013      	ands	r3, r2
 800bdaa:	d004      	beq.n	800bdb6 <USB_EPStartXfer+0xcba>
 800bdac:	187b      	adds	r3, r7, r1
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	187a      	adds	r2, r7, r1
 800bdb4:	6013      	str	r3, [r2, #0]
 800bdb6:	21a8      	movs	r1, #168	; 0xa8
 800bdb8:	187b      	adds	r3, r7, r1
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	23e4      	movs	r3, #228	; 0xe4
 800bdc2:	18fb      	adds	r3, r7, r3
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	029b      	lsls	r3, r3, #10
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	187b      	adds	r3, r7, r1
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	801a      	strh	r2, [r3, #0]
 800bdd6:	e023      	b.n	800be20 <USB_EPStartXfer+0xd24>
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	785b      	ldrb	r3, [r3, #1]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d11f      	bne.n	800be20 <USB_EPStartXfer+0xd24>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	21b4      	movs	r1, #180	; 0xb4
 800bde4:	187a      	adds	r2, r7, r1
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2250      	movs	r2, #80	; 0x50
 800bdec:	5a9b      	ldrh	r3, [r3, r2]
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	001a      	movs	r2, r3
 800bdf2:	187b      	adds	r3, r7, r1
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	189b      	adds	r3, r3, r2
 800bdf8:	187a      	adds	r2, r7, r1
 800bdfa:	6013      	str	r3, [r2, #0]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	00da      	lsls	r2, r3, #3
 800be02:	187b      	adds	r3, r7, r1
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	18d3      	adds	r3, r2, r3
 800be08:	4a4a      	ldr	r2, [pc, #296]	; (800bf34 <USB_EPStartXfer+0xe38>)
 800be0a:	4694      	mov	ip, r2
 800be0c:	4463      	add	r3, ip
 800be0e:	21b0      	movs	r1, #176	; 0xb0
 800be10:	187a      	adds	r2, r7, r1
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	b29a      	uxth	r2, r3
 800be1a:	187b      	adds	r3, r7, r1
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	801a      	strh	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	22a4      	movs	r2, #164	; 0xa4
 800be24:	18ba      	adds	r2, r7, r2
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	785b      	ldrb	r3, [r3, #1]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d000      	beq.n	800be32 <USB_EPStartXfer+0xd36>
 800be30:	e082      	b.n	800bf38 <USB_EPStartXfer+0xe3c>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	219c      	movs	r1, #156	; 0x9c
 800be36:	187a      	adds	r2, r7, r1
 800be38:	6013      	str	r3, [r2, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2250      	movs	r2, #80	; 0x50
 800be3e:	5a9b      	ldrh	r3, [r3, r2]
 800be40:	b29b      	uxth	r3, r3
 800be42:	001a      	movs	r2, r3
 800be44:	187b      	adds	r3, r7, r1
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	189b      	adds	r3, r3, r2
 800be4a:	187a      	adds	r2, r7, r1
 800be4c:	6013      	str	r3, [r2, #0]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	00da      	lsls	r2, r3, #3
 800be54:	187b      	adds	r3, r7, r1
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	18d3      	adds	r3, r2, r3
 800be5a:	4a34      	ldr	r2, [pc, #208]	; (800bf2c <USB_EPStartXfer+0xe30>)
 800be5c:	4694      	mov	ip, r2
 800be5e:	4463      	add	r3, ip
 800be60:	2198      	movs	r1, #152	; 0x98
 800be62:	187a      	adds	r2, r7, r1
 800be64:	6013      	str	r3, [r2, #0]
 800be66:	187b      	adds	r3, r7, r1
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	059b      	lsls	r3, r3, #22
 800be70:	0d9b      	lsrs	r3, r3, #22
 800be72:	b29a      	uxth	r2, r3
 800be74:	187b      	adds	r3, r7, r1
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	801a      	strh	r2, [r3, #0]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	2b3e      	cmp	r3, #62	; 0x3e
 800be80:	d923      	bls.n	800beca <USB_EPStartXfer+0xdce>
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	095b      	lsrs	r3, r3, #5
 800be88:	21e0      	movs	r1, #224	; 0xe0
 800be8a:	187a      	adds	r2, r7, r1
 800be8c:	6013      	str	r3, [r2, #0]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	221f      	movs	r2, #31
 800be94:	4013      	ands	r3, r2
 800be96:	d104      	bne.n	800bea2 <USB_EPStartXfer+0xda6>
 800be98:	187b      	adds	r3, r7, r1
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	187a      	adds	r2, r7, r1
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	2198      	movs	r1, #152	; 0x98
 800bea4:	187b      	adds	r3, r7, r1
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	b29a      	uxth	r2, r3
 800beac:	23e0      	movs	r3, #224	; 0xe0
 800beae:	18fb      	adds	r3, r7, r3
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	029b      	lsls	r3, r3, #10
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	4313      	orrs	r3, r2
 800beba:	b29b      	uxth	r3, r3
 800bebc:	4a1c      	ldr	r2, [pc, #112]	; (800bf30 <USB_EPStartXfer+0xe34>)
 800bebe:	4313      	orrs	r3, r2
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	187b      	adds	r3, r7, r1
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	801a      	strh	r2, [r3, #0]
 800bec8:	e057      	b.n	800bf7a <USB_EPStartXfer+0xe7e>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10b      	bne.n	800beea <USB_EPStartXfer+0xdee>
 800bed2:	2198      	movs	r1, #152	; 0x98
 800bed4:	187b      	adds	r3, r7, r1
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	b29b      	uxth	r3, r3
 800bedc:	4a14      	ldr	r2, [pc, #80]	; (800bf30 <USB_EPStartXfer+0xe34>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	187b      	adds	r3, r7, r1
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	801a      	strh	r2, [r3, #0]
 800bee8:	e047      	b.n	800bf7a <USB_EPStartXfer+0xe7e>
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	085b      	lsrs	r3, r3, #1
 800bef0:	21e0      	movs	r1, #224	; 0xe0
 800bef2:	187a      	adds	r2, r7, r1
 800bef4:	6013      	str	r3, [r2, #0]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	2201      	movs	r2, #1
 800befc:	4013      	ands	r3, r2
 800befe:	d004      	beq.n	800bf0a <USB_EPStartXfer+0xe0e>
 800bf00:	187b      	adds	r3, r7, r1
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3301      	adds	r3, #1
 800bf06:	187a      	adds	r2, r7, r1
 800bf08:	6013      	str	r3, [r2, #0]
 800bf0a:	2198      	movs	r1, #152	; 0x98
 800bf0c:	187b      	adds	r3, r7, r1
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	881b      	ldrh	r3, [r3, #0]
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	23e0      	movs	r3, #224	; 0xe0
 800bf16:	18fb      	adds	r3, r7, r3
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	029b      	lsls	r3, r3, #10
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	4313      	orrs	r3, r2
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	187b      	adds	r3, r7, r1
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	801a      	strh	r2, [r3, #0]
 800bf2a:	e026      	b.n	800bf7a <USB_EPStartXfer+0xe7e>
 800bf2c:	00000406 	.word	0x00000406
 800bf30:	ffff8000 	.word	0xffff8000
 800bf34:	00000402 	.word	0x00000402
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	785b      	ldrb	r3, [r3, #1]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d11c      	bne.n	800bf7a <USB_EPStartXfer+0xe7e>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2250      	movs	r2, #80	; 0x50
 800bf44:	5a9b      	ldrh	r3, [r3, r2]
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	001a      	movs	r2, r3
 800bf4a:	21a4      	movs	r1, #164	; 0xa4
 800bf4c:	187b      	adds	r3, r7, r1
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	189b      	adds	r3, r3, r2
 800bf52:	187a      	adds	r2, r7, r1
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	00da      	lsls	r2, r3, #3
 800bf5c:	187b      	adds	r3, r7, r1
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	18d3      	adds	r3, r2, r3
 800bf62:	4ad2      	ldr	r2, [pc, #840]	; (800c2ac <USB_EPStartXfer+0x11b0>)
 800bf64:	4694      	mov	ip, r2
 800bf66:	4463      	add	r3, ip
 800bf68:	21a0      	movs	r1, #160	; 0xa0
 800bf6a:	187a      	adds	r2, r7, r1
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	187b      	adds	r3, r7, r1
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d100      	bne.n	800bf84 <USB_EPStartXfer+0xe88>
 800bf82:	e1c2      	b.n	800c30a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	18d2      	adds	r2, r2, r3
 800bf8e:	2196      	movs	r1, #150	; 0x96
 800bf90:	187b      	adds	r3, r7, r1
 800bf92:	8812      	ldrh	r2, [r2, #0]
 800bf94:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bf96:	187b      	adds	r3, r7, r1
 800bf98:	881a      	ldrh	r2, [r3, #0]
 800bf9a:	2380      	movs	r3, #128	; 0x80
 800bf9c:	01db      	lsls	r3, r3, #7
 800bf9e:	4013      	ands	r3, r2
 800bfa0:	d004      	beq.n	800bfac <USB_EPStartXfer+0xeb0>
 800bfa2:	187b      	adds	r3, r7, r1
 800bfa4:	881b      	ldrh	r3, [r3, #0]
 800bfa6:	2240      	movs	r2, #64	; 0x40
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	d10d      	bne.n	800bfc8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bfac:	2196      	movs	r1, #150	; 0x96
 800bfae:	187b      	adds	r3, r7, r1
 800bfb0:	881a      	ldrh	r2, [r3, #0]
 800bfb2:	2380      	movs	r3, #128	; 0x80
 800bfb4:	01db      	lsls	r3, r3, #7
 800bfb6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bfb8:	d000      	beq.n	800bfbc <USB_EPStartXfer+0xec0>
 800bfba:	e1a6      	b.n	800c30a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bfbc:	187b      	adds	r3, r7, r1
 800bfbe:	881b      	ldrh	r3, [r3, #0]
 800bfc0:	2240      	movs	r2, #64	; 0x40
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	d000      	beq.n	800bfc8 <USB_EPStartXfer+0xecc>
 800bfc6:	e1a0      	b.n	800c30a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	18d3      	adds	r3, r2, r3
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	2094      	movs	r0, #148	; 0x94
 800bfd8:	183b      	adds	r3, r7, r0
 800bfda:	49b5      	ldr	r1, [pc, #724]	; (800c2b0 <USB_EPStartXfer+0x11b4>)
 800bfdc:	400a      	ands	r2, r1
 800bfde:	801a      	strh	r2, [r3, #0]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	18d3      	adds	r3, r2, r3
 800bfea:	183a      	adds	r2, r7, r0
 800bfec:	8812      	ldrh	r2, [r2, #0]
 800bfee:	49b1      	ldr	r1, [pc, #708]	; (800c2b4 <USB_EPStartXfer+0x11b8>)
 800bff0:	430a      	orrs	r2, r1
 800bff2:	b292      	uxth	r2, r2
 800bff4:	801a      	strh	r2, [r3, #0]
 800bff6:	e188      	b.n	800c30a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	78db      	ldrb	r3, [r3, #3]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d000      	beq.n	800c002 <USB_EPStartXfer+0xf06>
 800c000:	e181      	b.n	800c306 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	699a      	ldr	r2, [r3, #24]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d90d      	bls.n	800c02a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	1d7a      	adds	r2, r7, #5
 800c014:	32ff      	adds	r2, #255	; 0xff
 800c016:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	699a      	ldr	r2, [r3, #24]
 800c01c:	1d7b      	adds	r3, r7, #5
 800c01e:	33ff      	adds	r3, #255	; 0xff
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	1ad2      	subs	r2, r2, r3
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	619a      	str	r2, [r3, #24]
 800c028:	e007      	b.n	800c03a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	1d7a      	adds	r2, r7, #5
 800c030:	32ff      	adds	r2, #255	; 0xff
 800c032:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	2200      	movs	r2, #0
 800c038:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d000      	beq.n	800c044 <USB_EPStartXfer+0xf48>
 800c042:	e082      	b.n	800c14a <USB_EPStartXfer+0x104e>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	21cc      	movs	r1, #204	; 0xcc
 800c048:	187a      	adds	r2, r7, r1
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2250      	movs	r2, #80	; 0x50
 800c050:	5a9b      	ldrh	r3, [r3, r2]
 800c052:	b29b      	uxth	r3, r3
 800c054:	001a      	movs	r2, r3
 800c056:	187b      	adds	r3, r7, r1
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	189b      	adds	r3, r3, r2
 800c05c:	187a      	adds	r2, r7, r1
 800c05e:	6013      	str	r3, [r2, #0]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	00da      	lsls	r2, r3, #3
 800c066:	187b      	adds	r3, r7, r1
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	18d3      	adds	r3, r2, r3
 800c06c:	4a92      	ldr	r2, [pc, #584]	; (800c2b8 <USB_EPStartXfer+0x11bc>)
 800c06e:	4694      	mov	ip, r2
 800c070:	4463      	add	r3, ip
 800c072:	21c8      	movs	r1, #200	; 0xc8
 800c074:	187a      	adds	r2, r7, r1
 800c076:	6013      	str	r3, [r2, #0]
 800c078:	187b      	adds	r3, r7, r1
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	881b      	ldrh	r3, [r3, #0]
 800c07e:	b29b      	uxth	r3, r3
 800c080:	059b      	lsls	r3, r3, #22
 800c082:	0d9b      	lsrs	r3, r3, #22
 800c084:	b29a      	uxth	r2, r3
 800c086:	187b      	adds	r3, r7, r1
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	801a      	strh	r2, [r3, #0]
 800c08c:	1d7b      	adds	r3, r7, #5
 800c08e:	33ff      	adds	r3, #255	; 0xff
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b3e      	cmp	r3, #62	; 0x3e
 800c094:	d925      	bls.n	800c0e2 <USB_EPStartXfer+0xfe6>
 800c096:	1d7b      	adds	r3, r7, #5
 800c098:	33ff      	adds	r3, #255	; 0xff
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	095b      	lsrs	r3, r3, #5
 800c09e:	21dc      	movs	r1, #220	; 0xdc
 800c0a0:	187a      	adds	r2, r7, r1
 800c0a2:	6013      	str	r3, [r2, #0]
 800c0a4:	1d7b      	adds	r3, r7, #5
 800c0a6:	33ff      	adds	r3, #255	; 0xff
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	221f      	movs	r2, #31
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	d104      	bne.n	800c0ba <USB_EPStartXfer+0xfbe>
 800c0b0:	187b      	adds	r3, r7, r1
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	187a      	adds	r2, r7, r1
 800c0b8:	6013      	str	r3, [r2, #0]
 800c0ba:	21c8      	movs	r1, #200	; 0xc8
 800c0bc:	187b      	adds	r3, r7, r1
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	881b      	ldrh	r3, [r3, #0]
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	23dc      	movs	r3, #220	; 0xdc
 800c0c6:	18fb      	adds	r3, r7, r3
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	029b      	lsls	r3, r3, #10
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	4a79      	ldr	r2, [pc, #484]	; (800c2bc <USB_EPStartXfer+0x11c0>)
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	187b      	adds	r3, r7, r1
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	801a      	strh	r2, [r3, #0]
 800c0e0:	e058      	b.n	800c194 <USB_EPStartXfer+0x1098>
 800c0e2:	1d7b      	adds	r3, r7, #5
 800c0e4:	33ff      	adds	r3, #255	; 0xff
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10b      	bne.n	800c104 <USB_EPStartXfer+0x1008>
 800c0ec:	21c8      	movs	r1, #200	; 0xc8
 800c0ee:	187b      	adds	r3, r7, r1
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	4a71      	ldr	r2, [pc, #452]	; (800c2bc <USB_EPStartXfer+0x11c0>)
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	187b      	adds	r3, r7, r1
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	801a      	strh	r2, [r3, #0]
 800c102:	e047      	b.n	800c194 <USB_EPStartXfer+0x1098>
 800c104:	1d7b      	adds	r3, r7, #5
 800c106:	33ff      	adds	r3, #255	; 0xff
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	085b      	lsrs	r3, r3, #1
 800c10c:	21dc      	movs	r1, #220	; 0xdc
 800c10e:	187a      	adds	r2, r7, r1
 800c110:	6013      	str	r3, [r2, #0]
 800c112:	1d7b      	adds	r3, r7, #5
 800c114:	33ff      	adds	r3, #255	; 0xff
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2201      	movs	r2, #1
 800c11a:	4013      	ands	r3, r2
 800c11c:	d004      	beq.n	800c128 <USB_EPStartXfer+0x102c>
 800c11e:	187b      	adds	r3, r7, r1
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3301      	adds	r3, #1
 800c124:	187a      	adds	r2, r7, r1
 800c126:	6013      	str	r3, [r2, #0]
 800c128:	21c8      	movs	r1, #200	; 0xc8
 800c12a:	187b      	adds	r3, r7, r1
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	881b      	ldrh	r3, [r3, #0]
 800c130:	b29a      	uxth	r2, r3
 800c132:	23dc      	movs	r3, #220	; 0xdc
 800c134:	18fb      	adds	r3, r7, r3
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	b29b      	uxth	r3, r3
 800c13a:	029b      	lsls	r3, r3, #10
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	4313      	orrs	r3, r2
 800c140:	b29a      	uxth	r2, r3
 800c142:	187b      	adds	r3, r7, r1
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	801a      	strh	r2, [r3, #0]
 800c148:	e024      	b.n	800c194 <USB_EPStartXfer+0x1098>
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	785b      	ldrb	r3, [r3, #1]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d120      	bne.n	800c194 <USB_EPStartXfer+0x1098>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	21d4      	movs	r1, #212	; 0xd4
 800c156:	187a      	adds	r2, r7, r1
 800c158:	6013      	str	r3, [r2, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2250      	movs	r2, #80	; 0x50
 800c15e:	5a9b      	ldrh	r3, [r3, r2]
 800c160:	b29b      	uxth	r3, r3
 800c162:	001a      	movs	r2, r3
 800c164:	187b      	adds	r3, r7, r1
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	189b      	adds	r3, r3, r2
 800c16a:	187a      	adds	r2, r7, r1
 800c16c:	6013      	str	r3, [r2, #0]
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	00da      	lsls	r2, r3, #3
 800c174:	187b      	adds	r3, r7, r1
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	18d3      	adds	r3, r2, r3
 800c17a:	4a4f      	ldr	r2, [pc, #316]	; (800c2b8 <USB_EPStartXfer+0x11bc>)
 800c17c:	4694      	mov	ip, r2
 800c17e:	4463      	add	r3, ip
 800c180:	21d0      	movs	r1, #208	; 0xd0
 800c182:	187a      	adds	r2, r7, r1
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	1d7b      	adds	r3, r7, #5
 800c188:	33ff      	adds	r3, #255	; 0xff
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	187b      	adds	r3, r7, r1
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	801a      	strh	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	22c4      	movs	r2, #196	; 0xc4
 800c198:	18ba      	adds	r2, r7, r2
 800c19a:	6013      	str	r3, [r2, #0]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	785b      	ldrb	r3, [r3, #1]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d000      	beq.n	800c1a6 <USB_EPStartXfer+0x10aa>
 800c1a4:	e08c      	b.n	800c2c0 <USB_EPStartXfer+0x11c4>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	21bc      	movs	r1, #188	; 0xbc
 800c1aa:	187a      	adds	r2, r7, r1
 800c1ac:	6013      	str	r3, [r2, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2250      	movs	r2, #80	; 0x50
 800c1b2:	5a9b      	ldrh	r3, [r3, r2]
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	001a      	movs	r2, r3
 800c1b8:	187b      	adds	r3, r7, r1
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	189b      	adds	r3, r3, r2
 800c1be:	187a      	adds	r2, r7, r1
 800c1c0:	6013      	str	r3, [r2, #0]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	00da      	lsls	r2, r3, #3
 800c1c8:	187b      	adds	r3, r7, r1
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	18d3      	adds	r3, r2, r3
 800c1ce:	4a37      	ldr	r2, [pc, #220]	; (800c2ac <USB_EPStartXfer+0x11b0>)
 800c1d0:	4694      	mov	ip, r2
 800c1d2:	4463      	add	r3, ip
 800c1d4:	21b8      	movs	r1, #184	; 0xb8
 800c1d6:	187a      	adds	r2, r7, r1
 800c1d8:	6013      	str	r3, [r2, #0]
 800c1da:	187b      	adds	r3, r7, r1
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	059b      	lsls	r3, r3, #22
 800c1e4:	0d9b      	lsrs	r3, r3, #22
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	187b      	adds	r3, r7, r1
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	801a      	strh	r2, [r3, #0]
 800c1ee:	1d7b      	adds	r3, r7, #5
 800c1f0:	33ff      	adds	r3, #255	; 0xff
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b3e      	cmp	r3, #62	; 0x3e
 800c1f6:	d925      	bls.n	800c244 <USB_EPStartXfer+0x1148>
 800c1f8:	1d7b      	adds	r3, r7, #5
 800c1fa:	33ff      	adds	r3, #255	; 0xff
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	095b      	lsrs	r3, r3, #5
 800c200:	21d8      	movs	r1, #216	; 0xd8
 800c202:	187a      	adds	r2, r7, r1
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	1d7b      	adds	r3, r7, #5
 800c208:	33ff      	adds	r3, #255	; 0xff
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	221f      	movs	r2, #31
 800c20e:	4013      	ands	r3, r2
 800c210:	d104      	bne.n	800c21c <USB_EPStartXfer+0x1120>
 800c212:	187b      	adds	r3, r7, r1
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3b01      	subs	r3, #1
 800c218:	187a      	adds	r2, r7, r1
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	21b8      	movs	r1, #184	; 0xb8
 800c21e:	187b      	adds	r3, r7, r1
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	b29a      	uxth	r2, r3
 800c226:	23d8      	movs	r3, #216	; 0xd8
 800c228:	18fb      	adds	r3, r7, r3
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	029b      	lsls	r3, r3, #10
 800c230:	b29b      	uxth	r3, r3
 800c232:	4313      	orrs	r3, r2
 800c234:	b29b      	uxth	r3, r3
 800c236:	4a21      	ldr	r2, [pc, #132]	; (800c2bc <USB_EPStartXfer+0x11c0>)
 800c238:	4313      	orrs	r3, r2
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	187b      	adds	r3, r7, r1
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	801a      	strh	r2, [r3, #0]
 800c242:	e062      	b.n	800c30a <USB_EPStartXfer+0x120e>
 800c244:	1d7b      	adds	r3, r7, #5
 800c246:	33ff      	adds	r3, #255	; 0xff
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10b      	bne.n	800c266 <USB_EPStartXfer+0x116a>
 800c24e:	21b8      	movs	r1, #184	; 0xb8
 800c250:	187b      	adds	r3, r7, r1
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	b29b      	uxth	r3, r3
 800c258:	4a18      	ldr	r2, [pc, #96]	; (800c2bc <USB_EPStartXfer+0x11c0>)
 800c25a:	4313      	orrs	r3, r2
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	187b      	adds	r3, r7, r1
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	801a      	strh	r2, [r3, #0]
 800c264:	e051      	b.n	800c30a <USB_EPStartXfer+0x120e>
 800c266:	1d7b      	adds	r3, r7, #5
 800c268:	33ff      	adds	r3, #255	; 0xff
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	085b      	lsrs	r3, r3, #1
 800c26e:	21d8      	movs	r1, #216	; 0xd8
 800c270:	187a      	adds	r2, r7, r1
 800c272:	6013      	str	r3, [r2, #0]
 800c274:	1d7b      	adds	r3, r7, #5
 800c276:	33ff      	adds	r3, #255	; 0xff
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2201      	movs	r2, #1
 800c27c:	4013      	ands	r3, r2
 800c27e:	d004      	beq.n	800c28a <USB_EPStartXfer+0x118e>
 800c280:	187b      	adds	r3, r7, r1
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3301      	adds	r3, #1
 800c286:	187a      	adds	r2, r7, r1
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	21b8      	movs	r1, #184	; 0xb8
 800c28c:	187b      	adds	r3, r7, r1
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	b29a      	uxth	r2, r3
 800c294:	23d8      	movs	r3, #216	; 0xd8
 800c296:	18fb      	adds	r3, r7, r3
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	029b      	lsls	r3, r3, #10
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	187b      	adds	r3, r7, r1
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	801a      	strh	r2, [r3, #0]
 800c2aa:	e02e      	b.n	800c30a <USB_EPStartXfer+0x120e>
 800c2ac:	00000406 	.word	0x00000406
 800c2b0:	ffff8f8f 	.word	0xffff8f8f
 800c2b4:	ffff80c0 	.word	0xffff80c0
 800c2b8:	00000402 	.word	0x00000402
 800c2bc:	ffff8000 	.word	0xffff8000
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	785b      	ldrb	r3, [r3, #1]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d120      	bne.n	800c30a <USB_EPStartXfer+0x120e>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2250      	movs	r2, #80	; 0x50
 800c2cc:	5a9b      	ldrh	r3, [r3, r2]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	001a      	movs	r2, r3
 800c2d2:	21c4      	movs	r1, #196	; 0xc4
 800c2d4:	187b      	adds	r3, r7, r1
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	189b      	adds	r3, r3, r2
 800c2da:	187a      	adds	r2, r7, r1
 800c2dc:	6013      	str	r3, [r2, #0]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	00da      	lsls	r2, r3, #3
 800c2e4:	187b      	adds	r3, r7, r1
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	18d3      	adds	r3, r2, r3
 800c2ea:	4a1d      	ldr	r2, [pc, #116]	; (800c360 <USB_EPStartXfer+0x1264>)
 800c2ec:	4694      	mov	ip, r2
 800c2ee:	4463      	add	r3, ip
 800c2f0:	21c0      	movs	r1, #192	; 0xc0
 800c2f2:	187a      	adds	r2, r7, r1
 800c2f4:	6013      	str	r3, [r2, #0]
 800c2f6:	1d7b      	adds	r3, r7, #5
 800c2f8:	33ff      	adds	r3, #255	; 0xff
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	187b      	adds	r3, r7, r1
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	801a      	strh	r2, [r3, #0]
 800c304:	e001      	b.n	800c30a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e025      	b.n	800c356 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	18d3      	adds	r3, r2, r3
 800c314:	881b      	ldrh	r3, [r3, #0]
 800c316:	b29a      	uxth	r2, r3
 800c318:	208a      	movs	r0, #138	; 0x8a
 800c31a:	183b      	adds	r3, r7, r0
 800c31c:	4911      	ldr	r1, [pc, #68]	; (800c364 <USB_EPStartXfer+0x1268>)
 800c31e:	400a      	ands	r2, r1
 800c320:	801a      	strh	r2, [r3, #0]
 800c322:	183b      	adds	r3, r7, r0
 800c324:	183a      	adds	r2, r7, r0
 800c326:	8812      	ldrh	r2, [r2, #0]
 800c328:	2180      	movs	r1, #128	; 0x80
 800c32a:	0149      	lsls	r1, r1, #5
 800c32c:	404a      	eors	r2, r1
 800c32e:	801a      	strh	r2, [r3, #0]
 800c330:	183b      	adds	r3, r7, r0
 800c332:	183a      	adds	r2, r7, r0
 800c334:	8812      	ldrh	r2, [r2, #0]
 800c336:	2180      	movs	r1, #128	; 0x80
 800c338:	0189      	lsls	r1, r1, #6
 800c33a:	404a      	eors	r2, r1
 800c33c:	801a      	strh	r2, [r3, #0]
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	18d3      	adds	r3, r2, r3
 800c348:	183a      	adds	r2, r7, r0
 800c34a:	8812      	ldrh	r2, [r2, #0]
 800c34c:	4906      	ldr	r1, [pc, #24]	; (800c368 <USB_EPStartXfer+0x126c>)
 800c34e:	430a      	orrs	r2, r1
 800c350:	b292      	uxth	r2, r2
 800c352:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	0018      	movs	r0, r3
 800c358:	46bd      	mov	sp, r7
 800c35a:	b043      	add	sp, #268	; 0x10c
 800c35c:	bd90      	pop	{r4, r7, pc}
 800c35e:	46c0      	nop			; (mov r8, r8)
 800c360:	00000406 	.word	0x00000406
 800c364:	ffffbf8f 	.word	0xffffbf8f
 800c368:	ffff8080 	.word	0xffff8080

0800c36c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	785b      	ldrb	r3, [r3, #1]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d01d      	beq.n	800c3ba <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	18d3      	adds	r3, r2, r3
 800c388:	881b      	ldrh	r3, [r3, #0]
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	200c      	movs	r0, #12
 800c38e:	183b      	adds	r3, r7, r0
 800c390:	491b      	ldr	r1, [pc, #108]	; (800c400 <USB_EPSetStall+0x94>)
 800c392:	400a      	ands	r2, r1
 800c394:	801a      	strh	r2, [r3, #0]
 800c396:	183b      	adds	r3, r7, r0
 800c398:	183a      	adds	r2, r7, r0
 800c39a:	8812      	ldrh	r2, [r2, #0]
 800c39c:	2110      	movs	r1, #16
 800c39e:	404a      	eors	r2, r1
 800c3a0:	801a      	strh	r2, [r3, #0]
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	18d3      	adds	r3, r2, r3
 800c3ac:	183a      	adds	r2, r7, r0
 800c3ae:	8812      	ldrh	r2, [r2, #0]
 800c3b0:	4914      	ldr	r1, [pc, #80]	; (800c404 <USB_EPSetStall+0x98>)
 800c3b2:	430a      	orrs	r2, r1
 800c3b4:	b292      	uxth	r2, r2
 800c3b6:	801a      	strh	r2, [r3, #0]
 800c3b8:	e01d      	b.n	800c3f6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	18d3      	adds	r3, r2, r3
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	200e      	movs	r0, #14
 800c3ca:	183b      	adds	r3, r7, r0
 800c3cc:	490e      	ldr	r1, [pc, #56]	; (800c408 <USB_EPSetStall+0x9c>)
 800c3ce:	400a      	ands	r2, r1
 800c3d0:	801a      	strh	r2, [r3, #0]
 800c3d2:	183b      	adds	r3, r7, r0
 800c3d4:	183a      	adds	r2, r7, r0
 800c3d6:	8812      	ldrh	r2, [r2, #0]
 800c3d8:	2180      	movs	r1, #128	; 0x80
 800c3da:	0149      	lsls	r1, r1, #5
 800c3dc:	404a      	eors	r2, r1
 800c3de:	801a      	strh	r2, [r3, #0]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	18d3      	adds	r3, r2, r3
 800c3ea:	183a      	adds	r2, r7, r0
 800c3ec:	8812      	ldrh	r2, [r2, #0]
 800c3ee:	4905      	ldr	r1, [pc, #20]	; (800c404 <USB_EPSetStall+0x98>)
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	b292      	uxth	r2, r2
 800c3f4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	b004      	add	sp, #16
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	ffff8fbf 	.word	0xffff8fbf
 800c404:	ffff8080 	.word	0xffff8080
 800c408:	ffffbf8f 	.word	0xffffbf8f

0800c40c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	7b1b      	ldrb	r3, [r3, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d000      	beq.n	800c420 <USB_EPClearStall+0x14>
 800c41e:	e095      	b.n	800c54c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	785b      	ldrb	r3, [r3, #1]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d046      	beq.n	800c4b6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	18d2      	adds	r2, r2, r3
 800c432:	2110      	movs	r1, #16
 800c434:	187b      	adds	r3, r7, r1
 800c436:	8812      	ldrh	r2, [r2, #0]
 800c438:	801a      	strh	r2, [r3, #0]
 800c43a:	187b      	adds	r3, r7, r1
 800c43c:	881b      	ldrh	r3, [r3, #0]
 800c43e:	2240      	movs	r2, #64	; 0x40
 800c440:	4013      	ands	r3, r2
 800c442:	d016      	beq.n	800c472 <USB_EPClearStall+0x66>
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	18d3      	adds	r3, r2, r3
 800c44e:	881b      	ldrh	r3, [r3, #0]
 800c450:	b29a      	uxth	r2, r3
 800c452:	200e      	movs	r0, #14
 800c454:	183b      	adds	r3, r7, r0
 800c456:	4940      	ldr	r1, [pc, #256]	; (800c558 <USB_EPClearStall+0x14c>)
 800c458:	400a      	ands	r2, r1
 800c45a:	801a      	strh	r2, [r3, #0]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	18d3      	adds	r3, r2, r3
 800c466:	183a      	adds	r2, r7, r0
 800c468:	8812      	ldrh	r2, [r2, #0]
 800c46a:	493c      	ldr	r1, [pc, #240]	; (800c55c <USB_EPClearStall+0x150>)
 800c46c:	430a      	orrs	r2, r1
 800c46e:	b292      	uxth	r2, r2
 800c470:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	78db      	ldrb	r3, [r3, #3]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d068      	beq.n	800c54c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	18d3      	adds	r3, r2, r3
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	b29a      	uxth	r2, r3
 800c488:	200c      	movs	r0, #12
 800c48a:	183b      	adds	r3, r7, r0
 800c48c:	4934      	ldr	r1, [pc, #208]	; (800c560 <USB_EPClearStall+0x154>)
 800c48e:	400a      	ands	r2, r1
 800c490:	801a      	strh	r2, [r3, #0]
 800c492:	183b      	adds	r3, r7, r0
 800c494:	183a      	adds	r2, r7, r0
 800c496:	8812      	ldrh	r2, [r2, #0]
 800c498:	2120      	movs	r1, #32
 800c49a:	404a      	eors	r2, r1
 800c49c:	801a      	strh	r2, [r3, #0]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	18d3      	adds	r3, r2, r3
 800c4a8:	183a      	adds	r2, r7, r0
 800c4aa:	8812      	ldrh	r2, [r2, #0]
 800c4ac:	492d      	ldr	r1, [pc, #180]	; (800c564 <USB_EPClearStall+0x158>)
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	b292      	uxth	r2, r2
 800c4b2:	801a      	strh	r2, [r3, #0]
 800c4b4:	e04a      	b.n	800c54c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	18d2      	adds	r2, r2, r3
 800c4c0:	2116      	movs	r1, #22
 800c4c2:	187b      	adds	r3, r7, r1
 800c4c4:	8812      	ldrh	r2, [r2, #0]
 800c4c6:	801a      	strh	r2, [r3, #0]
 800c4c8:	187b      	adds	r3, r7, r1
 800c4ca:	881a      	ldrh	r2, [r3, #0]
 800c4cc:	2380      	movs	r3, #128	; 0x80
 800c4ce:	01db      	lsls	r3, r3, #7
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	d016      	beq.n	800c502 <USB_EPClearStall+0xf6>
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	18d3      	adds	r3, r2, r3
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	b29a      	uxth	r2, r3
 800c4e2:	2014      	movs	r0, #20
 800c4e4:	183b      	adds	r3, r7, r0
 800c4e6:	491c      	ldr	r1, [pc, #112]	; (800c558 <USB_EPClearStall+0x14c>)
 800c4e8:	400a      	ands	r2, r1
 800c4ea:	801a      	strh	r2, [r3, #0]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	18d3      	adds	r3, r2, r3
 800c4f6:	183a      	adds	r2, r7, r0
 800c4f8:	8812      	ldrh	r2, [r2, #0]
 800c4fa:	491b      	ldr	r1, [pc, #108]	; (800c568 <USB_EPClearStall+0x15c>)
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	b292      	uxth	r2, r2
 800c500:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	18d3      	adds	r3, r2, r3
 800c50c:	881b      	ldrh	r3, [r3, #0]
 800c50e:	b29a      	uxth	r2, r3
 800c510:	2012      	movs	r0, #18
 800c512:	183b      	adds	r3, r7, r0
 800c514:	4915      	ldr	r1, [pc, #84]	; (800c56c <USB_EPClearStall+0x160>)
 800c516:	400a      	ands	r2, r1
 800c518:	801a      	strh	r2, [r3, #0]
 800c51a:	183b      	adds	r3, r7, r0
 800c51c:	183a      	adds	r2, r7, r0
 800c51e:	8812      	ldrh	r2, [r2, #0]
 800c520:	2180      	movs	r1, #128	; 0x80
 800c522:	0149      	lsls	r1, r1, #5
 800c524:	404a      	eors	r2, r1
 800c526:	801a      	strh	r2, [r3, #0]
 800c528:	183b      	adds	r3, r7, r0
 800c52a:	183a      	adds	r2, r7, r0
 800c52c:	8812      	ldrh	r2, [r2, #0]
 800c52e:	2180      	movs	r1, #128	; 0x80
 800c530:	0189      	lsls	r1, r1, #6
 800c532:	404a      	eors	r2, r1
 800c534:	801a      	strh	r2, [r3, #0]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	18d3      	adds	r3, r2, r3
 800c540:	183a      	adds	r2, r7, r0
 800c542:	8812      	ldrh	r2, [r2, #0]
 800c544:	4907      	ldr	r1, [pc, #28]	; (800c564 <USB_EPClearStall+0x158>)
 800c546:	430a      	orrs	r2, r1
 800c548:	b292      	uxth	r2, r2
 800c54a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	0018      	movs	r0, r3
 800c550:	46bd      	mov	sp, r7
 800c552:	b006      	add	sp, #24
 800c554:	bd80      	pop	{r7, pc}
 800c556:	46c0      	nop			; (mov r8, r8)
 800c558:	ffff8f8f 	.word	0xffff8f8f
 800c55c:	ffff80c0 	.word	0xffff80c0
 800c560:	ffff8fbf 	.word	0xffff8fbf
 800c564:	ffff8080 	.word	0xffff8080
 800c568:	ffffc080 	.word	0xffffc080
 800c56c:	ffffbf8f 	.word	0xffffbf8f

0800c570 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	000a      	movs	r2, r1
 800c57a:	1cfb      	adds	r3, r7, #3
 800c57c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800c57e:	1cfb      	adds	r3, r7, #3
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d103      	bne.n	800c58e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	224c      	movs	r2, #76	; 0x4c
 800c58a:	2180      	movs	r1, #128	; 0x80
 800c58c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	0018      	movs	r0, r3
 800c592:	46bd      	mov	sp, r7
 800c594:	b002      	add	sp, #8
 800c596:	bd80      	pop	{r7, pc}

0800c598 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2258      	movs	r2, #88	; 0x58
 800c5a4:	5a9b      	ldrh	r3, [r3, r2]
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	4a05      	ldr	r2, [pc, #20]	; (800c5c0 <USB_DevConnect+0x28>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	b299      	uxth	r1, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2258      	movs	r2, #88	; 0x58
 800c5b2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	0018      	movs	r0, r3
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	b002      	add	sp, #8
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	46c0      	nop			; (mov r8, r8)
 800c5c0:	ffff8000 	.word	0xffff8000

0800c5c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2244      	movs	r2, #68	; 0x44
 800c5d0:	5a9b      	ldrh	r3, [r3, r2]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
}
 800c5d8:	0018      	movs	r0, r3
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	b004      	add	sp, #16
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08a      	sub	sp, #40	; 0x28
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	0019      	movs	r1, r3
 800c5ec:	1dbb      	adds	r3, r7, #6
 800c5ee:	801a      	strh	r2, [r3, #0]
 800c5f0:	1d3b      	adds	r3, r7, #4
 800c5f2:	1c0a      	adds	r2, r1, #0
 800c5f4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c5f6:	1d3b      	adds	r3, r7, #4
 800c5f8:	881b      	ldrh	r3, [r3, #0]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	085b      	lsrs	r3, r3, #1
 800c5fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c608:	1dbb      	adds	r3, r7, #6
 800c60a:	881a      	ldrh	r2, [r3, #0]
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	18d3      	adds	r3, r2, r3
 800c610:	2280      	movs	r2, #128	; 0x80
 800c612:	00d2      	lsls	r2, r2, #3
 800c614:	4694      	mov	ip, r2
 800c616:	4463      	add	r3, ip
 800c618:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	627b      	str	r3, [r7, #36]	; 0x24
 800c61e:	e020      	b.n	800c662 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	781a      	ldrb	r2, [r3, #0]
 800c624:	2112      	movs	r1, #18
 800c626:	187b      	adds	r3, r7, r1
 800c628:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	3301      	adds	r3, #1
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	021b      	lsls	r3, r3, #8
 800c632:	b21a      	sxth	r2, r3
 800c634:	187b      	adds	r3, r7, r1
 800c636:	2000      	movs	r0, #0
 800c638:	5e1b      	ldrsh	r3, [r3, r0]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	b21a      	sxth	r2, r3
 800c63e:	187b      	adds	r3, r7, r1
 800c640:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c642:	6a3b      	ldr	r3, [r7, #32]
 800c644:	187a      	adds	r2, r7, r1
 800c646:	8812      	ldrh	r2, [r2, #0]
 800c648:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	3302      	adds	r3, #2
 800c64e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	3301      	adds	r3, #1
 800c654:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	3301      	adds	r3, #1
 800c65a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	3b01      	subs	r3, #1
 800c660:	627b      	str	r3, [r7, #36]	; 0x24
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1db      	bne.n	800c620 <USB_WritePMA+0x40>
  }
}
 800c668:	46c0      	nop			; (mov r8, r8)
 800c66a:	46c0      	nop			; (mov r8, r8)
 800c66c:	46bd      	mov	sp, r7
 800c66e:	b00a      	add	sp, #40	; 0x28
 800c670:	bd80      	pop	{r7, pc}

0800c672 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b08a      	sub	sp, #40	; 0x28
 800c676:	af00      	add	r7, sp, #0
 800c678:	60f8      	str	r0, [r7, #12]
 800c67a:	60b9      	str	r1, [r7, #8]
 800c67c:	0019      	movs	r1, r3
 800c67e:	1dbb      	adds	r3, r7, #6
 800c680:	801a      	strh	r2, [r3, #0]
 800c682:	1d3b      	adds	r3, r7, #4
 800c684:	1c0a      	adds	r2, r1, #0
 800c686:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c688:	1d3b      	adds	r3, r7, #4
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	085b      	lsrs	r3, r3, #1
 800c68e:	b29b      	uxth	r3, r3
 800c690:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c69a:	1dbb      	adds	r3, r7, #6
 800c69c:	881a      	ldrh	r2, [r3, #0]
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	18d3      	adds	r3, r2, r3
 800c6a2:	2280      	movs	r2, #128	; 0x80
 800c6a4:	00d2      	lsls	r2, r2, #3
 800c6a6:	4694      	mov	ip, r2
 800c6a8:	4463      	add	r3, ip
 800c6aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800c6b0:	e018      	b.n	800c6e4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c6b2:	6a3b      	ldr	r3, [r7, #32]
 800c6b4:	881b      	ldrh	r3, [r3, #0]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	3302      	adds	r3, #2
 800c6be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	0a1b      	lsrs	r3, r3, #8
 800c6d2:	b2da      	uxtb	r2, r3
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1e3      	bne.n	800c6b2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c6ea:	1d3b      	adds	r3, r7, #4
 800c6ec:	881b      	ldrh	r3, [r3, #0]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d007      	beq.n	800c708 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	881b      	ldrh	r3, [r3, #0]
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	b2da      	uxtb	r2, r3
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	701a      	strb	r2, [r3, #0]
  }
}
 800c708:	46c0      	nop			; (mov r8, r8)
 800c70a:	46bd      	mov	sp, r7
 800c70c:	b00a      	add	sp, #40	; 0x28
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	000a      	movs	r2, r1
 800c71a:	1cfb      	adds	r3, r7, #3
 800c71c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800c71e:	230f      	movs	r3, #15
 800c720:	18fb      	adds	r3, r7, r3
 800c722:	2200      	movs	r2, #0
 800c724:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	7c1b      	ldrb	r3, [r3, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d116      	bne.n	800c75c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c72e:	2380      	movs	r3, #128	; 0x80
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	2202      	movs	r2, #2
 800c736:	2181      	movs	r1, #129	; 0x81
 800c738:	f009 fdf1 	bl	801631e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c742:	2380      	movs	r3, #128	; 0x80
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	2202      	movs	r2, #2
 800c74a:	2101      	movs	r1, #1
 800c74c:	f009 fde7 	bl	801631e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	23b6      	movs	r3, #182	; 0xb6
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	2101      	movs	r1, #1
 800c758:	50d1      	str	r1, [r2, r3]
 800c75a:	e013      	b.n	800c784 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	2340      	movs	r3, #64	; 0x40
 800c760:	2202      	movs	r2, #2
 800c762:	2181      	movs	r1, #129	; 0x81
 800c764:	f009 fddb 	bl	801631e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	2340      	movs	r3, #64	; 0x40
 800c772:	2202      	movs	r2, #2
 800c774:	2101      	movs	r1, #1
 800c776:	f009 fdd2 	bl	801631e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	23b6      	movs	r3, #182	; 0xb6
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	2101      	movs	r1, #1
 800c782:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	2308      	movs	r3, #8
 800c788:	2203      	movs	r2, #3
 800c78a:	2182      	movs	r1, #130	; 0x82
 800c78c:	f009 fdc7 	bl	801631e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c796:	2387      	movs	r3, #135	; 0x87
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	0018      	movs	r0, r3
 800c79c:	f009 ff58 	bl	8016650 <USBD_static_malloc>
 800c7a0:	0001      	movs	r1, r0
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	23ae      	movs	r3, #174	; 0xae
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	23ae      	movs	r3, #174	; 0xae
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	58d3      	ldr	r3, [r2, r3]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d104      	bne.n	800c7c0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800c7b6:	230f      	movs	r3, #15
 800c7b8:	18fb      	adds	r3, r7, r3
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	701a      	strb	r2, [r3, #0]
 800c7be:	e02c      	b.n	800c81a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	23ae      	movs	r3, #174	; 0xae
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	58d3      	ldr	r3, [r2, r3]
 800c7c8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	23af      	movs	r3, #175	; 0xaf
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	58d3      	ldr	r3, [r2, r3]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	2385      	movs	r3, #133	; 0x85
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	2100      	movs	r1, #0
 800c7de:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	2386      	movs	r3, #134	; 0x86
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	7c1b      	ldrb	r3, [r3, #16]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10a      	bne.n	800c808 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	2381      	movs	r3, #129	; 0x81
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	58d2      	ldr	r2, [r2, r3]
 800c7fa:	2380      	movs	r3, #128	; 0x80
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	2101      	movs	r1, #1
 800c802:	f009 fed7 	bl	80165b4 <USBD_LL_PrepareReceive>
 800c806:	e008      	b.n	800c81a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	2381      	movs	r3, #129	; 0x81
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	58d2      	ldr	r2, [r2, r3]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	2340      	movs	r3, #64	; 0x40
 800c814:	2101      	movs	r1, #1
 800c816:	f009 fecd 	bl	80165b4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c81a:	230f      	movs	r3, #15
 800c81c:	18fb      	adds	r3, r7, r3
 800c81e:	781b      	ldrb	r3, [r3, #0]
}
 800c820:	0018      	movs	r0, r3
 800c822:	46bd      	mov	sp, r7
 800c824:	b004      	add	sp, #16
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	000a      	movs	r2, r1
 800c832:	1cfb      	adds	r3, r7, #3
 800c834:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800c836:	230f      	movs	r3, #15
 800c838:	18fb      	adds	r3, r7, r3
 800c83a:	2200      	movs	r2, #0
 800c83c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2181      	movs	r1, #129	; 0x81
 800c842:	0018      	movs	r0, r3
 800c844:	f009 fda2 	bl	801638c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2101      	movs	r1, #1
 800c852:	0018      	movs	r0, r3
 800c854:	f009 fd9a 	bl	801638c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	23b6      	movs	r3, #182	; 0xb6
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	2100      	movs	r1, #0
 800c860:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2182      	movs	r1, #130	; 0x82
 800c866:	0018      	movs	r0, r3
 800c868:	f009 fd90 	bl	801638c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	23ae      	movs	r3, #174	; 0xae
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	58d3      	ldr	r3, [r2, r3]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d011      	beq.n	800c8a2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	23af      	movs	r3, #175	; 0xaf
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	58d3      	ldr	r3, [r2, r3]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	23ae      	movs	r3, #174	; 0xae
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	58d3      	ldr	r3, [r2, r3]
 800c892:	0018      	movs	r0, r3
 800c894:	f009 fee8 	bl	8016668 <USBD_static_free>
    pdev->pClassData = NULL;
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	23ae      	movs	r3, #174	; 0xae
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	2100      	movs	r1, #0
 800c8a0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800c8a2:	230f      	movs	r3, #15
 800c8a4:	18fb      	adds	r3, r7, r3
 800c8a6:	781b      	ldrb	r3, [r3, #0]
}
 800c8a8:	0018      	movs	r0, r3
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	b004      	add	sp, #16
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	23ae      	movs	r3, #174	; 0xae
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	58d3      	ldr	r3, [r2, r3]
 800c8c2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c8c4:	230f      	movs	r3, #15
 800c8c6:	18fb      	adds	r3, r7, r3
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800c8cc:	230c      	movs	r3, #12
 800c8ce:	18fb      	adds	r3, r7, r3
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800c8d4:	2317      	movs	r3, #23
 800c8d6:	18fb      	adds	r3, r7, r3
 800c8d8:	2200      	movs	r2, #0
 800c8da:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	001a      	movs	r2, r3
 800c8e2:	2360      	movs	r3, #96	; 0x60
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	d03d      	beq.n	800c964 <USBD_CDC_Setup+0xb4>
 800c8e8:	2b20      	cmp	r3, #32
 800c8ea:	d000      	beq.n	800c8ee <USBD_CDC_Setup+0x3e>
 800c8ec:	e094      	b.n	800ca18 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	88db      	ldrh	r3, [r3, #6]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d02b      	beq.n	800c94e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	b25b      	sxtb	r3, r3
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	da12      	bge.n	800c926 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	23af      	movs	r3, #175	; 0xaf
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	58d3      	ldr	r3, [r2, r3]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c90e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	88d2      	ldrh	r2, [r2, #6]
 800c914:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c916:	6939      	ldr	r1, [r7, #16]
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	88da      	ldrh	r2, [r3, #6]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	0018      	movs	r0, r3
 800c920:	f001 fbb2 	bl	800e088 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c924:	e083      	b.n	800ca2e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	7859      	ldrb	r1, [r3, #1]
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	2380      	movs	r3, #128	; 0x80
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	88db      	ldrh	r3, [r3, #6]
 800c936:	b2d9      	uxtb	r1, r3
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	4a40      	ldr	r2, [pc, #256]	; (800ca3c <USBD_CDC_Setup+0x18c>)
 800c93c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c93e:	6939      	ldr	r1, [r7, #16]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	88da      	ldrh	r2, [r3, #6]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	0018      	movs	r0, r3
 800c948:	f001 fbd1 	bl	800e0ee <USBD_CtlPrepareRx>
      break;
 800c94c:	e06f      	b.n	800ca2e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	23af      	movs	r3, #175	; 0xaf
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	58d3      	ldr	r3, [r2, r3]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	7850      	ldrb	r0, [r2, #1]
 800c95c:	6839      	ldr	r1, [r7, #0]
 800c95e:	2200      	movs	r2, #0
 800c960:	4798      	blx	r3
      break;
 800c962:	e064      	b.n	800ca2e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	785b      	ldrb	r3, [r3, #1]
 800c968:	2b0b      	cmp	r3, #11
 800c96a:	d037      	beq.n	800c9dc <USBD_CDC_Setup+0x12c>
 800c96c:	dc47      	bgt.n	800c9fe <USBD_CDC_Setup+0x14e>
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d002      	beq.n	800c978 <USBD_CDC_Setup+0xc8>
 800c972:	2b0a      	cmp	r3, #10
 800c974:	d019      	beq.n	800c9aa <USBD_CDC_Setup+0xfa>
 800c976:	e042      	b.n	800c9fe <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	23a7      	movs	r3, #167	; 0xa7
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	5cd3      	ldrb	r3, [r2, r3]
 800c980:	2b03      	cmp	r3, #3
 800c982:	d107      	bne.n	800c994 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c984:	230c      	movs	r3, #12
 800c986:	18f9      	adds	r1, r7, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2202      	movs	r2, #2
 800c98c:	0018      	movs	r0, r3
 800c98e:	f001 fb7b 	bl	800e088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c992:	e040      	b.n	800ca16 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800c994:	683a      	ldr	r2, [r7, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	0011      	movs	r1, r2
 800c99a:	0018      	movs	r0, r3
 800c99c:	f001 faf6 	bl	800df8c <USBD_CtlError>
            ret = USBD_FAIL;
 800c9a0:	2317      	movs	r3, #23
 800c9a2:	18fb      	adds	r3, r7, r3
 800c9a4:	2202      	movs	r2, #2
 800c9a6:	701a      	strb	r2, [r3, #0]
          break;
 800c9a8:	e035      	b.n	800ca16 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	23a7      	movs	r3, #167	; 0xa7
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	5cd3      	ldrb	r3, [r2, r3]
 800c9b2:	2b03      	cmp	r3, #3
 800c9b4:	d107      	bne.n	800c9c6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c9b6:	230f      	movs	r3, #15
 800c9b8:	18f9      	adds	r1, r7, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	0018      	movs	r0, r3
 800c9c0:	f001 fb62 	bl	800e088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c9c4:	e027      	b.n	800ca16 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800c9c6:	683a      	ldr	r2, [r7, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	0011      	movs	r1, r2
 800c9cc:	0018      	movs	r0, r3
 800c9ce:	f001 fadd 	bl	800df8c <USBD_CtlError>
            ret = USBD_FAIL;
 800c9d2:	2317      	movs	r3, #23
 800c9d4:	18fb      	adds	r3, r7, r3
 800c9d6:	2202      	movs	r2, #2
 800c9d8:	701a      	strb	r2, [r3, #0]
          break;
 800c9da:	e01c      	b.n	800ca16 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	23a7      	movs	r3, #167	; 0xa7
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	5cd3      	ldrb	r3, [r2, r3]
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d015      	beq.n	800ca14 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800c9e8:	683a      	ldr	r2, [r7, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	0011      	movs	r1, r2
 800c9ee:	0018      	movs	r0, r3
 800c9f0:	f001 facc 	bl	800df8c <USBD_CtlError>
            ret = USBD_FAIL;
 800c9f4:	2317      	movs	r3, #23
 800c9f6:	18fb      	adds	r3, r7, r3
 800c9f8:	2202      	movs	r2, #2
 800c9fa:	701a      	strb	r2, [r3, #0]
          }
          break;
 800c9fc:	e00a      	b.n	800ca14 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	0011      	movs	r1, r2
 800ca04:	0018      	movs	r0, r3
 800ca06:	f001 fac1 	bl	800df8c <USBD_CtlError>
          ret = USBD_FAIL;
 800ca0a:	2317      	movs	r3, #23
 800ca0c:	18fb      	adds	r3, r7, r3
 800ca0e:	2202      	movs	r2, #2
 800ca10:	701a      	strb	r2, [r3, #0]
          break;
 800ca12:	e000      	b.n	800ca16 <USBD_CDC_Setup+0x166>
          break;
 800ca14:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800ca16:	e00a      	b.n	800ca2e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	0011      	movs	r1, r2
 800ca1e:	0018      	movs	r0, r3
 800ca20:	f001 fab4 	bl	800df8c <USBD_CtlError>
      ret = USBD_FAIL;
 800ca24:	2317      	movs	r3, #23
 800ca26:	18fb      	adds	r3, r7, r3
 800ca28:	2202      	movs	r2, #2
 800ca2a:	701a      	strb	r2, [r3, #0]
      break;
 800ca2c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800ca2e:	2317      	movs	r3, #23
 800ca30:	18fb      	adds	r3, r7, r3
 800ca32:	781b      	ldrb	r3, [r3, #0]
}
 800ca34:	0018      	movs	r0, r3
 800ca36:	46bd      	mov	sp, r7
 800ca38:	b006      	add	sp, #24
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	00000201 	.word	0x00000201

0800ca40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	000a      	movs	r2, r1
 800ca4a:	1cfb      	adds	r3, r7, #3
 800ca4c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	23ae      	movs	r3, #174	; 0xae
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	58d3      	ldr	r3, [r2, r3]
 800ca56:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	23b0      	movs	r3, #176	; 0xb0
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	58d3      	ldr	r3, [r2, r3]
 800ca60:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	23ae      	movs	r3, #174	; 0xae
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	58d3      	ldr	r3, [r2, r3]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d03e      	beq.n	800caec <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ca6e:	1cfb      	adds	r3, r7, #3
 800ca70:	781a      	ldrb	r2, [r3, #0]
 800ca72:	6879      	ldr	r1, [r7, #4]
 800ca74:	0013      	movs	r3, r2
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	189b      	adds	r3, r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	18cb      	adds	r3, r1, r3
 800ca7e:	331c      	adds	r3, #28
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d02b      	beq.n	800cade <USBD_CDC_DataIn+0x9e>
 800ca86:	1cfb      	adds	r3, r7, #3
 800ca88:	781a      	ldrb	r2, [r3, #0]
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	0013      	movs	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	189b      	adds	r3, r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	18cb      	adds	r3, r1, r3
 800ca96:	331c      	adds	r3, #28
 800ca98:	6818      	ldr	r0, [r3, #0]
 800ca9a:	1cfb      	adds	r3, r7, #3
 800ca9c:	781a      	ldrb	r2, [r3, #0]
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	0013      	movs	r3, r2
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	189b      	adds	r3, r3, r2
 800caa6:	00db      	lsls	r3, r3, #3
 800caa8:	18cb      	adds	r3, r1, r3
 800caaa:	3338      	adds	r3, #56	; 0x38
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	0019      	movs	r1, r3
 800cab0:	f7f3 fbd6 	bl	8000260 <__aeabi_uidivmod>
 800cab4:	1e0b      	subs	r3, r1, #0
 800cab6:	d112      	bne.n	800cade <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800cab8:	1cfb      	adds	r3, r7, #3
 800caba:	781a      	ldrb	r2, [r3, #0]
 800cabc:	6879      	ldr	r1, [r7, #4]
 800cabe:	0013      	movs	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	189b      	adds	r3, r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	18cb      	adds	r3, r1, r3
 800cac8:	331c      	adds	r3, #28
 800caca:	2200      	movs	r2, #0
 800cacc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cace:	1cfb      	adds	r3, r7, #3
 800cad0:	7819      	ldrb	r1, [r3, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	2300      	movs	r3, #0
 800cad6:	2200      	movs	r2, #0
 800cad8:	f009 fd35 	bl	8016546 <USBD_LL_Transmit>
 800cadc:	e004      	b.n	800cae8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	2385      	movs	r3, #133	; 0x85
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	2100      	movs	r1, #0
 800cae6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	e000      	b.n	800caee <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800caec:	2302      	movs	r3, #2
  }
}
 800caee:	0018      	movs	r0, r3
 800caf0:	46bd      	mov	sp, r7
 800caf2:	b004      	add	sp, #16
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b084      	sub	sp, #16
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	000a      	movs	r2, r1
 800cb00:	1cfb      	adds	r3, r7, #3
 800cb02:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	23ae      	movs	r3, #174	; 0xae
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	58d3      	ldr	r3, [r2, r3]
 800cb0c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cb0e:	1cfb      	adds	r3, r7, #3
 800cb10:	781a      	ldrb	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	0011      	movs	r1, r2
 800cb16:	0018      	movs	r0, r3
 800cb18:	f009 fd83 	bl	8016622 <USBD_LL_GetRxDataSize>
 800cb1c:	0001      	movs	r1, r0
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	2383      	movs	r3, #131	; 0x83
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	23ae      	movs	r3, #174	; 0xae
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	58d3      	ldr	r3, [r2, r3]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d011      	beq.n	800cb56 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	23af      	movs	r3, #175	; 0xaf
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	58d3      	ldr	r3, [r2, r3]
 800cb3a:	68da      	ldr	r2, [r3, #12]
 800cb3c:	68f9      	ldr	r1, [r7, #12]
 800cb3e:	2381      	movs	r3, #129	; 0x81
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	58c8      	ldr	r0, [r1, r3]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2183      	movs	r1, #131	; 0x83
 800cb48:	0089      	lsls	r1, r1, #2
 800cb4a:	468c      	mov	ip, r1
 800cb4c:	4463      	add	r3, ip
 800cb4e:	0019      	movs	r1, r3
 800cb50:	4790      	blx	r2

    return USBD_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	e000      	b.n	800cb58 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800cb56:	2302      	movs	r3, #2
  }
}
 800cb58:	0018      	movs	r0, r3
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	b004      	add	sp, #16
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	23ae      	movs	r3, #174	; 0xae
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	58d3      	ldr	r3, [r2, r3]
 800cb70:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	23af      	movs	r3, #175	; 0xaf
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	58d3      	ldr	r3, [r2, r3]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d019      	beq.n	800cbb2 <USBD_CDC_EP0_RxReady+0x52>
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	2380      	movs	r3, #128	; 0x80
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	5cd3      	ldrb	r3, [r2, r3]
 800cb86:	2bff      	cmp	r3, #255	; 0xff
 800cb88:	d013      	beq.n	800cbb2 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	23af      	movs	r3, #175	; 0xaf
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	58d3      	ldr	r3, [r2, r3]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	68f9      	ldr	r1, [r7, #12]
 800cb96:	2280      	movs	r2, #128	; 0x80
 800cb98:	0092      	lsls	r2, r2, #2
 800cb9a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800cb9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4c06      	ldr	r4, [pc, #24]	; (800cbbc <USBD_CDC_EP0_RxReady+0x5c>)
 800cba2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cba4:	b292      	uxth	r2, r2
 800cba6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	2380      	movs	r3, #128	; 0x80
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	21ff      	movs	r1, #255	; 0xff
 800cbb0:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	0018      	movs	r0, r3
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	b005      	add	sp, #20
 800cbba:	bd90      	pop	{r4, r7, pc}
 800cbbc:	00000201 	.word	0x00000201

0800cbc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2243      	movs	r2, #67	; 0x43
 800cbcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800cbce:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	b002      	add	sp, #8
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	2000016c 	.word	0x2000016c

0800cbdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2243      	movs	r2, #67	; 0x43
 800cbe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800cbea:	4b02      	ldr	r3, [pc, #8]	; (800cbf4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800cbec:	0018      	movs	r0, r3
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	b002      	add	sp, #8
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	20000128 	.word	0x20000128

0800cbf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2243      	movs	r2, #67	; 0x43
 800cc04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800cc06:	4b02      	ldr	r3, [pc, #8]	; (800cc10 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800cc08:	0018      	movs	r0, r3
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	b002      	add	sp, #8
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	200001b0 	.word	0x200001b0

0800cc14 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	220a      	movs	r2, #10
 800cc20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800cc22:	4b02      	ldr	r3, [pc, #8]	; (800cc2c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800cc24:	0018      	movs	r0, r3
 800cc26:	46bd      	mov	sp, r7
 800cc28:	b002      	add	sp, #8
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	200000e4 	.word	0x200000e4

0800cc30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800cc3a:	200f      	movs	r0, #15
 800cc3c:	183b      	adds	r3, r7, r0
 800cc3e:	2202      	movs	r2, #2
 800cc40:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d007      	beq.n	800cc58 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	23af      	movs	r3, #175	; 0xaf
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800cc52:	183b      	adds	r3, r7, r0
 800cc54:	2200      	movs	r2, #0
 800cc56:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800cc58:	230f      	movs	r3, #15
 800cc5a:	18fb      	adds	r3, r7, r3
 800cc5c:	781b      	ldrb	r3, [r3, #0]
}
 800cc5e:	0018      	movs	r0, r3
 800cc60:	46bd      	mov	sp, r7
 800cc62:	b004      	add	sp, #16
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b086      	sub	sp, #24
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	60f8      	str	r0, [r7, #12]
 800cc6e:	60b9      	str	r1, [r7, #8]
 800cc70:	1dbb      	adds	r3, r7, #6
 800cc72:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	23ae      	movs	r3, #174	; 0xae
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	58d3      	ldr	r3, [r2, r3]
 800cc7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	2382      	movs	r3, #130	; 0x82
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	68b9      	ldr	r1, [r7, #8]
 800cc86:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800cc88:	1dbb      	adds	r3, r7, #6
 800cc8a:	8819      	ldrh	r1, [r3, #0]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	2384      	movs	r3, #132	; 0x84
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	0018      	movs	r0, r3
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	b006      	add	sp, #24
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
 800cca6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	23ae      	movs	r3, #174	; 0xae
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	58d3      	ldr	r3, [r2, r3]
 800ccb0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	2381      	movs	r3, #129	; 0x81
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	0018      	movs	r0, r3
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	b004      	add	sp, #16
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	23ae      	movs	r3, #174	; 0xae
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	58d3      	ldr	r3, [r2, r3]
 800ccd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	23ae      	movs	r3, #174	; 0xae
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	58d3      	ldr	r3, [r2, r3]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d022      	beq.n	800cd2a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	2385      	movs	r3, #133	; 0x85
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	58d3      	ldr	r3, [r2, r3]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d11a      	bne.n	800cd26 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	2385      	movs	r3, #133	; 0x85
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	2384      	movs	r3, #132	; 0x84
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	58d2      	ldr	r2, [r2, r3]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	2382      	movs	r3, #130	; 0x82
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	2384      	movs	r3, #132	; 0x84
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	000a      	movs	r2, r1
 800cd1c:	2181      	movs	r1, #129	; 0x81
 800cd1e:	f009 fc12 	bl	8016546 <USBD_LL_Transmit>

      return USBD_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	e002      	b.n	800cd2c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e000      	b.n	800cd2c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800cd2a:	2302      	movs	r3, #2
  }
}
 800cd2c:	0018      	movs	r0, r3
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	b004      	add	sp, #16
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	23ae      	movs	r3, #174	; 0xae
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	58d3      	ldr	r3, [r2, r3]
 800cd44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	23ae      	movs	r3, #174	; 0xae
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	58d3      	ldr	r3, [r2, r3]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d019      	beq.n	800cd86 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	7c1b      	ldrb	r3, [r3, #16]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d10a      	bne.n	800cd70 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	2381      	movs	r3, #129	; 0x81
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	58d2      	ldr	r2, [r2, r3]
 800cd62:	2380      	movs	r3, #128	; 0x80
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	2101      	movs	r1, #1
 800cd6a:	f009 fc23 	bl	80165b4 <USBD_LL_PrepareReceive>
 800cd6e:	e008      	b.n	800cd82 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	2381      	movs	r3, #129	; 0x81
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	58d2      	ldr	r2, [r2, r3]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	2340      	movs	r3, #64	; 0x40
 800cd7c:	2101      	movs	r1, #1
 800cd7e:	f009 fc19 	bl	80165b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	e000      	b.n	800cd88 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800cd86:	2302      	movs	r3, #2
  }
}
 800cd88:	0018      	movs	r0, r3
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	b004      	add	sp, #16
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	1dfb      	adds	r3, r7, #7
 800cd9c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cda4:	2302      	movs	r3, #2
 800cda6:	e020      	b.n	800cdea <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	23ad      	movs	r3, #173	; 0xad
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	58d3      	ldr	r3, [r2, r3]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d004      	beq.n	800cdbe <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	23ad      	movs	r3, #173	; 0xad
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	2100      	movs	r1, #0
 800cdbc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d004      	beq.n	800cdce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	23ac      	movs	r3, #172	; 0xac
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	68b9      	ldr	r1, [r7, #8]
 800cdcc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	23a7      	movs	r3, #167	; 0xa7
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	1dfa      	adds	r2, r7, #7
 800cddc:	7812      	ldrb	r2, [r2, #0]
 800cdde:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	0018      	movs	r0, r3
 800cde4:	f009 fa12 	bl	801620c <USBD_LL_Init>

  return USBD_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	0018      	movs	r0, r3
 800cdec:	46bd      	mov	sp, r7
 800cdee:	b004      	add	sp, #16
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800cdfc:	200f      	movs	r0, #15
 800cdfe:	183b      	adds	r3, r7, r0
 800ce00:	2200      	movs	r2, #0
 800ce02:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d008      	beq.n	800ce1c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	23ad      	movs	r3, #173	; 0xad
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800ce14:	183b      	adds	r3, r7, r0
 800ce16:	2200      	movs	r2, #0
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	e003      	b.n	800ce24 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ce1c:	230f      	movs	r3, #15
 800ce1e:	18fb      	adds	r3, r7, r3
 800ce20:	2202      	movs	r2, #2
 800ce22:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800ce24:	230f      	movs	r3, #15
 800ce26:	18fb      	adds	r3, r7, r3
 800ce28:	781b      	ldrb	r3, [r3, #0]
}
 800ce2a:	0018      	movs	r0, r3
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	b004      	add	sp, #16
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b082      	sub	sp, #8
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	f009 fa49 	bl	80162d4 <USBD_LL_Start>

  return USBD_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	0018      	movs	r0, r3
 800ce46:	46bd      	mov	sp, r7
 800ce48:	b002      	add	sp, #8
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	0018      	movs	r0, r3
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	b002      	add	sp, #8
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ce5e:	b590      	push	{r4, r7, lr}
 800ce60:	b085      	sub	sp, #20
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
 800ce66:	000a      	movs	r2, r1
 800ce68:	1cfb      	adds	r3, r7, #3
 800ce6a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ce6c:	240f      	movs	r4, #15
 800ce6e:	193b      	adds	r3, r7, r4
 800ce70:	2202      	movs	r2, #2
 800ce72:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	23ad      	movs	r3, #173	; 0xad
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	58d3      	ldr	r3, [r2, r3]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00e      	beq.n	800ce9e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	23ad      	movs	r3, #173	; 0xad
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	58d3      	ldr	r3, [r2, r3]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	1cfa      	adds	r2, r7, #3
 800ce8c:	7811      	ldrb	r1, [r2, #0]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	0010      	movs	r0, r2
 800ce92:	4798      	blx	r3
 800ce94:	1e03      	subs	r3, r0, #0
 800ce96:	d102      	bne.n	800ce9e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800ce98:	193b      	adds	r3, r7, r4
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800ce9e:	230f      	movs	r3, #15
 800cea0:	18fb      	adds	r3, r7, r3
 800cea2:	781b      	ldrb	r3, [r3, #0]
}
 800cea4:	0018      	movs	r0, r3
 800cea6:	46bd      	mov	sp, r7
 800cea8:	b005      	add	sp, #20
 800ceaa:	bd90      	pop	{r4, r7, pc}

0800ceac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	000a      	movs	r2, r1
 800ceb6:	1cfb      	adds	r3, r7, #3
 800ceb8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	23ad      	movs	r3, #173	; 0xad
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	58d3      	ldr	r3, [r2, r3]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	1cfa      	adds	r2, r7, #3
 800cec6:	7811      	ldrb	r1, [r2, #0]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	0010      	movs	r0, r2
 800cecc:	4798      	blx	r3

  return USBD_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	0018      	movs	r0, r3
 800ced2:	46bd      	mov	sp, r7
 800ced4:	b002      	add	sp, #8
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	22aa      	movs	r2, #170	; 0xaa
 800cee6:	0092      	lsls	r2, r2, #2
 800cee8:	4694      	mov	ip, r2
 800ceea:	4463      	add	r3, ip
 800ceec:	683a      	ldr	r2, [r7, #0]
 800ceee:	0011      	movs	r1, r2
 800cef0:	0018      	movs	r0, r3
 800cef2:	f001 f810 	bl	800df16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	23a5      	movs	r3, #165	; 0xa5
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	2101      	movs	r1, #1
 800cefe:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a23      	ldr	r2, [pc, #140]	; (800cf90 <USBD_LL_SetupStage+0xb8>)
 800cf04:	5a9b      	ldrh	r3, [r3, r2]
 800cf06:	0019      	movs	r1, r3
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	23a6      	movs	r3, #166	; 0xa6
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	23aa      	movs	r3, #170	; 0xaa
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	5cd3      	ldrb	r3, [r2, r3]
 800cf18:	001a      	movs	r2, r3
 800cf1a:	231f      	movs	r3, #31
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d019      	beq.n	800cf56 <USBD_LL_SetupStage+0x7e>
 800cf22:	d822      	bhi.n	800cf6a <USBD_LL_SetupStage+0x92>
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <USBD_LL_SetupStage+0x56>
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d00a      	beq.n	800cf42 <USBD_LL_SetupStage+0x6a>
 800cf2c:	e01d      	b.n	800cf6a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	22aa      	movs	r2, #170	; 0xaa
 800cf32:	0092      	lsls	r2, r2, #2
 800cf34:	189a      	adds	r2, r3, r2
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	0011      	movs	r1, r2
 800cf3a:	0018      	movs	r0, r3
 800cf3c:	f000 fa10 	bl	800d360 <USBD_StdDevReq>
      break;
 800cf40:	e020      	b.n	800cf84 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	22aa      	movs	r2, #170	; 0xaa
 800cf46:	0092      	lsls	r2, r2, #2
 800cf48:	189a      	adds	r2, r3, r2
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	0011      	movs	r1, r2
 800cf4e:	0018      	movs	r0, r3
 800cf50:	f000 fa78 	bl	800d444 <USBD_StdItfReq>
      break;
 800cf54:	e016      	b.n	800cf84 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	22aa      	movs	r2, #170	; 0xaa
 800cf5a:	0092      	lsls	r2, r2, #2
 800cf5c:	189a      	adds	r2, r3, r2
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	0011      	movs	r1, r2
 800cf62:	0018      	movs	r0, r3
 800cf64:	f000 fac5 	bl	800d4f2 <USBD_StdEPReq>
      break;
 800cf68:	e00c      	b.n	800cf84 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	23aa      	movs	r3, #170	; 0xaa
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	5cd3      	ldrb	r3, [r2, r3]
 800cf72:	227f      	movs	r2, #127	; 0x7f
 800cf74:	4393      	bics	r3, r2
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	0011      	movs	r1, r2
 800cf7c:	0018      	movs	r0, r3
 800cf7e:	f009 fa30 	bl	80163e2 <USBD_LL_StallEP>
      break;
 800cf82:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	0018      	movs	r0, r3
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	b002      	add	sp, #8
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	46c0      	nop			; (mov r8, r8)
 800cf90:	000002ae 	.word	0x000002ae

0800cf94 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	607a      	str	r2, [r7, #4]
 800cf9e:	200b      	movs	r0, #11
 800cfa0:	183b      	adds	r3, r7, r0
 800cfa2:	1c0a      	adds	r2, r1, #0
 800cfa4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cfa6:	183b      	adds	r3, r7, r0
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d154      	bne.n	800d058 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	3355      	adds	r3, #85	; 0x55
 800cfb2:	33ff      	adds	r3, #255	; 0xff
 800cfb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	23a5      	movs	r3, #165	; 0xa5
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	58d3      	ldr	r3, [r2, r3]
 800cfbe:	2b03      	cmp	r3, #3
 800cfc0:	d139      	bne.n	800d036 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	68da      	ldr	r2, [r3, #12]
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d919      	bls.n	800d002 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	68da      	ldr	r2, [r3, #12]
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	691b      	ldr	r3, [r3, #16]
 800cfd6:	1ad2      	subs	r2, r2, r3
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	68da      	ldr	r2, [r3, #12]
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d203      	bcs.n	800cff0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	e002      	b.n	800cff6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	001a      	movs	r2, r3
 800cffc:	f001 f89b 	bl	800e136 <USBD_CtlContinueRx>
 800d000:	e045      	b.n	800d08e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	23ad      	movs	r3, #173	; 0xad
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	58d3      	ldr	r3, [r2, r3]
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00d      	beq.n	800d02c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	23a7      	movs	r3, #167	; 0xa7
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d018:	2b03      	cmp	r3, #3
 800d01a:	d107      	bne.n	800d02c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	23ad      	movs	r3, #173	; 0xad
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	58d3      	ldr	r3, [r2, r3]
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	0010      	movs	r0, r2
 800d02a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	0018      	movs	r0, r3
 800d030:	f001 f894 	bl	800e15c <USBD_CtlSendStatus>
 800d034:	e02b      	b.n	800d08e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	23a5      	movs	r3, #165	; 0xa5
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	58d3      	ldr	r3, [r2, r3]
 800d03e:	2b05      	cmp	r3, #5
 800d040:	d125      	bne.n	800d08e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	23a5      	movs	r3, #165	; 0xa5
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	2100      	movs	r1, #0
 800d04a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2100      	movs	r1, #0
 800d050:	0018      	movs	r0, r3
 800d052:	f009 f9c6 	bl	80163e2 <USBD_LL_StallEP>
 800d056:	e01a      	b.n	800d08e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	23ad      	movs	r3, #173	; 0xad
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	58d3      	ldr	r3, [r2, r3]
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d011      	beq.n	800d08a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	23a7      	movs	r3, #167	; 0xa7
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800d06e:	2b03      	cmp	r3, #3
 800d070:	d10b      	bne.n	800d08a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	23ad      	movs	r3, #173	; 0xad
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	58d3      	ldr	r3, [r2, r3]
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	220b      	movs	r2, #11
 800d07e:	18ba      	adds	r2, r7, r2
 800d080:	7811      	ldrb	r1, [r2, #0]
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	0010      	movs	r0, r2
 800d086:	4798      	blx	r3
 800d088:	e001      	b.n	800d08e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d08a:	2302      	movs	r3, #2
 800d08c:	e000      	b.n	800d090 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	0018      	movs	r0, r3
 800d092:	46bd      	mov	sp, r7
 800d094:	b006      	add	sp, #24
 800d096:	bd80      	pop	{r7, pc}

0800d098 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	607a      	str	r2, [r7, #4]
 800d0a2:	200b      	movs	r0, #11
 800d0a4:	183b      	adds	r3, r7, r0
 800d0a6:	1c0a      	adds	r2, r1, #0
 800d0a8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d0aa:	183b      	adds	r3, r7, r0
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d000      	beq.n	800d0b4 <USBD_LL_DataInStage+0x1c>
 800d0b2:	e08e      	b.n	800d1d2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	3314      	adds	r3, #20
 800d0b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d0ba:	68fa      	ldr	r2, [r7, #12]
 800d0bc:	23a5      	movs	r3, #165	; 0xa5
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	58d3      	ldr	r3, [r2, r3]
 800d0c2:	2b02      	cmp	r3, #2
 800d0c4:	d164      	bne.n	800d190 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	68da      	ldr	r2, [r3, #12]
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d915      	bls.n	800d0fe <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	68da      	ldr	r2, [r3, #12]
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	1ad2      	subs	r2, r2, r3
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	0018      	movs	r0, r3
 800d0ec:	f000 ffec 	bl	800e0c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	f009 fa5c 	bl	80165b4 <USBD_LL_PrepareReceive>
 800d0fc:	e059      	b.n	800d1b2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	689a      	ldr	r2, [r3, #8]
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	0019      	movs	r1, r3
 800d108:	0010      	movs	r0, r2
 800d10a:	f7f3 f8a9 	bl	8000260 <__aeabi_uidivmod>
 800d10e:	1e0b      	subs	r3, r1, #0
 800d110:	d11f      	bne.n	800d152 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	689a      	ldr	r2, [r3, #8]
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d319      	bcc.n	800d152 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	689a      	ldr	r2, [r3, #8]
 800d122:	68f9      	ldr	r1, [r7, #12]
 800d124:	23a6      	movs	r3, #166	; 0xa6
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d211      	bcs.n	800d152 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2200      	movs	r2, #0
 800d132:	2100      	movs	r1, #0
 800d134:	0018      	movs	r0, r3
 800d136:	f000 ffc7 	bl	800e0c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	23a6      	movs	r3, #166	; 0xa6
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	2100      	movs	r1, #0
 800d142:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	2300      	movs	r3, #0
 800d148:	2200      	movs	r2, #0
 800d14a:	2100      	movs	r1, #0
 800d14c:	f009 fa32 	bl	80165b4 <USBD_LL_PrepareReceive>
 800d150:	e02f      	b.n	800d1b2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	23ad      	movs	r3, #173	; 0xad
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	58d3      	ldr	r3, [r2, r3]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00d      	beq.n	800d17c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	23a7      	movs	r3, #167	; 0xa7
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d168:	2b03      	cmp	r3, #3
 800d16a:	d107      	bne.n	800d17c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	23ad      	movs	r3, #173	; 0xad
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	58d3      	ldr	r3, [r2, r3]
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	0010      	movs	r0, r2
 800d17a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2180      	movs	r1, #128	; 0x80
 800d180:	0018      	movs	r0, r3
 800d182:	f009 f92e 	bl	80163e2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	0018      	movs	r0, r3
 800d18a:	f000 fffb 	bl	800e184 <USBD_CtlReceiveStatus>
 800d18e:	e010      	b.n	800d1b2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	23a5      	movs	r3, #165	; 0xa5
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	58d3      	ldr	r3, [r2, r3]
 800d198:	2b04      	cmp	r3, #4
 800d19a:	d005      	beq.n	800d1a8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	23a5      	movs	r3, #165	; 0xa5
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d104      	bne.n	800d1b2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2180      	movs	r1, #128	; 0x80
 800d1ac:	0018      	movs	r0, r3
 800d1ae:	f009 f918 	bl	80163e2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	23a8      	movs	r3, #168	; 0xa8
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	5cd3      	ldrb	r3, [r2, r3]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d124      	bne.n	800d208 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	f7ff fe43 	bl	800ce4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	23a8      	movs	r3, #168	; 0xa8
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	54d1      	strb	r1, [r2, r3]
 800d1d0:	e01a      	b.n	800d208 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	23ad      	movs	r3, #173	; 0xad
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	58d3      	ldr	r3, [r2, r3]
 800d1da:	695b      	ldr	r3, [r3, #20]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d011      	beq.n	800d204 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	23a7      	movs	r3, #167	; 0xa7
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	d10b      	bne.n	800d204 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	23ad      	movs	r3, #173	; 0xad
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	58d3      	ldr	r3, [r2, r3]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	220b      	movs	r2, #11
 800d1f8:	18ba      	adds	r2, r7, r2
 800d1fa:	7811      	ldrb	r1, [r2, #0]
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	0010      	movs	r0, r2
 800d200:	4798      	blx	r3
 800d202:	e001      	b.n	800d208 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d204:	2302      	movs	r3, #2
 800d206:	e000      	b.n	800d20a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	0018      	movs	r0, r3
 800d20c:	46bd      	mov	sp, r7
 800d20e:	b006      	add	sp, #24
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b082      	sub	sp, #8
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	2340      	movs	r3, #64	; 0x40
 800d21e:	2200      	movs	r2, #0
 800d220:	2100      	movs	r1, #0
 800d222:	f009 f87c 	bl	801631e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	23ac      	movs	r3, #172	; 0xac
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	2101      	movs	r1, #1
 800d22e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	23b2      	movs	r3, #178	; 0xb2
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	2140      	movs	r1, #64	; 0x40
 800d238:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	2340      	movs	r3, #64	; 0x40
 800d23e:	2200      	movs	r2, #0
 800d240:	2180      	movs	r1, #128	; 0x80
 800d242:	f009 f86c 	bl	801631e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2240      	movs	r2, #64	; 0x40
 800d250:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	23a7      	movs	r3, #167	; 0xa7
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	2101      	movs	r1, #1
 800d25a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	23a5      	movs	r3, #165	; 0xa5
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	2100      	movs	r1, #0
 800d264:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	23a9      	movs	r3, #169	; 0xa9
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	2100      	movs	r1, #0
 800d274:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	23ae      	movs	r3, #174	; 0xae
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	58d3      	ldr	r3, [r2, r3]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00a      	beq.n	800d298 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	23ad      	movs	r3, #173	; 0xad
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	58d3      	ldr	r3, [r2, r3]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	b2d9      	uxtb	r1, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	0018      	movs	r0, r3
 800d296:	4790      	blx	r2
  }

  return USBD_OK;
 800d298:	2300      	movs	r3, #0
}
 800d29a:	0018      	movs	r0, r3
 800d29c:	46bd      	mov	sp, r7
 800d29e:	b002      	add	sp, #8
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	000a      	movs	r2, r1
 800d2ac:	1cfb      	adds	r3, r7, #3
 800d2ae:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	1cfa      	adds	r2, r7, #3
 800d2b4:	7812      	ldrb	r2, [r2, #0]
 800d2b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	0018      	movs	r0, r3
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	b002      	add	sp, #8
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	23a7      	movs	r3, #167	; 0xa7
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	5cd1      	ldrb	r1, [r2, r3]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a06      	ldr	r2, [pc, #24]	; (800d2f0 <USBD_LL_Suspend+0x2c>)
 800d2d8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	23a7      	movs	r3, #167	; 0xa7
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	2104      	movs	r1, #4
 800d2e2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800d2e4:	2300      	movs	r3, #0
}
 800d2e6:	0018      	movs	r0, r3
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	b002      	add	sp, #8
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	46c0      	nop			; (mov r8, r8)
 800d2f0:	0000029d 	.word	0x0000029d

0800d2f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	23a7      	movs	r3, #167	; 0xa7
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	5cd3      	ldrb	r3, [r2, r3]
 800d304:	2b04      	cmp	r3, #4
 800d306:	d106      	bne.n	800d316 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a05      	ldr	r2, [pc, #20]	; (800d320 <USBD_LL_Resume+0x2c>)
 800d30c:	5c99      	ldrb	r1, [r3, r2]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	23a7      	movs	r3, #167	; 0xa7
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	0018      	movs	r0, r3
 800d31a:	46bd      	mov	sp, r7
 800d31c:	b002      	add	sp, #8
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	0000029d 	.word	0x0000029d

0800d324 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	23a7      	movs	r3, #167	; 0xa7
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	5cd3      	ldrb	r3, [r2, r3]
 800d334:	2b03      	cmp	r3, #3
 800d336:	d10e      	bne.n	800d356 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	23ad      	movs	r3, #173	; 0xad
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	58d3      	ldr	r3, [r2, r3]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d007      	beq.n	800d356 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	23ad      	movs	r3, #173	; 0xad
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	58d3      	ldr	r3, [r2, r3]
 800d34e:	69db      	ldr	r3, [r3, #28]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	0010      	movs	r0, r2
 800d354:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	0018      	movs	r0, r3
 800d35a:	46bd      	mov	sp, r7
 800d35c:	b002      	add	sp, #8
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d36a:	230f      	movs	r3, #15
 800d36c:	18fb      	adds	r3, r7, r3
 800d36e:	2200      	movs	r2, #0
 800d370:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	001a      	movs	r2, r3
 800d378:	2360      	movs	r3, #96	; 0x60
 800d37a:	4013      	ands	r3, r2
 800d37c:	2b40      	cmp	r3, #64	; 0x40
 800d37e:	d004      	beq.n	800d38a <USBD_StdDevReq+0x2a>
 800d380:	d84f      	bhi.n	800d422 <USBD_StdDevReq+0xc2>
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00b      	beq.n	800d39e <USBD_StdDevReq+0x3e>
 800d386:	2b20      	cmp	r3, #32
 800d388:	d14b      	bne.n	800d422 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	23ad      	movs	r3, #173	; 0xad
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	58d3      	ldr	r3, [r2, r3]
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	0010      	movs	r0, r2
 800d39a:	4798      	blx	r3
      break;
 800d39c:	e048      	b.n	800d430 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	2b09      	cmp	r3, #9
 800d3a4:	d835      	bhi.n	800d412 <USBD_StdDevReq+0xb2>
 800d3a6:	009a      	lsls	r2, r3, #2
 800d3a8:	4b25      	ldr	r3, [pc, #148]	; (800d440 <USBD_StdDevReq+0xe0>)
 800d3aa:	18d3      	adds	r3, r2, r3
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	0011      	movs	r1, r2
 800d3b6:	0018      	movs	r0, r3
 800d3b8:	f000 fa52 	bl	800d860 <USBD_GetDescriptor>
          break;
 800d3bc:	e030      	b.n	800d420 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	0011      	movs	r1, r2
 800d3c4:	0018      	movs	r0, r3
 800d3c6:	f000 fbfd 	bl	800dbc4 <USBD_SetAddress>
          break;
 800d3ca:	e029      	b.n	800d420 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	0011      	movs	r1, r2
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	f000 fc4a 	bl	800dc6c <USBD_SetConfig>
          break;
 800d3d8:	e022      	b.n	800d420 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	0011      	movs	r1, r2
 800d3e0:	0018      	movs	r0, r3
 800d3e2:	f000 fce7 	bl	800ddb4 <USBD_GetConfig>
          break;
 800d3e6:	e01b      	b.n	800d420 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	0011      	movs	r1, r2
 800d3ee:	0018      	movs	r0, r3
 800d3f0:	f000 fd1b 	bl	800de2a <USBD_GetStatus>
          break;
 800d3f4:	e014      	b.n	800d420 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d3f6:	683a      	ldr	r2, [r7, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	0011      	movs	r1, r2
 800d3fc:	0018      	movs	r0, r3
 800d3fe:	f000 fd4e 	bl	800de9e <USBD_SetFeature>
          break;
 800d402:	e00d      	b.n	800d420 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d404:	683a      	ldr	r2, [r7, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	0011      	movs	r1, r2
 800d40a:	0018      	movs	r0, r3
 800d40c:	f000 fd5d 	bl	800deca <USBD_ClrFeature>
          break;
 800d410:	e006      	b.n	800d420 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	0011      	movs	r1, r2
 800d418:	0018      	movs	r0, r3
 800d41a:	f000 fdb7 	bl	800df8c <USBD_CtlError>
          break;
 800d41e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800d420:	e006      	b.n	800d430 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	0011      	movs	r1, r2
 800d428:	0018      	movs	r0, r3
 800d42a:	f000 fdaf 	bl	800df8c <USBD_CtlError>
      break;
 800d42e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800d430:	230f      	movs	r3, #15
 800d432:	18fb      	adds	r3, r7, r3
 800d434:	781b      	ldrb	r3, [r3, #0]
}
 800d436:	0018      	movs	r0, r3
 800d438:	46bd      	mov	sp, r7
 800d43a:	b004      	add	sp, #16
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	46c0      	nop			; (mov r8, r8)
 800d440:	0801cea4 	.word	0x0801cea4

0800d444 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800d444:	b5b0      	push	{r4, r5, r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d44e:	230f      	movs	r3, #15
 800d450:	18fb      	adds	r3, r7, r3
 800d452:	2200      	movs	r2, #0
 800d454:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	001a      	movs	r2, r3
 800d45c:	2360      	movs	r3, #96	; 0x60
 800d45e:	4013      	ands	r3, r2
 800d460:	2b40      	cmp	r3, #64	; 0x40
 800d462:	d004      	beq.n	800d46e <USBD_StdItfReq+0x2a>
 800d464:	d839      	bhi.n	800d4da <USBD_StdItfReq+0x96>
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <USBD_StdItfReq+0x2a>
 800d46a:	2b20      	cmp	r3, #32
 800d46c:	d135      	bne.n	800d4da <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	23a7      	movs	r3, #167	; 0xa7
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	5cd3      	ldrb	r3, [r2, r3]
 800d476:	3b01      	subs	r3, #1
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d825      	bhi.n	800d4c8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	889b      	ldrh	r3, [r3, #4]
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b01      	cmp	r3, #1
 800d484:	d819      	bhi.n	800d4ba <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	23ad      	movs	r3, #173	; 0xad
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	58d3      	ldr	r3, [r2, r3]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	250f      	movs	r5, #15
 800d492:	197c      	adds	r4, r7, r5
 800d494:	6839      	ldr	r1, [r7, #0]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	0010      	movs	r0, r2
 800d49a:	4798      	blx	r3
 800d49c:	0003      	movs	r3, r0
 800d49e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	88db      	ldrh	r3, [r3, #6]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d116      	bne.n	800d4d6 <USBD_StdItfReq+0x92>
 800d4a8:	197b      	adds	r3, r7, r5
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d112      	bne.n	800d4d6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	0018      	movs	r0, r3
 800d4b4:	f000 fe52 	bl	800e15c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d4b8:	e00d      	b.n	800d4d6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	0011      	movs	r1, r2
 800d4c0:	0018      	movs	r0, r3
 800d4c2:	f000 fd63 	bl	800df8c <USBD_CtlError>
          break;
 800d4c6:	e006      	b.n	800d4d6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800d4c8:	683a      	ldr	r2, [r7, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	0011      	movs	r1, r2
 800d4ce:	0018      	movs	r0, r3
 800d4d0:	f000 fd5c 	bl	800df8c <USBD_CtlError>
          break;
 800d4d4:	e000      	b.n	800d4d8 <USBD_StdItfReq+0x94>
          break;
 800d4d6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800d4d8:	e006      	b.n	800d4e8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800d4da:	683a      	ldr	r2, [r7, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	0011      	movs	r1, r2
 800d4e0:	0018      	movs	r0, r3
 800d4e2:	f000 fd53 	bl	800df8c <USBD_CtlError>
      break;
 800d4e6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800d4e8:	2300      	movs	r3, #0
}
 800d4ea:	0018      	movs	r0, r3
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	b004      	add	sp, #16
 800d4f0:	bdb0      	pop	{r4, r5, r7, pc}

0800d4f2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d4f2:	b5b0      	push	{r4, r5, r7, lr}
 800d4f4:	b084      	sub	sp, #16
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d4fc:	230f      	movs	r3, #15
 800d4fe:	18fb      	adds	r3, r7, r3
 800d500:	2200      	movs	r2, #0
 800d502:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	889a      	ldrh	r2, [r3, #4]
 800d508:	230e      	movs	r3, #14
 800d50a:	18fb      	adds	r3, r7, r3
 800d50c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	001a      	movs	r2, r3
 800d514:	2360      	movs	r3, #96	; 0x60
 800d516:	4013      	ands	r3, r2
 800d518:	2b40      	cmp	r3, #64	; 0x40
 800d51a:	d006      	beq.n	800d52a <USBD_StdEPReq+0x38>
 800d51c:	d900      	bls.n	800d520 <USBD_StdEPReq+0x2e>
 800d51e:	e190      	b.n	800d842 <USBD_StdEPReq+0x350>
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00c      	beq.n	800d53e <USBD_StdEPReq+0x4c>
 800d524:	2b20      	cmp	r3, #32
 800d526:	d000      	beq.n	800d52a <USBD_StdEPReq+0x38>
 800d528:	e18b      	b.n	800d842 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	23ad      	movs	r3, #173	; 0xad
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	58d3      	ldr	r3, [r2, r3]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	6839      	ldr	r1, [r7, #0]
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	0010      	movs	r0, r2
 800d53a:	4798      	blx	r3
      break;
 800d53c:	e188      	b.n	800d850 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	001a      	movs	r2, r3
 800d544:	2360      	movs	r3, #96	; 0x60
 800d546:	4013      	ands	r3, r2
 800d548:	2b20      	cmp	r3, #32
 800d54a:	d10f      	bne.n	800d56c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	23ad      	movs	r3, #173	; 0xad
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	58d3      	ldr	r3, [r2, r3]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	250f      	movs	r5, #15
 800d558:	197c      	adds	r4, r7, r5
 800d55a:	6839      	ldr	r1, [r7, #0]
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	0010      	movs	r0, r2
 800d560:	4798      	blx	r3
 800d562:	0003      	movs	r3, r0
 800d564:	7023      	strb	r3, [r4, #0]

        return ret;
 800d566:	197b      	adds	r3, r7, r5
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	e174      	b.n	800d856 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	785b      	ldrb	r3, [r3, #1]
 800d570:	2b03      	cmp	r3, #3
 800d572:	d007      	beq.n	800d584 <USBD_StdEPReq+0x92>
 800d574:	dd00      	ble.n	800d578 <USBD_StdEPReq+0x86>
 800d576:	e15c      	b.n	800d832 <USBD_StdEPReq+0x340>
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d100      	bne.n	800d57e <USBD_StdEPReq+0x8c>
 800d57c:	e092      	b.n	800d6a4 <USBD_StdEPReq+0x1b2>
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d04b      	beq.n	800d61a <USBD_StdEPReq+0x128>
 800d582:	e156      	b.n	800d832 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	23a7      	movs	r3, #167	; 0xa7
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	5cd3      	ldrb	r3, [r2, r3]
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d002      	beq.n	800d596 <USBD_StdEPReq+0xa4>
 800d590:	2b03      	cmp	r3, #3
 800d592:	d01d      	beq.n	800d5d0 <USBD_StdEPReq+0xde>
 800d594:	e039      	b.n	800d60a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d596:	220e      	movs	r2, #14
 800d598:	18bb      	adds	r3, r7, r2
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d010      	beq.n	800d5c2 <USBD_StdEPReq+0xd0>
 800d5a0:	18bb      	adds	r3, r7, r2
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	2b80      	cmp	r3, #128	; 0x80
 800d5a6:	d00c      	beq.n	800d5c2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d5a8:	18bb      	adds	r3, r7, r2
 800d5aa:	781a      	ldrb	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	0011      	movs	r1, r2
 800d5b0:	0018      	movs	r0, r3
 800d5b2:	f008 ff16 	bl	80163e2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2180      	movs	r1, #128	; 0x80
 800d5ba:	0018      	movs	r0, r3
 800d5bc:	f008 ff11 	bl	80163e2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d5c0:	e02a      	b.n	800d618 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800d5c2:	683a      	ldr	r2, [r7, #0]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	0011      	movs	r1, r2
 800d5c8:	0018      	movs	r0, r3
 800d5ca:	f000 fcdf 	bl	800df8c <USBD_CtlError>
              break;
 800d5ce:	e023      	b.n	800d618 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	885b      	ldrh	r3, [r3, #2]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d113      	bne.n	800d600 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800d5d8:	220e      	movs	r2, #14
 800d5da:	18bb      	adds	r3, r7, r2
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d00e      	beq.n	800d600 <USBD_StdEPReq+0x10e>
 800d5e2:	18bb      	adds	r3, r7, r2
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	2b80      	cmp	r3, #128	; 0x80
 800d5e8:	d00a      	beq.n	800d600 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	88db      	ldrh	r3, [r3, #6]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d5f2:	18bb      	adds	r3, r7, r2
 800d5f4:	781a      	ldrb	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	0011      	movs	r1, r2
 800d5fa:	0018      	movs	r0, r3
 800d5fc:	f008 fef1 	bl	80163e2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	0018      	movs	r0, r3
 800d604:	f000 fdaa 	bl	800e15c <USBD_CtlSendStatus>

              break;
 800d608:	e006      	b.n	800d618 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	0011      	movs	r1, r2
 800d610:	0018      	movs	r0, r3
 800d612:	f000 fcbb 	bl	800df8c <USBD_CtlError>
              break;
 800d616:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800d618:	e112      	b.n	800d840 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	23a7      	movs	r3, #167	; 0xa7
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	5cd3      	ldrb	r3, [r2, r3]
 800d622:	2b02      	cmp	r3, #2
 800d624:	d002      	beq.n	800d62c <USBD_StdEPReq+0x13a>
 800d626:	2b03      	cmp	r3, #3
 800d628:	d01d      	beq.n	800d666 <USBD_StdEPReq+0x174>
 800d62a:	e032      	b.n	800d692 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d62c:	220e      	movs	r2, #14
 800d62e:	18bb      	adds	r3, r7, r2
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d010      	beq.n	800d658 <USBD_StdEPReq+0x166>
 800d636:	18bb      	adds	r3, r7, r2
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b80      	cmp	r3, #128	; 0x80
 800d63c:	d00c      	beq.n	800d658 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d63e:	18bb      	adds	r3, r7, r2
 800d640:	781a      	ldrb	r2, [r3, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	0011      	movs	r1, r2
 800d646:	0018      	movs	r0, r3
 800d648:	f008 fecb 	bl	80163e2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2180      	movs	r1, #128	; 0x80
 800d650:	0018      	movs	r0, r3
 800d652:	f008 fec6 	bl	80163e2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d656:	e024      	b.n	800d6a2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	0011      	movs	r1, r2
 800d65e:	0018      	movs	r0, r3
 800d660:	f000 fc94 	bl	800df8c <USBD_CtlError>
              break;
 800d664:	e01d      	b.n	800d6a2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	885b      	ldrh	r3, [r3, #2]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d118      	bne.n	800d6a0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d66e:	210e      	movs	r1, #14
 800d670:	187b      	adds	r3, r7, r1
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	227f      	movs	r2, #127	; 0x7f
 800d676:	4013      	ands	r3, r2
 800d678:	d006      	beq.n	800d688 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d67a:	187b      	adds	r3, r7, r1
 800d67c:	781a      	ldrb	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	0011      	movs	r1, r2
 800d682:	0018      	movs	r0, r3
 800d684:	f008 fed8 	bl	8016438 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	0018      	movs	r0, r3
 800d68c:	f000 fd66 	bl	800e15c <USBD_CtlSendStatus>
              }
              break;
 800d690:	e006      	b.n	800d6a0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	0011      	movs	r1, r2
 800d698:	0018      	movs	r0, r3
 800d69a:	f000 fc77 	bl	800df8c <USBD_CtlError>
              break;
 800d69e:	e000      	b.n	800d6a2 <USBD_StdEPReq+0x1b0>
              break;
 800d6a0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800d6a2:	e0cd      	b.n	800d840 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	23a7      	movs	r3, #167	; 0xa7
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	5cd3      	ldrb	r3, [r2, r3]
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d002      	beq.n	800d6b6 <USBD_StdEPReq+0x1c4>
 800d6b0:	2b03      	cmp	r3, #3
 800d6b2:	d03c      	beq.n	800d72e <USBD_StdEPReq+0x23c>
 800d6b4:	e0b5      	b.n	800d822 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6b6:	220e      	movs	r2, #14
 800d6b8:	18bb      	adds	r3, r7, r2
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00a      	beq.n	800d6d6 <USBD_StdEPReq+0x1e4>
 800d6c0:	18bb      	adds	r3, r7, r2
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b80      	cmp	r3, #128	; 0x80
 800d6c6:	d006      	beq.n	800d6d6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	0011      	movs	r1, r2
 800d6ce:	0018      	movs	r0, r3
 800d6d0:	f000 fc5c 	bl	800df8c <USBD_CtlError>
                break;
 800d6d4:	e0ac      	b.n	800d830 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6d6:	220e      	movs	r2, #14
 800d6d8:	18bb      	adds	r3, r7, r2
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	b25b      	sxtb	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	da0c      	bge.n	800d6fc <USBD_StdEPReq+0x20a>
 800d6e2:	18bb      	adds	r3, r7, r2
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	227f      	movs	r2, #127	; 0x7f
 800d6e8:	401a      	ands	r2, r3
 800d6ea:	0013      	movs	r3, r2
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	189b      	adds	r3, r3, r2
 800d6f0:	009b      	lsls	r3, r3, #2
 800d6f2:	3310      	adds	r3, #16
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	18d3      	adds	r3, r2, r3
 800d6f8:	3304      	adds	r3, #4
 800d6fa:	e00d      	b.n	800d718 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6fc:	230e      	movs	r3, #14
 800d6fe:	18fb      	adds	r3, r7, r3
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	227f      	movs	r2, #127	; 0x7f
 800d704:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d706:	0013      	movs	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	189b      	adds	r3, r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	3351      	adds	r3, #81	; 0x51
 800d710:	33ff      	adds	r3, #255	; 0xff
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	18d3      	adds	r3, r2, r3
 800d716:	3304      	adds	r3, #4
 800d718:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2200      	movs	r2, #0
 800d71e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2202      	movs	r2, #2
 800d726:	0018      	movs	r0, r3
 800d728:	f000 fcae 	bl	800e088 <USBD_CtlSendData>
              break;
 800d72c:	e080      	b.n	800d830 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d72e:	220e      	movs	r2, #14
 800d730:	18bb      	adds	r3, r7, r2
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	b25b      	sxtb	r3, r3
 800d736:	2b00      	cmp	r3, #0
 800d738:	da14      	bge.n	800d764 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d73a:	18bb      	adds	r3, r7, r2
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	220f      	movs	r2, #15
 800d740:	401a      	ands	r2, r3
 800d742:	6879      	ldr	r1, [r7, #4]
 800d744:	0013      	movs	r3, r2
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	189b      	adds	r3, r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	18cb      	adds	r3, r1, r3
 800d74e:	3318      	adds	r3, #24
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d11e      	bne.n	800d794 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800d756:	683a      	ldr	r2, [r7, #0]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	0011      	movs	r1, r2
 800d75c:	0018      	movs	r0, r3
 800d75e:	f000 fc15 	bl	800df8c <USBD_CtlError>
                  break;
 800d762:	e065      	b.n	800d830 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d764:	230e      	movs	r3, #14
 800d766:	18fb      	adds	r3, r7, r3
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	220f      	movs	r2, #15
 800d76c:	401a      	ands	r2, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	23ac      	movs	r3, #172	; 0xac
 800d772:	0059      	lsls	r1, r3, #1
 800d774:	0013      	movs	r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	189b      	adds	r3, r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	18c3      	adds	r3, r0, r3
 800d77e:	185b      	adds	r3, r3, r1
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d106      	bne.n	800d794 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	0011      	movs	r1, r2
 800d78c:	0018      	movs	r0, r3
 800d78e:	f000 fbfd 	bl	800df8c <USBD_CtlError>
                  break;
 800d792:	e04d      	b.n	800d830 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d794:	220e      	movs	r2, #14
 800d796:	18bb      	adds	r3, r7, r2
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	b25b      	sxtb	r3, r3
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	da0c      	bge.n	800d7ba <USBD_StdEPReq+0x2c8>
 800d7a0:	18bb      	adds	r3, r7, r2
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	227f      	movs	r2, #127	; 0x7f
 800d7a6:	401a      	ands	r2, r3
 800d7a8:	0013      	movs	r3, r2
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	189b      	adds	r3, r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	3310      	adds	r3, #16
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	18d3      	adds	r3, r2, r3
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	e00d      	b.n	800d7d6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7ba:	230e      	movs	r3, #14
 800d7bc:	18fb      	adds	r3, r7, r3
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	227f      	movs	r2, #127	; 0x7f
 800d7c2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7c4:	0013      	movs	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	189b      	adds	r3, r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	3351      	adds	r3, #81	; 0x51
 800d7ce:	33ff      	adds	r3, #255	; 0xff
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	18d3      	adds	r3, r2, r3
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d7d8:	220e      	movs	r2, #14
 800d7da:	18bb      	adds	r3, r7, r2
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <USBD_StdEPReq+0x2f8>
 800d7e2:	18bb      	adds	r3, r7, r2
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	2b80      	cmp	r3, #128	; 0x80
 800d7e8:	d103      	bne.n	800d7f2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	e010      	b.n	800d814 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d7f2:	230e      	movs	r3, #14
 800d7f4:	18fb      	adds	r3, r7, r3
 800d7f6:	781a      	ldrb	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	0011      	movs	r1, r2
 800d7fc:	0018      	movs	r0, r3
 800d7fe:	f008 fe46 	bl	801648e <USBD_LL_IsStallEP>
 800d802:	1e03      	subs	r3, r0, #0
 800d804:	d003      	beq.n	800d80e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	2201      	movs	r2, #1
 800d80a:	601a      	str	r2, [r3, #0]
 800d80c:	e002      	b.n	800d814 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2200      	movs	r2, #0
 800d812:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d814:	68b9      	ldr	r1, [r7, #8]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2202      	movs	r2, #2
 800d81a:	0018      	movs	r0, r3
 800d81c:	f000 fc34 	bl	800e088 <USBD_CtlSendData>
              break;
 800d820:	e006      	b.n	800d830 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800d822:	683a      	ldr	r2, [r7, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	0011      	movs	r1, r2
 800d828:	0018      	movs	r0, r3
 800d82a:	f000 fbaf 	bl	800df8c <USBD_CtlError>
              break;
 800d82e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800d830:	e006      	b.n	800d840 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800d832:	683a      	ldr	r2, [r7, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	0011      	movs	r1, r2
 800d838:	0018      	movs	r0, r3
 800d83a:	f000 fba7 	bl	800df8c <USBD_CtlError>
          break;
 800d83e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800d840:	e006      	b.n	800d850 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800d842:	683a      	ldr	r2, [r7, #0]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	0011      	movs	r1, r2
 800d848:	0018      	movs	r0, r3
 800d84a:	f000 fb9f 	bl	800df8c <USBD_CtlError>
      break;
 800d84e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800d850:	230f      	movs	r3, #15
 800d852:	18fb      	adds	r3, r7, r3
 800d854:	781b      	ldrb	r3, [r3, #0]
}
 800d856:	0018      	movs	r0, r3
 800d858:	46bd      	mov	sp, r7
 800d85a:	b004      	add	sp, #16
 800d85c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d860 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d86a:	2308      	movs	r3, #8
 800d86c:	18fb      	adds	r3, r7, r3
 800d86e:	2200      	movs	r2, #0
 800d870:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800d872:	2300      	movs	r3, #0
 800d874:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d876:	230b      	movs	r3, #11
 800d878:	18fb      	adds	r3, r7, r3
 800d87a:	2200      	movs	r2, #0
 800d87c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	885b      	ldrh	r3, [r3, #2]
 800d882:	0a1b      	lsrs	r3, r3, #8
 800d884:	b29b      	uxth	r3, r3
 800d886:	2b07      	cmp	r3, #7
 800d888:	d900      	bls.n	800d88c <USBD_GetDescriptor+0x2c>
 800d88a:	e159      	b.n	800db40 <USBD_GetDescriptor+0x2e0>
 800d88c:	009a      	lsls	r2, r3, #2
 800d88e:	4bcb      	ldr	r3, [pc, #812]	; (800dbbc <USBD_GetDescriptor+0x35c>)
 800d890:	18d3      	adds	r3, r2, r3
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	23ac      	movs	r3, #172	; 0xac
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	58d3      	ldr	r3, [r2, r3]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	7c12      	ldrb	r2, [r2, #16]
 800d8a4:	2108      	movs	r1, #8
 800d8a6:	1879      	adds	r1, r7, r1
 800d8a8:	0010      	movs	r0, r2
 800d8aa:	4798      	blx	r3
 800d8ac:	0003      	movs	r3, r0
 800d8ae:	60fb      	str	r3, [r7, #12]
      break;
 800d8b0:	e153      	b.n	800db5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	7c1b      	ldrb	r3, [r3, #16]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d10f      	bne.n	800d8da <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	23ad      	movs	r3, #173	; 0xad
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	58d3      	ldr	r3, [r2, r3]
 800d8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c4:	2208      	movs	r2, #8
 800d8c6:	18ba      	adds	r2, r7, r2
 800d8c8:	0010      	movs	r0, r2
 800d8ca:	4798      	blx	r3
 800d8cc:	0003      	movs	r3, r0
 800d8ce:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	2202      	movs	r2, #2
 800d8d6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d8d8:	e13f      	b.n	800db5a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	23ad      	movs	r3, #173	; 0xad
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	58d3      	ldr	r3, [r2, r3]
 800d8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e4:	2208      	movs	r2, #8
 800d8e6:	18ba      	adds	r2, r7, r2
 800d8e8:	0010      	movs	r0, r2
 800d8ea:	4798      	blx	r3
 800d8ec:	0003      	movs	r3, r0
 800d8ee:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	2202      	movs	r2, #2
 800d8f6:	701a      	strb	r2, [r3, #0]
      break;
 800d8f8:	e12f      	b.n	800db5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	885b      	ldrh	r3, [r3, #2]
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b05      	cmp	r3, #5
 800d902:	d900      	bls.n	800d906 <USBD_GetDescriptor+0xa6>
 800d904:	e0d0      	b.n	800daa8 <USBD_GetDescriptor+0x248>
 800d906:	009a      	lsls	r2, r3, #2
 800d908:	4bad      	ldr	r3, [pc, #692]	; (800dbc0 <USBD_GetDescriptor+0x360>)
 800d90a:	18d3      	adds	r3, r2, r3
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	23ac      	movs	r3, #172	; 0xac
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	58d3      	ldr	r3, [r2, r3]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00d      	beq.n	800d93a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	23ac      	movs	r3, #172	; 0xac
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	58d3      	ldr	r3, [r2, r3]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	7c12      	ldrb	r2, [r2, #16]
 800d92c:	2108      	movs	r1, #8
 800d92e:	1879      	adds	r1, r7, r1
 800d930:	0010      	movs	r0, r2
 800d932:	4798      	blx	r3
 800d934:	0003      	movs	r3, r0
 800d936:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d938:	e0c3      	b.n	800dac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	0011      	movs	r1, r2
 800d940:	0018      	movs	r0, r3
 800d942:	f000 fb23 	bl	800df8c <USBD_CtlError>
            err++;
 800d946:	210b      	movs	r1, #11
 800d948:	187b      	adds	r3, r7, r1
 800d94a:	781a      	ldrb	r2, [r3, #0]
 800d94c:	187b      	adds	r3, r7, r1
 800d94e:	3201      	adds	r2, #1
 800d950:	701a      	strb	r2, [r3, #0]
          break;
 800d952:	e0b6      	b.n	800dac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	23ac      	movs	r3, #172	; 0xac
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	58d3      	ldr	r3, [r2, r3]
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00d      	beq.n	800d97e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	23ac      	movs	r3, #172	; 0xac
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	58d3      	ldr	r3, [r2, r3]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	7c12      	ldrb	r2, [r2, #16]
 800d970:	2108      	movs	r1, #8
 800d972:	1879      	adds	r1, r7, r1
 800d974:	0010      	movs	r0, r2
 800d976:	4798      	blx	r3
 800d978:	0003      	movs	r3, r0
 800d97a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d97c:	e0a1      	b.n	800dac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	0011      	movs	r1, r2
 800d984:	0018      	movs	r0, r3
 800d986:	f000 fb01 	bl	800df8c <USBD_CtlError>
            err++;
 800d98a:	210b      	movs	r1, #11
 800d98c:	187b      	adds	r3, r7, r1
 800d98e:	781a      	ldrb	r2, [r3, #0]
 800d990:	187b      	adds	r3, r7, r1
 800d992:	3201      	adds	r2, #1
 800d994:	701a      	strb	r2, [r3, #0]
          break;
 800d996:	e094      	b.n	800dac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	23ac      	movs	r3, #172	; 0xac
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	58d3      	ldr	r3, [r2, r3]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00d      	beq.n	800d9c2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	23ac      	movs	r3, #172	; 0xac
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	58d3      	ldr	r3, [r2, r3]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	7c12      	ldrb	r2, [r2, #16]
 800d9b4:	2108      	movs	r1, #8
 800d9b6:	1879      	adds	r1, r7, r1
 800d9b8:	0010      	movs	r0, r2
 800d9ba:	4798      	blx	r3
 800d9bc:	0003      	movs	r3, r0
 800d9be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9c0:	e07f      	b.n	800dac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d9c2:	683a      	ldr	r2, [r7, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	0011      	movs	r1, r2
 800d9c8:	0018      	movs	r0, r3
 800d9ca:	f000 fadf 	bl	800df8c <USBD_CtlError>
            err++;
 800d9ce:	210b      	movs	r1, #11
 800d9d0:	187b      	adds	r3, r7, r1
 800d9d2:	781a      	ldrb	r2, [r3, #0]
 800d9d4:	187b      	adds	r3, r7, r1
 800d9d6:	3201      	adds	r2, #1
 800d9d8:	701a      	strb	r2, [r3, #0]
          break;
 800d9da:	e072      	b.n	800dac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	23ac      	movs	r3, #172	; 0xac
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	58d3      	ldr	r3, [r2, r3]
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00d      	beq.n	800da06 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	23ac      	movs	r3, #172	; 0xac
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	58d3      	ldr	r3, [r2, r3]
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	7c12      	ldrb	r2, [r2, #16]
 800d9f8:	2108      	movs	r1, #8
 800d9fa:	1879      	adds	r1, r7, r1
 800d9fc:	0010      	movs	r0, r2
 800d9fe:	4798      	blx	r3
 800da00:	0003      	movs	r3, r0
 800da02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da04:	e05d      	b.n	800dac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800da06:	683a      	ldr	r2, [r7, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	0011      	movs	r1, r2
 800da0c:	0018      	movs	r0, r3
 800da0e:	f000 fabd 	bl	800df8c <USBD_CtlError>
            err++;
 800da12:	210b      	movs	r1, #11
 800da14:	187b      	adds	r3, r7, r1
 800da16:	781a      	ldrb	r2, [r3, #0]
 800da18:	187b      	adds	r3, r7, r1
 800da1a:	3201      	adds	r2, #1
 800da1c:	701a      	strb	r2, [r3, #0]
          break;
 800da1e:	e050      	b.n	800dac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	23ac      	movs	r3, #172	; 0xac
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	58d3      	ldr	r3, [r2, r3]
 800da28:	695b      	ldr	r3, [r3, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00d      	beq.n	800da4a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	23ac      	movs	r3, #172	; 0xac
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	58d3      	ldr	r3, [r2, r3]
 800da36:	695b      	ldr	r3, [r3, #20]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	7c12      	ldrb	r2, [r2, #16]
 800da3c:	2108      	movs	r1, #8
 800da3e:	1879      	adds	r1, r7, r1
 800da40:	0010      	movs	r0, r2
 800da42:	4798      	blx	r3
 800da44:	0003      	movs	r3, r0
 800da46:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da48:	e03b      	b.n	800dac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	0011      	movs	r1, r2
 800da50:	0018      	movs	r0, r3
 800da52:	f000 fa9b 	bl	800df8c <USBD_CtlError>
            err++;
 800da56:	210b      	movs	r1, #11
 800da58:	187b      	adds	r3, r7, r1
 800da5a:	781a      	ldrb	r2, [r3, #0]
 800da5c:	187b      	adds	r3, r7, r1
 800da5e:	3201      	adds	r2, #1
 800da60:	701a      	strb	r2, [r3, #0]
          break;
 800da62:	e02e      	b.n	800dac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	23ac      	movs	r3, #172	; 0xac
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	58d3      	ldr	r3, [r2, r3]
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00d      	beq.n	800da8e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	23ac      	movs	r3, #172	; 0xac
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	58d3      	ldr	r3, [r2, r3]
 800da7a:	699b      	ldr	r3, [r3, #24]
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	7c12      	ldrb	r2, [r2, #16]
 800da80:	2108      	movs	r1, #8
 800da82:	1879      	adds	r1, r7, r1
 800da84:	0010      	movs	r0, r2
 800da86:	4798      	blx	r3
 800da88:	0003      	movs	r3, r0
 800da8a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da8c:	e019      	b.n	800dac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800da8e:	683a      	ldr	r2, [r7, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	0011      	movs	r1, r2
 800da94:	0018      	movs	r0, r3
 800da96:	f000 fa79 	bl	800df8c <USBD_CtlError>
            err++;
 800da9a:	210b      	movs	r1, #11
 800da9c:	187b      	adds	r3, r7, r1
 800da9e:	781a      	ldrb	r2, [r3, #0]
 800daa0:	187b      	adds	r3, r7, r1
 800daa2:	3201      	adds	r2, #1
 800daa4:	701a      	strb	r2, [r3, #0]
          break;
 800daa6:	e00c      	b.n	800dac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	0011      	movs	r1, r2
 800daae:	0018      	movs	r0, r3
 800dab0:	f000 fa6c 	bl	800df8c <USBD_CtlError>
          err++;
 800dab4:	210b      	movs	r1, #11
 800dab6:	187b      	adds	r3, r7, r1
 800dab8:	781a      	ldrb	r2, [r3, #0]
 800daba:	187b      	adds	r3, r7, r1
 800dabc:	3201      	adds	r2, #1
 800dabe:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800dac0:	e04b      	b.n	800db5a <USBD_GetDescriptor+0x2fa>
 800dac2:	e04a      	b.n	800db5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	7c1b      	ldrb	r3, [r3, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10b      	bne.n	800dae4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	23ad      	movs	r3, #173	; 0xad
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	58d3      	ldr	r3, [r2, r3]
 800dad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad6:	2208      	movs	r2, #8
 800dad8:	18ba      	adds	r2, r7, r2
 800dada:	0010      	movs	r0, r2
 800dadc:	4798      	blx	r3
 800dade:	0003      	movs	r3, r0
 800dae0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dae2:	e03a      	b.n	800db5a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800dae4:	683a      	ldr	r2, [r7, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	0011      	movs	r1, r2
 800daea:	0018      	movs	r0, r3
 800daec:	f000 fa4e 	bl	800df8c <USBD_CtlError>
        err++;
 800daf0:	210b      	movs	r1, #11
 800daf2:	187b      	adds	r3, r7, r1
 800daf4:	781a      	ldrb	r2, [r3, #0]
 800daf6:	187b      	adds	r3, r7, r1
 800daf8:	3201      	adds	r2, #1
 800dafa:	701a      	strb	r2, [r3, #0]
      break;
 800dafc:	e02d      	b.n	800db5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	7c1b      	ldrb	r3, [r3, #16]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d10f      	bne.n	800db26 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	23ad      	movs	r3, #173	; 0xad
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	58d3      	ldr	r3, [r2, r3]
 800db0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db10:	2208      	movs	r2, #8
 800db12:	18ba      	adds	r2, r7, r2
 800db14:	0010      	movs	r0, r2
 800db16:	4798      	blx	r3
 800db18:	0003      	movs	r3, r0
 800db1a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	3301      	adds	r3, #1
 800db20:	2207      	movs	r2, #7
 800db22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db24:	e019      	b.n	800db5a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	0011      	movs	r1, r2
 800db2c:	0018      	movs	r0, r3
 800db2e:	f000 fa2d 	bl	800df8c <USBD_CtlError>
        err++;
 800db32:	210b      	movs	r1, #11
 800db34:	187b      	adds	r3, r7, r1
 800db36:	781a      	ldrb	r2, [r3, #0]
 800db38:	187b      	adds	r3, r7, r1
 800db3a:	3201      	adds	r2, #1
 800db3c:	701a      	strb	r2, [r3, #0]
      break;
 800db3e:	e00c      	b.n	800db5a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800db40:	683a      	ldr	r2, [r7, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	0011      	movs	r1, r2
 800db46:	0018      	movs	r0, r3
 800db48:	f000 fa20 	bl	800df8c <USBD_CtlError>
      err++;
 800db4c:	210b      	movs	r1, #11
 800db4e:	187b      	adds	r3, r7, r1
 800db50:	781a      	ldrb	r2, [r3, #0]
 800db52:	187b      	adds	r3, r7, r1
 800db54:	3201      	adds	r2, #1
 800db56:	701a      	strb	r2, [r3, #0]
      break;
 800db58:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800db5a:	230b      	movs	r3, #11
 800db5c:	18fb      	adds	r3, r7, r3
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d127      	bne.n	800dbb4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800db64:	2108      	movs	r1, #8
 800db66:	187b      	adds	r3, r7, r1
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d019      	beq.n	800dba2 <USBD_GetDescriptor+0x342>
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	88db      	ldrh	r3, [r3, #6]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d015      	beq.n	800dba2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	88da      	ldrh	r2, [r3, #6]
 800db7a:	187b      	adds	r3, r7, r1
 800db7c:	881b      	ldrh	r3, [r3, #0]
 800db7e:	1c18      	adds	r0, r3, #0
 800db80:	1c11      	adds	r1, r2, #0
 800db82:	b28a      	uxth	r2, r1
 800db84:	b283      	uxth	r3, r0
 800db86:	429a      	cmp	r2, r3
 800db88:	d900      	bls.n	800db8c <USBD_GetDescriptor+0x32c>
 800db8a:	1c01      	adds	r1, r0, #0
 800db8c:	b28a      	uxth	r2, r1
 800db8e:	2108      	movs	r1, #8
 800db90:	187b      	adds	r3, r7, r1
 800db92:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800db94:	187b      	adds	r3, r7, r1
 800db96:	881a      	ldrh	r2, [r3, #0]
 800db98:	68f9      	ldr	r1, [r7, #12]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	0018      	movs	r0, r3
 800db9e:	f000 fa73 	bl	800e088 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	88db      	ldrh	r3, [r3, #6]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d105      	bne.n	800dbb6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	0018      	movs	r0, r3
 800dbae:	f000 fad5 	bl	800e15c <USBD_CtlSendStatus>
 800dbb2:	e000      	b.n	800dbb6 <USBD_GetDescriptor+0x356>
    return;
 800dbb4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	b004      	add	sp, #16
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	0801cecc 	.word	0x0801cecc
 800dbc0:	0801ceec 	.word	0x0801ceec

0800dbc4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800dbc4:	b590      	push	{r4, r7, lr}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	889b      	ldrh	r3, [r3, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d13d      	bne.n	800dc52 <USBD_SetAddress+0x8e>
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	88db      	ldrh	r3, [r3, #6]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d139      	bne.n	800dc52 <USBD_SetAddress+0x8e>
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	885b      	ldrh	r3, [r3, #2]
 800dbe2:	2b7f      	cmp	r3, #127	; 0x7f
 800dbe4:	d835      	bhi.n	800dc52 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	885b      	ldrh	r3, [r3, #2]
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	230f      	movs	r3, #15
 800dbee:	18fb      	adds	r3, r7, r3
 800dbf0:	217f      	movs	r1, #127	; 0x7f
 800dbf2:	400a      	ands	r2, r1
 800dbf4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	23a7      	movs	r3, #167	; 0xa7
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	5cd3      	ldrb	r3, [r2, r3]
 800dbfe:	2b03      	cmp	r3, #3
 800dc00:	d106      	bne.n	800dc10 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	0011      	movs	r1, r2
 800dc08:	0018      	movs	r0, r3
 800dc0a:	f000 f9bf 	bl	800df8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc0e:	e027      	b.n	800dc60 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	240f      	movs	r4, #15
 800dc14:	193a      	adds	r2, r7, r4
 800dc16:	4914      	ldr	r1, [pc, #80]	; (800dc68 <USBD_SetAddress+0xa4>)
 800dc18:	7812      	ldrb	r2, [r2, #0]
 800dc1a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dc1c:	193b      	adds	r3, r7, r4
 800dc1e:	781a      	ldrb	r2, [r3, #0]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	0011      	movs	r1, r2
 800dc24:	0018      	movs	r0, r3
 800dc26:	f008 fc63 	bl	80164f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	0018      	movs	r0, r3
 800dc2e:	f000 fa95 	bl	800e15c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dc32:	193b      	adds	r3, r7, r4
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d005      	beq.n	800dc46 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	23a7      	movs	r3, #167	; 0xa7
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	2102      	movs	r1, #2
 800dc42:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc44:	e00c      	b.n	800dc60 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	23a7      	movs	r3, #167	; 0xa7
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	2101      	movs	r1, #1
 800dc4e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc50:	e006      	b.n	800dc60 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	0011      	movs	r1, r2
 800dc58:	0018      	movs	r0, r3
 800dc5a:	f000 f997 	bl	800df8c <USBD_CtlError>
  }
}
 800dc5e:	46c0      	nop			; (mov r8, r8)
 800dc60:	46c0      	nop			; (mov r8, r8)
 800dc62:	46bd      	mov	sp, r7
 800dc64:	b005      	add	sp, #20
 800dc66:	bd90      	pop	{r4, r7, pc}
 800dc68:	0000029e 	.word	0x0000029e

0800dc6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	885b      	ldrh	r3, [r3, #2]
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	4b4c      	ldr	r3, [pc, #304]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dc7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dc80:	4b4b      	ldr	r3, [pc, #300]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d906      	bls.n	800dc96 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	0011      	movs	r1, r2
 800dc8e:	0018      	movs	r0, r3
 800dc90:	f000 f97c 	bl	800df8c <USBD_CtlError>
 800dc94:	e088      	b.n	800dda8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	23a7      	movs	r3, #167	; 0xa7
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	5cd3      	ldrb	r3, [r2, r3]
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d002      	beq.n	800dca8 <USBD_SetConfig+0x3c>
 800dca2:	2b03      	cmp	r3, #3
 800dca4:	d029      	beq.n	800dcfa <USBD_SetConfig+0x8e>
 800dca6:	e071      	b.n	800dd8c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800dca8:	4b41      	ldr	r3, [pc, #260]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d01f      	beq.n	800dcf0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800dcb0:	4b3f      	ldr	r3, [pc, #252]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	001a      	movs	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	23a7      	movs	r3, #167	; 0xa7
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	2103      	movs	r1, #3
 800dcc2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800dcc4:	4b3a      	ldr	r3, [pc, #232]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dcc6:	781a      	ldrb	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	0011      	movs	r1, r2
 800dccc:	0018      	movs	r0, r3
 800dcce:	f7ff f8c6 	bl	800ce5e <USBD_SetClassConfig>
 800dcd2:	0003      	movs	r3, r0
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	d106      	bne.n	800dce6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	0011      	movs	r1, r2
 800dcde:	0018      	movs	r0, r3
 800dce0:	f000 f954 	bl	800df8c <USBD_CtlError>
            return;
 800dce4:	e060      	b.n	800dda8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	0018      	movs	r0, r3
 800dcea:	f000 fa37 	bl	800e15c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800dcee:	e05b      	b.n	800dda8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	f000 fa32 	bl	800e15c <USBD_CtlSendStatus>
        break;
 800dcf8:	e056      	b.n	800dda8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800dcfa:	4b2d      	ldr	r3, [pc, #180]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d115      	bne.n	800dd2e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	23a7      	movs	r3, #167	; 0xa7
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	2102      	movs	r1, #2
 800dd0a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800dd0c:	4b28      	ldr	r3, [pc, #160]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	001a      	movs	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800dd16:	4b26      	ldr	r3, [pc, #152]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dd18:	781a      	ldrb	r2, [r3, #0]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	0011      	movs	r1, r2
 800dd1e:	0018      	movs	r0, r3
 800dd20:	f7ff f8c4 	bl	800ceac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	0018      	movs	r0, r3
 800dd28:	f000 fa18 	bl	800e15c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800dd2c:	e03c      	b.n	800dda8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800dd2e:	4b20      	ldr	r3, [pc, #128]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	001a      	movs	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d022      	beq.n	800dd82 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	0011      	movs	r1, r2
 800dd46:	0018      	movs	r0, r3
 800dd48:	f7ff f8b0 	bl	800ceac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800dd4c:	4b18      	ldr	r3, [pc, #96]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	001a      	movs	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800dd56:	4b16      	ldr	r3, [pc, #88]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dd58:	781a      	ldrb	r2, [r3, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	0011      	movs	r1, r2
 800dd5e:	0018      	movs	r0, r3
 800dd60:	f7ff f87d 	bl	800ce5e <USBD_SetClassConfig>
 800dd64:	0003      	movs	r3, r0
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d106      	bne.n	800dd78 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	0011      	movs	r1, r2
 800dd70:	0018      	movs	r0, r3
 800dd72:	f000 f90b 	bl	800df8c <USBD_CtlError>
            return;
 800dd76:	e017      	b.n	800dda8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	0018      	movs	r0, r3
 800dd7c:	f000 f9ee 	bl	800e15c <USBD_CtlSendStatus>
        break;
 800dd80:	e012      	b.n	800dda8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	0018      	movs	r0, r3
 800dd86:	f000 f9e9 	bl	800e15c <USBD_CtlSendStatus>
        break;
 800dd8a:	e00d      	b.n	800dda8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	0011      	movs	r1, r2
 800dd92:	0018      	movs	r0, r3
 800dd94:	f000 f8fa 	bl	800df8c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800dd98:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <USBD_SetConfig+0x144>)
 800dd9a:	781a      	ldrb	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	0011      	movs	r1, r2
 800dda0:	0018      	movs	r0, r3
 800dda2:	f7ff f883 	bl	800ceac <USBD_ClrClassConfig>
        break;
 800dda6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	b002      	add	sp, #8
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	46c0      	nop			; (mov r8, r8)
 800ddb0:	20000e84 	.word	0x20000e84

0800ddb4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	88db      	ldrh	r3, [r3, #6]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d006      	beq.n	800ddd4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800ddc6:	683a      	ldr	r2, [r7, #0]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	0011      	movs	r1, r2
 800ddcc:	0018      	movs	r0, r3
 800ddce:	f000 f8dd 	bl	800df8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ddd2:	e026      	b.n	800de22 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	23a7      	movs	r3, #167	; 0xa7
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	5cd3      	ldrb	r3, [r2, r3]
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	dc02      	bgt.n	800dde6 <USBD_GetConfig+0x32>
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	dc03      	bgt.n	800ddec <USBD_GetConfig+0x38>
 800dde4:	e016      	b.n	800de14 <USBD_GetConfig+0x60>
 800dde6:	2b03      	cmp	r3, #3
 800dde8:	d00c      	beq.n	800de04 <USBD_GetConfig+0x50>
 800ddea:	e013      	b.n	800de14 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	0019      	movs	r1, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	0018      	movs	r0, r3
 800ddfe:	f000 f943 	bl	800e088 <USBD_CtlSendData>
        break;
 800de02:	e00e      	b.n	800de22 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	1d19      	adds	r1, r3, #4
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	0018      	movs	r0, r3
 800de0e:	f000 f93b 	bl	800e088 <USBD_CtlSendData>
        break;
 800de12:	e006      	b.n	800de22 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	0011      	movs	r1, r2
 800de1a:	0018      	movs	r0, r3
 800de1c:	f000 f8b6 	bl	800df8c <USBD_CtlError>
        break;
 800de20:	46c0      	nop			; (mov r8, r8)
}
 800de22:	46c0      	nop			; (mov r8, r8)
 800de24:	46bd      	mov	sp, r7
 800de26:	b002      	add	sp, #8
 800de28:	bd80      	pop	{r7, pc}

0800de2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b082      	sub	sp, #8
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
 800de32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	23a7      	movs	r3, #167	; 0xa7
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	5cd3      	ldrb	r3, [r2, r3]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d822      	bhi.n	800de88 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	88db      	ldrh	r3, [r3, #6]
 800de46:	2b02      	cmp	r3, #2
 800de48:	d006      	beq.n	800de58 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	0011      	movs	r1, r2
 800de50:	0018      	movs	r0, r3
 800de52:	f000 f89b 	bl	800df8c <USBD_CtlError>
        break;
 800de56:	e01e      	b.n	800de96 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	23a9      	movs	r3, #169	; 0xa9
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	58d3      	ldr	r3, [r2, r3]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d005      	beq.n	800de76 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	68db      	ldr	r3, [r3, #12]
 800de6e:	2202      	movs	r2, #2
 800de70:	431a      	orrs	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	330c      	adds	r3, #12
 800de7a:	0019      	movs	r1, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2202      	movs	r2, #2
 800de80:	0018      	movs	r0, r3
 800de82:	f000 f901 	bl	800e088 <USBD_CtlSendData>
      break;
 800de86:	e006      	b.n	800de96 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800de88:	683a      	ldr	r2, [r7, #0]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	0011      	movs	r1, r2
 800de8e:	0018      	movs	r0, r3
 800de90:	f000 f87c 	bl	800df8c <USBD_CtlError>
      break;
 800de94:	46c0      	nop			; (mov r8, r8)
  }
}
 800de96:	46c0      	nop			; (mov r8, r8)
 800de98:	46bd      	mov	sp, r7
 800de9a:	b002      	add	sp, #8
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b082      	sub	sp, #8
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
 800dea6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	885b      	ldrh	r3, [r3, #2]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d108      	bne.n	800dec2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	23a9      	movs	r3, #169	; 0xa9
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	2101      	movs	r1, #1
 800deb8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	0018      	movs	r0, r3
 800debe:	f000 f94d 	bl	800e15c <USBD_CtlSendStatus>
  }
}
 800dec2:	46c0      	nop			; (mov r8, r8)
 800dec4:	46bd      	mov	sp, r7
 800dec6:	b002      	add	sp, #8
 800dec8:	bd80      	pop	{r7, pc}

0800deca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b082      	sub	sp, #8
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
 800ded2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	23a7      	movs	r3, #167	; 0xa7
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	5cd3      	ldrb	r3, [r2, r3]
 800dedc:	3b01      	subs	r3, #1
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d80d      	bhi.n	800defe <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	885b      	ldrh	r3, [r3, #2]
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d110      	bne.n	800df0c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	23a9      	movs	r3, #169	; 0xa9
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	2100      	movs	r1, #0
 800def2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	0018      	movs	r0, r3
 800def8:	f000 f930 	bl	800e15c <USBD_CtlSendStatus>
      }
      break;
 800defc:	e006      	b.n	800df0c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800defe:	683a      	ldr	r2, [r7, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	0011      	movs	r1, r2
 800df04:	0018      	movs	r0, r3
 800df06:	f000 f841 	bl	800df8c <USBD_CtlError>
      break;
 800df0a:	e000      	b.n	800df0e <USBD_ClrFeature+0x44>
      break;
 800df0c:	46c0      	nop			; (mov r8, r8)
  }
}
 800df0e:	46c0      	nop			; (mov r8, r8)
 800df10:	46bd      	mov	sp, r7
 800df12:	b002      	add	sp, #8
 800df14:	bd80      	pop	{r7, pc}

0800df16 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b082      	sub	sp, #8
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	781a      	ldrb	r2, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	785a      	ldrb	r2, [r3, #1]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	3302      	adds	r3, #2
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	b29a      	uxth	r2, r3
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	3303      	adds	r3, #3
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	b29b      	uxth	r3, r3
 800df40:	021b      	lsls	r3, r3, #8
 800df42:	b29b      	uxth	r3, r3
 800df44:	18d3      	adds	r3, r2, r3
 800df46:	b29a      	uxth	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	3304      	adds	r3, #4
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	b29a      	uxth	r2, r3
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	3305      	adds	r3, #5
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	021b      	lsls	r3, r3, #8
 800df5e:	b29b      	uxth	r3, r3
 800df60:	18d3      	adds	r3, r2, r3
 800df62:	b29a      	uxth	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	3306      	adds	r3, #6
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	b29a      	uxth	r2, r3
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	3307      	adds	r3, #7
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	b29b      	uxth	r3, r3
 800df78:	021b      	lsls	r3, r3, #8
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	18d3      	adds	r3, r2, r3
 800df7e:	b29a      	uxth	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	80da      	strh	r2, [r3, #6]

}
 800df84:	46c0      	nop			; (mov r8, r8)
 800df86:	46bd      	mov	sp, r7
 800df88:	b002      	add	sp, #8
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2180      	movs	r1, #128	; 0x80
 800df9a:	0018      	movs	r0, r3
 800df9c:	f008 fa21 	bl	80163e2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	0018      	movs	r0, r3
 800dfa6:	f008 fa1c 	bl	80163e2 <USBD_LL_StallEP>
}
 800dfaa:	46c0      	nop			; (mov r8, r8)
 800dfac:	46bd      	mov	sp, r7
 800dfae:	b002      	add	sp, #8
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dfb2:	b590      	push	{r4, r7, lr}
 800dfb4:	b087      	sub	sp, #28
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	60f8      	str	r0, [r7, #12]
 800dfba:	60b9      	str	r1, [r7, #8]
 800dfbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dfbe:	2417      	movs	r4, #23
 800dfc0:	193b      	adds	r3, r7, r4
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d03c      	beq.n	800e046 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	0018      	movs	r0, r3
 800dfd0:	f000 f83d 	bl	800e04e <USBD_GetLen>
 800dfd4:	0003      	movs	r3, r0
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	18db      	adds	r3, r3, r3
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800dfe2:	193b      	adds	r3, r7, r4
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	193a      	adds	r2, r7, r4
 800dfe8:	1c59      	adds	r1, r3, #1
 800dfea:	7011      	strb	r1, [r2, #0]
 800dfec:	001a      	movs	r2, r3
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	189b      	adds	r3, r3, r2
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	7812      	ldrb	r2, [r2, #0]
 800dff6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800dff8:	193b      	adds	r3, r7, r4
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	193a      	adds	r2, r7, r4
 800dffe:	1c59      	adds	r1, r3, #1
 800e000:	7011      	strb	r1, [r2, #0]
 800e002:	001a      	movs	r2, r3
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	189b      	adds	r3, r3, r2
 800e008:	2203      	movs	r2, #3
 800e00a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e00c:	e017      	b.n	800e03e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	60fa      	str	r2, [r7, #12]
 800e014:	2417      	movs	r4, #23
 800e016:	193a      	adds	r2, r7, r4
 800e018:	7812      	ldrb	r2, [r2, #0]
 800e01a:	1939      	adds	r1, r7, r4
 800e01c:	1c50      	adds	r0, r2, #1
 800e01e:	7008      	strb	r0, [r1, #0]
 800e020:	0011      	movs	r1, r2
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	1852      	adds	r2, r2, r1
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e02a:	193b      	adds	r3, r7, r4
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	193a      	adds	r2, r7, r4
 800e030:	1c59      	adds	r1, r3, #1
 800e032:	7011      	strb	r1, [r2, #0]
 800e034:	001a      	movs	r2, r3
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	189b      	adds	r3, r3, r2
 800e03a:	2200      	movs	r2, #0
 800e03c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d1e3      	bne.n	800e00e <USBD_GetString+0x5c>
    }
  }
}
 800e046:	46c0      	nop			; (mov r8, r8)
 800e048:	46bd      	mov	sp, r7
 800e04a:	b007      	add	sp, #28
 800e04c:	bd90      	pop	{r4, r7, pc}

0800e04e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b084      	sub	sp, #16
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e056:	230f      	movs	r3, #15
 800e058:	18fb      	adds	r3, r7, r3
 800e05a:	2200      	movs	r2, #0
 800e05c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800e05e:	e008      	b.n	800e072 <USBD_GetLen+0x24>
  {
    len++;
 800e060:	210f      	movs	r1, #15
 800e062:	187b      	adds	r3, r7, r1
 800e064:	781a      	ldrb	r2, [r3, #0]
 800e066:	187b      	adds	r3, r7, r1
 800e068:	3201      	adds	r2, #1
 800e06a:	701a      	strb	r2, [r3, #0]
    buf++;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	3301      	adds	r3, #1
 800e070:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1f2      	bne.n	800e060 <USBD_GetLen+0x12>
  }

  return len;
 800e07a:	230f      	movs	r3, #15
 800e07c:	18fb      	adds	r3, r7, r3
 800e07e:	781b      	ldrb	r3, [r3, #0]
}
 800e080:	0018      	movs	r0, r3
 800e082:	46bd      	mov	sp, r7
 800e084:	b004      	add	sp, #16
 800e086:	bd80      	pop	{r7, pc}

0800e088 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	1dbb      	adds	r3, r7, #6
 800e094:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	23a5      	movs	r3, #165	; 0xa5
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	2102      	movs	r1, #2
 800e09e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800e0a0:	1dbb      	adds	r3, r7, #6
 800e0a2:	881a      	ldrh	r2, [r3, #0]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e0a8:	1dbb      	adds	r3, r7, #6
 800e0aa:	881a      	ldrh	r2, [r3, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e0b0:	1dbb      	adds	r3, r7, #6
 800e0b2:	881b      	ldrh	r3, [r3, #0]
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	f008 fa44 	bl	8016546 <USBD_LL_Transmit>

  return USBD_OK;
 800e0be:	2300      	movs	r3, #0
}
 800e0c0:	0018      	movs	r0, r3
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	b004      	add	sp, #16
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	1dbb      	adds	r3, r7, #6
 800e0d4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e0d6:	1dbb      	adds	r3, r7, #6
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	68ba      	ldr	r2, [r7, #8]
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	2100      	movs	r1, #0
 800e0e0:	f008 fa31 	bl	8016546 <USBD_LL_Transmit>

  return USBD_OK;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	0018      	movs	r0, r3
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	b004      	add	sp, #16
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b084      	sub	sp, #16
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	60f8      	str	r0, [r7, #12]
 800e0f6:	60b9      	str	r1, [r7, #8]
 800e0f8:	1dbb      	adds	r3, r7, #6
 800e0fa:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	23a5      	movs	r3, #165	; 0xa5
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	2103      	movs	r1, #3
 800e104:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800e106:	1dbb      	adds	r3, r7, #6
 800e108:	8819      	ldrh	r1, [r3, #0]
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	23ae      	movs	r3, #174	; 0xae
 800e10e:	005b      	lsls	r3, r3, #1
 800e110:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800e112:	1dbb      	adds	r3, r7, #6
 800e114:	8819      	ldrh	r1, [r3, #0]
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	23b0      	movs	r3, #176	; 0xb0
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e11e:	1dbb      	adds	r3, r7, #6
 800e120:	881b      	ldrh	r3, [r3, #0]
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	2100      	movs	r1, #0
 800e128:	f008 fa44 	bl	80165b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	0018      	movs	r0, r3
 800e130:	46bd      	mov	sp, r7
 800e132:	b004      	add	sp, #16
 800e134:	bd80      	pop	{r7, pc}

0800e136 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e136:	b580      	push	{r7, lr}
 800e138:	b084      	sub	sp, #16
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	60f8      	str	r0, [r7, #12]
 800e13e:	60b9      	str	r1, [r7, #8]
 800e140:	1dbb      	adds	r3, r7, #6
 800e142:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e144:	1dbb      	adds	r3, r7, #6
 800e146:	881b      	ldrh	r3, [r3, #0]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	2100      	movs	r1, #0
 800e14e:	f008 fa31 	bl	80165b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	0018      	movs	r0, r3
 800e156:	46bd      	mov	sp, r7
 800e158:	b004      	add	sp, #16
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	23a5      	movs	r3, #165	; 0xa5
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	2104      	movs	r1, #4
 800e16c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	2300      	movs	r3, #0
 800e172:	2200      	movs	r2, #0
 800e174:	2100      	movs	r1, #0
 800e176:	f008 f9e6 	bl	8016546 <USBD_LL_Transmit>

  return USBD_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	0018      	movs	r0, r3
 800e17e:	46bd      	mov	sp, r7
 800e180:	b002      	add	sp, #8
 800e182:	bd80      	pop	{r7, pc}

0800e184 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	23a5      	movs	r3, #165	; 0xa5
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	2105      	movs	r1, #5
 800e194:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	2300      	movs	r3, #0
 800e19a:	2200      	movs	r2, #0
 800e19c:	2100      	movs	r1, #0
 800e19e:	f008 fa09 	bl	80165b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	0018      	movs	r0, r3
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	b002      	add	sp, #8
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d200      	bcs.n	800e1c0 <lfs_max+0x14>
 800e1be:	0013      	movs	r3, r2
}
 800e1c0:	0018      	movs	r0, r3
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	b002      	add	sp, #8
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d900      	bls.n	800e1dc <lfs_min+0x14>
 800e1da:	0013      	movs	r3, r2
}
 800e1dc:	0018      	movs	r0, r3
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	b002      	add	sp, #8
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	0018      	movs	r0, r3
 800e1f4:	f7f2 f834 	bl	8000260 <__aeabi_uidivmod>
 800e1f8:	000b      	movs	r3, r1
 800e1fa:	001a      	movs	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	1a9b      	subs	r3, r3, r2
}
 800e200:	0018      	movs	r0, r3
 800e202:	46bd      	mov	sp, r7
 800e204:	b002      	add	sp, #8
 800e206:	bd80      	pop	{r7, pc}

0800e208 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	18d3      	adds	r3, r2, r3
 800e218:	3b01      	subs	r3, #1
 800e21a:	683a      	ldr	r2, [r7, #0]
 800e21c:	0011      	movs	r1, r2
 800e21e:	0018      	movs	r0, r3
 800e220:	f7ff ffe0 	bl	800e1e4 <lfs_aligndown>
 800e224:	0003      	movs	r3, r0
}
 800e226:	0018      	movs	r0, r3
 800e228:	46bd      	mov	sp, r7
 800e22a:	b002      	add	sp, #8
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800e22e:	b580      	push	{r7, lr}
 800e230:	b082      	sub	sp, #8
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	3b01      	subs	r3, #1
 800e23a:	0018      	movs	r0, r3
 800e23c:	f7f2 f93e 	bl	80004bc <__clzsi2>
 800e240:	0003      	movs	r3, r0
 800e242:	001a      	movs	r2, r3
 800e244:	2320      	movs	r3, #32
 800e246:	1a9b      	subs	r3, r3, r2
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800e248:	0018      	movs	r0, r3
 800e24a:	46bd      	mov	sp, r7
 800e24c:	b002      	add	sp, #8
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7f2 f94d 	bl	80004f8 <__ctzsi2>
 800e25e:	0003      	movs	r3, r0
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800e260:	0018      	movs	r0, r3
 800e262:	46bd      	mov	sp, r7
 800e264:	b002      	add	sp, #8
 800e266:	bd80      	pop	{r7, pc}

0800e268 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7f2 f961 	bl	8000538 <__popcountsi2>
 800e276:	0003      	movs	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800e278:	0018      	movs	r0, r3
 800e27a:	46bd      	mov	sp, r7
 800e27c:	b002      	add	sp, #8
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	1ad3      	subs	r3, r2, r3
}
 800e290:	0018      	movs	r0, r3
 800e292:	46bd      	mov	sp, r7
 800e294:	b002      	add	sp, #8
 800e296:	bd80      	pop	{r7, pc}

0800e298 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800e2a0:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800e2a2:	0018      	movs	r0, r3
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	b002      	add	sp, #8
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b082      	sub	sp, #8
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	0018      	movs	r0, r3
 800e2b6:	f7ff ffef 	bl	800e298 <lfs_fromle32>
 800e2ba:	0003      	movs	r3, r0
}
 800e2bc:	0018      	movs	r0, r3
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	b002      	add	sp, #8
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800e2d0:	0018      	movs	r0, r3
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	b002      	add	sp, #8
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	0018      	movs	r0, r3
 800e2e4:	f7ff ffee 	bl	800e2c4 <lfs_frombe32>
 800e2e8:	0003      	movs	r3, r0
}
 800e2ea:	0018      	movs	r0, r3
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	b002      	add	sp, #8
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800e2f2:	b580      	push	{r7, lr}
 800e2f4:	b082      	sub	sp, #8
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	0018      	movs	r0, r3
 800e2fe:	f008 fa6f 	bl	80167e0 <malloc>
 800e302:	0003      	movs	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800e304:	0018      	movs	r0, r3
 800e306:	46bd      	mov	sp, r7
 800e308:	b002      	add	sp, #8
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	0018      	movs	r0, r3
 800e318:	f008 fa6c 	bl	80167f4 <free>
#else
    (void)p;
#endif
}
 800e31c:	46c0      	nop			; (mov r8, r8)
 800e31e:	46bd      	mov	sp, r7
 800e320:	b002      	add	sp, #8
 800e322:	bd80      	pop	{r7, pc}

0800e324 <lfs_cache_drop>:
    LFS_CMP_GT = 2,
};

/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	2201      	movs	r2, #1
 800e332:	4252      	negs	r2, r2
 800e334:	601a      	str	r2, [r3, #0]
}
 800e336:	46c0      	nop			; (mov r8, r8)
 800e338:	46bd      	mov	sp, r7
 800e33a:	b002      	add	sp, #8
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800e33e:	b580      	push	{r7, lr}
 800e340:	b082      	sub	sp, #8
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	68d8      	ldr	r0, [r3, #12]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e352:	001a      	movs	r2, r3
 800e354:	21ff      	movs	r1, #255	; 0xff
 800e356:	f008 fa6e 	bl	8016836 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	2201      	movs	r2, #1
 800e35e:	4252      	negs	r2, r2
 800e360:	601a      	str	r2, [r3, #0]
}
 800e362:	46c0      	nop			; (mov r8, r8)
 800e364:	46bd      	mov	sp, r7
 800e366:	b002      	add	sp, #8
 800e368:	bd80      	pop	{r7, pc}
	...

0800e36c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800e36c:	b5b0      	push	{r4, r5, r7, lr}
 800e36e:	b08a      	sub	sp, #40	; 0x28
 800e370:	af02      	add	r7, sp, #8
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	607a      	str	r2, [r7, #4]
 800e378:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800e37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37c:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800e37e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e382:	18d2      	adds	r2, r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e388:	69db      	ldr	r3, [r3, #28]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d80a      	bhi.n	800e3a4 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e392:	2b00      	cmp	r3, #0
 800e394:	d100      	bne.n	800e398 <lfs_bd_read+0x2c>
 800e396:	e130      	b.n	800e5fa <lfs_bd_read+0x28e>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d200      	bcs.n	800e3a4 <lfs_bd_read+0x38>
 800e3a2:	e12a      	b.n	800e5fa <lfs_bd_read+0x28e>
        return LFS_ERR_CORRUPT;
 800e3a4:	2354      	movs	r3, #84	; 0x54
 800e3a6:	425b      	negs	r3, r3
 800e3a8:	e12c      	b.n	800e604 <lfs_bd_read+0x298>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800e3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ac:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d043      	beq.n	800e43c <lfs_bd_read+0xd0>
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d13e      	bne.n	800e43c <lfs_bd_read+0xd0>
                off < pcache->off + pcache->size) {
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	685a      	ldr	r2, [r3, #4]
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	18d3      	adds	r3, r2, r3
        if (pcache && block == pcache->block &&
 800e3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d236      	bcs.n	800e43c <lfs_bd_read+0xd0>
            if (off >= pcache->off) {
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d326      	bcc.n	800e426 <lfs_bd_read+0xba>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	689a      	ldr	r2, [r3, #8]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	6859      	ldr	r1, [r3, #4]
 800e3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e2:	1acb      	subs	r3, r1, r3
 800e3e4:	18d2      	adds	r2, r2, r3
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	0011      	movs	r1, r2
 800e3ea:	0018      	movs	r0, r3
 800e3ec:	f7ff feec 	bl	800e1c8 <lfs_min>
 800e3f0:	0003      	movs	r3, r0
 800e3f2:	61bb      	str	r3, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	68da      	ldr	r2, [r3, #12]
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3fe:	1acb      	subs	r3, r1, r3
 800e400:	18d1      	adds	r1, r2, r3
 800e402:	69ba      	ldr	r2, [r7, #24]
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	0018      	movs	r0, r3
 800e408:	f008 fa0c 	bl	8016824 <memcpy>

                data += diff;
 800e40c:	69fa      	ldr	r2, [r7, #28]
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	18d3      	adds	r3, r2, r3
 800e412:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	18d3      	adds	r3, r2, r3
 800e41a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800e41c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800e424:	e0e9      	b.n	800e5fa <lfs_bd_read+0x28e>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	685a      	ldr	r2, [r3, #4]
 800e42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e42c:	1ad2      	subs	r2, r2, r3
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	0011      	movs	r1, r2
 800e432:	0018      	movs	r0, r3
 800e434:	f7ff fec8 	bl	800e1c8 <lfs_min>
 800e438:	0003      	movs	r3, r0
 800e43a:	61bb      	str	r3, [r7, #24]
        }

        if (block == rcache->block &&
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e442:	429a      	cmp	r2, r3
 800e444:	d13e      	bne.n	800e4c4 <lfs_bd_read+0x158>
                off < rcache->off + rcache->size) {
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	685a      	ldr	r2, [r3, #4]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	18d3      	adds	r3, r2, r3
        if (block == rcache->block &&
 800e450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e452:	429a      	cmp	r2, r3
 800e454:	d236      	bcs.n	800e4c4 <lfs_bd_read+0x158>
            if (off >= rcache->off) {
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d326      	bcc.n	800e4ae <lfs_bd_read+0x142>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	689a      	ldr	r2, [r3, #8]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6859      	ldr	r1, [r3, #4]
 800e468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e46a:	1acb      	subs	r3, r1, r3
 800e46c:	18d2      	adds	r2, r2, r3
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	0011      	movs	r1, r2
 800e472:	0018      	movs	r0, r3
 800e474:	f7ff fea8 	bl	800e1c8 <lfs_min>
 800e478:	0003      	movs	r3, r0
 800e47a:	61bb      	str	r3, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	68da      	ldr	r2, [r3, #12]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e486:	1acb      	subs	r3, r1, r3
 800e488:	18d1      	adds	r1, r2, r3
 800e48a:	69ba      	ldr	r2, [r7, #24]
 800e48c:	69fb      	ldr	r3, [r7, #28]
 800e48e:	0018      	movs	r0, r3
 800e490:	f008 f9c8 	bl	8016824 <memcpy>

                data += diff;
 800e494:	69fa      	ldr	r2, [r7, #28]
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	18d3      	adds	r3, r2, r3
 800e49a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e49c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	18d3      	adds	r3, r2, r3
 800e4a2:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800e4a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	1ad3      	subs	r3, r2, r3
 800e4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800e4ac:	e0a5      	b.n	800e5fa <lfs_bd_read+0x28e>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	685a      	ldr	r2, [r3, #4]
 800e4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b4:	1ad2      	subs	r2, r2, r3
 800e4b6:	69bb      	ldr	r3, [r7, #24]
 800e4b8:	0011      	movs	r1, r2
 800e4ba:	0018      	movs	r0, r3
 800e4bc:	f7ff fe84 	bl	800e1c8 <lfs_min>
 800e4c0:	0003      	movs	r3, r0
 800e4c2:	61bb      	str	r3, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800e4c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d339      	bcc.n	800e540 <lfs_bd_read+0x1d4>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4d0:	695a      	ldr	r2, [r3, #20]
 800e4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d4:	0011      	movs	r1, r2
 800e4d6:	0018      	movs	r0, r3
 800e4d8:	f7f1 fec2 	bl	8000260 <__aeabi_uidivmod>
 800e4dc:	1e0b      	subs	r3, r1, #0
 800e4de:	d12f      	bne.n	800e540 <lfs_bd_read+0x1d4>
                size >= lfs->cfg->read_size) {
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4e4:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800e4e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d329      	bcc.n	800e540 <lfs_bd_read+0x1d4>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4f0:	695a      	ldr	r2, [r3, #20]
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	0011      	movs	r1, r2
 800e4f6:	0018      	movs	r0, r3
 800e4f8:	f7ff fe74 	bl	800e1e4 <lfs_aligndown>
 800e4fc:	0003      	movs	r3, r0
 800e4fe:	61bb      	str	r3, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e504:	685c      	ldr	r4, [r3, #4]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800e50a:	69fd      	ldr	r5, [r7, #28]
 800e50c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e50e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	002b      	movs	r3, r5
 800e516:	47a0      	blx	r4
 800e518:	0003      	movs	r3, r0
 800e51a:	617b      	str	r3, [r7, #20]
            if (err) {
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d001      	beq.n	800e526 <lfs_bd_read+0x1ba>
                return err;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	e06e      	b.n	800e604 <lfs_bd_read+0x298>
            }

            data += diff;
 800e526:	69fa      	ldr	r2, [r7, #28]
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	18d3      	adds	r3, r2, r3
 800e52c:	61fb      	str	r3, [r7, #28]
            off += diff;
 800e52e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	18d3      	adds	r3, r2, r3
 800e534:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800e536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 800e53e:	e05c      	b.n	800e5fa <lfs_bd_read+0x28e>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00a      	beq.n	800e55e <lfs_bd_read+0x1f2>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e54e:	429a      	cmp	r2, r3
 800e550:	d305      	bcc.n	800e55e <lfs_bd_read+0x1f2>
 800e552:	4b2e      	ldr	r3, [pc, #184]	; (800e60c <lfs_bd_read+0x2a0>)
 800e554:	4a2e      	ldr	r2, [pc, #184]	; (800e610 <lfs_bd_read+0x2a4>)
 800e556:	482f      	ldr	r0, [pc, #188]	; (800e614 <lfs_bd_read+0x2a8>)
 800e558:	216a      	movs	r1, #106	; 0x6a
 800e55a:	f008 f8cb 	bl	80166f4 <__assert_func>
        rcache->block = block;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e562:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e568:	695a      	ldr	r2, [r3, #20]
 800e56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e56c:	0011      	movs	r1, r2
 800e56e:	0018      	movs	r0, r3
 800e570:	f7ff fe38 	bl	800e1e4 <lfs_aligndown>
 800e574:	0002      	movs	r2, r0
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800e57a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	18d2      	adds	r2, r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 800e584:	695b      	ldr	r3, [r3, #20]
 800e586:	0019      	movs	r1, r3
 800e588:	0010      	movs	r0, r2
 800e58a:	f7ff fe3d 	bl	800e208 <lfs_alignup>
 800e58e:	0002      	movs	r2, r0
                    lfs->cfg->block_size)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 800e594:	69db      	ldr	r3, [r3, #28]
 800e596:	0019      	movs	r1, r3
 800e598:	0010      	movs	r0, r2
 800e59a:	f7ff fe15 	bl	800e1c8 <lfs_min>
 800e59e:	0002      	movs	r2, r0
                - rcache->off,
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800e5a4:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 800e5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ac:	0019      	movs	r1, r3
 800e5ae:	0010      	movs	r0, r2
 800e5b0:	f7ff fe0a 	bl	800e1c8 <lfs_min>
 800e5b4:	0002      	movs	r2, r0
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5be:	685c      	ldr	r4, [r3, #4]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6819      	ldr	r1, [r3, #0]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	689b      	ldr	r3, [r3, #8]
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	002b      	movs	r3, r5
 800e5d8:	47a0      	blx	r4
 800e5da:	0003      	movs	r3, r0
 800e5dc:	613b      	str	r3, [r7, #16]
        LFS_ASSERT(err <= 0);
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	dd05      	ble.n	800e5f0 <lfs_bd_read+0x284>
 800e5e4:	4b0c      	ldr	r3, [pc, #48]	; (800e618 <lfs_bd_read+0x2ac>)
 800e5e6:	4a0a      	ldr	r2, [pc, #40]	; (800e610 <lfs_bd_read+0x2a4>)
 800e5e8:	480a      	ldr	r0, [pc, #40]	; (800e614 <lfs_bd_read+0x2a8>)
 800e5ea:	2175      	movs	r1, #117	; 0x75
 800e5ec:	f008 f882 	bl	80166f4 <__assert_func>
        if (err) {
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d001      	beq.n	800e5fa <lfs_bd_read+0x28e>
            return err;
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	e004      	b.n	800e604 <lfs_bd_read+0x298>
    while (size > 0) {
 800e5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d000      	beq.n	800e602 <lfs_bd_read+0x296>
 800e600:	e6d3      	b.n	800e3aa <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800e602:	2300      	movs	r3, #0
}
 800e604:	0018      	movs	r0, r3
 800e606:	46bd      	mov	sp, r7
 800e608:	b008      	add	sp, #32
 800e60a:	bdb0      	pop	{r4, r5, r7, pc}
 800e60c:	0801c4fc 	.word	0x0801c4fc
 800e610:	0801cf04 	.word	0x0801cf04
 800e614:	0801c52c 	.word	0x0801c52c
 800e618:	0801c54c 	.word	0x0801c54c

0800e61c <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800e61c:	b5b0      	push	{r4, r5, r7, lr}
 800e61e:	b090      	sub	sp, #64	; 0x40
 800e620:	af04      	add	r7, sp, #16
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800e62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e62c:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 800e62e:	2300      	movs	r3, #0
 800e630:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800e632:	2300      	movs	r3, #0
 800e634:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e636:	e03d      	b.n	800e6b4 <lfs_bd_cmp+0x98>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800e638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63c:	1ad3      	subs	r3, r2, r3
 800e63e:	2108      	movs	r1, #8
 800e640:	0018      	movs	r0, r3
 800e642:	f7ff fdc1 	bl	800e1c8 <lfs_min>
 800e646:	0003      	movs	r3, r0
 800e648:	627b      	str	r3, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64e:	1ad5      	subs	r5, r2, r3
 800e650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e654:	18d3      	adds	r3, r2, r3
 800e656:	687c      	ldr	r4, [r7, #4]
 800e658:	68b9      	ldr	r1, [r7, #8]
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e65e:	9203      	str	r2, [sp, #12]
 800e660:	2214      	movs	r2, #20
 800e662:	18ba      	adds	r2, r7, r2
 800e664:	9202      	str	r2, [sp, #8]
 800e666:	9301      	str	r3, [sp, #4]
 800e668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	002b      	movs	r3, r5
 800e66e:	0022      	movs	r2, r4
 800e670:	f7ff fe7c 	bl	800e36c <lfs_bd_read>
 800e674:	0003      	movs	r3, r0
 800e676:	623b      	str	r3, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800e678:	6a3b      	ldr	r3, [r7, #32]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d001      	beq.n	800e682 <lfs_bd_cmp+0x66>
            return err;
 800e67e:	6a3b      	ldr	r3, [r7, #32]
 800e680:	e01d      	b.n	800e6be <lfs_bd_cmp+0xa2>
        }

        int res = memcmp(dat, data + i, diff);
 800e682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e686:	18d1      	adds	r1, r2, r3
 800e688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e68a:	2314      	movs	r3, #20
 800e68c:	18fb      	adds	r3, r7, r3
 800e68e:	0018      	movs	r0, r3
 800e690:	f008 f8ba 	bl	8016808 <memcmp>
 800e694:	0003      	movs	r3, r0
 800e696:	61fb      	str	r3, [r7, #28]
        if (res) {
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d006      	beq.n	800e6ac <lfs_bd_cmp+0x90>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	da01      	bge.n	800e6a8 <lfs_bd_cmp+0x8c>
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	e00a      	b.n	800e6be <lfs_bd_cmp+0xa2>
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	e008      	b.n	800e6be <lfs_bd_cmp+0xa2>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800e6ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b0:	18d3      	adds	r3, r2, r3
 800e6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d3bd      	bcc.n	800e638 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	0018      	movs	r0, r3
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	b00c      	add	sp, #48	; 0x30
 800e6c4:	bdb0      	pop	{r4, r5, r7, pc}

0800e6c6 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800e6c6:	b5b0      	push	{r4, r5, r7, lr}
 800e6c8:	b08e      	sub	sp, #56	; 0x38
 800e6ca:	af04      	add	r7, sp, #16
 800e6cc:	60f8      	str	r0, [r7, #12]
 800e6ce:	60b9      	str	r1, [r7, #8]
 800e6d0:	607a      	str	r2, [r7, #4]
 800e6d2:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800e6d8:	2300      	movs	r3, #0
 800e6da:	627b      	str	r3, [r7, #36]	; 0x24
 800e6dc:	e033      	b.n	800e746 <lfs_bd_crc+0x80>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800e6de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	2108      	movs	r1, #8
 800e6e6:	0018      	movs	r0, r3
 800e6e8:	f7ff fd6e 	bl	800e1c8 <lfs_min>
 800e6ec:	0003      	movs	r3, r0
 800e6ee:	623b      	str	r3, [r7, #32]
        int err = lfs_bd_read(lfs,
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f4:	1ad5      	subs	r5, r2, r3
 800e6f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	18d3      	adds	r3, r2, r3
 800e6fc:	687c      	ldr	r4, [r7, #4]
 800e6fe:	68b9      	ldr	r1, [r7, #8]
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	6a3a      	ldr	r2, [r7, #32]
 800e704:	9203      	str	r2, [sp, #12]
 800e706:	2214      	movs	r2, #20
 800e708:	18ba      	adds	r2, r7, r2
 800e70a:	9202      	str	r2, [sp, #8]
 800e70c:	9301      	str	r3, [sp, #4]
 800e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	002b      	movs	r3, r5
 800e714:	0022      	movs	r2, r4
 800e716:	f7ff fe29 	bl	800e36c <lfs_bd_read>
 800e71a:	0003      	movs	r3, r0
 800e71c:	61fb      	str	r3, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d001      	beq.n	800e728 <lfs_bd_crc+0x62>
            return err;
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	e013      	b.n	800e750 <lfs_bd_crc+0x8a>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800e728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	6a3a      	ldr	r2, [r7, #32]
 800e72e:	2114      	movs	r1, #20
 800e730:	1879      	adds	r1, r7, r1
 800e732:	0018      	movs	r0, r3
 800e734:	f007 f9e2 	bl	8015afc <lfs_crc>
 800e738:	0002      	movs	r2, r0
 800e73a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e73c:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 800e73e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e740:	6a3b      	ldr	r3, [r7, #32]
 800e742:	18d3      	adds	r3, r2, r3
 800e744:	627b      	str	r3, [r7, #36]	; 0x24
 800e746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d3c7      	bcc.n	800e6de <lfs_bd_crc+0x18>
    }

    return 0;
 800e74e:	2300      	movs	r3, #0
}
 800e750:	0018      	movs	r0, r3
 800e752:	46bd      	mov	sp, r7
 800e754:	b00a      	add	sp, #40	; 0x28
 800e756:	bdb0      	pop	{r4, r5, r7, pc}

0800e758 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800e758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e75a:	b08d      	sub	sp, #52	; 0x34
 800e75c:	af04      	add	r7, sp, #16
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
 800e764:	001a      	movs	r2, r3
 800e766:	1cfb      	adds	r3, r7, #3
 800e768:	701a      	strb	r2, [r3, #0]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	3301      	adds	r3, #1
 800e770:	d06a      	beq.n	800e848 <lfs_bd_flush+0xf0>
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3302      	adds	r3, #2
 800e778:	d066      	beq.n	800e848 <lfs_bd_flush+0xf0>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e782:	429a      	cmp	r2, r3
 800e784:	d305      	bcc.n	800e792 <lfs_bd_flush+0x3a>
 800e786:	4b33      	ldr	r3, [pc, #204]	; (800e854 <lfs_bd_flush+0xfc>)
 800e788:	4a33      	ldr	r2, [pc, #204]	; (800e858 <lfs_bd_flush+0x100>)
 800e78a:	4834      	ldr	r0, [pc, #208]	; (800e85c <lfs_bd_flush+0x104>)
 800e78c:	21b2      	movs	r1, #178	; 0xb2
 800e78e:	f007 ffb1 	bl	80166f4 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	689a      	ldr	r2, [r3, #8]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e79a:	699b      	ldr	r3, [r3, #24]
 800e79c:	0019      	movs	r1, r3
 800e79e:	0010      	movs	r0, r2
 800e7a0:	f7ff fd32 	bl	800e208 <lfs_alignup>
 800e7a4:	0003      	movs	r3, r0
 800e7a6:	61fb      	str	r3, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7ac:	689c      	ldr	r4, [r3, #8]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	6819      	ldr	r1, [r3, #0]
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	002b      	movs	r3, r5
 800e7c4:	47a0      	blx	r4
 800e7c6:	0003      	movs	r3, r0
 800e7c8:	61bb      	str	r3, [r7, #24]
        LFS_ASSERT(err <= 0);
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	dd05      	ble.n	800e7dc <lfs_bd_flush+0x84>
 800e7d0:	4b23      	ldr	r3, [pc, #140]	; (800e860 <lfs_bd_flush+0x108>)
 800e7d2:	4a21      	ldr	r2, [pc, #132]	; (800e858 <lfs_bd_flush+0x100>)
 800e7d4:	4821      	ldr	r0, [pc, #132]	; (800e85c <lfs_bd_flush+0x104>)
 800e7d6:	21b6      	movs	r1, #182	; 0xb6
 800e7d8:	f007 ff8c 	bl	80166f4 <__assert_func>
        if (err) {
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d001      	beq.n	800e7e6 <lfs_bd_flush+0x8e>
            return err;
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	e031      	b.n	800e84a <lfs_bd_flush+0xf2>
        }

        if (validate) {
 800e7e6:	1cfb      	adds	r3, r7, #3
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d026      	beq.n	800e83c <lfs_bd_flush+0xe4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	0011      	movs	r1, r2
 800e7f4:	0018      	movs	r0, r3
 800e7f6:	f7ff fd95 	bl	800e324 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	6859      	ldr	r1, [r3, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	68db      	ldr	r3, [r3, #12]
            int res = lfs_bd_cmp(lfs,
 800e806:	69fe      	ldr	r6, [r7, #28]
 800e808:	687d      	ldr	r5, [r7, #4]
 800e80a:	68fc      	ldr	r4, [r7, #12]
 800e80c:	69f8      	ldr	r0, [r7, #28]
 800e80e:	9003      	str	r0, [sp, #12]
 800e810:	9302      	str	r3, [sp, #8]
 800e812:	9101      	str	r1, [sp, #4]
 800e814:	9200      	str	r2, [sp, #0]
 800e816:	0033      	movs	r3, r6
 800e818:	002a      	movs	r2, r5
 800e81a:	2100      	movs	r1, #0
 800e81c:	0020      	movs	r0, r4
 800e81e:	f7ff fefd 	bl	800e61c <lfs_bd_cmp>
 800e822:	0003      	movs	r3, r0
 800e824:	617b      	str	r3, [r7, #20]
            if (res < 0) {
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	da01      	bge.n	800e830 <lfs_bd_flush+0xd8>
                return res;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	e00c      	b.n	800e84a <lfs_bd_flush+0xf2>
            }

            if (res != LFS_CMP_EQ) {
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d002      	beq.n	800e83c <lfs_bd_flush+0xe4>
                return LFS_ERR_CORRUPT;
 800e836:	2354      	movs	r3, #84	; 0x54
 800e838:	425b      	negs	r3, r3
 800e83a:	e006      	b.n	800e84a <lfs_bd_flush+0xf2>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800e83c:	68ba      	ldr	r2, [r7, #8]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	0011      	movs	r1, r2
 800e842:	0018      	movs	r0, r3
 800e844:	f7ff fd7b 	bl	800e33e <lfs_cache_zero>
    }

    return 0;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	0018      	movs	r0, r3
 800e84c:	46bd      	mov	sp, r7
 800e84e:	b009      	add	sp, #36	; 0x24
 800e850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e852:	46c0      	nop			; (mov r8, r8)
 800e854:	0801c558 	.word	0x0801c558
 800e858:	0801cf10 	.word	0x0801cf10
 800e85c:	0801c52c 	.word	0x0801c52c
 800e860:	0801c54c 	.word	0x0801c54c

0800e864 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	001a      	movs	r2, r3
 800e872:	1cfb      	adds	r3, r7, #3
 800e874:	701a      	strb	r2, [r3, #0]
    lfs_cache_drop(lfs, rcache);
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	0011      	movs	r1, r2
 800e87c:	0018      	movs	r0, r3
 800e87e:	f7ff fd51 	bl	800e324 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800e882:	1cfb      	adds	r3, r7, #3
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	68b9      	ldr	r1, [r7, #8]
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f7ff ff64 	bl	800e758 <lfs_bd_flush>
 800e890:	0003      	movs	r3, r0
 800e892:	617b      	str	r3, [r7, #20]
    if (err) {
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d001      	beq.n	800e89e <lfs_bd_sync+0x3a>
        return err;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	e012      	b.n	800e8c4 <lfs_bd_sync+0x60>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8a2:	691a      	ldr	r2, [r3, #16]
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8a8:	0018      	movs	r0, r3
 800e8aa:	4790      	blx	r2
 800e8ac:	0003      	movs	r3, r0
 800e8ae:	617b      	str	r3, [r7, #20]
    LFS_ASSERT(err <= 0);
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	dd05      	ble.n	800e8c2 <lfs_bd_sync+0x5e>
 800e8b6:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <lfs_bd_sync+0x68>)
 800e8b8:	4a05      	ldr	r2, [pc, #20]	; (800e8d0 <lfs_bd_sync+0x6c>)
 800e8ba:	4806      	ldr	r0, [pc, #24]	; (800e8d4 <lfs_bd_sync+0x70>)
 800e8bc:	21dc      	movs	r1, #220	; 0xdc
 800e8be:	f007 ff19 	bl	80166f4 <__assert_func>
    return err;
 800e8c2:	697b      	ldr	r3, [r7, #20]
}
 800e8c4:	0018      	movs	r0, r3
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	b006      	add	sp, #24
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	0801c54c 	.word	0x0801c54c
 800e8d0:	0801cf20 	.word	0x0801cf20
 800e8d4:	0801c52c 	.word	0x0801c52c

0800e8d8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b088      	sub	sp, #32
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
 800e8e4:	001a      	movs	r2, r3
 800e8e6:	1cfb      	adds	r3, r7, #3
 800e8e8:	701a      	strb	r2, [r3, #0]
    const uint8_t *data = buffer;
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800e8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f0:	3302      	adds	r3, #2
 800e8f2:	d00a      	beq.n	800e90a <lfs_bd_prog+0x32>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d305      	bcc.n	800e90a <lfs_bd_prog+0x32>
 800e8fe:	4b4a      	ldr	r3, [pc, #296]	; (800ea28 <lfs_bd_prog+0x150>)
 800e900:	4a4a      	ldr	r2, [pc, #296]	; (800ea2c <lfs_bd_prog+0x154>)
 800e902:	484b      	ldr	r0, [pc, #300]	; (800ea30 <lfs_bd_prog+0x158>)
 800e904:	21e7      	movs	r1, #231	; 0xe7
 800e906:	f007 fef5 	bl	80166f4 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800e90a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e90e:	18d2      	adds	r2, r2, r3
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e914:	69db      	ldr	r3, [r3, #28]
 800e916:	429a      	cmp	r2, r3
 800e918:	d800      	bhi.n	800e91c <lfs_bd_prog+0x44>
 800e91a:	e07c      	b.n	800ea16 <lfs_bd_prog+0x13e>
 800e91c:	4b45      	ldr	r3, [pc, #276]	; (800ea34 <lfs_bd_prog+0x15c>)
 800e91e:	4a43      	ldr	r2, [pc, #268]	; (800ea2c <lfs_bd_prog+0x154>)
 800e920:	4843      	ldr	r0, [pc, #268]	; (800ea30 <lfs_bd_prog+0x158>)
 800e922:	21e8      	movs	r1, #232	; 0xe8
 800e924:	f007 fee6 	bl	80166f4 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e92e:	429a      	cmp	r2, r3
 800e930:	d155      	bne.n	800e9de <lfs_bd_prog+0x106>
                off >= pcache->off &&
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800e936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e938:	429a      	cmp	r2, r3
 800e93a:	d350      	bcc.n	800e9de <lfs_bd_prog+0x106>
                off < pcache->off + lfs->cfg->cache_size) {
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e946:	18d3      	adds	r3, r2, r3
                off >= pcache->off &&
 800e948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d247      	bcs.n	800e9de <lfs_bd_prog+0x106>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	6859      	ldr	r1, [r3, #4]
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800e95c:	18d2      	adds	r2, r2, r3
 800e95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e960:	0011      	movs	r1, r2
 800e962:	0018      	movs	r0, r3
 800e964:	f7ff fc30 	bl	800e1c8 <lfs_min>
 800e968:	0003      	movs	r3, r0
 800e96a:	61bb      	str	r3, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	68da      	ldr	r2, [r3, #12]
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e976:	1acb      	subs	r3, r1, r3
 800e978:	18d3      	adds	r3, r2, r3
 800e97a:	69ba      	ldr	r2, [r7, #24]
 800e97c:	69f9      	ldr	r1, [r7, #28]
 800e97e:	0018      	movs	r0, r3
 800e980:	f007 ff50 	bl	8016824 <memcpy>

            data += diff;
 800e984:	69fa      	ldr	r2, [r7, #28]
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	18d3      	adds	r3, r2, r3
 800e98a:	61fb      	str	r3, [r7, #28]
            off += diff;
 800e98c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	18d3      	adds	r3, r2, r3
 800e992:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800e994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	6898      	ldr	r0, [r3, #8]
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	0019      	movs	r1, r3
 800e9aa:	f7ff fbff 	bl	800e1ac <lfs_max>
 800e9ae:	0002      	movs	r2, r0
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	689a      	ldr	r2, [r3, #8]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d129      	bne.n	800ea16 <lfs_bd_prog+0x13e>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800e9c2:	1cfb      	adds	r3, r7, #3
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	68b9      	ldr	r1, [r7, #8]
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f7ff fec4 	bl	800e758 <lfs_bd_flush>
 800e9d0:	0003      	movs	r3, r0
 800e9d2:	617b      	str	r3, [r7, #20]
                if (err) {
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d01d      	beq.n	800ea16 <lfs_bd_prog+0x13e>
                    return err;
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	e01f      	b.n	800ea1e <lfs_bd_prog+0x146>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	d006      	beq.n	800e9f4 <lfs_bd_prog+0x11c>
 800e9e6:	4b14      	ldr	r3, [pc, #80]	; (800ea38 <lfs_bd_prog+0x160>)
 800e9e8:	4a10      	ldr	r2, [pc, #64]	; (800ea2c <lfs_bd_prog+0x154>)
 800e9ea:	2106      	movs	r1, #6
 800e9ec:	31ff      	adds	r1, #255	; 0xff
 800e9ee:	4810      	ldr	r0, [pc, #64]	; (800ea30 <lfs_bd_prog+0x158>)
 800e9f0:	f007 fe80 	bl	80166f4 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9f8:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9fe:	699a      	ldr	r2, [r3, #24]
 800ea00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea02:	0011      	movs	r1, r2
 800ea04:	0018      	movs	r0, r3
 800ea06:	f7ff fbed 	bl	800e1e4 <lfs_aligndown>
 800ea0a:	0002      	movs	r2, r0
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	2200      	movs	r2, #0
 800ea14:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800ea16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d185      	bne.n	800e928 <lfs_bd_prog+0x50>
    }

    return 0;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	0018      	movs	r0, r3
 800ea20:	46bd      	mov	sp, r7
 800ea22:	b008      	add	sp, #32
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	46c0      	nop			; (mov r8, r8)
 800ea28:	0801c57c 	.word	0x0801c57c
 800ea2c:	0801cf2c 	.word	0x0801cf2c
 800ea30:	0801c52c 	.word	0x0801c52c
 800ea34:	0801c5b4 	.word	0x0801c5b4
 800ea38:	0801c5d8 	.word	0x0801c5d8

0800ea3c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea4a:	683a      	ldr	r2, [r7, #0]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d306      	bcc.n	800ea5e <lfs_bd_erase+0x22>
 800ea50:	4b0f      	ldr	r3, [pc, #60]	; (800ea90 <lfs_bd_erase+0x54>)
 800ea52:	4a10      	ldr	r2, [pc, #64]	; (800ea94 <lfs_bd_erase+0x58>)
 800ea54:	2114      	movs	r1, #20
 800ea56:	31ff      	adds	r1, #255	; 0xff
 800ea58:	480f      	ldr	r0, [pc, #60]	; (800ea98 <lfs_bd_erase+0x5c>)
 800ea5a:	f007 fe4b 	bl	80166f4 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea62:	68da      	ldr	r2, [r3, #12]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea68:	6839      	ldr	r1, [r7, #0]
 800ea6a:	0018      	movs	r0, r3
 800ea6c:	4790      	blx	r2
 800ea6e:	0003      	movs	r3, r0
 800ea70:	60fb      	str	r3, [r7, #12]
    LFS_ASSERT(err <= 0);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	dd06      	ble.n	800ea86 <lfs_bd_erase+0x4a>
 800ea78:	4b08      	ldr	r3, [pc, #32]	; (800ea9c <lfs_bd_erase+0x60>)
 800ea7a:	4a06      	ldr	r2, [pc, #24]	; (800ea94 <lfs_bd_erase+0x58>)
 800ea7c:	2116      	movs	r1, #22
 800ea7e:	31ff      	adds	r1, #255	; 0xff
 800ea80:	4805      	ldr	r0, [pc, #20]	; (800ea98 <lfs_bd_erase+0x5c>)
 800ea82:	f007 fe37 	bl	80166f4 <__assert_func>
    return err;
 800ea86:	68fb      	ldr	r3, [r7, #12]
}
 800ea88:	0018      	movs	r0, r3
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	b004      	add	sp, #16
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	0801c5fc 	.word	0x0801c5fc
 800ea94:	0801cf38 	.word	0x0801cf38
 800ea98:	0801c52c 	.word	0x0801c52c
 800ea9c:	0801c54c 	.word	0x0801c54c

0800eaa0 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	685a      	ldr	r2, [r3, #4]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	3304      	adds	r3, #4
 800eaba:	68fa      	ldr	r2, [r7, #12]
 800eabc:	601a      	str	r2, [r3, #0]
}
 800eabe:	46c0      	nop			; (mov r8, r8)
 800eac0:	46bd      	mov	sp, r7
 800eac2:	b004      	add	sp, #16
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b082      	sub	sp, #8
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	3301      	adds	r3, #1
 800ead4:	d004      	beq.n	800eae0 <lfs_pair_isnull+0x1a>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	3304      	adds	r3, #4
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	3301      	adds	r3, #1
 800eade:	d101      	bne.n	800eae4 <lfs_pair_isnull+0x1e>
 800eae0:	2301      	movs	r3, #1
 800eae2:	e000      	b.n	800eae6 <lfs_pair_isnull+0x20>
 800eae4:	2300      	movs	r3, #0
 800eae6:	1c1a      	adds	r2, r3, #0
 800eae8:	2301      	movs	r3, #1
 800eaea:	4013      	ands	r3, r2
 800eaec:	b2db      	uxtb	r3, r3
}
 800eaee:	0018      	movs	r0, r3
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	b002      	add	sp, #8
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b082      	sub	sp, #8
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
 800eafe:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d017      	beq.n	800eb3c <lfs_pair_cmp+0x46>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	3304      	adds	r3, #4
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	3304      	adds	r3, #4
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d00f      	beq.n	800eb3c <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	3304      	adds	r3, #4
 800eb24:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d008      	beq.n	800eb3c <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d001      	beq.n	800eb3c <lfs_pair_cmp+0x46>
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e000      	b.n	800eb3e <lfs_pair_cmp+0x48>
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	0018      	movs	r0, r3
 800eb40:	46bd      	mov	sp, r7
 800eb42:	b002      	add	sp, #8
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b082      	sub	sp, #8
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d107      	bne.n	800eb6c <lfs_pair_issync+0x26>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	3304      	adds	r3, #4
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	3304      	adds	r3, #4
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d00d      	beq.n	800eb88 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	3304      	adds	r3, #4
 800eb74:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d108      	bne.n	800eb8c <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d101      	bne.n	800eb8c <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e000      	b.n	800eb8e <lfs_pair_issync+0x48>
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	1c1a      	adds	r2, r3, #0
 800eb90:	2301      	movs	r3, #1
 800eb92:	4013      	ands	r3, r2
 800eb94:	b2db      	uxtb	r3, r3
}
 800eb96:	0018      	movs	r0, r3
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	b002      	add	sp, #8
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800eb9e:	b590      	push	{r4, r7, lr}
 800eba0:	b083      	sub	sp, #12
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	0018      	movs	r0, r3
 800ebac:	f7ff fb74 	bl	800e298 <lfs_fromle32>
 800ebb0:	0002      	movs	r2, r0
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	3304      	adds	r3, #4
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	1d1c      	adds	r4, r3, #4
 800ebc0:	0010      	movs	r0, r2
 800ebc2:	f7ff fb69 	bl	800e298 <lfs_fromle32>
 800ebc6:	0003      	movs	r3, r0
 800ebc8:	6023      	str	r3, [r4, #0]
}
 800ebca:	46c0      	nop			; (mov r8, r8)
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	b003      	add	sp, #12
 800ebd0:	bd90      	pop	{r4, r7, pc}

0800ebd2 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800ebd2:	b590      	push	{r4, r7, lr}
 800ebd4:	b083      	sub	sp, #12
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	0018      	movs	r0, r3
 800ebe0:	f7ff fb63 	bl	800e2aa <lfs_tole32>
 800ebe4:	0002      	movs	r2, r0
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	3304      	adds	r3, #4
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	1d1c      	adds	r4, r3, #4
 800ebf4:	0010      	movs	r0, r2
 800ebf6:	f7ff fb58 	bl	800e2aa <lfs_tole32>
 800ebfa:	0003      	movs	r3, r0
 800ebfc:	6023      	str	r3, [r4, #0]
}
 800ebfe:	46c0      	nop			; (mov r8, r8)
 800ec00:	46bd      	mov	sp, r7
 800ec02:	b003      	add	sp, #12
 800ec04:	bd90      	pop	{r4, r7, pc}

0800ec06 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b082      	sub	sp, #8
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	43db      	mvns	r3, r3
 800ec12:	0fdb      	lsrs	r3, r3, #31
 800ec14:	b2db      	uxtb	r3, r3
}
 800ec16:	0018      	movs	r0, r3
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	b002      	add	sp, #8
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b082      	sub	sp, #8
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	059b      	lsls	r3, r3, #22
 800ec2a:	159b      	asrs	r3, r3, #22
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	425a      	negs	r2, r3
 800ec30:	4153      	adcs	r3, r2
 800ec32:	b2db      	uxtb	r3, r3
}
 800ec34:	0018      	movs	r0, r3
 800ec36:	46bd      	mov	sp, r7
 800ec38:	b002      	add	sp, #8
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	0d1b      	lsrs	r3, r3, #20
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	23e0      	movs	r3, #224	; 0xe0
 800ec4c:	00db      	lsls	r3, r3, #3
 800ec4e:	4013      	ands	r3, r2
 800ec50:	b29b      	uxth	r3, r3
}
 800ec52:	0018      	movs	r0, r3
 800ec54:	46bd      	mov	sp, r7
 800ec56:	b002      	add	sp, #8
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b082      	sub	sp, #8
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	0d1b      	lsrs	r3, r3, #20
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	23f0      	movs	r3, #240	; 0xf0
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	b29b      	uxth	r3, r3
}
 800ec70:	0018      	movs	r0, r3
 800ec72:	46bd      	mov	sp, r7
 800ec74:	b002      	add	sp, #8
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	0d1b      	lsrs	r3, r3, #20
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	055b      	lsls	r3, r3, #21
 800ec88:	0d5b      	lsrs	r3, r3, #21
 800ec8a:	b29b      	uxth	r3, r3
}
 800ec8c:	0018      	movs	r0, r3
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	b002      	add	sp, #8
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	0d1b      	lsrs	r3, r3, #20
 800eca0:	b2db      	uxtb	r3, r3
}
 800eca2:	0018      	movs	r0, r3
 800eca4:	46bd      	mov	sp, r7
 800eca6:	b002      	add	sp, #8
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b082      	sub	sp, #8
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	0018      	movs	r0, r3
 800ecb6:	f7ff ffed 	bl	800ec94 <lfs_tag_chunk>
 800ecba:	0003      	movs	r3, r0
 800ecbc:	b25b      	sxtb	r3, r3
}
 800ecbe:	0018      	movs	r0, r3
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	b002      	add	sp, #8
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b082      	sub	sp, #8
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	0a9b      	lsrs	r3, r3, #10
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	059b      	lsls	r3, r3, #22
 800ecd6:	0d9b      	lsrs	r3, r3, #22
 800ecd8:	b29b      	uxth	r3, r3
}
 800ecda:	0018      	movs	r0, r3
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	b002      	add	sp, #8
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b082      	sub	sp, #8
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	059b      	lsls	r3, r3, #22
 800ecee:	0d9b      	lsrs	r3, r3, #22
}
 800ecf0:	0018      	movs	r0, r3
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	b002      	add	sp, #8
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	0018      	movs	r0, r3
 800ed04:	f7ff ff8b 	bl	800ec1e <lfs_tag_isdelete>
 800ed08:	0003      	movs	r3, r0
 800ed0a:	001a      	movs	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	18d3      	adds	r3, r2, r3
 800ed10:	0018      	movs	r0, r3
 800ed12:	f7ff ffe6 	bl	800ece2 <lfs_tag_size>
 800ed16:	0003      	movs	r3, r0
 800ed18:	3304      	adds	r3, #4
}
 800ed1a:	0018      	movs	r0, r3
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	b002      	add	sp, #8
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b084      	sub	sp, #16
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
 800ed2a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	60fb      	str	r3, [r7, #12]
 800ed30:	e012      	b.n	800ed58 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	18d3      	adds	r3, r2, r3
 800ed3a:	6819      	ldr	r1, [r3, #0]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	683a      	ldr	r2, [r7, #0]
 800ed42:	18d3      	adds	r3, r2, r3
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	18c3      	adds	r3, r0, r3
 800ed4e:	404a      	eors	r2, r1
 800ed50:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	3301      	adds	r3, #1
 800ed56:	60fb      	str	r3, [r7, #12]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	dde9      	ble.n	800ed32 <lfs_gstate_xor+0x10>
    }
}
 800ed5e:	46c0      	nop			; (mov r8, r8)
 800ed60:	46c0      	nop			; (mov r8, r8)
 800ed62:	46bd      	mov	sp, r7
 800ed64:	b004      	add	sp, #16
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800ed70:	2300      	movs	r3, #0
 800ed72:	60fb      	str	r3, [r7, #12]
 800ed74:	e00b      	b.n	800ed8e <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	18d3      	adds	r3, r2, r3
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d001      	beq.n	800ed88 <lfs_gstate_iszero+0x20>
            return false;
 800ed84:	2300      	movs	r3, #0
 800ed86:	e006      	b.n	800ed96 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	60fb      	str	r3, [r7, #12]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	ddf0      	ble.n	800ed76 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800ed94:	2301      	movs	r3, #1
}
 800ed96:	0018      	movs	r0, r3
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	b004      	add	sp, #16
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b082      	sub	sp, #8
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	0018      	movs	r0, r3
 800edac:	f7ff ff99 	bl	800ece2 <lfs_tag_size>
 800edb0:	0003      	movs	r3, r0
 800edb2:	1e5a      	subs	r2, r3, #1
 800edb4:	4193      	sbcs	r3, r2
 800edb6:	b2db      	uxtb	r3, r3
}
 800edb8:	0018      	movs	r0, r3
 800edba:	46bd      	mov	sp, r7
 800edbc:	b002      	add	sp, #8
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	0018      	movs	r0, r3
 800edce:	f7ff ff88 	bl	800ece2 <lfs_tag_size>
 800edd2:	0003      	movs	r3, r0
 800edd4:	b2db      	uxtb	r3, r3
}
 800edd6:	0018      	movs	r0, r3
 800edd8:	46bd      	mov	sp, r7
 800edda:	b002      	add	sp, #8
 800eddc:	bd80      	pop	{r7, pc}

0800edde <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800edde:	b580      	push	{r7, lr}
 800ede0:	b082      	sub	sp, #8
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	0018      	movs	r0, r3
 800edec:	f7ff ff26 	bl	800ec3c <lfs_tag_type1>
 800edf0:	0003      	movs	r3, r0
 800edf2:	1e5a      	subs	r2, r3, #1
 800edf4:	4193      	sbcs	r3, r2
 800edf6:	b2db      	uxtb	r3, r3
}
 800edf8:	0018      	movs	r0, r3
 800edfa:	46bd      	mov	sp, r7
 800edfc:	b002      	add	sp, #8
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	0018      	movs	r0, r3
 800ee0e:	f7ff ff68 	bl	800ece2 <lfs_tag_size>
 800ee12:	0003      	movs	r3, r0
 800ee14:	0a5b      	lsrs	r3, r3, #9
 800ee16:	1e5a      	subs	r2, r3, #1
 800ee18:	4193      	sbcs	r3, r2
 800ee1a:	b2db      	uxtb	r3, r3
}
 800ee1c:	0018      	movs	r0, r3
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	b002      	add	sp, #8
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	0018      	movs	r0, r3
 800ee34:	f7ff ff02 	bl	800ec3c <lfs_tag_type1>
 800ee38:	1e03      	subs	r3, r0, #0
 800ee3a:	d00a      	beq.n	800ee52 <lfs_gstate_hasmovehere+0x2e>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	3304      	adds	r3, #4
 800ee40:	683a      	ldr	r2, [r7, #0]
 800ee42:	0011      	movs	r1, r2
 800ee44:	0018      	movs	r0, r3
 800ee46:	f7ff fe56 	bl	800eaf6 <lfs_pair_cmp>
 800ee4a:	1e03      	subs	r3, r0, #0
 800ee4c:	d101      	bne.n	800ee52 <lfs_gstate_hasmovehere+0x2e>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e000      	b.n	800ee54 <lfs_gstate_hasmovehere+0x30>
 800ee52:	2300      	movs	r3, #0
 800ee54:	1c1a      	adds	r2, r3, #0
 800ee56:	2301      	movs	r3, #1
 800ee58:	4013      	ands	r3, r2
 800ee5a:	b2db      	uxtb	r3, r3
}
 800ee5c:	0018      	movs	r0, r3
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	b002      	add	sp, #8
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	0018      	movs	r0, r3
 800ee72:	f7ff fa11 	bl	800e298 <lfs_fromle32>
 800ee76:	0002      	movs	r2, r0
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	0018      	movs	r0, r3
 800ee82:	f7ff fa09 	bl	800e298 <lfs_fromle32>
 800ee86:	0002      	movs	r2, r0
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	0018      	movs	r0, r3
 800ee92:	f7ff fa01 	bl	800e298 <lfs_fromle32>
 800ee96:	0002      	movs	r2, r0
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	609a      	str	r2, [r3, #8]
}
 800ee9c:	46c0      	nop			; (mov r8, r8)
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	b002      	add	sp, #8
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	0018      	movs	r0, r3
 800eeb2:	f7ff f9fa 	bl	800e2aa <lfs_tole32>
 800eeb6:	0002      	movs	r2, r0
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	0018      	movs	r0, r3
 800eec2:	f7ff f9f2 	bl	800e2aa <lfs_tole32>
 800eec6:	0002      	movs	r2, r0
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	0018      	movs	r0, r3
 800eed2:	f7ff f9ea 	bl	800e2aa <lfs_tole32>
 800eed6:	0002      	movs	r2, r0
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	609a      	str	r2, [r3, #8]
}
 800eedc:	46c0      	nop			; (mov r8, r8)
 800eede:	46bd      	mov	sp, r7
 800eee0:	b002      	add	sp, #8
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	0018      	movs	r0, r3
 800eef2:	f7ff f9d1 	bl	800e298 <lfs_fromle32>
 800eef6:	0002      	movs	r2, r0
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	0018      	movs	r0, r3
 800ef02:	f7ff f9c9 	bl	800e298 <lfs_fromle32>
 800ef06:	0002      	movs	r2, r0
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	605a      	str	r2, [r3, #4]
}
 800ef0c:	46c0      	nop			; (mov r8, r8)
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	b002      	add	sp, #8
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	0018      	movs	r0, r3
 800ef22:	f7ff f9c2 	bl	800e2aa <lfs_tole32>
 800ef26:	0002      	movs	r2, r0
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	0018      	movs	r0, r3
 800ef32:	f7ff f9ba 	bl	800e2aa <lfs_tole32>
 800ef36:	0002      	movs	r2, r0
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	605a      	str	r2, [r3, #4]
}
 800ef3c:	46c0      	nop			; (mov r8, r8)
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	b002      	add	sp, #8
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	0018      	movs	r0, r3
 800ef52:	f7ff f9a1 	bl	800e298 <lfs_fromle32>
 800ef56:	0002      	movs	r2, r0
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	0018      	movs	r0, r3
 800ef62:	f7ff f999 	bl	800e298 <lfs_fromle32>
 800ef66:	0002      	movs	r2, r0
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	605a      	str	r2, [r3, #4]
}
 800ef6c:	46c0      	nop			; (mov r8, r8)
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	b002      	add	sp, #8
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	0018      	movs	r0, r3
 800ef82:	f7ff f992 	bl	800e2aa <lfs_tole32>
 800ef86:	0002      	movs	r2, r0
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	0018      	movs	r0, r3
 800ef92:	f7ff f98a 	bl	800e2aa <lfs_tole32>
 800ef96:	0002      	movs	r2, r0
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	605a      	str	r2, [r3, #4]
}
 800ef9c:	46c0      	nop			; (mov r8, r8)
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	b002      	add	sp, #8
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	0018      	movs	r0, r3
 800efb2:	f7ff f971 	bl	800e298 <lfs_fromle32>
 800efb6:	0002      	movs	r2, r0
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	0018      	movs	r0, r3
 800efc2:	f7ff f969 	bl	800e298 <lfs_fromle32>
 800efc6:	0002      	movs	r2, r0
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	0018      	movs	r0, r3
 800efd2:	f7ff f961 	bl	800e298 <lfs_fromle32>
 800efd6:	0002      	movs	r2, r0
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	68db      	ldr	r3, [r3, #12]
 800efe0:	0018      	movs	r0, r3
 800efe2:	f7ff f959 	bl	800e298 <lfs_fromle32>
 800efe6:	0002      	movs	r2, r0
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	691b      	ldr	r3, [r3, #16]
 800eff0:	0018      	movs	r0, r3
 800eff2:	f7ff f951 	bl	800e298 <lfs_fromle32>
 800eff6:	0002      	movs	r2, r0
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	695b      	ldr	r3, [r3, #20]
 800f000:	0018      	movs	r0, r3
 800f002:	f7ff f949 	bl	800e298 <lfs_fromle32>
 800f006:	0002      	movs	r2, r0
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	615a      	str	r2, [r3, #20]
}
 800f00c:	46c0      	nop			; (mov r8, r8)
 800f00e:	46bd      	mov	sp, r7
 800f010:	b002      	add	sp, #8
 800f012:	bd80      	pop	{r7, pc}

0800f014 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	0018      	movs	r0, r3
 800f022:	f7ff f942 	bl	800e2aa <lfs_tole32>
 800f026:	0002      	movs	r2, r0
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	0018      	movs	r0, r3
 800f032:	f7ff f93a 	bl	800e2aa <lfs_tole32>
 800f036:	0002      	movs	r2, r0
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	0018      	movs	r0, r3
 800f042:	f7ff f932 	bl	800e2aa <lfs_tole32>
 800f046:	0002      	movs	r2, r0
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	0018      	movs	r0, r3
 800f052:	f7ff f92a 	bl	800e2aa <lfs_tole32>
 800f056:	0002      	movs	r2, r0
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	691b      	ldr	r3, [r3, #16]
 800f060:	0018      	movs	r0, r3
 800f062:	f7ff f922 	bl	800e2aa <lfs_tole32>
 800f066:	0002      	movs	r2, r0
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	695b      	ldr	r3, [r3, #20]
 800f070:	0018      	movs	r0, r3
 800f072:	f7ff f91a 	bl	800e2aa <lfs_tole32>
 800f076:	0002      	movs	r2, r0
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	615a      	str	r2, [r3, #20]
}
 800f07c:	46c0      	nop			; (mov r8, r8)
 800f07e:	46bd      	mov	sp, r7
 800f080:	b002      	add	sp, #8
 800f082:	bd80      	pop	{r7, pc}

0800f084 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800f08e:	1d3b      	adds	r3, r7, #4
 800f090:	60fb      	str	r3, [r7, #12]
 800f092:	e009      	b.n	800f0a8 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	683a      	ldr	r2, [r7, #0]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d101      	bne.n	800f0a2 <lfs_mlist_isopen+0x1e>
            return true;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e007      	b.n	800f0b2 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	60fb      	str	r3, [r7, #12]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d1f1      	bne.n	800f094 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800f0b0:	2300      	movs	r3, #0
}
 800f0b2:	0018      	movs	r0, r3
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	b004      	add	sp, #16
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b084      	sub	sp, #16
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	3328      	adds	r3, #40	; 0x28
 800f0c8:	60fb      	str	r3, [r7, #12]
 800f0ca:	e00d      	b.n	800f0e8 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d105      	bne.n	800f0e2 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	601a      	str	r2, [r3, #0]
            break;
 800f0e0:	e007      	b.n	800f0f2 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	60fb      	str	r3, [r7, #12]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d1ed      	bne.n	800f0cc <lfs_mlist_remove+0x12>
        }
    }
}
 800f0f0:	46c0      	nop			; (mov r8, r8)
 800f0f2:	46c0      	nop			; (mov r8, r8)
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	b004      	add	sp, #16
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b082      	sub	sp, #8
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
 800f102:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	683a      	ldr	r2, [r7, #0]
 800f110:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f112:	46c0      	nop			; (mov r8, r8)
 800f114:	46bd      	mov	sp, r7
 800f116:	b002      	add	sp, #8
 800f118:	bd80      	pop	{r7, pc}
	...

0800f11c <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 800f124:	4b02      	ldr	r3, [pc, #8]	; (800f130 <lfs_fs_disk_version+0x14>)
    }
}
 800f126:	0018      	movs	r0, r3
 800f128:	46bd      	mov	sp, r7
 800f12a:	b002      	add	sp, #8
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	46c0      	nop			; (mov r8, r8)
 800f130:	00020001 	.word	0x00020001

0800f134 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	0018      	movs	r0, r3
 800f140:	f7ff ffec 	bl	800f11c <lfs_fs_disk_version>
 800f144:	0003      	movs	r3, r0
 800f146:	0c1b      	lsrs	r3, r3, #16
 800f148:	b29b      	uxth	r3, r3

}
 800f14a:	0018      	movs	r0, r3
 800f14c:	46bd      	mov	sp, r7
 800f14e:	b002      	add	sp, #8
 800f150:	bd80      	pop	{r7, pc}

0800f152 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800f152:	b580      	push	{r7, lr}
 800f154:	b082      	sub	sp, #8
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	0018      	movs	r0, r3
 800f15e:	f7ff ffdd 	bl	800f11c <lfs_fs_disk_version>
 800f162:	0003      	movs	r3, r0
 800f164:	b29b      	uxth	r3, r3
}
 800f166:	0018      	movs	r0, r3
 800f168:	46bd      	mov	sp, r7
 800f16a:	b002      	add	sp, #8
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800f16e:	b580      	push	{r7, lr}
 800f170:	b084      	sub	sp, #16
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f180:	683a      	ldr	r2, [r7, #0]
 800f182:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f188:	18d2      	adds	r2, r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->free.off)
 800f18e:	0019      	movs	r1, r3
 800f190:	0010      	movs	r0, r2
 800f192:	f7f1 f865 	bl	8000260 <__aeabi_uidivmod>
 800f196:	000b      	movs	r3, r1
 800f198:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f19e:	68ba      	ldr	r2, [r7, #8]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d212      	bcs.n	800f1ca <lfs_alloc_lookahead+0x5c>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	095b      	lsrs	r3, r3, #5
 800f1ac:	009a      	lsls	r2, r3, #2
 800f1ae:	188a      	adds	r2, r1, r2
 800f1b0:	6810      	ldr	r0, [r2, #0]
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	211f      	movs	r1, #31
 800f1b6:	400a      	ands	r2, r1
 800f1b8:	2101      	movs	r1, #1
 800f1ba:	4091      	lsls	r1, r2
 800f1bc:	68fa      	ldr	r2, [r7, #12]
 800f1be:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	18d3      	adds	r3, r2, r3
 800f1c4:	0002      	movs	r2, r0
 800f1c6:	430a      	orrs	r2, r1
 800f1c8:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	0018      	movs	r0, r3
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	b004      	add	sp, #16
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->block_count;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	661a      	str	r2, [r3, #96]	; 0x60
}
 800f1e4:	46c0      	nop			; (mov r8, r8)
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	b002      	add	sp, #8
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	0018      	movs	r0, r3
 800f204:	f7ff ffe6 	bl	800f1d4 <lfs_alloc_ack>
}
 800f208:	46c0      	nop			; (mov r8, r8)
 800f20a:	46bd      	mov	sp, r7
 800f20c:	b002      	add	sp, #8
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <lfs_fs_rawgc>:

#ifndef LFS_READONLY
static int lfs_fs_rawgc(lfs_t *lfs) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
    // Move free offset at the first unused block (lfs->free.i)
    // lfs->free.i is equal lfs->free.size when all blocks are used
    lfs->free.off = (lfs->free.off + lfs->free.i) % lfs->block_count;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f220:	18d2      	adds	r2, r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f226:	0019      	movs	r1, r3
 800f228:	0010      	movs	r0, r2
 800f22a:	f7f1 f819 	bl	8000260 <__aeabi_uidivmod>
 800f22e:	000b      	movs	r3, r1
 800f230:	001a      	movs	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f23c:	00da      	lsls	r2, r3, #3
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f242:	0019      	movs	r1, r3
 800f244:	0010      	movs	r0, r2
 800f246:	f7fe ffbf 	bl	800e1c8 <lfs_min>
 800f24a:	0002      	movs	r2, r0
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	65da      	str	r2, [r3, #92]	; 0x5c

    // find mask of free blocks from tree
    memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f260:	001a      	movs	r2, r3
 800f262:	2100      	movs	r1, #0
 800f264:	f007 fae7 	bl	8016836 <memset>
    int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	490a      	ldr	r1, [pc, #40]	; (800f294 <lfs_fs_rawgc+0x84>)
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	2301      	movs	r3, #1
 800f270:	f005 fc6e 	bl	8014b50 <lfs_fs_rawtraverse>
 800f274:	0003      	movs	r3, r0
 800f276:	60fb      	str	r3, [r7, #12]
    if (err) {
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d005      	beq.n	800f28a <lfs_fs_rawgc+0x7a>
        lfs_alloc_drop(lfs);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	0018      	movs	r0, r3
 800f282:	f7ff ffb3 	bl	800f1ec <lfs_alloc_drop>
        return err;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	e000      	b.n	800f28c <lfs_fs_rawgc+0x7c>
    }

    return 0;
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	0018      	movs	r0, r3
 800f28e:	46bd      	mov	sp, r7
 800f290:	b004      	add	sp, #16
 800f292:	bd80      	pop	{r7, pc}
 800f294:	0800f16f 	.word	0x0800f16f

0800f298 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800f298:	b590      	push	{r4, r7, lr}
 800f29a:	b087      	sub	sp, #28
 800f29c:	af02      	add	r7, sp, #8
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800f2a2:	e04d      	b.n	800f340 <lfs_alloc+0xa8>
            lfs_block_t off = lfs->free.i;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2a8:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2ae:	1c5a      	adds	r2, r3, #1
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2b8:	1e5a      	subs	r2, r3, #1
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	095b      	lsrs	r3, r3, #5
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	18d3      	adds	r3, r2, r3
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	211f      	movs	r1, #31
 800f2d0:	400a      	ands	r2, r1
 800f2d2:	2101      	movs	r1, #1
 800f2d4:	4091      	lsls	r1, r2
 800f2d6:	000a      	movs	r2, r1
 800f2d8:	4013      	ands	r3, r2
 800f2da:	d131      	bne.n	800f340 <lfs_alloc+0xa8>
                // found a free block
                *block = (lfs->free.off + off) % lfs->block_count;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	18d2      	adds	r2, r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2e8:	0019      	movs	r1, r3
 800f2ea:	0010      	movs	r0, r2
 800f2ec:	f7f0 ffb8 	bl	8000260 <__aeabi_uidivmod>
 800f2f0:	000b      	movs	r3, r1
 800f2f2:	001a      	movs	r2, r3
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800f2f8:	e009      	b.n	800f30e <lfs_alloc+0x76>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2fe:	1c5a      	adds	r2, r3, #1
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f308:	1e5a      	subs	r2, r3, #1
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f316:	429a      	cmp	r2, r3
 800f318:	d010      	beq.n	800f33c <lfs_alloc+0xa4>
                        (lfs->free.buffer[lfs->free.i / 32]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f322:	095b      	lsrs	r3, r3, #5
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	18d3      	adds	r3, r2, r3
 800f328:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f32e:	211f      	movs	r1, #31
 800f330:	400b      	ands	r3, r1
 800f332:	2101      	movs	r1, #1
 800f334:	4099      	lsls	r1, r3
 800f336:	000b      	movs	r3, r1
 800f338:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 800f33a:	d1de      	bne.n	800f2fa <lfs_alloc+0x62>
                }

                return 0;
 800f33c:	2300      	movs	r3, #0
 800f33e:	e024      	b.n	800f38a <lfs_alloc+0xf2>
        while (lfs->free.i != lfs->free.size) {
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f348:	429a      	cmp	r2, r3
 800f34a:	d1ab      	bne.n	800f2a4 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f350:	2b00      	cmp	r3, #0
 800f352:	d110      	bne.n	800f376 <lfs_alloc+0xde>
            LFS_ERROR("No more free space %"PRIu32,
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f35c:	18d2      	adds	r2, r2, r3
 800f35e:	4c0d      	ldr	r4, [pc, #52]	; (800f394 <lfs_alloc+0xfc>)
 800f360:	490d      	ldr	r1, [pc, #52]	; (800f398 <lfs_alloc+0x100>)
 800f362:	480e      	ldr	r0, [pc, #56]	; (800f39c <lfs_alloc+0x104>)
 800f364:	4b0e      	ldr	r3, [pc, #56]	; (800f3a0 <lfs_alloc+0x108>)
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	0013      	movs	r3, r2
 800f36a:	0022      	movs	r2, r4
 800f36c:	f008 f91e 	bl	80175ac <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 800f370:	231c      	movs	r3, #28
 800f372:	425b      	negs	r3, r3
 800f374:	e009      	b.n	800f38a <lfs_alloc+0xf2>
        }

        int err = lfs_fs_rawgc(lfs);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	0018      	movs	r0, r3
 800f37a:	f7ff ff49 	bl	800f210 <lfs_fs_rawgc>
 800f37e:	0003      	movs	r3, r0
 800f380:	60fb      	str	r3, [r7, #12]
        if(err) {
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d08c      	beq.n	800f2a2 <lfs_alloc+0xa>
            return err;
 800f388:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800f38a:	0018      	movs	r0, r3
 800f38c:	46bd      	mov	sp, r7
 800f38e:	b005      	add	sp, #20
 800f390:	bd90      	pop	{r4, r7, pc}
 800f392:	46c0      	nop			; (mov r8, r8)
 800f394:	0000029f 	.word	0x0000029f
 800f398:	0801c52c 	.word	0x0801c52c
 800f39c:	0801c618 	.word	0x0801c618
 800f3a0:	0801c640 	.word	0x0801c640

0800f3a4 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800f3a4:	b5b0      	push	{r4, r5, r7, lr}
 800f3a6:	b08e      	sub	sp, #56	; 0x38
 800f3a8:	af04      	add	r7, sp, #16
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
 800f3b0:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	333c      	adds	r3, #60	; 0x3c
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	0011      	movs	r1, r2
 800f3ca:	0018      	movs	r0, r3
 800f3cc:	f7ff fd2a 	bl	800ee24 <lfs_gstate_hasmovehere>
 800f3d0:	1e03      	subs	r3, r0, #0
 800f3d2:	d100      	bne.n	800f3d6 <lfs_dir_getslice+0x32>
 800f3d4:	e0c2      	b.n	800f55c <lfs_dir_getslice+0x1b8>
            lfs_tag_id(gmask) != 0 &&
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	0018      	movs	r0, r3
 800f3da:	f7ff fc74 	bl	800ecc6 <lfs_tag_id>
 800f3de:	1e03      	subs	r3, r0, #0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800f3e0:	d100      	bne.n	800f3e4 <lfs_dir_getslice+0x40>
 800f3e2:	e0bb      	b.n	800f55c <lfs_dir_getslice+0x1b8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3e8:	0018      	movs	r0, r3
 800f3ea:	f7ff fc6c 	bl	800ecc6 <lfs_tag_id>
 800f3ee:	0003      	movs	r3, r0
 800f3f0:	001c      	movs	r4, r3
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	0018      	movs	r0, r3
 800f3f6:	f7ff fc66 	bl	800ecc6 <lfs_tag_id>
 800f3fa:	0003      	movs	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800f3fc:	429c      	cmp	r4, r3
 800f3fe:	d900      	bls.n	800f402 <lfs_dir_getslice+0x5e>
 800f400:	e0ac      	b.n	800f55c <lfs_dir_getslice+0x1b8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800f402:	6a3b      	ldr	r3, [r7, #32]
 800f404:	4a5d      	ldr	r2, [pc, #372]	; (800f57c <lfs_dir_getslice+0x1d8>)
 800f406:	4694      	mov	ip, r2
 800f408:	4463      	add	r3, ip
 800f40a:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800f40c:	e0a6      	b.n	800f55c <lfs_dir_getslice+0x1b8>
        off -= lfs_tag_dsize(ntag);
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	0018      	movs	r0, r3
 800f412:	f7ff fc71 	bl	800ecf8 <lfs_tag_dsize>
 800f416:	0002      	movs	r2, r0
 800f418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41a:	1a9b      	subs	r3, r3, r2
 800f41c:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800f422:	68f9      	ldr	r1, [r7, #12]
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	2204      	movs	r2, #4
 800f42c:	9203      	str	r2, [sp, #12]
 800f42e:	2210      	movs	r2, #16
 800f430:	18ba      	adds	r2, r7, r2
 800f432:	9202      	str	r2, [sp, #8]
 800f434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f436:	9201      	str	r2, [sp, #4]
 800f438:	9300      	str	r3, [sp, #0]
 800f43a:	2304      	movs	r3, #4
 800f43c:	000a      	movs	r2, r1
 800f43e:	2100      	movs	r1, #0
 800f440:	f7fe ff94 	bl	800e36c <lfs_bd_read>
 800f444:	0003      	movs	r3, r0
 800f446:	61bb      	str	r3, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <lfs_dir_getslice+0xae>
            return err;
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	e090      	b.n	800f574 <lfs_dir_getslice+0x1d0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	0018      	movs	r0, r3
 800f456:	f7fe ff35 	bl	800e2c4 <lfs_frombe32>
 800f45a:	0002      	movs	r2, r0
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	4053      	eors	r3, r2
 800f460:	005b      	lsls	r3, r3, #1
 800f462:	085b      	lsrs	r3, r3, #1
 800f464:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	0018      	movs	r0, r3
 800f46a:	f7ff fc2c 	bl	800ecc6 <lfs_tag_id>
 800f46e:	1e03      	subs	r3, r0, #0
 800f470:	d02e      	beq.n	800f4d0 <lfs_dir_getslice+0x12c>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	0018      	movs	r0, r3
 800f476:	f7ff fbe1 	bl	800ec3c <lfs_tag_type1>
 800f47a:	0003      	movs	r3, r0
 800f47c:	001a      	movs	r2, r3
        if (lfs_tag_id(gmask) != 0 &&
 800f47e:	2380      	movs	r3, #128	; 0x80
 800f480:	00db      	lsls	r3, r3, #3
 800f482:	429a      	cmp	r2, r3
 800f484:	d124      	bne.n	800f4d0 <lfs_dir_getslice+0x12c>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	0018      	movs	r0, r3
 800f48a:	f7ff fc1c 	bl	800ecc6 <lfs_tag_id>
 800f48e:	0003      	movs	r3, r0
 800f490:	001c      	movs	r4, r3
 800f492:	6a3b      	ldr	r3, [r7, #32]
 800f494:	683a      	ldr	r2, [r7, #0]
 800f496:	1ad3      	subs	r3, r2, r3
 800f498:	0018      	movs	r0, r3
 800f49a:	f7ff fc14 	bl	800ecc6 <lfs_tag_id>
 800f49e:	0003      	movs	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800f4a0:	429c      	cmp	r4, r3
 800f4a2:	d815      	bhi.n	800f4d0 <lfs_dir_getslice+0x12c>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800f4a4:	6a3b      	ldr	r3, [r7, #32]
 800f4a6:	683a      	ldr	r2, [r7, #0]
 800f4a8:	1ad3      	subs	r3, r2, r3
 800f4aa:	4a35      	ldr	r2, [pc, #212]	; (800f580 <lfs_dir_getslice+0x1dc>)
 800f4ac:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800f4ae:	4a35      	ldr	r2, [pc, #212]	; (800f584 <lfs_dir_getslice+0x1e0>)
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	69fa      	ldr	r2, [r7, #28]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d102      	bne.n	800f4be <lfs_dir_getslice+0x11a>
                // found where we were created
                return LFS_ERR_NOENT;
 800f4b8:	2302      	movs	r3, #2
 800f4ba:	425b      	negs	r3, r3
 800f4bc:	e05a      	b.n	800f574 <lfs_dir_getslice+0x1d0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	0018      	movs	r0, r3
 800f4c2:	f7ff fbf2 	bl	800ecaa <lfs_tag_splice>
 800f4c6:	0003      	movs	r3, r0
 800f4c8:	029a      	lsls	r2, r3, #10
 800f4ca:	6a3b      	ldr	r3, [r7, #32]
 800f4cc:	18d3      	adds	r3, r2, r3
 800f4ce:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800f4d0:	6a3b      	ldr	r3, [r7, #32]
 800f4d2:	683a      	ldr	r2, [r7, #0]
 800f4d4:	1ad2      	subs	r2, r2, r3
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	4053      	eors	r3, r2
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	4013      	ands	r3, r2
 800f4de:	d13d      	bne.n	800f55c <lfs_dir_getslice+0x1b8>
            if (lfs_tag_isdelete(tag)) {
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	0018      	movs	r0, r3
 800f4e4:	f7ff fb9b 	bl	800ec1e <lfs_tag_isdelete>
 800f4e8:	1e03      	subs	r3, r0, #0
 800f4ea:	d002      	beq.n	800f4f2 <lfs_dir_getslice+0x14e>
                return LFS_ERR_NOENT;
 800f4ec:	2302      	movs	r3, #2
 800f4ee:	425b      	negs	r3, r3
 800f4f0:	e040      	b.n	800f574 <lfs_dir_getslice+0x1d0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	0018      	movs	r0, r3
 800f4f6:	f7ff fbf4 	bl	800ece2 <lfs_tag_size>
 800f4fa:	0002      	movs	r2, r0
 800f4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4fe:	0019      	movs	r1, r3
 800f500:	0010      	movs	r0, r2
 800f502:	f7fe fe61 	bl	800e1c8 <lfs_min>
 800f506:	0003      	movs	r3, r0
 800f508:	617b      	str	r3, [r7, #20]
            err = lfs_bd_read(lfs,
 800f50a:	68fc      	ldr	r4, [r7, #12]
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800f510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f514:	188a      	adds	r2, r1, r2
            err = lfs_bd_read(lfs,
 800f516:	3204      	adds	r2, #4
 800f518:	697d      	ldr	r5, [r7, #20]
 800f51a:	68f8      	ldr	r0, [r7, #12]
 800f51c:	6979      	ldr	r1, [r7, #20]
 800f51e:	9103      	str	r1, [sp, #12]
 800f520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f522:	9102      	str	r1, [sp, #8]
 800f524:	9201      	str	r2, [sp, #4]
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	002b      	movs	r3, r5
 800f52a:	0022      	movs	r2, r4
 800f52c:	2100      	movs	r1, #0
 800f52e:	f7fe ff1d 	bl	800e36c <lfs_bd_read>
 800f532:	0003      	movs	r3, r0
 800f534:	61bb      	str	r3, [r7, #24]
            if (err) {
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d001      	beq.n	800f540 <lfs_dir_getslice+0x19c>
                return err;
 800f53c:	69bb      	ldr	r3, [r7, #24]
 800f53e:	e019      	b.n	800f574 <lfs_dir_getslice+0x1d0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800f540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	18d0      	adds	r0, r2, r3
 800f546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	001a      	movs	r2, r3
 800f54e:	2100      	movs	r1, #0
 800f550:	f007 f971 	bl	8016836 <memset>

            return tag + gdiff;
 800f554:	6a3a      	ldr	r2, [r7, #32]
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	18d3      	adds	r3, r2, r3
 800f55a:	e00b      	b.n	800f574 <lfs_dir_getslice+0x1d0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	0018      	movs	r0, r3
 800f560:	f7ff fbca 	bl	800ecf8 <lfs_tag_dsize>
 800f564:	0003      	movs	r3, r0
 800f566:	3304      	adds	r3, #4
 800f568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d300      	bcc.n	800f570 <lfs_dir_getslice+0x1cc>
 800f56e:	e74e      	b.n	800f40e <lfs_dir_getslice+0x6a>
        }
    }

    return LFS_ERR_NOENT;
 800f570:	2302      	movs	r3, #2
 800f572:	425b      	negs	r3, r3
}
 800f574:	0018      	movs	r0, r3
 800f576:	46bd      	mov	sp, r7
 800f578:	b00a      	add	sp, #40	; 0x28
 800f57a:	bdb0      	pop	{r4, r5, r7, pc}
 800f57c:	fffffc00 	.word	0xfffffc00
 800f580:	000ffc00 	.word	0x000ffc00
 800f584:	40100000 	.word	0x40100000

0800f588 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800f588:	b590      	push	{r4, r7, lr}
 800f58a:	b089      	sub	sp, #36	; 0x24
 800f58c:	af04      	add	r7, sp, #16
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
 800f594:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	0018      	movs	r0, r3
 800f59a:	f7ff fba2 	bl	800ece2 <lfs_tag_size>
 800f59e:	0003      	movs	r3, r0
 800f5a0:	683c      	ldr	r4, [r7, #0]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	68b9      	ldr	r1, [r7, #8]
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	9302      	str	r3, [sp, #8]
 800f5aa:	6a3b      	ldr	r3, [r7, #32]
 800f5ac:	9301      	str	r3, [sp, #4]
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	9300      	str	r3, [sp, #0]
 800f5b2:	0023      	movs	r3, r4
 800f5b4:	f7ff fef6 	bl	800f3a4 <lfs_dir_getslice>
 800f5b8:	0003      	movs	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800f5ba:	0018      	movs	r0, r3
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	b005      	add	sp, #20
 800f5c0:	bd90      	pop	{r4, r7, pc}

0800f5c2 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800f5c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5c4:	b08d      	sub	sp, #52	; 0x34
 800f5c6:	af04      	add	r7, sp, #16
 800f5c8:	60f8      	str	r0, [r7, #12]
 800f5ca:	60b9      	str	r1, [r7, #8]
 800f5cc:	607a      	str	r2, [r7, #4]
 800f5ce:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800f5d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5d2:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800f5d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5d8:	18d2      	adds	r2, r2, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5de:	69db      	ldr	r3, [r3, #28]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d800      	bhi.n	800f5e6 <lfs_dir_getread+0x24>
 800f5e4:	e0ca      	b.n	800f77c <lfs_dir_getread+0x1ba>
        return LFS_ERR_CORRUPT;
 800f5e6:	2354      	movs	r3, #84	; 0x54
 800f5e8:	425b      	negs	r3, r3
 800f5ea:	e0cc      	b.n	800f786 <lfs_dir_getread+0x1c4>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800f5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ee:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d042      	beq.n	800f67c <lfs_dir_getread+0xba>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	3302      	adds	r3, #2
 800f5fc:	d13e      	bne.n	800f67c <lfs_dir_getread+0xba>
                off < pcache->off + pcache->size) {
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	685a      	ldr	r2, [r3, #4]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	689b      	ldr	r3, [r3, #8]
 800f606:	18d3      	adds	r3, r2, r3
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800f608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d236      	bcs.n	800f67c <lfs_dir_getread+0xba>
            if (off >= pcache->off) {
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f614:	429a      	cmp	r2, r3
 800f616:	d326      	bcc.n	800f666 <lfs_dir_getread+0xa4>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	689a      	ldr	r2, [r3, #8]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6859      	ldr	r1, [r3, #4]
 800f620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f622:	1acb      	subs	r3, r1, r3
 800f624:	18d2      	adds	r2, r2, r3
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	0011      	movs	r1, r2
 800f62a:	0018      	movs	r0, r3
 800f62c:	f7fe fdcc 	bl	800e1c8 <lfs_min>
 800f630:	0003      	movs	r3, r0
 800f632:	61bb      	str	r3, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	68da      	ldr	r2, [r3, #12]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f63e:	1acb      	subs	r3, r1, r3
 800f640:	18d1      	adds	r1, r2, r3
 800f642:	69ba      	ldr	r2, [r7, #24]
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	0018      	movs	r0, r3
 800f648:	f007 f8ec 	bl	8016824 <memcpy>

                data += diff;
 800f64c:	69fa      	ldr	r2, [r7, #28]
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	18d3      	adds	r3, r2, r3
 800f652:	61fb      	str	r3, [r7, #28]
                off += diff;
 800f654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	18d3      	adds	r3, r2, r3
 800f65a:	647b      	str	r3, [r7, #68]	; 0x44
                size -= diff;
 800f65c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	64fb      	str	r3, [r7, #76]	; 0x4c
                continue;
 800f664:	e08a      	b.n	800f77c <lfs_dir_getread+0x1ba>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	685a      	ldr	r2, [r3, #4]
 800f66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f66c:	1ad2      	subs	r2, r2, r3
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	0011      	movs	r1, r2
 800f672:	0018      	movs	r0, r3
 800f674:	f7fe fda8 	bl	800e1c8 <lfs_min>
 800f678:	0003      	movs	r3, r0
 800f67a:	61bb      	str	r3, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	3302      	adds	r3, #2
 800f682:	d13e      	bne.n	800f702 <lfs_dir_getread+0x140>
                off < rcache->off + rcache->size) {
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	685a      	ldr	r2, [r3, #4]
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	689b      	ldr	r3, [r3, #8]
 800f68c:	18d3      	adds	r3, r2, r3
        if (rcache->block == LFS_BLOCK_INLINE &&
 800f68e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f690:	429a      	cmp	r2, r3
 800f692:	d236      	bcs.n	800f702 <lfs_dir_getread+0x140>
            if (off >= rcache->off) {
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d326      	bcc.n	800f6ec <lfs_dir_getread+0x12a>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	689a      	ldr	r2, [r3, #8]
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	6859      	ldr	r1, [r3, #4]
 800f6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6a8:	1acb      	subs	r3, r1, r3
 800f6aa:	18d2      	adds	r2, r2, r3
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	0011      	movs	r1, r2
 800f6b0:	0018      	movs	r0, r3
 800f6b2:	f7fe fd89 	bl	800e1c8 <lfs_min>
 800f6b6:	0003      	movs	r3, r0
 800f6b8:	61bb      	str	r3, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	68da      	ldr	r2, [r3, #12]
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6c4:	1acb      	subs	r3, r1, r3
 800f6c6:	18d1      	adds	r1, r2, r3
 800f6c8:	69ba      	ldr	r2, [r7, #24]
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	0018      	movs	r0, r3
 800f6ce:	f007 f8a9 	bl	8016824 <memcpy>

                data += diff;
 800f6d2:	69fa      	ldr	r2, [r7, #28]
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	18d3      	adds	r3, r2, r3
 800f6d8:	61fb      	str	r3, [r7, #28]
                off += diff;
 800f6da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	18d3      	adds	r3, r2, r3
 800f6e0:	647b      	str	r3, [r7, #68]	; 0x44
                size -= diff;
 800f6e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6e4:	69bb      	ldr	r3, [r7, #24]
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	64fb      	str	r3, [r7, #76]	; 0x4c
                continue;
 800f6ea:	e047      	b.n	800f77c <lfs_dir_getread+0x1ba>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	685a      	ldr	r2, [r3, #4]
 800f6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6f2:	1ad2      	subs	r2, r2, r3
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	0011      	movs	r1, r2
 800f6f8:	0018      	movs	r0, r3
 800f6fa:	f7fe fd65 	bl	800e1c8 <lfs_min>
 800f6fe:	0003      	movs	r3, r0
 800f700:	61bb      	str	r3, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	2202      	movs	r2, #2
 800f706:	4252      	negs	r2, r2
 800f708:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f70e:	695a      	ldr	r2, [r3, #20]
 800f710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f712:	0011      	movs	r1, r2
 800f714:	0018      	movs	r0, r3
 800f716:	f7fe fd65 	bl	800e1e4 <lfs_aligndown>
 800f71a:	0002      	movs	r2, r0
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800f720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f724:	18d2      	adds	r2, r2, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f72a:	695b      	ldr	r3, [r3, #20]
 800f72c:	0019      	movs	r1, r3
 800f72e:	0010      	movs	r0, r2
 800f730:	f7fe fd6a 	bl	800e208 <lfs_alignup>
 800f734:	0002      	movs	r2, r0
                lfs->cfg->cache_size);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800f73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f73c:	0019      	movs	r1, r3
 800f73e:	0010      	movs	r0, r2
 800f740:	f7fe fd42 	bl	800e1c8 <lfs_min>
 800f744:	0002      	movs	r2, r0
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	68d9      	ldr	r1, [r3, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	689b      	ldr	r3, [r3, #8]
 800f756:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800f758:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800f75a:	68bc      	ldr	r4, [r7, #8]
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	9302      	str	r3, [sp, #8]
 800f760:	9101      	str	r1, [sp, #4]
 800f762:	9200      	str	r2, [sp, #0]
 800f764:	0033      	movs	r3, r6
 800f766:	002a      	movs	r2, r5
 800f768:	0021      	movs	r1, r4
 800f76a:	f7ff fe1b 	bl	800f3a4 <lfs_dir_getslice>
 800f76e:	0003      	movs	r3, r0
 800f770:	617b      	str	r3, [r7, #20]
        if (err < 0) {
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	2b00      	cmp	r3, #0
 800f776:	da01      	bge.n	800f77c <lfs_dir_getread+0x1ba>
            return err;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	e004      	b.n	800f786 <lfs_dir_getread+0x1c4>
    while (size > 0) {
 800f77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d000      	beq.n	800f784 <lfs_dir_getread+0x1c2>
 800f782:	e733      	b.n	800f5ec <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800f784:	2300      	movs	r3, #0
}
 800f786:	0018      	movs	r0, r3
 800f788:	46bd      	mov	sp, r7
 800f78a:	b009      	add	sp, #36	; 0x24
 800f78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f790 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800f790:	b590      	push	{r4, r7, lr}
 800f792:	b087      	sub	sp, #28
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	2380      	movs	r3, #128	; 0x80
 800f7a4:	055b      	lsls	r3, r3, #21
 800f7a6:	4013      	ands	r3, r2
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800f7a8:	d001      	beq.n	800f7ae <lfs_dir_traverse_filter+0x1e>
 800f7aa:	4b25      	ldr	r3, [pc, #148]	; (800f840 <lfs_dir_traverse_filter+0xb0>)
 800f7ac:	e000      	b.n	800f7b0 <lfs_dir_traverse_filter+0x20>
 800f7ae:	4b25      	ldr	r3, [pc, #148]	; (800f844 <lfs_dir_traverse_filter+0xb4>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800f7b0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	4053      	eors	r3, r2
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	4013      	ands	r3, r2
 800f7be:	d011      	beq.n	800f7e4 <lfs_dir_traverse_filter+0x54>
            lfs_tag_isdelete(*filtertag) ||
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	0018      	movs	r0, r3
 800f7c6:	f7ff fa2a 	bl	800ec1e <lfs_tag_isdelete>
 800f7ca:	1e03      	subs	r3, r0, #0
    if ((mask & tag) == (mask & *filtertag) ||
 800f7cc:	d10a      	bne.n	800f7e4 <lfs_dir_traverse_filter+0x54>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	4a1b      	ldr	r2, [pc, #108]	; (800f840 <lfs_dir_traverse_filter+0xb0>)
 800f7d2:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	491b      	ldr	r1, [pc, #108]	; (800f848 <lfs_dir_traverse_filter+0xb8>)
 800f7da:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800f7dc:	491b      	ldr	r1, [pc, #108]	; (800f84c <lfs_dir_traverse_filter+0xbc>)
 800f7de:	430b      	orrs	r3, r1
            lfs_tag_isdelete(*filtertag) ||
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d104      	bne.n	800f7ee <lfs_dir_traverse_filter+0x5e>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	601a      	str	r2, [r3, #0]
        return true;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e023      	b.n	800f836 <lfs_dir_traverse_filter+0xa6>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	0018      	movs	r0, r3
 800f7f2:	f7ff fa23 	bl	800ec3c <lfs_tag_type1>
 800f7f6:	0003      	movs	r3, r0
 800f7f8:	001a      	movs	r2, r3
 800f7fa:	2380      	movs	r3, #128	; 0x80
 800f7fc:	00db      	lsls	r3, r3, #3
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d118      	bne.n	800f834 <lfs_dir_traverse_filter+0xa4>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	0018      	movs	r0, r3
 800f806:	f7ff fa5e 	bl	800ecc6 <lfs_tag_id>
 800f80a:	0003      	movs	r3, r0
 800f80c:	001c      	movs	r4, r3
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	0018      	movs	r0, r3
 800f814:	f7ff fa57 	bl	800ecc6 <lfs_tag_id>
 800f818:	0003      	movs	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800f81a:	429c      	cmp	r4, r3
 800f81c:	d80a      	bhi.n	800f834 <lfs_dir_traverse_filter+0xa4>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	0018      	movs	r0, r3
 800f822:	f7ff fa42 	bl	800ecaa <lfs_tag_splice>
 800f826:	0003      	movs	r3, r0
 800f828:	029a      	lsls	r2, r3, #10
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	18d2      	adds	r2, r2, r3
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	601a      	str	r2, [r3, #0]
    }

    return false;
 800f834:	2300      	movs	r3, #0
}
 800f836:	0018      	movs	r0, r3
 800f838:	46bd      	mov	sp, r7
 800f83a:	b007      	add	sp, #28
 800f83c:	bd90      	pop	{r4, r7, pc}
 800f83e:	46c0      	nop			; (mov r8, r8)
 800f840:	7ffffc00 	.word	0x7ffffc00
 800f844:	700ffc00 	.word	0x700ffc00
 800f848:	000ffc00 	.word	0x000ffc00
 800f84c:	4ff00000 	.word	0x4ff00000

0800f850 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800f850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f852:	b0c1      	sub	sp, #260	; 0x104
 800f854:	af04      	add	r7, sp, #16
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
 800f85c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800f85e:	2300      	movs	r3, #0
 800f860:	22ec      	movs	r2, #236	; 0xec
 800f862:	18ba      	adds	r2, r7, r2
 800f864:	6013      	str	r3, [r2, #0]
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 800f866:	234c      	movs	r3, #76	; 0x4c
 800f868:	18fb      	adds	r3, r7, r3
 800f86a:	0018      	movs	r0, r3
 800f86c:	2308      	movs	r3, #8
 800f86e:	001a      	movs	r2, r3
 800f870:	2100      	movs	r1, #0
 800f872:	f006 ffe0 	bl	8016836 <memset>
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	0018      	movs	r0, r3
 800f87a:	f7ff fa3d 	bl	800ecf8 <lfs_tag_dsize>
 800f87e:	0002      	movs	r2, r0
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	18d2      	adds	r2, r2, r3
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d23f      	bcs.n	800f90c <lfs_dir_traverse+0xbc>
                off += lfs_tag_dsize(ptag);
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	0018      	movs	r0, r3
 800f890:	f7ff fa32 	bl	800ecf8 <lfs_tag_dsize>
 800f894:	0002      	movs	r2, r0
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	189b      	adds	r3, r3, r2
 800f89a:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800f89c:	68f9      	ldr	r1, [r7, #12]
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	68f8      	ldr	r0, [r7, #12]
 800f8a4:	2204      	movs	r2, #4
 800f8a6:	9203      	str	r2, [sp, #12]
 800f8a8:	2254      	movs	r2, #84	; 0x54
 800f8aa:	18ba      	adds	r2, r7, r2
 800f8ac:	9202      	str	r2, [sp, #8]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	9201      	str	r2, [sp, #4]
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	2304      	movs	r3, #4
 800f8b6:	000a      	movs	r2, r1
 800f8b8:	2100      	movs	r1, #0
 800f8ba:	f7fe fd57 	bl	800e36c <lfs_bd_read>
 800f8be:	0003      	movs	r3, r0
 800f8c0:	22dc      	movs	r2, #220	; 0xdc
 800f8c2:	18b9      	adds	r1, r7, r2
 800f8c4:	600b      	str	r3, [r1, #0]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 800f8c6:	18bb      	adds	r3, r7, r2
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <lfs_dir_traverse+0x86>
                    return err;
 800f8ce:	18bb      	adds	r3, r7, r2
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f000 fc75 	bl	80101c0 <lfs_dir_traverse+0x970>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800f8d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8d8:	0018      	movs	r0, r3
 800f8da:	f7fe fcf3 	bl	800e2c4 <lfs_frombe32>
 800f8de:	0002      	movs	r2, r0
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	4053      	eors	r3, r2
 800f8e4:	2280      	movs	r2, #128	; 0x80
 800f8e6:	0612      	lsls	r2, r2, #24
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	214c      	movs	r1, #76	; 0x4c
 800f8f2:	187b      	adds	r3, r7, r1
 800f8f4:	601a      	str	r2, [r3, #0]
                disk.off = off+sizeof(lfs_tag_t);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	1d1a      	adds	r2, r3, #4
 800f8fa:	187b      	adds	r3, r7, r1
 800f8fc:	605a      	str	r2, [r3, #4]
                buffer = &disk;
 800f8fe:	187b      	adds	r3, r7, r1
 800f900:	22e4      	movs	r2, #228	; 0xe4
 800f902:	18ba      	adds	r2, r7, r2
 800f904:	6013      	str	r3, [r2, #0]
                ptag = tag;
 800f906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f908:	603b      	str	r3, [r7, #0]
 800f90a:	e021      	b.n	800f950 <lfs_dir_traverse+0x100>
            } else if (attrcount > 0) {
 800f90c:	2086      	movs	r0, #134	; 0x86
 800f90e:	0040      	lsls	r0, r0, #1
 800f910:	183b      	adds	r3, r7, r0
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	dd16      	ble.n	800f946 <lfs_dir_traverse+0xf6>
                tag = attrs[0].tag;
 800f918:	2184      	movs	r1, #132	; 0x84
 800f91a:	0049      	lsls	r1, r1, #1
 800f91c:	187b      	adds	r3, r7, r1
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 800f924:	187b      	adds	r3, r7, r1
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	22e4      	movs	r2, #228	; 0xe4
 800f92c:	18ba      	adds	r2, r7, r2
 800f92e:	6013      	str	r3, [r2, #0]
                attrs += 1;
 800f930:	187b      	adds	r3, r7, r1
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	3308      	adds	r3, #8
 800f936:	187a      	adds	r2, r7, r1
 800f938:	6013      	str	r3, [r2, #0]
                attrcount -= 1;
 800f93a:	183b      	adds	r3, r7, r0
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	3b01      	subs	r3, #1
 800f940:	183a      	adds	r2, r7, r0
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	e004      	b.n	800f950 <lfs_dir_traverse+0x100>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800f946:	2300      	movs	r3, #0
 800f948:	22e8      	movs	r2, #232	; 0xe8
 800f94a:	18ba      	adds	r2, r7, r2
 800f94c:	6013      	str	r3, [r2, #0]
                break;
 800f94e:	e34a      	b.n	800ffe6 <lfs_dir_traverse+0x796>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800f950:	4b9e      	ldr	r3, [pc, #632]	; (800fbcc <lfs_dir_traverse+0x37c>)
 800f952:	21d8      	movs	r1, #216	; 0xd8
 800f954:	187a      	adds	r2, r7, r1
 800f956:	6013      	str	r3, [r2, #0]
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800f958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f95a:	2386      	movs	r3, #134	; 0x86
 800f95c:	005b      	lsls	r3, r3, #1
 800f95e:	2408      	movs	r4, #8
 800f960:	191b      	adds	r3, r3, r4
 800f962:	19db      	adds	r3, r3, r7
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4053      	eors	r3, r2
 800f968:	187a      	adds	r2, r7, r1
 800f96a:	6812      	ldr	r2, [r2, #0]
 800f96c:	2084      	movs	r0, #132	; 0x84
 800f96e:	0040      	lsls	r0, r0, #1
 800f970:	1901      	adds	r1, r0, r4
 800f972:	19c9      	adds	r1, r1, r7
 800f974:	6809      	ldr	r1, [r1, #0]
 800f976:	400a      	ands	r2, r1
 800f978:	4013      	ands	r3, r2
 800f97a:	d000      	beq.n	800f97e <lfs_dir_traverse+0x12e>
 800f97c:	e325      	b.n	800ffca <lfs_dir_traverse+0x77a>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800f97e:	1903      	adds	r3, r0, r4
 800f980:	19db      	adds	r3, r3, r7
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	0018      	movs	r0, r3
 800f986:	f7ff f99e 	bl	800ecc6 <lfs_tag_id>
 800f98a:	1e03      	subs	r3, r0, #0
 800f98c:	d100      	bne.n	800f990 <lfs_dir_traverse+0x140>
 800f98e:	e129      	b.n	800fbe4 <lfs_dir_traverse+0x394>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800f990:	23ec      	movs	r3, #236	; 0xec
 800f992:	18fb      	adds	r3, r7, r3
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b02      	cmp	r3, #2
 800f998:	d905      	bls.n	800f9a6 <lfs_dir_traverse+0x156>
 800f99a:	4b8d      	ldr	r3, [pc, #564]	; (800fbd0 <lfs_dir_traverse+0x380>)
 800f99c:	4a8d      	ldr	r2, [pc, #564]	; (800fbd4 <lfs_dir_traverse+0x384>)
 800f99e:	498e      	ldr	r1, [pc, #568]	; (800fbd8 <lfs_dir_traverse+0x388>)
 800f9a0:	488e      	ldr	r0, [pc, #568]	; (800fbdc <lfs_dir_traverse+0x38c>)
 800f9a2:	f006 fea7 	bl	80166f4 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800f9a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f9a8:	2558      	movs	r5, #88	; 0x58
 800f9aa:	1978      	adds	r0, r7, r5
 800f9ac:	24ec      	movs	r4, #236	; 0xec
 800f9ae:	193b      	adds	r3, r7, r4
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	0013      	movs	r3, r2
 800f9b4:	011b      	lsls	r3, r3, #4
 800f9b6:	1a9b      	subs	r3, r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	68ba      	ldr	r2, [r7, #8]
 800f9bc:	501a      	str	r2, [r3, r0]
 800f9be:	1978      	adds	r0, r7, r5
 800f9c0:	193b      	adds	r3, r7, r4
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	0013      	movs	r3, r2
 800f9c6:	011b      	lsls	r3, r3, #4
 800f9c8:	1a9b      	subs	r3, r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	18c3      	adds	r3, r0, r3
 800f9ce:	3304      	adds	r3, #4
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	601a      	str	r2, [r3, #0]
 800f9d4:	1978      	adds	r0, r7, r5
 800f9d6:	193b      	adds	r3, r7, r4
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	0013      	movs	r3, r2
 800f9dc:	011b      	lsls	r3, r3, #4
 800f9de:	1a9b      	subs	r3, r3, r2
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	18c3      	adds	r3, r0, r3
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	683a      	ldr	r2, [r7, #0]
 800f9e8:	601a      	str	r2, [r3, #0]
 800f9ea:	1978      	adds	r0, r7, r5
 800f9ec:	193b      	adds	r3, r7, r4
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	0013      	movs	r3, r2
 800f9f2:	011b      	lsls	r3, r3, #4
 800f9f4:	1a9b      	subs	r3, r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	18c3      	adds	r3, r0, r3
 800f9fa:	330c      	adds	r3, #12
 800f9fc:	2284      	movs	r2, #132	; 0x84
 800f9fe:	0052      	lsls	r2, r2, #1
 800fa00:	18ba      	adds	r2, r7, r2
 800fa02:	6812      	ldr	r2, [r2, #0]
 800fa04:	601a      	str	r2, [r3, #0]
 800fa06:	1978      	adds	r0, r7, r5
 800fa08:	193b      	adds	r3, r7, r4
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	0013      	movs	r3, r2
 800fa0e:	011b      	lsls	r3, r3, #4
 800fa10:	1a9b      	subs	r3, r3, r2
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	18c3      	adds	r3, r0, r3
 800fa16:	3310      	adds	r3, #16
 800fa18:	2286      	movs	r2, #134	; 0x86
 800fa1a:	0052      	lsls	r2, r2, #1
 800fa1c:	18ba      	adds	r2, r7, r2
 800fa1e:	6812      	ldr	r2, [r2, #0]
 800fa20:	601a      	str	r2, [r3, #0]
 800fa22:	1978      	adds	r0, r7, r5
 800fa24:	193b      	adds	r3, r7, r4
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	0013      	movs	r3, r2
 800fa2a:	011b      	lsls	r3, r3, #4
 800fa2c:	1a9b      	subs	r3, r3, r2
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	18c3      	adds	r3, r0, r3
 800fa32:	3314      	adds	r3, #20
 800fa34:	2684      	movs	r6, #132	; 0x84
 800fa36:	0076      	lsls	r6, r6, #1
 800fa38:	2008      	movs	r0, #8
 800fa3a:	1832      	adds	r2, r6, r0
 800fa3c:	19d2      	adds	r2, r2, r7
 800fa3e:	6812      	ldr	r2, [r2, #0]
 800fa40:	601a      	str	r2, [r3, #0]
 800fa42:	1978      	adds	r0, r7, r5
 800fa44:	193b      	adds	r3, r7, r4
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	0013      	movs	r3, r2
 800fa4a:	011b      	lsls	r3, r3, #4
 800fa4c:	1a9b      	subs	r3, r3, r2
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	18c3      	adds	r3, r0, r3
 800fa52:	3318      	adds	r3, #24
 800fa54:	2286      	movs	r2, #134	; 0x86
 800fa56:	0052      	lsls	r2, r2, #1
 800fa58:	2008      	movs	r0, #8
 800fa5a:	1812      	adds	r2, r2, r0
 800fa5c:	19d0      	adds	r0, r2, r7
 800fa5e:	6802      	ldr	r2, [r0, #0]
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	1978      	adds	r0, r7, r5
 800fa64:	193b      	adds	r3, r7, r4
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	0013      	movs	r3, r2
 800fa6a:	011b      	lsls	r3, r3, #4
 800fa6c:	1a9b      	subs	r3, r3, r2
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	18c3      	adds	r3, r0, r3
 800fa72:	331c      	adds	r3, #28
 800fa74:	2088      	movs	r0, #136	; 0x88
 800fa76:	0040      	lsls	r0, r0, #1
 800fa78:	2208      	movs	r2, #8
 800fa7a:	1882      	adds	r2, r0, r2
 800fa7c:	19d2      	adds	r2, r2, r7
 800fa7e:	8812      	ldrh	r2, [r2, #0]
 800fa80:	801a      	strh	r2, [r3, #0]
 800fa82:	1978      	adds	r0, r7, r5
 800fa84:	193b      	adds	r3, r7, r4
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	0013      	movs	r3, r2
 800fa8a:	011b      	lsls	r3, r3, #4
 800fa8c:	1a9b      	subs	r3, r3, r2
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	18c3      	adds	r3, r0, r3
 800fa92:	331e      	adds	r3, #30
 800fa94:	228a      	movs	r2, #138	; 0x8a
 800fa96:	0052      	lsls	r2, r2, #1
 800fa98:	2008      	movs	r0, #8
 800fa9a:	1812      	adds	r2, r2, r0
 800fa9c:	19d2      	adds	r2, r2, r7
 800fa9e:	8812      	ldrh	r2, [r2, #0]
 800faa0:	801a      	strh	r2, [r3, #0]
 800faa2:	1978      	adds	r0, r7, r5
 800faa4:	193b      	adds	r3, r7, r4
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	0013      	movs	r3, r2
 800faaa:	011b      	lsls	r3, r3, #4
 800faac:	1a9b      	subs	r3, r3, r2
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	18c3      	adds	r3, r0, r3
 800fab2:	3320      	adds	r3, #32
 800fab4:	208c      	movs	r0, #140	; 0x8c
 800fab6:	0040      	lsls	r0, r0, #1
 800fab8:	2208      	movs	r2, #8
 800faba:	1880      	adds	r0, r0, r2
 800fabc:	19c2      	adds	r2, r0, r7
 800fabe:	8812      	ldrh	r2, [r2, #0]
 800fac0:	801a      	strh	r2, [r3, #0]
 800fac2:	1978      	adds	r0, r7, r5
 800fac4:	193b      	adds	r3, r7, r4
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	0013      	movs	r3, r2
 800faca:	011b      	lsls	r3, r3, #4
 800facc:	1a9b      	subs	r3, r3, r2
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	18c3      	adds	r3, r0, r3
 800fad2:	3324      	adds	r3, #36	; 0x24
 800fad4:	228e      	movs	r2, #142	; 0x8e
 800fad6:	0052      	lsls	r2, r2, #1
 800fad8:	2008      	movs	r0, #8
 800fada:	1812      	adds	r2, r2, r0
 800fadc:	19d0      	adds	r0, r2, r7
 800fade:	6802      	ldr	r2, [r0, #0]
 800fae0:	601a      	str	r2, [r3, #0]
 800fae2:	1978      	adds	r0, r7, r5
 800fae4:	193b      	adds	r3, r7, r4
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	0013      	movs	r3, r2
 800faea:	011b      	lsls	r3, r3, #4
 800faec:	1a9b      	subs	r3, r3, r2
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	18c3      	adds	r3, r0, r3
 800faf2:	3328      	adds	r3, #40	; 0x28
 800faf4:	2090      	movs	r0, #144	; 0x90
 800faf6:	0040      	lsls	r0, r0, #1
 800faf8:	2208      	movs	r2, #8
 800fafa:	1882      	adds	r2, r0, r2
 800fafc:	19d2      	adds	r2, r2, r7
 800fafe:	6812      	ldr	r2, [r2, #0]
 800fb00:	601a      	str	r2, [r3, #0]
 800fb02:	1978      	adds	r0, r7, r5
 800fb04:	193b      	adds	r3, r7, r4
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	0013      	movs	r3, r2
 800fb0a:	011b      	lsls	r3, r3, #4
 800fb0c:	1a9b      	subs	r3, r3, r2
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	18c3      	adds	r3, r0, r3
 800fb12:	332c      	adds	r3, #44	; 0x2c
 800fb14:	6019      	str	r1, [r3, #0]
 800fb16:	1979      	adds	r1, r7, r5
 800fb18:	0020      	movs	r0, r4
 800fb1a:	193b      	adds	r3, r7, r4
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	0013      	movs	r3, r2
 800fb20:	011b      	lsls	r3, r3, #4
 800fb22:	1a9b      	subs	r3, r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	18cb      	adds	r3, r1, r3
 800fb28:	3330      	adds	r3, #48	; 0x30
 800fb2a:	21e4      	movs	r1, #228	; 0xe4
 800fb2c:	1879      	adds	r1, r7, r1
 800fb2e:	680a      	ldr	r2, [r1, #0]
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	1979      	adds	r1, r7, r5
 800fb34:	0004      	movs	r4, r0
 800fb36:	183b      	adds	r3, r7, r0
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	2030      	movs	r0, #48	; 0x30
 800fb3c:	0013      	movs	r3, r2
 800fb3e:	011b      	lsls	r3, r3, #4
 800fb40:	1a9b      	subs	r3, r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	18cb      	adds	r3, r1, r3
 800fb46:	181b      	adds	r3, r3, r0
 800fb48:	214c      	movs	r1, #76	; 0x4c
 800fb4a:	187a      	adds	r2, r7, r1
 800fb4c:	3304      	adds	r3, #4
 800fb4e:	ca03      	ldmia	r2!, {r0, r1}
 800fb50:	c303      	stmia	r3!, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800fb52:	0021      	movs	r1, r4
 800fb54:	187b      	adds	r3, r7, r1
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	187c      	adds	r4, r7, r1
 800fb5c:	6023      	str	r3, [r4, #0]

                tmask = 0;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	2008      	movs	r0, #8
 800fb62:	1832      	adds	r2, r6, r0
 800fb64:	19d4      	adds	r4, r2, r7
 800fb66:	6023      	str	r3, [r4, #0]
                ttag = 0;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	2286      	movs	r2, #134	; 0x86
 800fb6c:	0052      	lsls	r2, r2, #1
 800fb6e:	0006      	movs	r6, r0
 800fb70:	1812      	adds	r2, r2, r0
 800fb72:	19d4      	adds	r4, r2, r7
 800fb74:	6023      	str	r3, [r4, #0]
                begin = 0;
 800fb76:	2088      	movs	r0, #136	; 0x88
 800fb78:	0040      	lsls	r0, r0, #1
 800fb7a:	0034      	movs	r4, r6
 800fb7c:	1903      	adds	r3, r0, r4
 800fb7e:	19db      	adds	r3, r3, r7
 800fb80:	2200      	movs	r2, #0
 800fb82:	801a      	strh	r2, [r3, #0]
                end = 0;
 800fb84:	228a      	movs	r2, #138	; 0x8a
 800fb86:	0052      	lsls	r2, r2, #1
 800fb88:	1913      	adds	r3, r2, r4
 800fb8a:	19db      	adds	r3, r3, r7
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	801a      	strh	r2, [r3, #0]
                diff = 0;
 800fb90:	208c      	movs	r0, #140	; 0x8c
 800fb92:	0040      	lsls	r0, r0, #1
 800fb94:	1903      	adds	r3, r0, r4
 800fb96:	19db      	adds	r3, r3, r7
 800fb98:	2200      	movs	r2, #0
 800fb9a:	801a      	strh	r2, [r3, #0]
                cb = lfs_dir_traverse_filter;
 800fb9c:	4b10      	ldr	r3, [pc, #64]	; (800fbe0 <lfs_dir_traverse+0x390>)
 800fb9e:	228e      	movs	r2, #142	; 0x8e
 800fba0:	0052      	lsls	r2, r2, #1
 800fba2:	1912      	adds	r2, r2, r4
 800fba4:	19d2      	adds	r2, r2, r7
 800fba6:	6013      	str	r3, [r2, #0]
                data = &stack[sp-1].tag;
 800fba8:	187b      	adds	r3, r7, r1
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	1e5a      	subs	r2, r3, #1
 800fbae:	1979      	adds	r1, r7, r5
 800fbb0:	0013      	movs	r3, r2
 800fbb2:	011b      	lsls	r3, r3, #4
 800fbb4:	1a9b      	subs	r3, r3, r2
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	3328      	adds	r3, #40	; 0x28
 800fbba:	18cb      	adds	r3, r1, r3
 800fbbc:	3304      	adds	r3, #4
 800fbbe:	2090      	movs	r0, #144	; 0x90
 800fbc0:	0040      	lsls	r0, r0, #1
 800fbc2:	1902      	adds	r2, r0, r4
 800fbc4:	19d2      	adds	r2, r2, r7
 800fbc6:	6013      	str	r3, [r2, #0]
 800fbc8:	e655      	b.n	800f876 <lfs_dir_traverse+0x26>
 800fbca:	46c0      	nop			; (mov r8, r8)
 800fbcc:	7ff00000 	.word	0x7ff00000
 800fbd0:	0801c644 	.word	0x0801c644
 800fbd4:	0801cf48 	.word	0x0801cf48
 800fbd8:	0000039e 	.word	0x0000039e
 800fbdc:	0801c52c 	.word	0x0801c52c
 800fbe0:	0800f791 	.word	0x0800f791
                continue;
            }
        }

popped:
 800fbe4:	46c0      	nop			; (mov r8, r8)
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800fbe6:	2384      	movs	r3, #132	; 0x84
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	2408      	movs	r4, #8
 800fbec:	191b      	adds	r3, r3, r4
 800fbee:	19db      	adds	r3, r3, r7
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	0018      	movs	r0, r3
 800fbf4:	f7ff f867 	bl	800ecc6 <lfs_tag_id>
 800fbf8:	1e03      	subs	r3, r0, #0
 800fbfa:	d01b      	beq.n	800fc34 <lfs_dir_traverse+0x3e4>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800fbfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbfe:	0018      	movs	r0, r3
 800fc00:	f7ff f861 	bl	800ecc6 <lfs_tag_id>
 800fc04:	0003      	movs	r3, r0
 800fc06:	001a      	movs	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800fc08:	2388      	movs	r3, #136	; 0x88
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	191b      	adds	r3, r3, r4
 800fc0e:	19db      	adds	r3, r3, r7
 800fc10:	881b      	ldrh	r3, [r3, #0]
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d900      	bls.n	800fc18 <lfs_dir_traverse+0x3c8>
 800fc16:	e1da      	b.n	800ffce <lfs_dir_traverse+0x77e>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800fc18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc1a:	0018      	movs	r0, r3
 800fc1c:	f7ff f853 	bl	800ecc6 <lfs_tag_id>
 800fc20:	0003      	movs	r3, r0
 800fc22:	001a      	movs	r2, r3
 800fc24:	238a      	movs	r3, #138	; 0x8a
 800fc26:	005b      	lsls	r3, r3, #1
 800fc28:	191b      	adds	r3, r3, r4
 800fc2a:	19db      	adds	r3, r3, r7
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d800      	bhi.n	800fc34 <lfs_dir_traverse+0x3e4>
 800fc32:	e1cc      	b.n	800ffce <lfs_dir_traverse+0x77e>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800fc34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc36:	0018      	movs	r0, r3
 800fc38:	f7ff f81e 	bl	800ec78 <lfs_tag_type3>
 800fc3c:	1e03      	subs	r3, r0, #0
 800fc3e:	d100      	bne.n	800fc42 <lfs_dir_traverse+0x3f2>
 800fc40:	e619      	b.n	800f876 <lfs_dir_traverse+0x26>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800fc42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc44:	0018      	movs	r0, r3
 800fc46:	f7ff f817 	bl	800ec78 <lfs_tag_type3>
 800fc4a:	0003      	movs	r3, r0
 800fc4c:	001a      	movs	r2, r3
 800fc4e:	2302      	movs	r3, #2
 800fc50:	33ff      	adds	r3, #255	; 0xff
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d000      	beq.n	800fc58 <lfs_dir_traverse+0x408>
 800fc56:	e113      	b.n	800fe80 <lfs_dir_traverse+0x630>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800fc58:	238e      	movs	r3, #142	; 0x8e
 800fc5a:	005b      	lsls	r3, r3, #1
 800fc5c:	2608      	movs	r6, #8
 800fc5e:	199b      	adds	r3, r3, r6
 800fc60:	19d9      	adds	r1, r3, r7
 800fc62:	680a      	ldr	r2, [r1, #0]
 800fc64:	4bdd      	ldr	r3, [pc, #884]	; (800ffdc <lfs_dir_traverse+0x78c>)
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d100      	bne.n	800fc6c <lfs_dir_traverse+0x41c>
 800fc6a:	e1b2      	b.n	800ffd2 <lfs_dir_traverse+0x782>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800fc6c:	2558      	movs	r5, #88	; 0x58
 800fc6e:	1979      	adds	r1, r7, r5
 800fc70:	24ec      	movs	r4, #236	; 0xec
 800fc72:	1938      	adds	r0, r7, r4
 800fc74:	6802      	ldr	r2, [r0, #0]
 800fc76:	0013      	movs	r3, r2
 800fc78:	011b      	lsls	r3, r3, #4
 800fc7a:	1a9b      	subs	r3, r3, r2
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	18cb      	adds	r3, r1, r3
 800fc80:	223c      	movs	r2, #60	; 0x3c
 800fc82:	2100      	movs	r1, #0
 800fc84:	0018      	movs	r0, r3
 800fc86:	f006 fdd6 	bl	8016836 <memset>
 800fc8a:	1979      	adds	r1, r7, r5
 800fc8c:	0020      	movs	r0, r4
 800fc8e:	183c      	adds	r4, r7, r0
 800fc90:	6822      	ldr	r2, [r4, #0]
 800fc92:	0013      	movs	r3, r2
 800fc94:	011b      	lsls	r3, r3, #4
 800fc96:	1a9b      	subs	r3, r3, r2
 800fc98:	009b      	lsls	r3, r3, #2
 800fc9a:	68ba      	ldr	r2, [r7, #8]
 800fc9c:	505a      	str	r2, [r3, r1]
 800fc9e:	002c      	movs	r4, r5
 800fca0:	1939      	adds	r1, r7, r4
 800fca2:	183d      	adds	r5, r7, r0
 800fca4:	682a      	ldr	r2, [r5, #0]
 800fca6:	0013      	movs	r3, r2
 800fca8:	011b      	lsls	r3, r3, #4
 800fcaa:	1a9b      	subs	r3, r3, r2
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	18cb      	adds	r3, r1, r3
 800fcb0:	3304      	adds	r3, #4
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	1939      	adds	r1, r7, r4
 800fcb8:	183d      	adds	r5, r7, r0
 800fcba:	682a      	ldr	r2, [r5, #0]
 800fcbc:	0013      	movs	r3, r2
 800fcbe:	011b      	lsls	r3, r3, #4
 800fcc0:	1a9b      	subs	r3, r3, r2
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	18cb      	adds	r3, r1, r3
 800fcc6:	3308      	adds	r3, #8
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	601a      	str	r2, [r3, #0]
 800fccc:	1939      	adds	r1, r7, r4
 800fcce:	183d      	adds	r5, r7, r0
 800fcd0:	682a      	ldr	r2, [r5, #0]
 800fcd2:	0013      	movs	r3, r2
 800fcd4:	011b      	lsls	r3, r3, #4
 800fcd6:	1a9b      	subs	r3, r3, r2
 800fcd8:	009b      	lsls	r3, r3, #2
 800fcda:	18cb      	adds	r3, r1, r3
 800fcdc:	330c      	adds	r3, #12
 800fcde:	2284      	movs	r2, #132	; 0x84
 800fce0:	0052      	lsls	r2, r2, #1
 800fce2:	18b9      	adds	r1, r7, r2
 800fce4:	680a      	ldr	r2, [r1, #0]
 800fce6:	601a      	str	r2, [r3, #0]
 800fce8:	1939      	adds	r1, r7, r4
 800fcea:	183d      	adds	r5, r7, r0
 800fcec:	682a      	ldr	r2, [r5, #0]
 800fcee:	0013      	movs	r3, r2
 800fcf0:	011b      	lsls	r3, r3, #4
 800fcf2:	1a9b      	subs	r3, r3, r2
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	18cb      	adds	r3, r1, r3
 800fcf8:	3310      	adds	r3, #16
 800fcfa:	2286      	movs	r2, #134	; 0x86
 800fcfc:	0052      	lsls	r2, r2, #1
 800fcfe:	18b9      	adds	r1, r7, r2
 800fd00:	680a      	ldr	r2, [r1, #0]
 800fd02:	601a      	str	r2, [r3, #0]
 800fd04:	1939      	adds	r1, r7, r4
 800fd06:	183d      	adds	r5, r7, r0
 800fd08:	682a      	ldr	r2, [r5, #0]
 800fd0a:	0013      	movs	r3, r2
 800fd0c:	011b      	lsls	r3, r3, #4
 800fd0e:	1a9b      	subs	r3, r3, r2
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	18cb      	adds	r3, r1, r3
 800fd14:	3314      	adds	r3, #20
 800fd16:	2184      	movs	r1, #132	; 0x84
 800fd18:	0049      	lsls	r1, r1, #1
 800fd1a:	198d      	adds	r5, r1, r6
 800fd1c:	19ed      	adds	r5, r5, r7
 800fd1e:	682a      	ldr	r2, [r5, #0]
 800fd20:	601a      	str	r2, [r3, #0]
 800fd22:	1939      	adds	r1, r7, r4
 800fd24:	183d      	adds	r5, r7, r0
 800fd26:	682a      	ldr	r2, [r5, #0]
 800fd28:	0013      	movs	r3, r2
 800fd2a:	011b      	lsls	r3, r3, #4
 800fd2c:	1a9b      	subs	r3, r3, r2
 800fd2e:	009b      	lsls	r3, r3, #2
 800fd30:	18cb      	adds	r3, r1, r3
 800fd32:	3318      	adds	r3, #24
 800fd34:	2586      	movs	r5, #134	; 0x86
 800fd36:	006d      	lsls	r5, r5, #1
 800fd38:	19ad      	adds	r5, r5, r6
 800fd3a:	19ee      	adds	r6, r5, r7
 800fd3c:	6832      	ldr	r2, [r6, #0]
 800fd3e:	601a      	str	r2, [r3, #0]
 800fd40:	1939      	adds	r1, r7, r4
 800fd42:	183e      	adds	r6, r7, r0
 800fd44:	6832      	ldr	r2, [r6, #0]
 800fd46:	0013      	movs	r3, r2
 800fd48:	011b      	lsls	r3, r3, #4
 800fd4a:	1a9b      	subs	r3, r3, r2
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	18cb      	adds	r3, r1, r3
 800fd50:	331c      	adds	r3, #28
 800fd52:	2688      	movs	r6, #136	; 0x88
 800fd54:	0076      	lsls	r6, r6, #1
 800fd56:	2508      	movs	r5, #8
 800fd58:	1975      	adds	r5, r6, r5
 800fd5a:	19ea      	adds	r2, r5, r7
 800fd5c:	8812      	ldrh	r2, [r2, #0]
 800fd5e:	801a      	strh	r2, [r3, #0]
 800fd60:	1939      	adds	r1, r7, r4
 800fd62:	183d      	adds	r5, r7, r0
 800fd64:	682a      	ldr	r2, [r5, #0]
 800fd66:	0013      	movs	r3, r2
 800fd68:	011b      	lsls	r3, r3, #4
 800fd6a:	1a9b      	subs	r3, r3, r2
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	18cb      	adds	r3, r1, r3
 800fd70:	331e      	adds	r3, #30
 800fd72:	258a      	movs	r5, #138	; 0x8a
 800fd74:	006d      	lsls	r5, r5, #1
 800fd76:	2608      	movs	r6, #8
 800fd78:	19ae      	adds	r6, r5, r6
 800fd7a:	19f2      	adds	r2, r6, r7
 800fd7c:	8812      	ldrh	r2, [r2, #0]
 800fd7e:	801a      	strh	r2, [r3, #0]
 800fd80:	1939      	adds	r1, r7, r4
 800fd82:	183e      	adds	r6, r7, r0
 800fd84:	6832      	ldr	r2, [r6, #0]
 800fd86:	0013      	movs	r3, r2
 800fd88:	011b      	lsls	r3, r3, #4
 800fd8a:	1a9b      	subs	r3, r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	18cb      	adds	r3, r1, r3
 800fd90:	3320      	adds	r3, #32
 800fd92:	268c      	movs	r6, #140	; 0x8c
 800fd94:	0076      	lsls	r6, r6, #1
 800fd96:	2508      	movs	r5, #8
 800fd98:	1972      	adds	r2, r6, r5
 800fd9a:	19d2      	adds	r2, r2, r7
 800fd9c:	8812      	ldrh	r2, [r2, #0]
 800fd9e:	801a      	strh	r2, [r3, #0]
 800fda0:	1939      	adds	r1, r7, r4
 800fda2:	183a      	adds	r2, r7, r0
 800fda4:	6812      	ldr	r2, [r2, #0]
 800fda6:	0013      	movs	r3, r2
 800fda8:	011b      	lsls	r3, r3, #4
 800fdaa:	1a9b      	subs	r3, r3, r2
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	18cb      	adds	r3, r1, r3
 800fdb0:	3324      	adds	r3, #36	; 0x24
 800fdb2:	228e      	movs	r2, #142	; 0x8e
 800fdb4:	0052      	lsls	r2, r2, #1
 800fdb6:	1952      	adds	r2, r2, r5
 800fdb8:	19d2      	adds	r2, r2, r7
 800fdba:	6812      	ldr	r2, [r2, #0]
 800fdbc:	601a      	str	r2, [r3, #0]
 800fdbe:	1939      	adds	r1, r7, r4
 800fdc0:	183c      	adds	r4, r7, r0
 800fdc2:	6822      	ldr	r2, [r4, #0]
 800fdc4:	0013      	movs	r3, r2
 800fdc6:	011b      	lsls	r3, r3, #4
 800fdc8:	1a9b      	subs	r3, r3, r2
 800fdca:	009b      	lsls	r3, r3, #2
 800fdcc:	18cb      	adds	r3, r1, r3
 800fdce:	3328      	adds	r3, #40	; 0x28
 800fdd0:	2490      	movs	r4, #144	; 0x90
 800fdd2:	0064      	lsls	r4, r4, #1
 800fdd4:	1964      	adds	r4, r4, r5
 800fdd6:	19e4      	adds	r4, r4, r7
 800fdd8:	6822      	ldr	r2, [r4, #0]
 800fdda:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800fddc:	183c      	adds	r4, r7, r0
 800fdde:	6823      	ldr	r3, [r4, #0]
 800fde0:	3301      	adds	r3, #1
 800fde2:	1838      	adds	r0, r7, r0
 800fde4:	6003      	str	r3, [r0, #0]

            uint16_t fromid = lfs_tag_size(tag);
 800fde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fde8:	0018      	movs	r0, r3
 800fdea:	f7fe ff7a 	bl	800ece2 <lfs_tag_size>
 800fdee:	0002      	movs	r2, r0
 800fdf0:	25d2      	movs	r5, #210	; 0xd2
 800fdf2:	197b      	adds	r3, r7, r5
 800fdf4:	801a      	strh	r2, [r3, #0]
            uint16_t toid = lfs_tag_id(tag);
 800fdf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdf8:	20d0      	movs	r0, #208	; 0xd0
 800fdfa:	183c      	adds	r4, r7, r0
 800fdfc:	0018      	movs	r0, r3
 800fdfe:	f7fe ff62 	bl	800ecc6 <lfs_tag_id>
 800fe02:	0003      	movs	r3, r0
 800fe04:	8023      	strh	r3, [r4, #0]
            dir = buffer;
 800fe06:	24e4      	movs	r4, #228	; 0xe4
 800fe08:	193c      	adds	r4, r7, r4
 800fe0a:	6823      	ldr	r3, [r4, #0]
 800fe0c:	60bb      	str	r3, [r7, #8]
            off = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800fe12:	2301      	movs	r3, #1
 800fe14:	425b      	negs	r3, r3
 800fe16:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	2184      	movs	r1, #132	; 0x84
 800fe1c:	0049      	lsls	r1, r1, #1
 800fe1e:	187c      	adds	r4, r7, r1
 800fe20:	6023      	str	r3, [r4, #0]
            attrcount = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	2286      	movs	r2, #134	; 0x86
 800fe26:	0052      	lsls	r2, r2, #1
 800fe28:	18bc      	adds	r4, r7, r2
 800fe2a:	6023      	str	r3, [r4, #0]
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800fe2c:	4b6c      	ldr	r3, [pc, #432]	; (800ffe0 <lfs_dir_traverse+0x790>)
 800fe2e:	2008      	movs	r0, #8
 800fe30:	1809      	adds	r1, r1, r0
 800fe32:	19c9      	adds	r1, r1, r7
 800fe34:	600b      	str	r3, [r1, #0]
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800fe36:	2380      	movs	r3, #128	; 0x80
 800fe38:	059b      	lsls	r3, r3, #22
 800fe3a:	0001      	movs	r1, r0
 800fe3c:	1852      	adds	r2, r2, r1
 800fe3e:	19d2      	adds	r2, r2, r7
 800fe40:	6013      	str	r3, [r2, #0]
            begin = fromid;
 800fe42:	2388      	movs	r3, #136	; 0x88
 800fe44:	005b      	lsls	r3, r3, #1
 800fe46:	185b      	adds	r3, r3, r1
 800fe48:	19db      	adds	r3, r3, r7
 800fe4a:	197a      	adds	r2, r7, r5
 800fe4c:	8812      	ldrh	r2, [r2, #0]
 800fe4e:	801a      	strh	r2, [r3, #0]
            end = fromid+1;
 800fe50:	238a      	movs	r3, #138	; 0x8a
 800fe52:	005b      	lsls	r3, r3, #1
 800fe54:	185b      	adds	r3, r3, r1
 800fe56:	19db      	adds	r3, r3, r7
 800fe58:	197a      	adds	r2, r7, r5
 800fe5a:	8812      	ldrh	r2, [r2, #0]
 800fe5c:	3201      	adds	r2, #1
 800fe5e:	801a      	strh	r2, [r3, #0]
            diff = toid-fromid+diff;
 800fe60:	20d0      	movs	r0, #208	; 0xd0
 800fe62:	183a      	adds	r2, r7, r0
 800fe64:	197b      	adds	r3, r7, r5
 800fe66:	8812      	ldrh	r2, [r2, #0]
 800fe68:	881b      	ldrh	r3, [r3, #0]
 800fe6a:	1ad3      	subs	r3, r2, r3
 800fe6c:	b29a      	uxth	r2, r3
 800fe6e:	1873      	adds	r3, r6, r1
 800fe70:	19db      	adds	r3, r3, r7
 800fe72:	881b      	ldrh	r3, [r3, #0]
 800fe74:	18d3      	adds	r3, r2, r3
 800fe76:	b29a      	uxth	r2, r3
 800fe78:	1873      	adds	r3, r6, r1
 800fe7a:	19db      	adds	r3, r3, r7
 800fe7c:	801a      	strh	r2, [r3, #0]
 800fe7e:	e4fa      	b.n	800f876 <lfs_dir_traverse+0x26>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800fe80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe82:	0018      	movs	r0, r3
 800fe84:	f7fe fef8 	bl	800ec78 <lfs_tag_type3>
 800fe88:	0003      	movs	r3, r0
 800fe8a:	001a      	movs	r2, r3
 800fe8c:	2381      	movs	r3, #129	; 0x81
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d170      	bne.n	800ff76 <lfs_dir_traverse+0x726>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800fe94:	2300      	movs	r3, #0
 800fe96:	22e0      	movs	r2, #224	; 0xe0
 800fe98:	18ba      	adds	r2, r7, r2
 800fe9a:	6013      	str	r3, [r2, #0]
 800fe9c:	e060      	b.n	800ff60 <lfs_dir_traverse+0x710>
                const struct lfs_attr *a = buffer;
 800fe9e:	23e4      	movs	r3, #228	; 0xe4
 800fea0:	18fb      	adds	r3, r7, r3
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	25d4      	movs	r5, #212	; 0xd4
 800fea6:	197a      	adds	r2, r7, r5
 800fea8:	6013      	str	r3, [r2, #0]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800feaa:	26e0      	movs	r6, #224	; 0xe0
 800feac:	19bb      	adds	r3, r7, r6
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	0013      	movs	r3, r2
 800feb2:	005b      	lsls	r3, r3, #1
 800feb4:	189b      	adds	r3, r3, r2
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	001a      	movs	r2, r3
 800feba:	197b      	adds	r3, r7, r5
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	189b      	adds	r3, r3, r2
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	22c0      	movs	r2, #192	; 0xc0
 800fec4:	0092      	lsls	r2, r2, #2
 800fec6:	4694      	mov	ip, r2
 800fec8:	4463      	add	r3, ip
 800feca:	051c      	lsls	r4, r3, #20
 800fecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fece:	0018      	movs	r0, r3
 800fed0:	f7fe fef9 	bl	800ecc6 <lfs_tag_id>
 800fed4:	0003      	movs	r3, r0
 800fed6:	001a      	movs	r2, r3
 800fed8:	238c      	movs	r3, #140	; 0x8c
 800feda:	005b      	lsls	r3, r3, #1
 800fedc:	2008      	movs	r0, #8
 800fede:	181b      	adds	r3, r3, r0
 800fee0:	19db      	adds	r3, r3, r7
 800fee2:	2100      	movs	r1, #0
 800fee4:	5e5b      	ldrsh	r3, [r3, r1]
 800fee6:	18d3      	adds	r3, r2, r3
 800fee8:	029b      	lsls	r3, r3, #10
 800feea:	0021      	movs	r1, r4
 800feec:	4319      	orrs	r1, r3
 800feee:	19bb      	adds	r3, r7, r6
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	0013      	movs	r3, r2
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	189b      	adds	r3, r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	001a      	movs	r2, r3
 800fefc:	197b      	adds	r3, r7, r5
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	189b      	adds	r3, r3, r2
 800ff02:	689b      	ldr	r3, [r3, #8]
 800ff04:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800ff06:	19bb      	adds	r3, r7, r6
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	0013      	movs	r3, r2
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	189b      	adds	r3, r3, r2
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	001a      	movs	r2, r3
 800ff14:	197b      	adds	r3, r7, r5
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	189b      	adds	r3, r3, r2
 800ff1a:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800ff1c:	2390      	movs	r3, #144	; 0x90
 800ff1e:	005b      	lsls	r3, r3, #1
 800ff20:	0004      	movs	r4, r0
 800ff22:	181b      	adds	r3, r3, r0
 800ff24:	19db      	adds	r3, r3, r7
 800ff26:	6818      	ldr	r0, [r3, #0]
 800ff28:	238e      	movs	r3, #142	; 0x8e
 800ff2a:	005b      	lsls	r3, r3, #1
 800ff2c:	191b      	adds	r3, r3, r4
 800ff2e:	19db      	adds	r3, r3, r7
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4798      	blx	r3
 800ff34:	0003      	movs	r3, r0
 800ff36:	22e8      	movs	r2, #232	; 0xe8
 800ff38:	18b9      	adds	r1, r7, r2
 800ff3a:	600b      	str	r3, [r1, #0]
                if (res < 0) {
 800ff3c:	18bb      	adds	r3, r7, r2
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	da02      	bge.n	800ff4a <lfs_dir_traverse+0x6fa>
                    return res;
 800ff44:	18bb      	adds	r3, r7, r2
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	e13a      	b.n	80101c0 <lfs_dir_traverse+0x970>
                }

                if (res) {
 800ff4a:	23e8      	movs	r3, #232	; 0xe8
 800ff4c:	18fb      	adds	r3, r7, r3
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d140      	bne.n	800ffd6 <lfs_dir_traverse+0x786>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800ff54:	22e0      	movs	r2, #224	; 0xe0
 800ff56:	18bb      	adds	r3, r7, r2
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	18ba      	adds	r2, r7, r2
 800ff5e:	6013      	str	r3, [r2, #0]
 800ff60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff62:	0018      	movs	r0, r3
 800ff64:	f7fe febd 	bl	800ece2 <lfs_tag_size>
 800ff68:	0002      	movs	r2, r0
 800ff6a:	23e0      	movs	r3, #224	; 0xe0
 800ff6c:	18fb      	adds	r3, r7, r3
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d394      	bcc.n	800fe9e <lfs_dir_traverse+0x64e>
 800ff74:	e47f      	b.n	800f876 <lfs_dir_traverse+0x26>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800ff76:	238c      	movs	r3, #140	; 0x8c
 800ff78:	005b      	lsls	r3, r3, #1
 800ff7a:	2008      	movs	r0, #8
 800ff7c:	181b      	adds	r3, r3, r0
 800ff7e:	19db      	adds	r3, r3, r7
 800ff80:	2200      	movs	r2, #0
 800ff82:	5e9b      	ldrsh	r3, [r3, r2]
 800ff84:	029a      	lsls	r2, r3, #10
 800ff86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff88:	18d1      	adds	r1, r2, r3
 800ff8a:	23e4      	movs	r3, #228	; 0xe4
 800ff8c:	18fb      	adds	r3, r7, r3
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	2390      	movs	r3, #144	; 0x90
 800ff92:	005b      	lsls	r3, r3, #1
 800ff94:	0004      	movs	r4, r0
 800ff96:	181b      	adds	r3, r3, r0
 800ff98:	19db      	adds	r3, r3, r7
 800ff9a:	6818      	ldr	r0, [r3, #0]
 800ff9c:	238e      	movs	r3, #142	; 0x8e
 800ff9e:	005b      	lsls	r3, r3, #1
 800ffa0:	191b      	adds	r3, r3, r4
 800ffa2:	19db      	adds	r3, r3, r7
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4798      	blx	r3
 800ffa8:	0003      	movs	r3, r0
 800ffaa:	22e8      	movs	r2, #232	; 0xe8
 800ffac:	18b9      	adds	r1, r7, r2
 800ffae:	600b      	str	r3, [r1, #0]
            if (res < 0) {
 800ffb0:	18bb      	adds	r3, r7, r2
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	da02      	bge.n	800ffbe <lfs_dir_traverse+0x76e>
                return res;
 800ffb8:	18bb      	adds	r3, r7, r2
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	e100      	b.n	80101c0 <lfs_dir_traverse+0x970>
            }

            if (res) {
 800ffbe:	23e8      	movs	r3, #232	; 0xe8
 800ffc0:	18fb      	adds	r3, r7, r3
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d10d      	bne.n	800ffe4 <lfs_dir_traverse+0x794>
 800ffc8:	e455      	b.n	800f876 <lfs_dir_traverse+0x26>
                continue;
 800ffca:	46c0      	nop			; (mov r8, r8)
 800ffcc:	e453      	b.n	800f876 <lfs_dir_traverse+0x26>
            continue;
 800ffce:	46c0      	nop			; (mov r8, r8)
 800ffd0:	e451      	b.n	800f876 <lfs_dir_traverse+0x26>
                continue;
 800ffd2:	46c0      	nop			; (mov r8, r8)
 800ffd4:	e44f      	b.n	800f876 <lfs_dir_traverse+0x26>
                    break;
 800ffd6:	46c0      	nop			; (mov r8, r8)
        {
 800ffd8:	e44d      	b.n	800f876 <lfs_dir_traverse+0x26>
 800ffda:	46c0      	nop			; (mov r8, r8)
 800ffdc:	0800f791 	.word	0x0800f791
 800ffe0:	600ffc00 	.word	0x600ffc00
                break;
 800ffe4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    if (sp > 0) {
 800ffe6:	25ec      	movs	r5, #236	; 0xec
 800ffe8:	197b      	adds	r3, r7, r5
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d100      	bne.n	800fff2 <lfs_dir_traverse+0x7a2>
 800fff0:	e0e3      	b.n	80101ba <lfs_dir_traverse+0x96a>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800fff2:	197b      	adds	r3, r7, r5
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	1e5a      	subs	r2, r3, #1
 800fff8:	2058      	movs	r0, #88	; 0x58
 800fffa:	1839      	adds	r1, r7, r0
 800fffc:	0013      	movs	r3, r2
 800fffe:	011b      	lsls	r3, r3, #4
 8010000:	1a9b      	subs	r3, r3, r2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	585b      	ldr	r3, [r3, r1]
 8010006:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8010008:	197b      	adds	r3, r7, r5
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	1e5a      	subs	r2, r3, #1
 801000e:	1839      	adds	r1, r7, r0
 8010010:	0013      	movs	r3, r2
 8010012:	011b      	lsls	r3, r3, #4
 8010014:	1a9b      	subs	r3, r3, r2
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	18cb      	adds	r3, r1, r3
 801001a:	3304      	adds	r3, #4
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8010020:	197b      	adds	r3, r7, r5
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	1e5a      	subs	r2, r3, #1
 8010026:	1839      	adds	r1, r7, r0
 8010028:	0013      	movs	r3, r2
 801002a:	011b      	lsls	r3, r3, #4
 801002c:	1a9b      	subs	r3, r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	18cb      	adds	r3, r1, r3
 8010032:	3308      	adds	r3, #8
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8010038:	197b      	adds	r3, r7, r5
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	1e5a      	subs	r2, r3, #1
 801003e:	1839      	adds	r1, r7, r0
 8010040:	0013      	movs	r3, r2
 8010042:	011b      	lsls	r3, r3, #4
 8010044:	1a9b      	subs	r3, r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	18cb      	adds	r3, r1, r3
 801004a:	330c      	adds	r3, #12
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2484      	movs	r4, #132	; 0x84
 8010050:	0064      	lsls	r4, r4, #1
 8010052:	193a      	adds	r2, r7, r4
 8010054:	6013      	str	r3, [r2, #0]
        attrcount   = stack[sp-1].attrcount;
 8010056:	197b      	adds	r3, r7, r5
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	1e5a      	subs	r2, r3, #1
 801005c:	1839      	adds	r1, r7, r0
 801005e:	0013      	movs	r3, r2
 8010060:	011b      	lsls	r3, r3, #4
 8010062:	1a9b      	subs	r3, r3, r2
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	18cb      	adds	r3, r1, r3
 8010068:	3310      	adds	r3, #16
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2686      	movs	r6, #134	; 0x86
 801006e:	0076      	lsls	r6, r6, #1
 8010070:	19ba      	adds	r2, r7, r6
 8010072:	6013      	str	r3, [r2, #0]
        tmask       = stack[sp-1].tmask;
 8010074:	197b      	adds	r3, r7, r5
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	1e5a      	subs	r2, r3, #1
 801007a:	1839      	adds	r1, r7, r0
 801007c:	0013      	movs	r3, r2
 801007e:	011b      	lsls	r3, r3, #4
 8010080:	1a9b      	subs	r3, r3, r2
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	18cb      	adds	r3, r1, r3
 8010086:	3314      	adds	r3, #20
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	0022      	movs	r2, r4
 801008c:	2408      	movs	r4, #8
 801008e:	1912      	adds	r2, r2, r4
 8010090:	19d2      	adds	r2, r2, r7
 8010092:	6013      	str	r3, [r2, #0]
        ttag        = stack[sp-1].ttag;
 8010094:	197b      	adds	r3, r7, r5
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	1e5a      	subs	r2, r3, #1
 801009a:	1839      	adds	r1, r7, r0
 801009c:	0013      	movs	r3, r2
 801009e:	011b      	lsls	r3, r3, #4
 80100a0:	1a9b      	subs	r3, r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	18cb      	adds	r3, r1, r3
 80100a6:	3318      	adds	r3, #24
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	0032      	movs	r2, r6
 80100ac:	0026      	movs	r6, r4
 80100ae:	1992      	adds	r2, r2, r6
 80100b0:	19d2      	adds	r2, r2, r7
 80100b2:	6013      	str	r3, [r2, #0]
        begin       = stack[sp-1].begin;
 80100b4:	197b      	adds	r3, r7, r5
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	1e5a      	subs	r2, r3, #1
 80100ba:	2388      	movs	r3, #136	; 0x88
 80100bc:	005b      	lsls	r3, r3, #1
 80100be:	199b      	adds	r3, r3, r6
 80100c0:	19d9      	adds	r1, r3, r7
 80100c2:	0004      	movs	r4, r0
 80100c4:	1938      	adds	r0, r7, r4
 80100c6:	0013      	movs	r3, r2
 80100c8:	011b      	lsls	r3, r3, #4
 80100ca:	1a9b      	subs	r3, r3, r2
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	18c3      	adds	r3, r0, r3
 80100d0:	331c      	adds	r3, #28
 80100d2:	881b      	ldrh	r3, [r3, #0]
 80100d4:	800b      	strh	r3, [r1, #0]
        end         = stack[sp-1].end;
 80100d6:	197b      	adds	r3, r7, r5
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	1e5a      	subs	r2, r3, #1
 80100dc:	238a      	movs	r3, #138	; 0x8a
 80100de:	005b      	lsls	r3, r3, #1
 80100e0:	199b      	adds	r3, r3, r6
 80100e2:	19d9      	adds	r1, r3, r7
 80100e4:	1938      	adds	r0, r7, r4
 80100e6:	0013      	movs	r3, r2
 80100e8:	011b      	lsls	r3, r3, #4
 80100ea:	1a9b      	subs	r3, r3, r2
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	18c3      	adds	r3, r0, r3
 80100f0:	331e      	adds	r3, #30
 80100f2:	881b      	ldrh	r3, [r3, #0]
 80100f4:	800b      	strh	r3, [r1, #0]
        diff        = stack[sp-1].diff;
 80100f6:	197b      	adds	r3, r7, r5
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	1e5a      	subs	r2, r3, #1
 80100fc:	238c      	movs	r3, #140	; 0x8c
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	199b      	adds	r3, r3, r6
 8010102:	19d9      	adds	r1, r3, r7
 8010104:	1938      	adds	r0, r7, r4
 8010106:	0013      	movs	r3, r2
 8010108:	011b      	lsls	r3, r3, #4
 801010a:	1a9b      	subs	r3, r3, r2
 801010c:	009b      	lsls	r3, r3, #2
 801010e:	18c3      	adds	r3, r0, r3
 8010110:	3320      	adds	r3, #32
 8010112:	881b      	ldrh	r3, [r3, #0]
 8010114:	800b      	strh	r3, [r1, #0]
        cb          = stack[sp-1].cb;
 8010116:	197b      	adds	r3, r7, r5
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	1e5a      	subs	r2, r3, #1
 801011c:	0020      	movs	r0, r4
 801011e:	1839      	adds	r1, r7, r0
 8010120:	0013      	movs	r3, r2
 8010122:	011b      	lsls	r3, r3, #4
 8010124:	1a9b      	subs	r3, r3, r2
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	18cb      	adds	r3, r1, r3
 801012a:	3324      	adds	r3, #36	; 0x24
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	228e      	movs	r2, #142	; 0x8e
 8010130:	0052      	lsls	r2, r2, #1
 8010132:	1992      	adds	r2, r2, r6
 8010134:	19d2      	adds	r2, r2, r7
 8010136:	6013      	str	r3, [r2, #0]
        data        = stack[sp-1].data;
 8010138:	197b      	adds	r3, r7, r5
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	1e5a      	subs	r2, r3, #1
 801013e:	1839      	adds	r1, r7, r0
 8010140:	0013      	movs	r3, r2
 8010142:	011b      	lsls	r3, r3, #4
 8010144:	1a9b      	subs	r3, r3, r2
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	18cb      	adds	r3, r1, r3
 801014a:	3328      	adds	r3, #40	; 0x28
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2290      	movs	r2, #144	; 0x90
 8010150:	0052      	lsls	r2, r2, #1
 8010152:	1992      	adds	r2, r2, r6
 8010154:	19d2      	adds	r2, r2, r7
 8010156:	6013      	str	r3, [r2, #0]
        tag         = stack[sp-1].tag;
 8010158:	197b      	adds	r3, r7, r5
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	1e5a      	subs	r2, r3, #1
 801015e:	1839      	adds	r1, r7, r0
 8010160:	0013      	movs	r3, r2
 8010162:	011b      	lsls	r3, r3, #4
 8010164:	1a9b      	subs	r3, r3, r2
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	18cb      	adds	r3, r1, r3
 801016a:	332c      	adds	r3, #44	; 0x2c
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8010170:	197b      	adds	r3, r7, r5
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	1e5a      	subs	r2, r3, #1
 8010176:	1839      	adds	r1, r7, r0
 8010178:	0013      	movs	r3, r2
 801017a:	011b      	lsls	r3, r3, #4
 801017c:	1a9b      	subs	r3, r3, r2
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	18cb      	adds	r3, r1, r3
 8010182:	3330      	adds	r3, #48	; 0x30
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	22e4      	movs	r2, #228	; 0xe4
 8010188:	18ba      	adds	r2, r7, r2
 801018a:	6013      	str	r3, [r2, #0]
        disk        = stack[sp-1].disk;
 801018c:	197b      	adds	r3, r7, r5
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	1e5a      	subs	r2, r3, #1
 8010192:	234c      	movs	r3, #76	; 0x4c
 8010194:	18fc      	adds	r4, r7, r3
 8010196:	1839      	adds	r1, r7, r0
 8010198:	2030      	movs	r0, #48	; 0x30
 801019a:	0013      	movs	r3, r2
 801019c:	011b      	lsls	r3, r3, #4
 801019e:	1a9b      	subs	r3, r3, r2
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	18cb      	adds	r3, r1, r3
 80101a4:	181b      	adds	r3, r3, r0
 80101a6:	0022      	movs	r2, r4
 80101a8:	3304      	adds	r3, #4
 80101aa:	cb03      	ldmia	r3!, {r0, r1}
 80101ac:	c203      	stmia	r2!, {r0, r1}
        sp -= 1;
 80101ae:	197b      	adds	r3, r7, r5
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	3b01      	subs	r3, #1
 80101b4:	197a      	adds	r2, r7, r5
 80101b6:	6013      	str	r3, [r2, #0]
        goto popped;
 80101b8:	e515      	b.n	800fbe6 <lfs_dir_traverse+0x396>
    } else {
        return res;
 80101ba:	23e8      	movs	r3, #232	; 0xe8
 80101bc:	18fb      	adds	r3, r7, r3
 80101be:	681b      	ldr	r3, [r3, #0]
    }
}
 80101c0:	0018      	movs	r0, r3
 80101c2:	46bd      	mov	sp, r7
 80101c4:	b03d      	add	sp, #244	; 0xf4
 80101c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101c8 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80101c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ca:	46c6      	mov	lr, r8
 80101cc:	b500      	push	{lr}
 80101ce:	b0a2      	sub	sp, #136	; 0x88
 80101d0:	af04      	add	r7, sp, #16
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
 80101d8:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80101da:	2301      	movs	r3, #1
 80101dc:	425b      	negs	r3, r3
 80101de:	677b      	str	r3, [r7, #116]	; 0x74

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d010      	beq.n	801020a <lfs_dir_fetchmatch+0x42>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d206      	bcs.n	8010202 <lfs_dir_fetchmatch+0x3a>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	3304      	adds	r3, #4
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101fe:	429a      	cmp	r2, r3
 8010200:	d303      	bcc.n	801020a <lfs_dir_fetchmatch+0x42>
        return LFS_ERR_CORRUPT;
 8010202:	2354      	movs	r3, #84	; 0x54
 8010204:	425b      	negs	r3, r3
 8010206:	f000 fbc6 	bl	8010996 <lfs_dir_fetchmatch+0x7ce>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 801020a:	213c      	movs	r1, #60	; 0x3c
 801020c:	187b      	adds	r3, r7, r1
 801020e:	2200      	movs	r2, #0
 8010210:	601a      	str	r2, [r3, #0]
 8010212:	187b      	adds	r3, r7, r1
 8010214:	2200      	movs	r2, #0
 8010216:	605a      	str	r2, [r3, #4]
    int r = 0;
 8010218:	2300      	movs	r3, #0
 801021a:	673b      	str	r3, [r7, #112]	; 0x70
    for (int i = 0; i < 2; i++) {
 801021c:	2300      	movs	r3, #0
 801021e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010220:	e04e      	b.n	80102c0 <lfs_dir_fetchmatch+0xf8>
        int err = lfs_bd_read(lfs,
 8010222:	68fc      	ldr	r4, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8010224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	18d3      	adds	r3, r2, r3
        int err = lfs_bd_read(lfs,
 801022c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801022e:	253c      	movs	r5, #60	; 0x3c
 8010230:	1979      	adds	r1, r7, r5
 8010232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010234:	0092      	lsls	r2, r2, #2
 8010236:	188a      	adds	r2, r1, r2
        int err = lfs_bd_read(lfs,
 8010238:	68f8      	ldr	r0, [r7, #12]
 801023a:	2104      	movs	r1, #4
 801023c:	9103      	str	r1, [sp, #12]
 801023e:	9202      	str	r2, [sp, #8]
 8010240:	2200      	movs	r2, #0
 8010242:	9201      	str	r2, [sp, #4]
 8010244:	9300      	str	r3, [sp, #0]
 8010246:	2304      	movs	r3, #4
 8010248:	0022      	movs	r2, r4
 801024a:	2100      	movs	r1, #0
 801024c:	f7fe f88e 	bl	800e36c <lfs_bd_read>
 8010250:	0003      	movs	r3, r0
 8010252:	647b      	str	r3, [r7, #68]	; 0x44
        revs[i] = lfs_fromle32(revs[i]);
 8010254:	197b      	adds	r3, r7, r5
 8010256:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010258:	0092      	lsls	r2, r2, #2
 801025a:	58d3      	ldr	r3, [r2, r3]
 801025c:	0018      	movs	r0, r3
 801025e:	f7fe f81b 	bl	800e298 <lfs_fromle32>
 8010262:	0001      	movs	r1, r0
 8010264:	197b      	adds	r3, r7, r5
 8010266:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010268:	0092      	lsls	r2, r2, #2
 801026a:	50d1      	str	r1, [r2, r3]
        if (err && err != LFS_ERR_CORRUPT) {
 801026c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801026e:	2b00      	cmp	r3, #0
 8010270:	d005      	beq.n	801027e <lfs_dir_fetchmatch+0xb6>
 8010272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010274:	3354      	adds	r3, #84	; 0x54
 8010276:	d002      	beq.n	801027e <lfs_dir_fetchmatch+0xb6>
            return err;
 8010278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801027a:	f000 fb8c 	bl	8010996 <lfs_dir_fetchmatch+0x7ce>
        }

        if (err != LFS_ERR_CORRUPT &&
 801027e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010280:	3354      	adds	r3, #84	; 0x54
 8010282:	d01a      	beq.n	80102ba <lfs_dir_fetchmatch+0xf2>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8010284:	233c      	movs	r3, #60	; 0x3c
 8010286:	18fb      	adds	r3, r7, r3
 8010288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801028a:	0092      	lsls	r2, r2, #2
 801028c:	58d0      	ldr	r0, [r2, r3]
 801028e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010290:	3301      	adds	r3, #1
 8010292:	4add      	ldr	r2, [pc, #884]	; (8010608 <lfs_dir_fetchmatch+0x440>)
 8010294:	4013      	ands	r3, r2
 8010296:	d504      	bpl.n	80102a2 <lfs_dir_fetchmatch+0xda>
 8010298:	3b01      	subs	r3, #1
 801029a:	2202      	movs	r2, #2
 801029c:	4252      	negs	r2, r2
 801029e:	4313      	orrs	r3, r2
 80102a0:	3301      	adds	r3, #1
 80102a2:	001a      	movs	r2, r3
 80102a4:	233c      	movs	r3, #60	; 0x3c
 80102a6:	18fb      	adds	r3, r7, r3
 80102a8:	0092      	lsls	r2, r2, #2
 80102aa:	58d3      	ldr	r3, [r2, r3]
 80102ac:	0019      	movs	r1, r3
 80102ae:	f7fd ffe7 	bl	800e280 <lfs_scmp>
 80102b2:	1e03      	subs	r3, r0, #0
        if (err != LFS_ERR_CORRUPT &&
 80102b4:	dd01      	ble.n	80102ba <lfs_dir_fetchmatch+0xf2>
            r = i;
 80102b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102b8:	673b      	str	r3, [r7, #112]	; 0x70
    for (int i = 0; i < 2; i++) {
 80102ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102bc:	3301      	adds	r3, #1
 80102be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80102c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	ddad      	ble.n	8010222 <lfs_dir_fetchmatch+0x5a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80102c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102c8:	4acf      	ldr	r2, [pc, #828]	; (8010608 <lfs_dir_fetchmatch+0x440>)
 80102ca:	4013      	ands	r3, r2
 80102cc:	d504      	bpl.n	80102d8 <lfs_dir_fetchmatch+0x110>
 80102ce:	3b01      	subs	r3, #1
 80102d0:	2202      	movs	r2, #2
 80102d2:	4252      	negs	r2, r2
 80102d4:	4313      	orrs	r3, r2
 80102d6:	3301      	adds	r3, #1
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	18d3      	adds	r3, r2, r3
 80102de:	681a      	ldr	r2, [r3, #0]
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80102e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102e6:	3301      	adds	r3, #1
 80102e8:	4ac7      	ldr	r2, [pc, #796]	; (8010608 <lfs_dir_fetchmatch+0x440>)
 80102ea:	4013      	ands	r3, r2
 80102ec:	d504      	bpl.n	80102f8 <lfs_dir_fetchmatch+0x130>
 80102ee:	3b01      	subs	r3, #1
 80102f0:	2202      	movs	r2, #2
 80102f2:	4252      	negs	r2, r2
 80102f4:	4313      	orrs	r3, r2
 80102f6:	3301      	adds	r3, #1
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	18d3      	adds	r3, r2, r3
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8010304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010306:	4ac0      	ldr	r2, [pc, #768]	; (8010608 <lfs_dir_fetchmatch+0x440>)
 8010308:	4013      	ands	r3, r2
 801030a:	d504      	bpl.n	8010316 <lfs_dir_fetchmatch+0x14e>
 801030c:	3b01      	subs	r3, #1
 801030e:	2202      	movs	r2, #2
 8010310:	4252      	negs	r2, r2
 8010312:	4313      	orrs	r3, r2
 8010314:	3301      	adds	r3, #1
 8010316:	001a      	movs	r2, r3
 8010318:	233c      	movs	r3, #60	; 0x3c
 801031a:	18fb      	adds	r3, r7, r3
 801031c:	0092      	lsls	r2, r2, #2
 801031e:	58d2      	ldr	r2, [r2, r3]
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	2200      	movs	r2, #0
 8010328:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 801032a:	2300      	movs	r3, #0
 801032c:	66bb      	str	r3, [r7, #104]	; 0x68
 801032e:	e31e      	b.n	801096e <lfs_dir_fetchmatch+0x7a6>
        lfs_off_t off = 0;
 8010330:	2300      	movs	r3, #0
 8010332:	667b      	str	r3, [r7, #100]	; 0x64
        lfs_tag_t ptag = 0xffffffff;
 8010334:	2301      	movs	r3, #1
 8010336:	425b      	negs	r3, r3
 8010338:	663b      	str	r3, [r7, #96]	; 0x60

        uint16_t tempcount = 0;
 801033a:	235e      	movs	r3, #94	; 0x5e
 801033c:	18fb      	adds	r3, r7, r3
 801033e:	2200      	movs	r2, #0
 8010340:	801a      	strh	r2, [r3, #0]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8010342:	2334      	movs	r3, #52	; 0x34
 8010344:	18fb      	adds	r3, r7, r3
 8010346:	4ab1      	ldr	r2, [pc, #708]	; (801060c <lfs_dir_fetchmatch+0x444>)
 8010348:	ca03      	ldmia	r2!, {r0, r1}
 801034a:	c303      	stmia	r3!, {r0, r1}
        bool tempsplit = false;
 801034c:	235d      	movs	r3, #93	; 0x5d
 801034e:	18fb      	adds	r3, r7, r3
 8010350:	2200      	movs	r2, #0
 8010352:	701a      	strb	r2, [r3, #0]
        lfs_stag_t tempbesttag = besttag;
 8010354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010356:	65bb      	str	r3, [r7, #88]	; 0x58

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8010358:	2357      	movs	r3, #87	; 0x57
 801035a:	18fb      	adds	r3, r7, r3
 801035c:	2200      	movs	r2, #0
 801035e:	701a      	strb	r2, [r3, #0]
        bool hasfcrc = false;
 8010360:	2356      	movs	r3, #86	; 0x56
 8010362:	18fb      	adds	r3, r7, r3
 8010364:	2200      	movs	r2, #0
 8010366:	701a      	strb	r2, [r3, #0]
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	0018      	movs	r0, r3
 801036e:	f7fd ff9c 	bl	800e2aa <lfs_tole32>
 8010372:	0002      	movs	r2, r0
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	3308      	adds	r3, #8
 801037c:	0019      	movs	r1, r3
 801037e:	2301      	movs	r3, #1
 8010380:	425b      	negs	r3, r3
 8010382:	2204      	movs	r2, #4
 8010384:	0018      	movs	r0, r3
 8010386:	f005 fbb9 	bl	8015afc <lfs_crc>
 801038a:	0003      	movs	r3, r0
 801038c:	62bb      	str	r3, [r7, #40]	; 0x28
        dir->rev = lfs_fromle32(dir->rev);
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	0018      	movs	r0, r3
 8010394:	f7fd ff80 	bl	800e298 <lfs_fromle32>
 8010398:	0002      	movs	r2, r0
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 801039e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103a0:	0018      	movs	r0, r3
 80103a2:	f7fe fca9 	bl	800ecf8 <lfs_tag_dsize>
 80103a6:	0002      	movs	r2, r0
 80103a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103aa:	189b      	adds	r3, r3, r2
 80103ac:	667b      	str	r3, [r7, #100]	; 0x64
            int err = lfs_bd_read(lfs,
 80103ae:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80103b4:	69dc      	ldr	r4, [r3, #28]
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	68f8      	ldr	r0, [r7, #12]
 80103bc:	2204      	movs	r2, #4
 80103be:	9203      	str	r2, [sp, #12]
 80103c0:	2224      	movs	r2, #36	; 0x24
 80103c2:	18ba      	adds	r2, r7, r2
 80103c4:	9202      	str	r2, [sp, #8]
 80103c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80103c8:	9201      	str	r2, [sp, #4]
 80103ca:	9300      	str	r3, [sp, #0]
 80103cc:	0023      	movs	r3, r4
 80103ce:	000a      	movs	r2, r1
 80103d0:	2100      	movs	r1, #0
 80103d2:	f7fd ffcb 	bl	800e36c <lfs_bd_read>
 80103d6:	0003      	movs	r3, r0
 80103d8:	653b      	str	r3, [r7, #80]	; 0x50
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80103da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d005      	beq.n	80103ec <lfs_dir_fetchmatch+0x224>
                if (err == LFS_ERR_CORRUPT) {
 80103e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103e2:	3354      	adds	r3, #84	; 0x54
 80103e4:	d100      	bne.n	80103e8 <lfs_dir_fetchmatch+0x220>
 80103e6:	e1ee      	b.n	80107c6 <lfs_dir_fetchmatch+0x5fe>
                    // can't continue?
                    break;
                }
                return err;
 80103e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ea:	e2d4      	b.n	8010996 <lfs_dir_fetchmatch+0x7ce>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80103ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ee:	2224      	movs	r2, #36	; 0x24
 80103f0:	18b9      	adds	r1, r7, r2
 80103f2:	2204      	movs	r2, #4
 80103f4:	0018      	movs	r0, r3
 80103f6:	f005 fb81 	bl	8015afc <lfs_crc>
 80103fa:	0003      	movs	r3, r0
 80103fc:	62bb      	str	r3, [r7, #40]	; 0x28
            tag = lfs_frombe32(tag) ^ ptag;
 80103fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010400:	0018      	movs	r0, r3
 8010402:	f7fd ff5f 	bl	800e2c4 <lfs_frombe32>
 8010406:	0002      	movs	r2, r0
 8010408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801040a:	4053      	eors	r3, r2
 801040c:	627b      	str	r3, [r7, #36]	; 0x24

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 801040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010410:	0018      	movs	r0, r3
 8010412:	f7fe fbf8 	bl	800ec06 <lfs_tag_isvalid>
 8010416:	0003      	movs	r3, r0
 8010418:	001a      	movs	r2, r3
 801041a:	2301      	movs	r3, #1
 801041c:	4053      	eors	r3, r2
 801041e:	b2db      	uxtb	r3, r3
 8010420:	2b00      	cmp	r3, #0
 8010422:	d00e      	beq.n	8010442 <lfs_dir_fetchmatch+0x27a>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8010424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010426:	0018      	movs	r0, r3
 8010428:	f7fe fc17 	bl	800ec5a <lfs_tag_type2>
 801042c:	0003      	movs	r3, r0
 801042e:	001a      	movs	r2, r3
 8010430:	2357      	movs	r3, #87	; 0x57
 8010432:	18fb      	adds	r3, r7, r3
 8010434:	4976      	ldr	r1, [pc, #472]	; (8010610 <lfs_dir_fetchmatch+0x448>)
 8010436:	468c      	mov	ip, r1
 8010438:	4462      	add	r2, ip
 801043a:	4251      	negs	r1, r2
 801043c:	414a      	adcs	r2, r1
 801043e:	701a      	strb	r2, [r3, #0]
                break;
 8010440:	e1d0      	b.n	80107e4 <lfs_dir_fetchmatch+0x61c>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8010442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010444:	0018      	movs	r0, r3
 8010446:	f7fe fc57 	bl	800ecf8 <lfs_tag_dsize>
 801044a:	0002      	movs	r2, r0
 801044c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801044e:	18d2      	adds	r2, r2, r3
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010454:	69db      	ldr	r3, [r3, #28]
 8010456:	429a      	cmp	r2, r3
 8010458:	d900      	bls.n	801045c <lfs_dir_fetchmatch+0x294>
 801045a:	e1b6      	b.n	80107ca <lfs_dir_fetchmatch+0x602>
                break;
            }

            ptag = tag;
 801045c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045e:	663b      	str	r3, [r7, #96]	; 0x60

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8010460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010462:	0018      	movs	r0, r3
 8010464:	f7fe fbf9 	bl	800ec5a <lfs_tag_type2>
 8010468:	0003      	movs	r3, r0
 801046a:	001a      	movs	r2, r3
 801046c:	23a0      	movs	r3, #160	; 0xa0
 801046e:	00db      	lsls	r3, r3, #3
 8010470:	429a      	cmp	r2, r3
 8010472:	d163      	bne.n	801053c <lfs_dir_fetchmatch+0x374>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8010474:	68fc      	ldr	r4, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 801047a:	69dd      	ldr	r5, [r3, #28]
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010482:	3204      	adds	r2, #4
 8010484:	68f8      	ldr	r0, [r7, #12]
 8010486:	2104      	movs	r1, #4
 8010488:	9103      	str	r1, [sp, #12]
 801048a:	2120      	movs	r1, #32
 801048c:	1879      	adds	r1, r7, r1
 801048e:	9102      	str	r1, [sp, #8]
 8010490:	9201      	str	r2, [sp, #4]
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	002b      	movs	r3, r5
 8010496:	0022      	movs	r2, r4
 8010498:	2100      	movs	r1, #0
 801049a:	f7fd ff67 	bl	800e36c <lfs_bd_read>
 801049e:	0003      	movs	r3, r0
 80104a0:	653b      	str	r3, [r7, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80104a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d005      	beq.n	80104b4 <lfs_dir_fetchmatch+0x2ec>
                    if (err == LFS_ERR_CORRUPT) {
 80104a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104aa:	3354      	adds	r3, #84	; 0x54
 80104ac:	d100      	bne.n	80104b0 <lfs_dir_fetchmatch+0x2e8>
 80104ae:	e18e      	b.n	80107ce <lfs_dir_fetchmatch+0x606>
                        break;
                    }
                    return err;
 80104b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                return err;
 80104b2:	e270      	b.n	8010996 <lfs_dir_fetchmatch+0x7ce>
                }
                dcrc = lfs_fromle32(dcrc);
 80104b4:	6a3b      	ldr	r3, [r7, #32]
 80104b6:	0018      	movs	r0, r3
 80104b8:	f7fd feee 	bl	800e298 <lfs_fromle32>
 80104bc:	0003      	movs	r3, r0
 80104be:	623b      	str	r3, [r7, #32]

                if (crc != dcrc) {
 80104c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104c2:	6a3b      	ldr	r3, [r7, #32]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d000      	beq.n	80104ca <lfs_dir_fetchmatch+0x302>
 80104c8:	e183      	b.n	80107d2 <lfs_dir_fetchmatch+0x60a>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80104ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104cc:	0018      	movs	r0, r3
 80104ce:	f7fe fbe1 	bl	800ec94 <lfs_tag_chunk>
 80104d2:	0003      	movs	r3, r0
 80104d4:	07db      	lsls	r3, r3, #31
 80104d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80104d8:	4053      	eors	r3, r2
 80104da:	663b      	str	r3, [r7, #96]	; 0x60

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e0:	2228      	movs	r2, #40	; 0x28
 80104e2:	18b9      	adds	r1, r7, r2
 80104e4:	2204      	movs	r2, #4
 80104e6:	0018      	movs	r0, r3
 80104e8:	f005 fb08 	bl	8015afc <lfs_crc>
 80104ec:	0002      	movs	r2, r0
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80104f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104f4:	677b      	str	r3, [r7, #116]	; 0x74
                dir->off = off + lfs_tag_dsize(tag);
 80104f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f8:	0018      	movs	r0, r3
 80104fa:	f7fe fbfd 	bl	800ecf8 <lfs_tag_dsize>
 80104fe:	0002      	movs	r2, r0
 8010500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010502:	18d2      	adds	r2, r2, r3
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801050c:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	225e      	movs	r2, #94	; 0x5e
 8010512:	18ba      	adds	r2, r7, r2
 8010514:	8812      	ldrh	r2, [r2, #0]
 8010516:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8010518:	2134      	movs	r1, #52	; 0x34
 801051a:	187b      	adds	r3, r7, r1
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8010522:	187b      	adds	r3, r7, r1
 8010524:	685a      	ldr	r2, [r3, #4]
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	225d      	movs	r2, #93	; 0x5d
 801052e:	18ba      	adds	r2, r7, r2
 8010530:	7812      	ldrb	r2, [r2, #0]
 8010532:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8010534:	2301      	movs	r3, #1
 8010536:	425b      	negs	r3, r3
 8010538:	62bb      	str	r3, [r7, #40]	; 0x28
 801053a:	e730      	b.n	801039e <lfs_dir_fetchmatch+0x1d6>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 801053c:	68fe      	ldr	r6, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 8010542:	69db      	ldr	r3, [r3, #28]
 8010544:	4698      	mov	r8, r3
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	681c      	ldr	r4, [r3, #0]
 801054a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801054c:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 801054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010550:	0018      	movs	r0, r3
 8010552:	f7fe fbd1 	bl	800ecf8 <lfs_tag_dsize>
 8010556:	0003      	movs	r3, r0
            err = lfs_bd_crc(lfs,
 8010558:	3b04      	subs	r3, #4
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	2228      	movs	r2, #40	; 0x28
 801055e:	18ba      	adds	r2, r7, r2
 8010560:	9203      	str	r2, [sp, #12]
 8010562:	9302      	str	r3, [sp, #8]
 8010564:	9501      	str	r5, [sp, #4]
 8010566:	9400      	str	r4, [sp, #0]
 8010568:	4643      	mov	r3, r8
 801056a:	0032      	movs	r2, r6
 801056c:	2100      	movs	r1, #0
 801056e:	f7fe f8aa 	bl	800e6c6 <lfs_bd_crc>
 8010572:	0003      	movs	r3, r0
 8010574:	653b      	str	r3, [r7, #80]	; 0x50
            if (err) {
 8010576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010578:	2b00      	cmp	r3, #0
 801057a:	d005      	beq.n	8010588 <lfs_dir_fetchmatch+0x3c0>
                if (err == LFS_ERR_CORRUPT) {
 801057c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801057e:	3354      	adds	r3, #84	; 0x54
 8010580:	d100      	bne.n	8010584 <lfs_dir_fetchmatch+0x3bc>
 8010582:	e128      	b.n	80107d6 <lfs_dir_fetchmatch+0x60e>
                    break;
                }
                return err;
 8010584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010586:	e206      	b.n	8010996 <lfs_dir_fetchmatch+0x7ce>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8010588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058a:	0018      	movs	r0, r3
 801058c:	f7fe fb56 	bl	800ec3c <lfs_tag_type1>
 8010590:	1e03      	subs	r3, r0, #0
 8010592:	d115      	bne.n	80105c0 <lfs_dir_fetchmatch+0x3f8>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8010594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010596:	0018      	movs	r0, r3
 8010598:	f7fe fb95 	bl	800ecc6 <lfs_tag_id>
 801059c:	0003      	movs	r3, r0
 801059e:	001a      	movs	r2, r3
 80105a0:	245e      	movs	r4, #94	; 0x5e
 80105a2:	193b      	adds	r3, r7, r4
 80105a4:	881b      	ldrh	r3, [r3, #0]
 80105a6:	4293      	cmp	r3, r2
 80105a8:	d900      	bls.n	80105ac <lfs_dir_fetchmatch+0x3e4>
 80105aa:	e0bf      	b.n	801072c <lfs_dir_fetchmatch+0x564>
                    tempcount = lfs_tag_id(tag) + 1;
 80105ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ae:	0018      	movs	r0, r3
 80105b0:	f7fe fb89 	bl	800ecc6 <lfs_tag_id>
 80105b4:	0003      	movs	r3, r0
 80105b6:	001a      	movs	r2, r3
 80105b8:	193b      	adds	r3, r7, r4
 80105ba:	3201      	adds	r2, #1
 80105bc:	801a      	strh	r2, [r3, #0]
 80105be:	e0b5      	b.n	801072c <lfs_dir_fetchmatch+0x564>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	0018      	movs	r0, r3
 80105c4:	f7fe fb3a 	bl	800ec3c <lfs_tag_type1>
 80105c8:	0003      	movs	r3, r0
 80105ca:	001a      	movs	r2, r3
 80105cc:	2380      	movs	r3, #128	; 0x80
 80105ce:	00db      	lsls	r3, r3, #3
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d13f      	bne.n	8010654 <lfs_dir_fetchmatch+0x48c>
                tempcount += lfs_tag_splice(tag);
 80105d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d6:	0018      	movs	r0, r3
 80105d8:	f7fe fb67 	bl	800ecaa <lfs_tag_splice>
 80105dc:	0003      	movs	r3, r0
 80105de:	b299      	uxth	r1, r3
 80105e0:	225e      	movs	r2, #94	; 0x5e
 80105e2:	18bb      	adds	r3, r7, r2
 80105e4:	18ba      	adds	r2, r7, r2
 80105e6:	8812      	ldrh	r2, [r2, #0]
 80105e8:	188a      	adds	r2, r1, r2
 80105ea:	801a      	strh	r2, [r3, #0]

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80105ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105ee:	4a09      	ldr	r2, [pc, #36]	; (8010614 <lfs_dir_fetchmatch+0x44c>)
 80105f0:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80105f2:	4a09      	ldr	r2, [pc, #36]	; (8010618 <lfs_dir_fetchmatch+0x450>)
 80105f4:	431a      	orrs	r2, r3
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d10f      	bne.n	801061c <lfs_dir_fetchmatch+0x454>
                    tempbesttag |= 0x80000000;
 80105fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105fe:	2280      	movs	r2, #128	; 0x80
 8010600:	0612      	lsls	r2, r2, #24
 8010602:	4313      	orrs	r3, r2
 8010604:	65bb      	str	r3, [r7, #88]	; 0x58
 8010606:	e091      	b.n	801072c <lfs_dir_fetchmatch+0x564>
 8010608:	80000001 	.word	0x80000001
 801060c:	0801c684 	.word	0x0801c684
 8010610:	fffffb00 	.word	0xfffffb00
 8010614:	000ffc00 	.word	0x000ffc00
 8010618:	4ff00000 	.word	0x4ff00000
                } else if (tempbesttag != -1 &&
 801061c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801061e:	3301      	adds	r3, #1
 8010620:	d100      	bne.n	8010624 <lfs_dir_fetchmatch+0x45c>
 8010622:	e083      	b.n	801072c <lfs_dir_fetchmatch+0x564>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8010624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010626:	0018      	movs	r0, r3
 8010628:	f7fe fb4d 	bl	800ecc6 <lfs_tag_id>
 801062c:	0003      	movs	r3, r0
 801062e:	001c      	movs	r4, r3
 8010630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010632:	0018      	movs	r0, r3
 8010634:	f7fe fb47 	bl	800ecc6 <lfs_tag_id>
 8010638:	0003      	movs	r3, r0
                } else if (tempbesttag != -1 &&
 801063a:	429c      	cmp	r4, r3
 801063c:	d900      	bls.n	8010640 <lfs_dir_fetchmatch+0x478>
 801063e:	e075      	b.n	801072c <lfs_dir_fetchmatch+0x564>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	0018      	movs	r0, r3
 8010644:	f7fe fb31 	bl	800ecaa <lfs_tag_splice>
 8010648:	0003      	movs	r3, r0
 801064a:	029a      	lsls	r2, r3, #10
 801064c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801064e:	18d3      	adds	r3, r2, r3
 8010650:	65bb      	str	r3, [r7, #88]	; 0x58
 8010652:	e06b      	b.n	801072c <lfs_dir_fetchmatch+0x564>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	0018      	movs	r0, r3
 8010658:	f7fe faf0 	bl	800ec3c <lfs_tag_type1>
 801065c:	0003      	movs	r3, r0
 801065e:	001a      	movs	r2, r3
 8010660:	23c0      	movs	r3, #192	; 0xc0
 8010662:	00db      	lsls	r3, r3, #3
 8010664:	429a      	cmp	r2, r3
 8010666:	d132      	bne.n	80106ce <lfs_dir_fetchmatch+0x506>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	0018      	movs	r0, r3
 801066c:	f7fe fb12 	bl	800ec94 <lfs_tag_chunk>
 8010670:	0003      	movs	r3, r0
 8010672:	001a      	movs	r2, r3
 8010674:	2301      	movs	r3, #1
 8010676:	401a      	ands	r2, r3
 8010678:	235d      	movs	r3, #93	; 0x5d
 801067a:	18fb      	adds	r3, r7, r3
 801067c:	1e51      	subs	r1, r2, #1
 801067e:	418a      	sbcs	r2, r1
 8010680:	701a      	strb	r2, [r3, #0]

                err = lfs_bd_read(lfs,
 8010682:	68fc      	ldr	r4, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8010688:	69dd      	ldr	r5, [r3, #28]
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010690:	3204      	adds	r2, #4
 8010692:	68f8      	ldr	r0, [r7, #12]
 8010694:	2108      	movs	r1, #8
 8010696:	9103      	str	r1, [sp, #12]
 8010698:	2134      	movs	r1, #52	; 0x34
 801069a:	1879      	adds	r1, r7, r1
 801069c:	9102      	str	r1, [sp, #8]
 801069e:	9201      	str	r2, [sp, #4]
 80106a0:	9300      	str	r3, [sp, #0]
 80106a2:	002b      	movs	r3, r5
 80106a4:	0022      	movs	r2, r4
 80106a6:	2100      	movs	r1, #0
 80106a8:	f7fd fe60 	bl	800e36c <lfs_bd_read>
 80106ac:	0003      	movs	r3, r0
 80106ae:	653b      	str	r3, [r7, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80106b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d005      	beq.n	80106c2 <lfs_dir_fetchmatch+0x4fa>
                    if (err == LFS_ERR_CORRUPT) {
 80106b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106b8:	3354      	adds	r3, #84	; 0x54
 80106ba:	d100      	bne.n	80106be <lfs_dir_fetchmatch+0x4f6>
 80106bc:	e08d      	b.n	80107da <lfs_dir_fetchmatch+0x612>
                        break;
                    }
                    return err;
 80106be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106c0:	e169      	b.n	8010996 <lfs_dir_fetchmatch+0x7ce>
                }
                lfs_pair_fromle32(temptail);
 80106c2:	2334      	movs	r3, #52	; 0x34
 80106c4:	18fb      	adds	r3, r7, r3
 80106c6:	0018      	movs	r0, r3
 80106c8:	f7fe fa69 	bl	800eb9e <lfs_pair_fromle32>
 80106cc:	e02e      	b.n	801072c <lfs_dir_fetchmatch+0x564>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	0018      	movs	r0, r3
 80106d2:	f7fe fad1 	bl	800ec78 <lfs_tag_type3>
 80106d6:	0003      	movs	r3, r0
 80106d8:	001a      	movs	r2, r3
 80106da:	4bb2      	ldr	r3, [pc, #712]	; (80109a4 <lfs_dir_fetchmatch+0x7dc>)
 80106dc:	429a      	cmp	r2, r3
 80106de:	d125      	bne.n	801072c <lfs_dir_fetchmatch+0x564>
                err = lfs_bd_read(lfs,
 80106e0:	68fc      	ldr	r4, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80106e6:	69dd      	ldr	r5, [r3, #28]
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80106ee:	3204      	adds	r2, #4
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	2108      	movs	r1, #8
 80106f4:	9103      	str	r1, [sp, #12]
 80106f6:	212c      	movs	r1, #44	; 0x2c
 80106f8:	1879      	adds	r1, r7, r1
 80106fa:	9102      	str	r1, [sp, #8]
 80106fc:	9201      	str	r2, [sp, #4]
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	002b      	movs	r3, r5
 8010702:	0022      	movs	r2, r4
 8010704:	2100      	movs	r1, #0
 8010706:	f7fd fe31 	bl	800e36c <lfs_bd_read>
 801070a:	0003      	movs	r3, r0
 801070c:	653b      	str	r3, [r7, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 801070e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010710:	2b00      	cmp	r3, #0
 8010712:	d002      	beq.n	801071a <lfs_dir_fetchmatch+0x552>
                    if (err == LFS_ERR_CORRUPT) {
 8010714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010716:	3354      	adds	r3, #84	; 0x54
 8010718:	d061      	beq.n	80107de <lfs_dir_fetchmatch+0x616>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 801071a:	232c      	movs	r3, #44	; 0x2c
 801071c:	18fb      	adds	r3, r7, r3
 801071e:	0018      	movs	r0, r3
 8010720:	f7fe fbe0 	bl	800eee4 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8010724:	2356      	movs	r3, #86	; 0x56
 8010726:	18fb      	adds	r3, r7, r3
 8010728:	2201      	movs	r2, #1
 801072a:	701a      	strb	r2, [r3, #0]
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 801072c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801072e:	2390      	movs	r3, #144	; 0x90
 8010730:	18fb      	adds	r3, r7, r3
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	4053      	eors	r3, r2
 8010736:	683a      	ldr	r2, [r7, #0]
 8010738:	4013      	ands	r3, r2
 801073a:	d000      	beq.n	801073e <lfs_dir_fetchmatch+0x576>
 801073c:	e62f      	b.n	801039e <lfs_dir_fetchmatch+0x1d6>
                int res = cb(data, tag, &(struct lfs_diskoff){
 801073e:	6a79      	ldr	r1, [r7, #36]	; 0x24
                        dir->pair[0], off+sizeof(tag)});
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	681a      	ldr	r2, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8010744:	2018      	movs	r0, #24
 8010746:	183b      	adds	r3, r7, r0
 8010748:	601a      	str	r2, [r3, #0]
                        dir->pair[0], off+sizeof(tag)});
 801074a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801074c:	1d1a      	adds	r2, r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 801074e:	183b      	adds	r3, r7, r0
 8010750:	605a      	str	r2, [r3, #4]
 8010752:	183a      	adds	r2, r7, r0
 8010754:	239c      	movs	r3, #156	; 0x9c
 8010756:	18fb      	adds	r3, r7, r3
 8010758:	6818      	ldr	r0, [r3, #0]
 801075a:	2398      	movs	r3, #152	; 0x98
 801075c:	18fb      	adds	r3, r7, r3
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4798      	blx	r3
 8010762:	0003      	movs	r3, r0
 8010764:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (res < 0) {
 8010766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010768:	2b00      	cmp	r3, #0
 801076a:	da04      	bge.n	8010776 <lfs_dir_fetchmatch+0x5ae>
                    if (res == LFS_ERR_CORRUPT) {
 801076c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801076e:	3354      	adds	r3, #84	; 0x54
 8010770:	d037      	beq.n	80107e2 <lfs_dir_fetchmatch+0x61a>
                        break;
                    }
                    return res;
 8010772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
                return err;
 8010774:	e10f      	b.n	8010996 <lfs_dir_fetchmatch+0x7ce>
                }

                if (res == LFS_CMP_EQ) {
 8010776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010778:	2b00      	cmp	r3, #0
 801077a:	d102      	bne.n	8010782 <lfs_dir_fetchmatch+0x5ba>
                    // found a match
                    tempbesttag = tag;
 801077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010780:	e60d      	b.n	801039e <lfs_dir_fetchmatch+0x1d6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8010782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010786:	4053      	eors	r3, r2
 8010788:	4a87      	ldr	r2, [pc, #540]	; (80109a8 <lfs_dir_fetchmatch+0x7e0>)
 801078a:	4013      	ands	r3, r2
 801078c:	d103      	bne.n	8010796 <lfs_dir_fetchmatch+0x5ce>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 801078e:	2301      	movs	r3, #1
 8010790:	425b      	negs	r3, r3
 8010792:	65bb      	str	r3, [r7, #88]	; 0x58
 8010794:	e603      	b.n	801039e <lfs_dir_fetchmatch+0x1d6>
                } else if (res == LFS_CMP_GT &&
 8010796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010798:	2b02      	cmp	r3, #2
 801079a:	d000      	beq.n	801079e <lfs_dir_fetchmatch+0x5d6>
 801079c:	e5ff      	b.n	801039e <lfs_dir_fetchmatch+0x1d6>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 801079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a0:	0018      	movs	r0, r3
 80107a2:	f7fe fa90 	bl	800ecc6 <lfs_tag_id>
 80107a6:	0003      	movs	r3, r0
 80107a8:	001c      	movs	r4, r3
 80107aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107ac:	0018      	movs	r0, r3
 80107ae:	f7fe fa8a 	bl	800ecc6 <lfs_tag_id>
 80107b2:	0003      	movs	r3, r0
                } else if (res == LFS_CMP_GT &&
 80107b4:	429c      	cmp	r4, r3
 80107b6:	d900      	bls.n	80107ba <lfs_dir_fetchmatch+0x5f2>
 80107b8:	e5f1      	b.n	801039e <lfs_dir_fetchmatch+0x1d6>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 80107ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107bc:	2280      	movs	r2, #128	; 0x80
 80107be:	0612      	lsls	r2, r2, #24
 80107c0:	4313      	orrs	r3, r2
 80107c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80107c4:	e5eb      	b.n	801039e <lfs_dir_fetchmatch+0x1d6>
                    break;
 80107c6:	46c0      	nop			; (mov r8, r8)
 80107c8:	e00c      	b.n	80107e4 <lfs_dir_fetchmatch+0x61c>
                break;
 80107ca:	46c0      	nop			; (mov r8, r8)
 80107cc:	e00a      	b.n	80107e4 <lfs_dir_fetchmatch+0x61c>
                        break;
 80107ce:	46c0      	nop			; (mov r8, r8)
 80107d0:	e008      	b.n	80107e4 <lfs_dir_fetchmatch+0x61c>
                    break;
 80107d2:	46c0      	nop			; (mov r8, r8)
 80107d4:	e006      	b.n	80107e4 <lfs_dir_fetchmatch+0x61c>
                    break;
 80107d6:	46c0      	nop			; (mov r8, r8)
 80107d8:	e004      	b.n	80107e4 <lfs_dir_fetchmatch+0x61c>
                        break;
 80107da:	46c0      	nop			; (mov r8, r8)
 80107dc:	e002      	b.n	80107e4 <lfs_dir_fetchmatch+0x61c>
                        break;
 80107de:	46c0      	nop			; (mov r8, r8)
 80107e0:	e000      	b.n	80107e4 <lfs_dir_fetchmatch+0x61c>
                        break;
 80107e2:	46c0      	nop			; (mov r8, r8)
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d000      	beq.n	80107ee <lfs_dir_fetchmatch+0x626>
 80107ec:	e018      	b.n	8010820 <lfs_dir_fetchmatch+0x658>
            // try the other block?
            lfs_pair_swap(dir->pair);
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	0018      	movs	r0, r3
 80107f2:	f7fe f955 	bl	800eaa0 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 80107f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107f8:	3301      	adds	r3, #1
 80107fa:	4a6c      	ldr	r2, [pc, #432]	; (80109ac <lfs_dir_fetchmatch+0x7e4>)
 80107fc:	4013      	ands	r3, r2
 80107fe:	d504      	bpl.n	801080a <lfs_dir_fetchmatch+0x642>
 8010800:	3b01      	subs	r3, #1
 8010802:	2202      	movs	r2, #2
 8010804:	4252      	negs	r2, r2
 8010806:	4313      	orrs	r3, r2
 8010808:	3301      	adds	r3, #1
 801080a:	001a      	movs	r2, r3
 801080c:	233c      	movs	r3, #60	; 0x3c
 801080e:	18fb      	adds	r3, r7, r3
 8010810:	0092      	lsls	r2, r2, #2
 8010812:	58d2      	ldr	r2, [r2, r3]
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8010818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801081a:	3301      	adds	r3, #1
 801081c:	66bb      	str	r3, [r7, #104]	; 0x68
 801081e:	e0a6      	b.n	801096e <lfs_dir_fetchmatch+0x7a6>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	2200      	movs	r2, #0
 8010824:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8010826:	2357      	movs	r3, #87	; 0x57
 8010828:	18fb      	adds	r3, r7, r3
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d03e      	beq.n	80108ae <lfs_dir_fetchmatch+0x6e6>
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	68da      	ldr	r2, [r3, #12]
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010838:	699b      	ldr	r3, [r3, #24]
 801083a:	0019      	movs	r1, r3
 801083c:	0010      	movs	r0, r2
 801083e:	f7ef fd0f 	bl	8000260 <__aeabi_uidivmod>
 8010842:	1e0b      	subs	r3, r1, #0
 8010844:	d133      	bne.n	80108ae <lfs_dir_fetchmatch+0x6e6>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8010846:	2356      	movs	r3, #86	; 0x56
 8010848:	18fb      	adds	r3, r7, r3
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d02e      	beq.n	80108ae <lfs_dir_fetchmatch+0x6e6>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8010850:	2301      	movs	r3, #1
 8010852:	425b      	negs	r3, r3
 8010854:	617b      	str	r3, [r7, #20]
                int err = lfs_bd_crc(lfs,
 8010856:	68fd      	ldr	r5, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 801085c:	69de      	ldr	r6, [r3, #28]
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	681a      	ldr	r2, [r3, #0]
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	68d9      	ldr	r1, [r3, #12]
 8010866:	232c      	movs	r3, #44	; 0x2c
 8010868:	18fb      	adds	r3, r7, r3
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	68fc      	ldr	r4, [r7, #12]
 801086e:	2014      	movs	r0, #20
 8010870:	1838      	adds	r0, r7, r0
 8010872:	9003      	str	r0, [sp, #12]
 8010874:	9302      	str	r3, [sp, #8]
 8010876:	9101      	str	r1, [sp, #4]
 8010878:	9200      	str	r2, [sp, #0]
 801087a:	0033      	movs	r3, r6
 801087c:	002a      	movs	r2, r5
 801087e:	2100      	movs	r1, #0
 8010880:	0020      	movs	r0, r4
 8010882:	f7fd ff20 	bl	800e6c6 <lfs_bd_crc>
 8010886:	0003      	movs	r3, r0
 8010888:	64bb      	str	r3, [r7, #72]	; 0x48
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 801088a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801088c:	2b00      	cmp	r3, #0
 801088e:	d004      	beq.n	801089a <lfs_dir_fetchmatch+0x6d2>
 8010890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010892:	3354      	adds	r3, #84	; 0x54
 8010894:	d001      	beq.n	801089a <lfs_dir_fetchmatch+0x6d2>
                    return err;
 8010896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010898:	e07d      	b.n	8010996 <lfs_dir_fetchmatch+0x7ce>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 801089a:	232c      	movs	r3, #44	; 0x2c
 801089c:	18fb      	adds	r3, r7, r3
 801089e:	685a      	ldr	r2, [r3, #4]
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	425a      	negs	r2, r3
 80108a6:	4153      	adcs	r3, r2
 80108a8:	b2da      	uxtb	r2, r3
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	333c      	adds	r3, #60	; 0x3c
 80108b2:	68ba      	ldr	r2, [r7, #8]
 80108b4:	0011      	movs	r1, r2
 80108b6:	0018      	movs	r0, r3
 80108b8:	f7fe fab4 	bl	800ee24 <lfs_gstate_hasmovehere>
 80108bc:	1e03      	subs	r3, r0, #0
 80108be:	d029      	beq.n	8010914 <lfs_dir_fetchmatch+0x74c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108c4:	0018      	movs	r0, r3
 80108c6:	f7fe f9fe 	bl	800ecc6 <lfs_tag_id>
 80108ca:	0003      	movs	r3, r0
 80108cc:	001c      	movs	r4, r3
 80108ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108d0:	0018      	movs	r0, r3
 80108d2:	f7fe f9f8 	bl	800ecc6 <lfs_tag_id>
 80108d6:	0003      	movs	r3, r0
 80108d8:	429c      	cmp	r4, r3
 80108da:	d105      	bne.n	80108e8 <lfs_dir_fetchmatch+0x720>
                besttag |= 0x80000000;
 80108dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108de:	2280      	movs	r2, #128	; 0x80
 80108e0:	0612      	lsls	r2, r2, #24
 80108e2:	4313      	orrs	r3, r2
 80108e4:	677b      	str	r3, [r7, #116]	; 0x74
 80108e6:	e015      	b.n	8010914 <lfs_dir_fetchmatch+0x74c>
            } else if (besttag != -1 &&
 80108e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108ea:	3301      	adds	r3, #1
 80108ec:	d012      	beq.n	8010914 <lfs_dir_fetchmatch+0x74c>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108f2:	0018      	movs	r0, r3
 80108f4:	f7fe f9e7 	bl	800ecc6 <lfs_tag_id>
 80108f8:	0003      	movs	r3, r0
 80108fa:	001c      	movs	r4, r3
 80108fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108fe:	0018      	movs	r0, r3
 8010900:	f7fe f9e1 	bl	800ecc6 <lfs_tag_id>
 8010904:	0003      	movs	r3, r0
            } else if (besttag != -1 &&
 8010906:	429c      	cmp	r4, r3
 8010908:	d204      	bcs.n	8010914 <lfs_dir_fetchmatch+0x74c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801090a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801090c:	4a28      	ldr	r2, [pc, #160]	; (80109b0 <lfs_dir_fetchmatch+0x7e8>)
 801090e:	4694      	mov	ip, r2
 8010910:	4463      	add	r3, ip
 8010912:	677b      	str	r3, [r7, #116]	; 0x74
            }
        }

        // found tag? or found best id?
        if (id) {
 8010914:	2494      	movs	r4, #148	; 0x94
 8010916:	193b      	adds	r3, r7, r4
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d010      	beq.n	8010940 <lfs_dir_fetchmatch+0x778>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801091e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010920:	0018      	movs	r0, r3
 8010922:	f7fe f9d0 	bl	800ecc6 <lfs_tag_id>
 8010926:	0003      	movs	r3, r0
 8010928:	001a      	movs	r2, r3
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	8a9b      	ldrh	r3, [r3, #20]
 801092e:	0019      	movs	r1, r3
 8010930:	0010      	movs	r0, r2
 8010932:	f7fd fc49 	bl	800e1c8 <lfs_min>
 8010936:	0003      	movs	r3, r0
 8010938:	b29a      	uxth	r2, r3
 801093a:	193b      	adds	r3, r7, r4
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8010940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010942:	0018      	movs	r0, r3
 8010944:	f7fe f95f 	bl	800ec06 <lfs_tag_isvalid>
 8010948:	1e03      	subs	r3, r0, #0
 801094a:	d001      	beq.n	8010950 <lfs_dir_fetchmatch+0x788>
            return besttag;
 801094c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801094e:	e022      	b.n	8010996 <lfs_dir_fetchmatch+0x7ce>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8010950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010952:	0018      	movs	r0, r3
 8010954:	f7fe f9b7 	bl	800ecc6 <lfs_tag_id>
 8010958:	0003      	movs	r3, r0
 801095a:	001a      	movs	r2, r3
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	8a9b      	ldrh	r3, [r3, #20]
 8010960:	429a      	cmp	r2, r3
 8010962:	d202      	bcs.n	801096a <lfs_dir_fetchmatch+0x7a2>
            return LFS_ERR_NOENT;
 8010964:	2302      	movs	r3, #2
 8010966:	425b      	negs	r3, r3
 8010968:	e015      	b.n	8010996 <lfs_dir_fetchmatch+0x7ce>
        } else {
            return 0;
 801096a:	2300      	movs	r3, #0
 801096c:	e013      	b.n	8010996 <lfs_dir_fetchmatch+0x7ce>
    for (int i = 0; i < 2; i++) {
 801096e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010970:	2b01      	cmp	r3, #1
 8010972:	dc00      	bgt.n	8010976 <lfs_dir_fetchmatch+0x7ae>
 8010974:	e4dc      	b.n	8010330 <lfs_dir_fetchmatch+0x168>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	681c      	ldr	r4, [r3, #0]
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	4d0d      	ldr	r5, [pc, #52]	; (80109b4 <lfs_dir_fetchmatch+0x7ec>)
 8010980:	490d      	ldr	r1, [pc, #52]	; (80109b8 <lfs_dir_fetchmatch+0x7f0>)
 8010982:	480e      	ldr	r0, [pc, #56]	; (80109bc <lfs_dir_fetchmatch+0x7f4>)
 8010984:	4a0e      	ldr	r2, [pc, #56]	; (80109c0 <lfs_dir_fetchmatch+0x7f8>)
 8010986:	9201      	str	r2, [sp, #4]
 8010988:	9300      	str	r3, [sp, #0]
 801098a:	0023      	movs	r3, r4
 801098c:	002a      	movs	r2, r5
 801098e:	f006 fe0d 	bl	80175ac <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8010992:	2354      	movs	r3, #84	; 0x54
 8010994:	425b      	negs	r3, r3
}
 8010996:	0018      	movs	r0, r3
 8010998:	46bd      	mov	sp, r7
 801099a:	b01e      	add	sp, #120	; 0x78
 801099c:	bc80      	pop	{r7}
 801099e:	46b8      	mov	r8, r7
 80109a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109a2:	46c0      	nop			; (mov r8, r8)
 80109a4:	000005ff 	.word	0x000005ff
 80109a8:	7ffffc00 	.word	0x7ffffc00
 80109ac:	80000001 	.word	0x80000001
 80109b0:	fffffc00 	.word	0xfffffc00
 80109b4:	00000541 	.word	0x00000541
 80109b8:	0801c52c 	.word	0x0801c52c
 80109bc:	0801c64c 	.word	0x0801c64c
 80109c0:	0801c640 	.word	0x0801c640

080109c4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80109c4:	b590      	push	{r4, r7, lr}
 80109c6:	b089      	sub	sp, #36	; 0x24
 80109c8:	af04      	add	r7, sp, #16
 80109ca:	60f8      	str	r0, [r7, #12]
 80109cc:	60b9      	str	r1, [r7, #8]
 80109ce:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80109d0:	2301      	movs	r3, #1
 80109d2:	425c      	negs	r4, r3
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	68b9      	ldr	r1, [r7, #8]
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	2300      	movs	r3, #0
 80109dc:	9303      	str	r3, [sp, #12]
 80109de:	2300      	movs	r3, #0
 80109e0:	9302      	str	r3, [sp, #8]
 80109e2:	2300      	movs	r3, #0
 80109e4:	9301      	str	r3, [sp, #4]
 80109e6:	2301      	movs	r3, #1
 80109e8:	425b      	negs	r3, r3
 80109ea:	9300      	str	r3, [sp, #0]
 80109ec:	0023      	movs	r3, r4
 80109ee:	f7ff fbeb 	bl	80101c8 <lfs_dir_fetchmatch>
 80109f2:	0003      	movs	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 80109f4:	0018      	movs	r0, r3
 80109f6:	46bd      	mov	sp, r7
 80109f8:	b005      	add	sp, #20
 80109fa:	bd90      	pop	{r4, r7, pc}

080109fc <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80109fc:	b590      	push	{r4, r7, lr}
 80109fe:	b08b      	sub	sp, #44	; 0x2c
 8010a00:	af02      	add	r7, sp, #8
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8010a08:	4c13      	ldr	r4, [pc, #76]	; (8010a58 <lfs_dir_getgstate+0x5c>)
 8010a0a:	4a14      	ldr	r2, [pc, #80]	; (8010a5c <lfs_dir_getgstate+0x60>)
 8010a0c:	68b9      	ldr	r1, [r7, #8]
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	2310      	movs	r3, #16
 8010a12:	18fb      	adds	r3, r7, r3
 8010a14:	9300      	str	r3, [sp, #0]
 8010a16:	0023      	movs	r3, r4
 8010a18:	f7fe fdb6 	bl	800f588 <lfs_dir_get>
 8010a1c:	0003      	movs	r3, r0
 8010a1e:	61fb      	str	r3, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	da04      	bge.n	8010a30 <lfs_dir_getgstate+0x34>
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	3302      	adds	r3, #2
 8010a2a:	d001      	beq.n	8010a30 <lfs_dir_getgstate+0x34>
        return res;
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	e00e      	b.n	8010a4e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	3302      	adds	r3, #2
 8010a34:	d00a      	beq.n	8010a4c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8010a36:	2410      	movs	r4, #16
 8010a38:	193b      	adds	r3, r7, r4
 8010a3a:	0018      	movs	r0, r3
 8010a3c:	f7fe fa12 	bl	800ee64 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8010a40:	193a      	adds	r2, r7, r4
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	0011      	movs	r1, r2
 8010a46:	0018      	movs	r0, r3
 8010a48:	f7fe f96b 	bl	800ed22 <lfs_gstate_xor>
    }

    return 0;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	0018      	movs	r0, r3
 8010a50:	46bd      	mov	sp, r7
 8010a52:	b009      	add	sp, #36	; 0x24
 8010a54:	bd90      	pop	{r4, r7, pc}
 8010a56:	46c0      	nop			; (mov r8, r8)
 8010a58:	7ff0000c 	.word	0x7ff0000c
 8010a5c:	7ff00000 	.word	0x7ff00000

08010a60 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8010a60:	b590      	push	{r4, r7, lr}
 8010a62:	b08b      	sub	sp, #44	; 0x2c
 8010a64:	af02      	add	r7, sp, #8
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	603b      	str	r3, [r7, #0]
 8010a6c:	1dbb      	adds	r3, r7, #6
 8010a6e:	801a      	strh	r2, [r3, #0]
    if (id == 0x3ff) {
 8010a70:	1dbb      	adds	r3, r7, #6
 8010a72:	881b      	ldrh	r3, [r3, #0]
 8010a74:	4a37      	ldr	r2, [pc, #220]	; (8010b54 <lfs_dir_getinfo+0xf4>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d10e      	bne.n	8010a98 <lfs_dir_getinfo+0x38>
        // special case for root
        strcpy(info->name, "/");
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	3308      	adds	r3, #8
 8010a7e:	001a      	movs	r2, r3
 8010a80:	4b35      	ldr	r3, [pc, #212]	; (8010b58 <lfs_dir_getinfo+0xf8>)
 8010a82:	0010      	movs	r0, r2
 8010a84:	0019      	movs	r1, r3
 8010a86:	2302      	movs	r3, #2
 8010a88:	001a      	movs	r2, r3
 8010a8a:	f005 fecb 	bl	8016824 <memcpy>
        info->type = LFS_TYPE_DIR;
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	2202      	movs	r2, #2
 8010a92:	701a      	strb	r2, [r3, #0]
        return 0;
 8010a94:	2300      	movs	r3, #0
 8010a96:	e059      	b.n	8010b4c <lfs_dir_getinfo+0xec>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8010a98:	1dbb      	adds	r3, r7, #6
 8010a9a:	881b      	ldrh	r3, [r3, #0]
 8010a9c:	029a      	lsls	r2, r3, #10
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aa2:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8010aa4:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8010aaa:	4c2c      	ldr	r4, [pc, #176]	; (8010b5c <lfs_dir_getinfo+0xfc>)
 8010aac:	68b9      	ldr	r1, [r7, #8]
 8010aae:	68f8      	ldr	r0, [r7, #12]
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	0013      	movs	r3, r2
 8010ab4:	0022      	movs	r2, r4
 8010ab6:	f7fe fd67 	bl	800f588 <lfs_dir_get>
 8010aba:	0003      	movs	r3, r0
 8010abc:	61fb      	str	r3, [r7, #28]
    if (tag < 0) {
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	da01      	bge.n	8010ac8 <lfs_dir_getinfo+0x68>
        return (int)tag;
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	e041      	b.n	8010b4c <lfs_dir_getinfo+0xec>
    }

    info->type = lfs_tag_type3(tag);
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	0018      	movs	r0, r3
 8010acc:	f7fe f8d4 	bl	800ec78 <lfs_tag_type3>
 8010ad0:	0003      	movs	r3, r0
 8010ad2:	b2da      	uxtb	r2, r3
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8010ad8:	1dbb      	adds	r3, r7, #6
 8010ada:	881b      	ldrh	r3, [r3, #0]
 8010adc:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8010ade:	4a20      	ldr	r2, [pc, #128]	; (8010b60 <lfs_dir_getinfo+0x100>)
 8010ae0:	431a      	orrs	r2, r3
 8010ae2:	4c20      	ldr	r4, [pc, #128]	; (8010b64 <lfs_dir_getinfo+0x104>)
 8010ae4:	68b9      	ldr	r1, [r7, #8]
 8010ae6:	68f8      	ldr	r0, [r7, #12]
 8010ae8:	2314      	movs	r3, #20
 8010aea:	18fb      	adds	r3, r7, r3
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	0013      	movs	r3, r2
 8010af0:	0022      	movs	r2, r4
 8010af2:	f7fe fd49 	bl	800f588 <lfs_dir_get>
 8010af6:	0003      	movs	r3, r0
 8010af8:	61fb      	str	r3, [r7, #28]
    if (tag < 0) {
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	da01      	bge.n	8010b04 <lfs_dir_getinfo+0xa4>
        return (int)tag;
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	e023      	b.n	8010b4c <lfs_dir_getinfo+0xec>
    }
    lfs_ctz_fromle32(&ctz);
 8010b04:	2414      	movs	r4, #20
 8010b06:	193b      	adds	r3, r7, r4
 8010b08:	0018      	movs	r0, r3
 8010b0a:	f7fe fa1b 	bl	800ef44 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8010b0e:	69fb      	ldr	r3, [r7, #28]
 8010b10:	0018      	movs	r0, r3
 8010b12:	f7fe f8b1 	bl	800ec78 <lfs_tag_type3>
 8010b16:	0003      	movs	r3, r0
 8010b18:	001a      	movs	r2, r3
 8010b1a:	4b13      	ldr	r3, [pc, #76]	; (8010b68 <lfs_dir_getinfo+0x108>)
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d104      	bne.n	8010b2a <lfs_dir_getinfo+0xca>
        info->size = ctz.size;
 8010b20:	193b      	adds	r3, r7, r4
 8010b22:	685a      	ldr	r2, [r3, #4]
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	605a      	str	r2, [r3, #4]
 8010b28:	e00f      	b.n	8010b4a <lfs_dir_getinfo+0xea>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	0018      	movs	r0, r3
 8010b2e:	f7fe f8a3 	bl	800ec78 <lfs_tag_type3>
 8010b32:	0003      	movs	r3, r0
 8010b34:	001a      	movs	r2, r3
 8010b36:	4b0d      	ldr	r3, [pc, #52]	; (8010b6c <lfs_dir_getinfo+0x10c>)
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d106      	bne.n	8010b4a <lfs_dir_getinfo+0xea>
        info->size = lfs_tag_size(tag);
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	0018      	movs	r0, r3
 8010b40:	f7fe f8cf 	bl	800ece2 <lfs_tag_size>
 8010b44:	0002      	movs	r2, r0
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8010b4a:	2300      	movs	r3, #0
}
 8010b4c:	0018      	movs	r0, r3
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	b009      	add	sp, #36	; 0x24
 8010b52:	bd90      	pop	{r4, r7, pc}
 8010b54:	000003ff 	.word	0x000003ff
 8010b58:	0801c68c 	.word	0x0801c68c
 8010b5c:	780ffc00 	.word	0x780ffc00
 8010b60:	20000008 	.word	0x20000008
 8010b64:	700ffc00 	.word	0x700ffc00
 8010b68:	00000202 	.word	0x00000202
 8010b6c:	00000201 	.word	0x00000201

08010b70 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8010b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b72:	b08f      	sub	sp, #60	; 0x3c
 8010b74:	af04      	add	r7, sp, #16
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8c:	689c      	ldr	r4, [r3, #8]
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	0018      	movs	r0, r3
 8010b92:	f7fe f8a6 	bl	800ece2 <lfs_tag_size>
 8010b96:	0003      	movs	r3, r0
 8010b98:	0019      	movs	r1, r3
 8010b9a:	0020      	movs	r0, r4
 8010b9c:	f7fd fb14 	bl	800e1c8 <lfs_min>
 8010ba0:	0003      	movs	r3, r0
 8010ba2:	61bb      	str	r3, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8010ba4:	6a3d      	ldr	r5, [r7, #32]
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	6859      	ldr	r1, [r3, #4]
 8010bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb0:	685b      	ldr	r3, [r3, #4]
 8010bb2:	69be      	ldr	r6, [r7, #24]
 8010bb4:	6a3c      	ldr	r4, [r7, #32]
 8010bb6:	69b8      	ldr	r0, [r7, #24]
 8010bb8:	9003      	str	r0, [sp, #12]
 8010bba:	9302      	str	r3, [sp, #8]
 8010bbc:	9101      	str	r1, [sp, #4]
 8010bbe:	9200      	str	r2, [sp, #0]
 8010bc0:	0033      	movs	r3, r6
 8010bc2:	002a      	movs	r2, r5
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	0020      	movs	r0, r4
 8010bc8:	f7fd fd28 	bl	800e61c <lfs_bd_cmp>
 8010bcc:	0003      	movs	r3, r0
 8010bce:	617b      	str	r3, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d001      	beq.n	8010bda <lfs_dir_find_match+0x6a>
        return res;
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	e016      	b.n	8010c08 <lfs_dir_find_match+0x98>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8010bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bdc:	689c      	ldr	r4, [r3, #8]
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	0018      	movs	r0, r3
 8010be2:	f7fe f87e 	bl	800ece2 <lfs_tag_size>
 8010be6:	0003      	movs	r3, r0
 8010be8:	429c      	cmp	r4, r3
 8010bea:	d00c      	beq.n	8010c06 <lfs_dir_find_match+0x96>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8010bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bee:	689c      	ldr	r4, [r3, #8]
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	0018      	movs	r0, r3
 8010bf4:	f7fe f875 	bl	800ece2 <lfs_tag_size>
 8010bf8:	0003      	movs	r3, r0
 8010bfa:	429c      	cmp	r4, r3
 8010bfc:	d201      	bcs.n	8010c02 <lfs_dir_find_match+0x92>
 8010bfe:	2301      	movs	r3, #1
 8010c00:	e002      	b.n	8010c08 <lfs_dir_find_match+0x98>
 8010c02:	2302      	movs	r3, #2
 8010c04:	e000      	b.n	8010c08 <lfs_dir_find_match+0x98>
    }

    // found a match!
    return LFS_CMP_EQ;
 8010c06:	2300      	movs	r3, #0
}
 8010c08:	0018      	movs	r0, r3
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	b00b      	add	sp, #44	; 0x2c
 8010c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c10 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8010c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c12:	b093      	sub	sp, #76	; 0x4c
 8010c14:	af04      	add	r7, sp, #16
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	607a      	str	r2, [r7, #4]
 8010c1c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d002      	beq.n	8010c30 <lfs_dir_find+0x20>
        *id = 0x3ff;
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	4a76      	ldr	r2, [pc, #472]	; (8010e08 <lfs_dir_find+0x1f8>)
 8010c2e:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8010c30:	4b76      	ldr	r3, [pc, #472]	; (8010e0c <lfs_dir_find+0x1fc>)
 8010c32:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	6a1a      	ldr	r2, [r3, #32]
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8010c44:	4a72      	ldr	r2, [pc, #456]	; (8010e10 <lfs_dir_find+0x200>)
 8010c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c48:	0011      	movs	r1, r2
 8010c4a:	0018      	movs	r0, r3
 8010c4c:	f006 ff49 	bl	8017ae2 <strspn>
 8010c50:	0002      	movs	r2, r0
 8010c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c54:	189b      	adds	r3, r3, r2
 8010c56:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8010c58:	4a6d      	ldr	r2, [pc, #436]	; (8010e10 <lfs_dir_find+0x200>)
 8010c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c5c:	0011      	movs	r1, r2
 8010c5e:	0018      	movs	r0, r3
 8010c60:	f006 ff08 	bl	8017a74 <strcspn>
 8010c64:	0003      	movs	r3, r0
 8010c66:	627b      	str	r3, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8010c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d105      	bne.n	8010c7a <lfs_dir_find+0x6a>
 8010c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c70:	781a      	ldrb	r2, [r3, #0]
 8010c72:	4b68      	ldr	r3, [pc, #416]	; (8010e14 <lfs_dir_find+0x204>)
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d00a      	beq.n	8010c90 <lfs_dir_find+0x80>
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7c:	2b02      	cmp	r3, #2
 8010c7e:	d10c      	bne.n	8010c9a <lfs_dir_find+0x8a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8010c80:	4965      	ldr	r1, [pc, #404]	; (8010e18 <lfs_dir_find+0x208>)
 8010c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c84:	2202      	movs	r2, #2
 8010c86:	0018      	movs	r0, r3
 8010c88:	f005 fdbe 	bl	8016808 <memcmp>
 8010c8c:	1e03      	subs	r3, r0, #0
 8010c8e:	d104      	bne.n	8010c9a <lfs_dir_find+0x8a>
            name += namelen;
 8010c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	18d3      	adds	r3, r2, r3
 8010c96:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8010c98:	e7d4      	b.n	8010c44 <lfs_dir_find+0x34>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8010c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9e:	18d3      	adds	r3, r2, r3
 8010ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8010ca6:	4a5a      	ldr	r2, [pc, #360]	; (8010e10 <lfs_dir_find+0x200>)
 8010ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010caa:	0011      	movs	r1, r2
 8010cac:	0018      	movs	r0, r3
 8010cae:	f006 ff18 	bl	8017ae2 <strspn>
 8010cb2:	0002      	movs	r2, r0
 8010cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb6:	189b      	adds	r3, r3, r2
 8010cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8010cba:	4a55      	ldr	r2, [pc, #340]	; (8010e10 <lfs_dir_find+0x200>)
 8010cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cbe:	0011      	movs	r1, r2
 8010cc0:	0018      	movs	r0, r3
 8010cc2:	f006 fed7 	bl	8017a74 <strcspn>
 8010cc6:	0003      	movs	r3, r0
 8010cc8:	623b      	str	r3, [r7, #32]
            if (sufflen == 0) {
 8010cca:	6a3b      	ldr	r3, [r7, #32]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d01d      	beq.n	8010d0c <lfs_dir_find+0xfc>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8010cd0:	6a3b      	ldr	r3, [r7, #32]
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	d112      	bne.n	8010cfc <lfs_dir_find+0xec>
 8010cd6:	4950      	ldr	r1, [pc, #320]	; (8010e18 <lfs_dir_find+0x208>)
 8010cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cda:	2202      	movs	r2, #2
 8010cdc:	0018      	movs	r0, r3
 8010cde:	f005 fd93 	bl	8016808 <memcmp>
 8010ce2:	1e03      	subs	r3, r0, #0
 8010ce4:	d10a      	bne.n	8010cfc <lfs_dir_find+0xec>
                depth -= 1;
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	3b01      	subs	r3, #1
 8010cea:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8010cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d107      	bne.n	8010d02 <lfs_dir_find+0xf2>
                    name = suffix + sufflen;
 8010cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	18d3      	adds	r3, r2, r3
 8010cf8:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8010cfa:	e7a3      	b.n	8010c44 <lfs_dir_find+0x34>
                }
            } else {
                depth += 1;
 8010cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfe:	3301      	adds	r3, #1
 8010d00:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8010d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d04:	6a3b      	ldr	r3, [r7, #32]
 8010d06:	18d3      	adds	r3, r2, r3
 8010d08:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8010d0a:	e7cc      	b.n	8010ca6 <lfs_dir_find+0x96>
                break;
 8010d0c:	46c0      	nop			; (mov r8, r8)
        }

        // found path
        if (name[0] == '\0') {
 8010d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d10:	781b      	ldrb	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <lfs_dir_find+0x10a>
            return tag;
 8010d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d18:	e071      	b.n	8010dfe <lfs_dir_find+0x1ee>
        }

        // update what we've found so far
        *path = name;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d1e:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8010d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d22:	0018      	movs	r0, r3
 8010d24:	f7fd ffa8 	bl	800ec78 <lfs_tag_type3>
 8010d28:	0003      	movs	r3, r0
 8010d2a:	2b02      	cmp	r3, #2
 8010d2c:	d002      	beq.n	8010d34 <lfs_dir_find+0x124>
            return LFS_ERR_NOTDIR;
 8010d2e:	2314      	movs	r3, #20
 8010d30:	425b      	negs	r3, r3
 8010d32:	e064      	b.n	8010dfe <lfs_dir_find+0x1ee>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8010d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d36:	0018      	movs	r0, r3
 8010d38:	f7fd ffc5 	bl	800ecc6 <lfs_tag_id>
 8010d3c:	0003      	movs	r3, r0
 8010d3e:	001a      	movs	r2, r3
 8010d40:	4b31      	ldr	r3, [pc, #196]	; (8010e08 <lfs_dir_find+0x1f8>)
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d01d      	beq.n	8010d82 <lfs_dir_find+0x172>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8010d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d48:	0018      	movs	r0, r3
 8010d4a:	f7fd ffbc 	bl	800ecc6 <lfs_tag_id>
 8010d4e:	0003      	movs	r3, r0
 8010d50:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8010d52:	4a32      	ldr	r2, [pc, #200]	; (8010e1c <lfs_dir_find+0x20c>)
 8010d54:	431a      	orrs	r2, r3
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	3318      	adds	r3, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8010d5a:	4c31      	ldr	r4, [pc, #196]	; (8010e20 <lfs_dir_find+0x210>)
 8010d5c:	68b9      	ldr	r1, [r7, #8]
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	0013      	movs	r3, r2
 8010d64:	0022      	movs	r2, r4
 8010d66:	f7fe fc0f 	bl	800f588 <lfs_dir_get>
 8010d6a:	0003      	movs	r3, r0
 8010d6c:	61fb      	str	r3, [r7, #28]
            if (res < 0) {
 8010d6e:	69fb      	ldr	r3, [r7, #28]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	da01      	bge.n	8010d78 <lfs_dir_find+0x168>
                return res;
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	e042      	b.n	8010dfe <lfs_dir_find+0x1ee>
            }
            lfs_pair_fromle32(dir->tail);
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	3318      	adds	r3, #24
 8010d7c:	0018      	movs	r0, r3
 8010d7e:	f7fd ff0e 	bl	800eb9e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	3318      	adds	r3, #24
 8010d86:	001c      	movs	r4, r3
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8010d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d8a:	212f      	movs	r1, #47	; 0x2f
 8010d8c:	0018      	movs	r0, r3
 8010d8e:	f006 fe5b 	bl	8017a48 <strchr>
 8010d92:	1e03      	subs	r3, r0, #0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8010d94:	d101      	bne.n	8010d9a <lfs_dir_find+0x18a>
 8010d96:	683a      	ldr	r2, [r7, #0]
 8010d98:	e000      	b.n	8010d9c <lfs_dir_find+0x18c>
 8010d9a:	2200      	movs	r2, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8010d9c:	2610      	movs	r6, #16
 8010d9e:	19bb      	adds	r3, r7, r6
 8010da0:	68f9      	ldr	r1, [r7, #12]
 8010da2:	6019      	str	r1, [r3, #0]
 8010da4:	19bb      	adds	r3, r7, r6
 8010da6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010da8:	6059      	str	r1, [r3, #4]
 8010daa:	19bb      	adds	r3, r7, r6
 8010dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010dae:	6099      	str	r1, [r3, #8]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8010db0:	23f0      	movs	r3, #240	; 0xf0
 8010db2:	05dd      	lsls	r5, r3, #23
 8010db4:	68b9      	ldr	r1, [r7, #8]
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	19bb      	adds	r3, r7, r6
 8010dba:	9303      	str	r3, [sp, #12]
 8010dbc:	4b19      	ldr	r3, [pc, #100]	; (8010e24 <lfs_dir_find+0x214>)
 8010dbe:	9302      	str	r3, [sp, #8]
 8010dc0:	9201      	str	r2, [sp, #4]
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	9300      	str	r3, [sp, #0]
 8010dc6:	002b      	movs	r3, r5
 8010dc8:	0022      	movs	r2, r4
 8010dca:	f7ff f9fd 	bl	80101c8 <lfs_dir_fetchmatch>
 8010dce:	0003      	movs	r3, r0
 8010dd0:	633b      	str	r3, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8010dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	da01      	bge.n	8010ddc <lfs_dir_find+0x1cc>
                return tag;
 8010dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dda:	e010      	b.n	8010dfe <lfs_dir_find+0x1ee>
            }

            if (tag) {
 8010ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d004      	beq.n	8010dec <lfs_dir_find+0x1dc>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8010de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	18d3      	adds	r3, r2, r3
 8010de8:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8010dea:	e72b      	b.n	8010c44 <lfs_dir_find+0x34>
            if (!dir->split) {
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	7ddb      	ldrb	r3, [r3, #23]
 8010df0:	2201      	movs	r2, #1
 8010df2:	4053      	eors	r3, r2
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d0c3      	beq.n	8010d82 <lfs_dir_find+0x172>
                return LFS_ERR_NOENT;
 8010dfa:	2302      	movs	r3, #2
 8010dfc:	425b      	negs	r3, r3
    }
}
 8010dfe:	0018      	movs	r0, r3
 8010e00:	46bd      	mov	sp, r7
 8010e02:	b00f      	add	sp, #60	; 0x3c
 8010e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e06:	46c0      	nop			; (mov r8, r8)
 8010e08:	000003ff 	.word	0x000003ff
 8010e0c:	002ffc00 	.word	0x002ffc00
 8010e10:	0801c68c 	.word	0x0801c68c
 8010e14:	0801c690 	.word	0x0801c690
 8010e18:	0801c694 	.word	0x0801c694
 8010e1c:	20000008 	.word	0x20000008
 8010e20:	700ffc00 	.word	0x700ffc00
 8010e24:	08010b71 	.word	0x08010b71

08010e28 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8010e28:	b5b0      	push	{r4, r5, r7, lr}
 8010e2a:	b08a      	sub	sp, #40	; 0x28
 8010e2c:	af04      	add	r7, sp, #16
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	607a      	str	r2, [r7, #4]
 8010e34:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	3310      	adds	r3, #16
 8010e3a:	001c      	movs	r4, r3
 8010e3c:	68fd      	ldr	r5, [r7, #12]
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	6839      	ldr	r1, [r7, #0]
 8010e4a:	9103      	str	r1, [sp, #12]
 8010e4c:	6879      	ldr	r1, [r7, #4]
 8010e4e:	9102      	str	r1, [sp, #8]
 8010e50:	9301      	str	r3, [sp, #4]
 8010e52:	9200      	str	r2, [sp, #0]
 8010e54:	2300      	movs	r3, #0
 8010e56:	002a      	movs	r2, r5
 8010e58:	0021      	movs	r1, r4
 8010e5a:	f7fd fd3d 	bl	800e8d8 <lfs_bd_prog>
 8010e5e:	0003      	movs	r3, r0
 8010e60:	617b      	str	r3, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d001      	beq.n	8010e6c <lfs_dir_commitprog+0x44>
        return err;
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	e010      	b.n	8010e8e <lfs_dir_commitprog+0x66>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	683a      	ldr	r2, [r7, #0]
 8010e72:	6879      	ldr	r1, [r7, #4]
 8010e74:	0018      	movs	r0, r3
 8010e76:	f004 fe41 	bl	8015afc <lfs_crc>
 8010e7a:	0002      	movs	r2, r0
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	685a      	ldr	r2, [r3, #4]
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	18d2      	adds	r2, r2, r3
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	605a      	str	r2, [r3, #4]
    return 0;
 8010e8c:	2300      	movs	r3, #0
}
 8010e8e:	0018      	movs	r0, r3
 8010e90:	46bd      	mov	sp, r7
 8010e92:	b006      	add	sp, #24
 8010e94:	bdb0      	pop	{r4, r5, r7, pc}

08010e96 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8010e96:	b5b0      	push	{r4, r5, r7, lr}
 8010e98:	b08e      	sub	sp, #56	; 0x38
 8010e9a:	af04      	add	r7, sp, #16
 8010e9c:	60f8      	str	r0, [r7, #12]
 8010e9e:	60b9      	str	r1, [r7, #8]
 8010ea0:	607a      	str	r2, [r7, #4]
 8010ea2:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	0018      	movs	r0, r3
 8010ea8:	f7fd ff26 	bl	800ecf8 <lfs_tag_dsize>
 8010eac:	0003      	movs	r3, r0
 8010eae:	623b      	str	r3, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	685a      	ldr	r2, [r3, #4]
 8010eb4:	6a3b      	ldr	r3, [r7, #32]
 8010eb6:	18d2      	adds	r2, r2, r3
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	695b      	ldr	r3, [r3, #20]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d902      	bls.n	8010ec6 <lfs_dir_commitattr+0x30>
        return LFS_ERR_NOSPC;
 8010ec0:	231c      	movs	r3, #28
 8010ec2:	425b      	negs	r3, r3
 8010ec4:	e069      	b.n	8010f9a <lfs_dir_commitattr+0x104>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	085a      	lsrs	r2, r3, #1
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	689b      	ldr	r3, [r3, #8]
 8010ed0:	4053      	eors	r3, r2
 8010ed2:	0018      	movs	r0, r3
 8010ed4:	f7fd fa00 	bl	800e2d8 <lfs_tobe32>
 8010ed8:	0003      	movs	r3, r0
 8010eda:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8010edc:	2314      	movs	r3, #20
 8010ede:	18fa      	adds	r2, r7, r3
 8010ee0:	68b9      	ldr	r1, [r7, #8]
 8010ee2:	68f8      	ldr	r0, [r7, #12]
 8010ee4:	2304      	movs	r3, #4
 8010ee6:	f7ff ff9f 	bl	8010e28 <lfs_dir_commitprog>
 8010eea:	0003      	movs	r3, r0
 8010eec:	61fb      	str	r3, [r7, #28]
    if (err) {
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d001      	beq.n	8010ef8 <lfs_dir_commitattr+0x62>
        return err;
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	e050      	b.n	8010f9a <lfs_dir_commitattr+0x104>
    }

    if (!(tag & 0x80000000)) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	db0d      	blt.n	8010f1a <lfs_dir_commitattr+0x84>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8010efe:	6a3b      	ldr	r3, [r7, #32]
 8010f00:	3b04      	subs	r3, #4
 8010f02:	683a      	ldr	r2, [r7, #0]
 8010f04:	68b9      	ldr	r1, [r7, #8]
 8010f06:	68f8      	ldr	r0, [r7, #12]
 8010f08:	f7ff ff8e 	bl	8010e28 <lfs_dir_commitprog>
 8010f0c:	0003      	movs	r3, r0
 8010f0e:	61fb      	str	r3, [r7, #28]
        if (err) {
 8010f10:	69fb      	ldr	r3, [r7, #28]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d03b      	beq.n	8010f8e <lfs_dir_commitattr+0xf8>
            return err;
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	e03f      	b.n	8010f9a <lfs_dir_commitattr+0x104>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8010f1e:	2300      	movs	r3, #0
 8010f20:	627b      	str	r3, [r7, #36]	; 0x24
 8010f22:	e02f      	b.n	8010f84 <lfs_dir_commitattr+0xee>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8010f24:	68fc      	ldr	r4, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8010f26:	6a3a      	ldr	r2, [r7, #32]
 8010f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2a:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8010f2c:	1f1d      	subs	r5, r3, #4
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	681a      	ldr	r2, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	6859      	ldr	r1, [r3, #4]
            err = lfs_bd_read(lfs,
 8010f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f38:	18cb      	adds	r3, r1, r3
 8010f3a:	68f8      	ldr	r0, [r7, #12]
 8010f3c:	2101      	movs	r1, #1
 8010f3e:	9103      	str	r1, [sp, #12]
 8010f40:	2113      	movs	r1, #19
 8010f42:	1879      	adds	r1, r7, r1
 8010f44:	9102      	str	r1, [sp, #8]
 8010f46:	9301      	str	r3, [sp, #4]
 8010f48:	9200      	str	r2, [sp, #0]
 8010f4a:	002b      	movs	r3, r5
 8010f4c:	0022      	movs	r2, r4
 8010f4e:	2100      	movs	r1, #0
 8010f50:	f7fd fa0c 	bl	800e36c <lfs_bd_read>
 8010f54:	0003      	movs	r3, r0
 8010f56:	61fb      	str	r3, [r7, #28]
            if (err) {
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d001      	beq.n	8010f62 <lfs_dir_commitattr+0xcc>
                return err;
 8010f5e:	69fb      	ldr	r3, [r7, #28]
 8010f60:	e01b      	b.n	8010f9a <lfs_dir_commitattr+0x104>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8010f62:	2313      	movs	r3, #19
 8010f64:	18fa      	adds	r2, r7, r3
 8010f66:	68b9      	ldr	r1, [r7, #8]
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	f7ff ff5c 	bl	8010e28 <lfs_dir_commitprog>
 8010f70:	0003      	movs	r3, r0
 8010f72:	61fb      	str	r3, [r7, #28]
            if (err) {
 8010f74:	69fb      	ldr	r3, [r7, #28]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d001      	beq.n	8010f7e <lfs_dir_commitattr+0xe8>
                return err;
 8010f7a:	69fb      	ldr	r3, [r7, #28]
 8010f7c:	e00d      	b.n	8010f9a <lfs_dir_commitattr+0x104>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8010f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f80:	3301      	adds	r3, #1
 8010f82:	627b      	str	r3, [r7, #36]	; 0x24
 8010f84:	6a3b      	ldr	r3, [r7, #32]
 8010f86:	3b04      	subs	r3, #4
 8010f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d3ca      	bcc.n	8010f24 <lfs_dir_commitattr+0x8e>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	005b      	lsls	r3, r3, #1
 8010f92:	085a      	lsrs	r2, r3, #1
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	609a      	str	r2, [r3, #8]
    return 0;
 8010f98:	2300      	movs	r3, #0
}
 8010f9a:	0018      	movs	r0, r3
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	b00a      	add	sp, #40	; 0x28
 8010fa0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010fa4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8010fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fa6:	b097      	sub	sp, #92	; 0x5c
 8010fa8:	af04      	add	r7, sp, #16
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8010fb2:	3314      	adds	r3, #20
 8010fb4:	001a      	movs	r2, r3
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8010fba:	69db      	ldr	r3, [r3, #28]
 8010fbc:	0019      	movs	r1, r3
 8010fbe:	0010      	movs	r0, r2
 8010fc0:	f7fd f902 	bl	800e1c8 <lfs_min>
 8010fc4:	0002      	movs	r2, r0
            lfs->cfg->prog_size);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8010fca:	699b      	ldr	r3, [r3, #24]
 8010fcc:	0019      	movs	r1, r3
 8010fce:	0010      	movs	r0, r2
 8010fd0:	f7fd f91a 	bl	800e208 <lfs_alignup>
 8010fd4:	0003      	movs	r3, r0
 8010fd6:	63bb      	str	r3, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8010fe0:	e10c      	b.n	80111fc <lfs_dir_commitcrc+0x258>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fe8:	1ad3      	subs	r3, r2, r3
 8010fea:	3b04      	subs	r3, #4
 8010fec:	4aac      	ldr	r2, [pc, #688]	; (80112a0 <lfs_dir_commitcrc+0x2fc>)
 8010fee:	0011      	movs	r1, r2
 8010ff0:	0018      	movs	r0, r3
 8010ff2:	f7fd f8e9 	bl	800e1c8 <lfs_min>
 8010ff6:	0002      	movs	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	18d3      	adds	r3, r2, r3
        lfs_off_t noff = (
 8010ffe:	3304      	adds	r3, #4
 8011000:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8011002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011006:	429a      	cmp	r2, r3
 8011008:	d209      	bcs.n	801101e <lfs_dir_commitcrc+0x7a>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801100a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100c:	3b14      	subs	r3, #20
 801100e:	001a      	movs	r2, r3
 8011010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011012:	0011      	movs	r1, r2
 8011014:	0018      	movs	r0, r3
 8011016:	f7fd f8d7 	bl	800e1c8 <lfs_min>
 801101a:	0003      	movs	r3, r0
 801101c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 801101e:	251b      	movs	r5, #27
 8011020:	197b      	adds	r3, r7, r5
 8011022:	22ff      	movs	r2, #255	; 0xff
 8011024:	701a      	strb	r2, [r3, #0]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8011026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102a:	429a      	cmp	r2, r3
 801102c:	d361      	bcc.n	80110f2 <lfs_dir_commitcrc+0x14e>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011032:	69da      	ldr	r2, [r3, #28]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011038:	699b      	ldr	r3, [r3, #24]
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801103e:	429a      	cmp	r2, r3
 8011040:	d857      	bhi.n	80110f2 <lfs_dir_commitcrc+0x14e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8011042:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8011048:	699c      	ldr	r4, [r3, #24]
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	2201      	movs	r2, #1
 8011052:	9203      	str	r2, [sp, #12]
 8011054:	197a      	adds	r2, r7, r5
 8011056:	9202      	str	r2, [sp, #8]
 8011058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801105a:	9201      	str	r2, [sp, #4]
 801105c:	9300      	str	r3, [sp, #0]
 801105e:	0023      	movs	r3, r4
 8011060:	000a      	movs	r2, r1
 8011062:	2100      	movs	r1, #0
 8011064:	f7fd f982 	bl	800e36c <lfs_bd_read>
 8011068:	0003      	movs	r3, r0
 801106a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 801106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106e:	2b00      	cmp	r3, #0
 8011070:	d004      	beq.n	801107c <lfs_dir_commitcrc+0xd8>
 8011072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011074:	3354      	adds	r3, #84	; 0x54
 8011076:	d001      	beq.n	801107c <lfs_dir_commitcrc+0xd8>
                return err;
 8011078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107a:	e10d      	b.n	8011298 <lfs_dir_commitcrc+0x2f4>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011080:	699a      	ldr	r2, [r3, #24]
                struct lfs_fcrc fcrc = {
 8011082:	2108      	movs	r1, #8
 8011084:	187b      	adds	r3, r7, r1
 8011086:	601a      	str	r2, [r3, #0]
 8011088:	187b      	adds	r3, r7, r1
 801108a:	2201      	movs	r2, #1
 801108c:	4252      	negs	r2, r2
 801108e:	605a      	str	r2, [r3, #4]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8011090:	687c      	ldr	r4, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 8011096:	699d      	ldr	r5, [r3, #24]
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	187b      	adds	r3, r7, r1
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	1879      	adds	r1, r7, r1
 80110a4:	3104      	adds	r1, #4
 80110a6:	9103      	str	r1, [sp, #12]
 80110a8:	9302      	str	r3, [sp, #8]
 80110aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ac:	9301      	str	r3, [sp, #4]
 80110ae:	9200      	str	r2, [sp, #0]
 80110b0:	002b      	movs	r3, r5
 80110b2:	0022      	movs	r2, r4
 80110b4:	2100      	movs	r1, #0
 80110b6:	f7fd fb06 	bl	800e6c6 <lfs_bd_crc>
 80110ba:	0003      	movs	r3, r0
 80110bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 80110be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d004      	beq.n	80110ce <lfs_dir_commitcrc+0x12a>
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	3354      	adds	r3, #84	; 0x54
 80110c8:	d001      	beq.n	80110ce <lfs_dir_commitcrc+0x12a>
                    return err;
 80110ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110cc:	e0e4      	b.n	8011298 <lfs_dir_commitcrc+0x2f4>
                }

                lfs_fcrc_tole32(&fcrc);
 80110ce:	2408      	movs	r4, #8
 80110d0:	193b      	adds	r3, r7, r4
 80110d2:	0018      	movs	r0, r3
 80110d4:	f7fd ff1e 	bl	800ef14 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80110d8:	193b      	adds	r3, r7, r4
 80110da:	4a72      	ldr	r2, [pc, #456]	; (80112a4 <lfs_dir_commitcrc+0x300>)
 80110dc:	6839      	ldr	r1, [r7, #0]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff fed9 	bl	8010e96 <lfs_dir_commitattr>
 80110e4:	0003      	movs	r3, r0
 80110e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d001      	beq.n	80110f2 <lfs_dir_commitcrc+0x14e>
                    return err;
 80110ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f0:	e0d2      	b.n	8011298 <lfs_dir_commitcrc+0x2f4>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80110f2:	231b      	movs	r3, #27
 80110f4:	18fb      	adds	r3, r7, r3
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	43db      	mvns	r3, r3
 80110fa:	b2db      	uxtb	r3, r3
 80110fc:	09db      	lsrs	r3, r3, #7
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	22a0      	movs	r2, #160	; 0xa0
 8011102:	00d2      	lsls	r2, r2, #3
 8011104:	4694      	mov	ip, r2
 8011106:	4463      	add	r3, ip
 8011108:	051a      	lsls	r2, r3, #20
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011110:	1acb      	subs	r3, r1, r3
 8011112:	3b04      	subs	r3, #4
 8011114:	4313      	orrs	r3, r2
 8011116:	4a64      	ldr	r2, [pc, #400]	; (80112a8 <lfs_dir_commitcrc+0x304>)
 8011118:	4313      	orrs	r3, r2
 801111a:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	689a      	ldr	r2, [r3, #8]
 8011120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011122:	4053      	eors	r3, r2
 8011124:	0018      	movs	r0, r3
 8011126:	f7fd f8d7 	bl	800e2d8 <lfs_tobe32>
 801112a:	0002      	movs	r2, r0
 801112c:	2610      	movs	r6, #16
 801112e:	19bb      	adds	r3, r7, r6
 8011130:	601a      	str	r2, [r3, #0]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	19b9      	adds	r1, r7, r6
 8011138:	2204      	movs	r2, #4
 801113a:	0018      	movs	r0, r3
 801113c:	f004 fcde 	bl	8015afc <lfs_crc>
 8011140:	0002      	movs	r2, r0
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	0018      	movs	r0, r3
 801114c:	f7fd f8ad 	bl	800e2aa <lfs_tole32>
 8011150:	0002      	movs	r2, r0
 8011152:	19bb      	adds	r3, r7, r6
 8011154:	605a      	str	r2, [r3, #4]

        int err = lfs_bd_prog(lfs,
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	3310      	adds	r3, #16
 801115a:	001c      	movs	r4, r3
 801115c:	687d      	ldr	r5, [r7, #4]
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	2108      	movs	r1, #8
 801116a:	9103      	str	r1, [sp, #12]
 801116c:	19b9      	adds	r1, r7, r6
 801116e:	9102      	str	r1, [sp, #8]
 8011170:	9301      	str	r3, [sp, #4]
 8011172:	9200      	str	r2, [sp, #0]
 8011174:	2300      	movs	r3, #0
 8011176:	002a      	movs	r2, r5
 8011178:	0021      	movs	r1, r4
 801117a:	f7fd fbad 	bl	800e8d8 <lfs_bd_prog>
 801117e:	0003      	movs	r3, r0
 8011180:	627b      	str	r3, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8011182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011184:	2b00      	cmp	r3, #0
 8011186:	d001      	beq.n	801118c <lfs_dir_commitcrc+0x1e8>
            return err;
 8011188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118a:	e085      	b.n	8011298 <lfs_dir_commitcrc+0x2f4>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 801118c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801118e:	2b00      	cmp	r3, #0
 8011190:	d106      	bne.n	80111a0 <lfs_dir_commitcrc+0x1fc>
            off1 = commit->off + sizeof(lfs_tag_t);
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	3304      	adds	r3, #4
 8011198:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111a4:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 80111a6:	231b      	movs	r3, #27
 80111a8:	18fb      	adds	r3, r7, r3
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	43db      	mvns	r3, r3
 80111ae:	061b      	lsls	r3, r3, #24
 80111b0:	0fdb      	lsrs	r3, r3, #31
 80111b2:	07da      	lsls	r2, r3, #31
 80111b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b6:	405a      	eors	r2, r3
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	2201      	movs	r2, #1
 80111c0:	4252      	negs	r2, r2
 80111c2:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 80111c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d208      	bcs.n	80111de <lfs_dir_commitcrc+0x23a>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	695a      	ldr	r2, [r3, #20]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111d6:	18d3      	adds	r3, r2, r3
 80111d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111da:	429a      	cmp	r2, r3
 80111dc:	d30e      	bcc.n	80111fc <lfs_dir_commitcrc+0x258>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	3310      	adds	r3, #16
 80111e2:	0019      	movs	r1, r3
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	2300      	movs	r3, #0
 80111ea:	f7fd fb3b 	bl	800e864 <lfs_bd_sync>
 80111ee:	0003      	movs	r3, r0
 80111f0:	623b      	str	r3, [r7, #32]
            if (err) {
 80111f2:	6a3b      	ldr	r3, [r7, #32]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d001      	beq.n	80111fc <lfs_dir_commitcrc+0x258>
                return err;
 80111f8:	6a3b      	ldr	r3, [r7, #32]
 80111fa:	e04d      	b.n	8011298 <lfs_dir_commitcrc+0x2f4>
    while (commit->off < end) {
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011202:	429a      	cmp	r2, r3
 8011204:	d900      	bls.n	8011208 <lfs_dir_commitcrc+0x264>
 8011206:	e6ec      	b.n	8010fe2 <lfs_dir_commitcrc+0x3e>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	691b      	ldr	r3, [r3, #16]
 801120c:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 801120e:	2301      	movs	r3, #1
 8011210:	425b      	negs	r3, r3
 8011212:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8011214:	687c      	ldr	r4, [r7, #4]
 8011216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011218:	1d1d      	adds	r5, r3, #4
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011222:	1a8a      	subs	r2, r1, r2
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	211c      	movs	r1, #28
 8011228:	1879      	adds	r1, r7, r1
 801122a:	9103      	str	r1, [sp, #12]
 801122c:	9202      	str	r2, [sp, #8]
 801122e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011230:	9201      	str	r2, [sp, #4]
 8011232:	9300      	str	r3, [sp, #0]
 8011234:	002b      	movs	r3, r5
 8011236:	0022      	movs	r2, r4
 8011238:	2100      	movs	r1, #0
 801123a:	f7fd fa44 	bl	800e6c6 <lfs_bd_crc>
 801123e:	0003      	movs	r3, r0
 8011240:	633b      	str	r3, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8011242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011244:	2b00      	cmp	r3, #0
 8011246:	d001      	beq.n	801124c <lfs_dir_commitcrc+0x2a8>
        return err;
 8011248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124a:	e025      	b.n	8011298 <lfs_dir_commitcrc+0x2f4>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 801124c:	69fb      	ldr	r3, [r7, #28]
 801124e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011250:	429a      	cmp	r2, r3
 8011252:	d002      	beq.n	801125a <lfs_dir_commitcrc+0x2b6>
        return LFS_ERR_CORRUPT;
 8011254:	2354      	movs	r3, #84	; 0x54
 8011256:	425b      	negs	r3, r3
 8011258:	e01e      	b.n	8011298 <lfs_dir_commitcrc+0x2f4>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 801125a:	6879      	ldr	r1, [r7, #4]
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	221c      	movs	r2, #28
 8011264:	18ba      	adds	r2, r7, r2
 8011266:	9203      	str	r2, [sp, #12]
 8011268:	2204      	movs	r2, #4
 801126a:	9202      	str	r2, [sp, #8]
 801126c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801126e:	9201      	str	r2, [sp, #4]
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	2304      	movs	r3, #4
 8011274:	000a      	movs	r2, r1
 8011276:	2100      	movs	r1, #0
 8011278:	f7fd fa25 	bl	800e6c6 <lfs_bd_crc>
 801127c:	0003      	movs	r3, r0
 801127e:	633b      	str	r3, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8011280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011282:	2b00      	cmp	r3, #0
 8011284:	d001      	beq.n	801128a <lfs_dir_commitcrc+0x2e6>
        return err;
 8011286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011288:	e006      	b.n	8011298 <lfs_dir_commitcrc+0x2f4>
    }

    if (crc != 0) {
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d002      	beq.n	8011296 <lfs_dir_commitcrc+0x2f2>
        return LFS_ERR_CORRUPT;
 8011290:	2354      	movs	r3, #84	; 0x54
 8011292:	425b      	negs	r3, r3
 8011294:	e000      	b.n	8011298 <lfs_dir_commitcrc+0x2f4>
    }

    return 0;
 8011296:	2300      	movs	r3, #0
}
 8011298:	0018      	movs	r0, r3
 801129a:	46bd      	mov	sp, r7
 801129c:	b013      	add	sp, #76	; 0x4c
 801129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112a0:	000003fe 	.word	0x000003fe
 80112a4:	5ffffc08 	.word	0x5ffffc08
 80112a8:	000ffc00 	.word	0x000ffc00

080112ac <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80112ac:	b590      	push	{r4, r7, lr}
 80112ae:	b08b      	sub	sp, #44	; 0x2c
 80112b0:	af04      	add	r7, sp, #16
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80112b6:	2300      	movs	r3, #0
 80112b8:	617b      	str	r3, [r7, #20]
 80112ba:	e01b      	b.n	80112f4 <lfs_dir_alloc+0x48>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	3301      	adds	r3, #1
 80112c0:	4a39      	ldr	r2, [pc, #228]	; (80113a8 <lfs_dir_alloc+0xfc>)
 80112c2:	4013      	ands	r3, r2
 80112c4:	d504      	bpl.n	80112d0 <lfs_dir_alloc+0x24>
 80112c6:	3b01      	subs	r3, #1
 80112c8:	2202      	movs	r2, #2
 80112ca:	4252      	negs	r2, r2
 80112cc:	4313      	orrs	r3, r2
 80112ce:	3301      	adds	r3, #1
 80112d0:	009b      	lsls	r3, r3, #2
 80112d2:	683a      	ldr	r2, [r7, #0]
 80112d4:	18d2      	adds	r2, r2, r3
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	0011      	movs	r1, r2
 80112da:	0018      	movs	r0, r3
 80112dc:	f7fd ffdc 	bl	800f298 <lfs_alloc>
 80112e0:	0003      	movs	r3, r0
 80112e2:	60fb      	str	r3, [r7, #12]
        if (err) {
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d001      	beq.n	80112ee <lfs_dir_alloc+0x42>
            return err;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	e058      	b.n	80113a0 <lfs_dir_alloc+0xf4>
    for (int i = 0; i < 2; i++) {
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	3301      	adds	r3, #1
 80112f2:	617b      	str	r3, [r7, #20]
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	dde0      	ble.n	80112bc <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	2200      	movs	r2, #0
 80112fe:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8011300:	6879      	ldr	r1, [r7, #4]
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8011306:	683a      	ldr	r2, [r7, #0]
 8011308:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	2404      	movs	r4, #4
 801130e:	9403      	str	r4, [sp, #12]
 8011310:	9202      	str	r2, [sp, #8]
 8011312:	2200      	movs	r2, #0
 8011314:	9201      	str	r2, [sp, #4]
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	2304      	movs	r3, #4
 801131a:	000a      	movs	r2, r1
 801131c:	2100      	movs	r1, #0
 801131e:	f7fd f825 	bl	800e36c <lfs_bd_read>
 8011322:	0003      	movs	r3, r0
 8011324:	613b      	str	r3, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	0018      	movs	r0, r3
 801132c:	f7fc ffb4 	bl	800e298 <lfs_fromle32>
 8011330:	0002      	movs	r2, r0
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d004      	beq.n	8011346 <lfs_dir_alloc+0x9a>
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	3354      	adds	r3, #84	; 0x54
 8011340:	d001      	beq.n	8011346 <lfs_dir_alloc+0x9a>
        return err;
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	e02c      	b.n	80113a0 <lfs_dir_alloc+0xf4>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801134c:	2b00      	cmp	r3, #0
 801134e:	dd0e      	ble.n	801136e <lfs_dir_alloc+0xc2>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	689a      	ldr	r2, [r3, #8]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801135a:	3301      	adds	r3, #1
 801135c:	2101      	movs	r1, #1
 801135e:	430b      	orrs	r3, r1
 8011360:	0019      	movs	r1, r3
 8011362:	0010      	movs	r0, r2
 8011364:	f7fc ff50 	bl	800e208 <lfs_alignup>
 8011368:	0002      	movs	r2, r0
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	2204      	movs	r2, #4
 8011372:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	2201      	movs	r2, #1
 8011378:	4252      	negs	r2, r2
 801137a:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	2200      	movs	r2, #0
 8011380:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	2201      	movs	r2, #1
 8011386:	4252      	negs	r2, r2
 8011388:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	2201      	movs	r2, #1
 801138e:	4252      	negs	r2, r2
 8011390:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	2200      	movs	r2, #0
 8011396:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	2200      	movs	r2, #0
 801139c:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 801139e:	2300      	movs	r3, #0
}
 80113a0:	0018      	movs	r0, r3
 80113a2:	46bd      	mov	sp, r7
 80113a4:	b007      	add	sp, #28
 80113a6:	bd90      	pop	{r4, r7, pc}
 80113a8:	80000001 	.word	0x80000001

080113ac <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b08a      	sub	sp, #40	; 0x28
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	3348      	adds	r3, #72	; 0x48
 80113bc:	001a      	movs	r2, r3
 80113be:	6879      	ldr	r1, [r7, #4]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	0018      	movs	r0, r3
 80113c4:	f7ff fb1a 	bl	80109fc <lfs_dir_getgstate>
 80113c8:	0003      	movs	r3, r0
 80113ca:	627b      	str	r3, [r7, #36]	; 0x24
    if (err) {
 80113cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d001      	beq.n	80113d6 <lfs_dir_drop+0x2a>
        return err;
 80113d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d4:	e028      	b.n	8011428 <lfs_dir_drop+0x7c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	3318      	adds	r3, #24
 80113da:	0018      	movs	r0, r3
 80113dc:	f7fd fbf9 	bl	800ebd2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	7ddb      	ldrb	r3, [r3, #23]
 80113e4:	22c0      	movs	r2, #192	; 0xc0
 80113e6:	00d2      	lsls	r2, r2, #3
 80113e8:	4694      	mov	ip, r2
 80113ea:	4463      	add	r3, ip
 80113ec:	051b      	lsls	r3, r3, #20
 80113ee:	4a10      	ldr	r2, [pc, #64]	; (8011430 <lfs_dir_drop+0x84>)
 80113f0:	431a      	orrs	r2, r3
 80113f2:	211c      	movs	r1, #28
 80113f4:	187b      	adds	r3, r7, r1
 80113f6:	601a      	str	r2, [r3, #0]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	3318      	adds	r3, #24
 80113fc:	001a      	movs	r2, r3
 80113fe:	187b      	adds	r3, r7, r1
 8011400:	605a      	str	r2, [r3, #4]
 8011402:	187a      	adds	r2, r7, r1
 8011404:	68b9      	ldr	r1, [r7, #8]
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	2301      	movs	r3, #1
 801140a:	f001 f9f7 	bl	80127fc <lfs_dir_commit>
 801140e:	0003      	movs	r3, r0
 8011410:	627b      	str	r3, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	3318      	adds	r3, #24
 8011416:	0018      	movs	r0, r3
 8011418:	f7fd fbc1 	bl	800eb9e <lfs_pair_fromle32>
    if (err) {
 801141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141e:	2b00      	cmp	r3, #0
 8011420:	d001      	beq.n	8011426 <lfs_dir_drop+0x7a>
        return err;
 8011422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011424:	e000      	b.n	8011428 <lfs_dir_drop+0x7c>
    }

    return 0;
 8011426:	2300      	movs	r3, #0
}
 8011428:	0018      	movs	r0, r3
 801142a:	46bd      	mov	sp, r7
 801142c:	b00a      	add	sp, #40	; 0x28
 801142e:	bd80      	pop	{r7, pc}
 8011430:	000ffc08 	.word	0x000ffc08

08011434 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8011434:	b590      	push	{r4, r7, lr}
 8011436:	b093      	sub	sp, #76	; 0x4c
 8011438:	af04      	add	r7, sp, #16
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	607a      	str	r2, [r7, #4]
 8011440:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8011442:	2310      	movs	r3, #16
 8011444:	18fa      	adds	r2, r7, r3
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	0011      	movs	r1, r2
 801144a:	0018      	movs	r0, r3
 801144c:	f7ff ff2e 	bl	80112ac <lfs_dir_alloc>
 8011450:	0003      	movs	r3, r0
 8011452:	637b      	str	r3, [r7, #52]	; 0x34
    if (err) {
 8011454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011456:	2b00      	cmp	r3, #0
 8011458:	d001      	beq.n	801145e <lfs_dir_split+0x2a>
        return err;
 801145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801145c:	e047      	b.n	80114ee <lfs_dir_split+0xba>
    }

    tail.split = dir->split;
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	7dda      	ldrb	r2, [r3, #23]
 8011462:	2110      	movs	r1, #16
 8011464:	187b      	adds	r3, r7, r1
 8011466:	75da      	strb	r2, [r3, #23]
    tail.tail[0] = dir->tail[0];
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	699a      	ldr	r2, [r3, #24]
 801146c:	187b      	adds	r3, r7, r1
 801146e:	619a      	str	r2, [r3, #24]
    tail.tail[1] = dir->tail[1];
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	69da      	ldr	r2, [r3, #28]
 8011474:	187b      	adds	r3, r7, r1
 8011476:	61da      	str	r2, [r3, #28]

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8011478:	683c      	ldr	r4, [r7, #0]
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	1879      	adds	r1, r7, r1
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	2350      	movs	r3, #80	; 0x50
 8011482:	18fb      	adds	r3, r7, r3
 8011484:	881b      	ldrh	r3, [r3, #0]
 8011486:	9302      	str	r3, [sp, #8]
 8011488:	234c      	movs	r3, #76	; 0x4c
 801148a:	18fb      	adds	r3, r7, r3
 801148c:	881b      	ldrh	r3, [r3, #0]
 801148e:	9301      	str	r3, [sp, #4]
 8011490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011492:	9300      	str	r3, [sp, #0]
 8011494:	0023      	movs	r3, r4
 8011496:	f000 f87f 	bl	8011598 <lfs_dir_compact>
 801149a:	0003      	movs	r3, r0
 801149c:	633b      	str	r3, [r7, #48]	; 0x30
    if (res < 0) {
 801149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	da01      	bge.n	80114a8 <lfs_dir_split+0x74>
        return res;
 80114a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a6:	e022      	b.n	80114ee <lfs_dir_split+0xba>
    }

    dir->tail[0] = tail.pair[0];
 80114a8:	2410      	movs	r4, #16
 80114aa:	193b      	adds	r3, r7, r4
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80114b2:	193b      	adds	r3, r7, r4
 80114b4:	685a      	ldr	r2, [r3, #4]
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	2201      	movs	r2, #1
 80114be:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80114c0:	68ba      	ldr	r2, [r7, #8]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	3320      	adds	r3, #32
 80114c6:	0019      	movs	r1, r3
 80114c8:	0010      	movs	r0, r2
 80114ca:	f7fd fb14 	bl	800eaf6 <lfs_pair_cmp>
 80114ce:	1e03      	subs	r3, r0, #0
 80114d0:	d10c      	bne.n	80114ec <lfs_dir_split+0xb8>
 80114d2:	234c      	movs	r3, #76	; 0x4c
 80114d4:	18fb      	adds	r3, r7, r3
 80114d6:	881b      	ldrh	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d107      	bne.n	80114ec <lfs_dir_split+0xb8>
        lfs->root[0] = tail.pair[0];
 80114dc:	193b      	adds	r3, r7, r4
 80114de:	681a      	ldr	r2, [r3, #0]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80114e4:	193b      	adds	r3, r7, r4
 80114e6:	685a      	ldr	r2, [r3, #4]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80114ec:	2300      	movs	r3, #0
}
 80114ee:	0018      	movs	r0, r3
 80114f0:	46bd      	mov	sp, r7
 80114f2:	b00f      	add	sp, #60	; 0x3c
 80114f4:	bd90      	pop	{r4, r7, pc}

080114f6 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80114f6:	b580      	push	{r7, lr}
 80114f8:	b086      	sub	sp, #24
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	60f8      	str	r0, [r7, #12]
 80114fe:	60b9      	str	r1, [r7, #8]
 8011500:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	0018      	movs	r0, r3
 801150a:	f7fd fbf5 	bl	800ecf8 <lfs_tag_dsize>
 801150e:	0002      	movs	r2, r0
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	18d2      	adds	r2, r2, r3
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	601a      	str	r2, [r3, #0]
    return 0;
 801151a:	2300      	movs	r3, #0
}
 801151c:	0018      	movs	r0, r3
 801151e:	46bd      	mov	sp, r7
 8011520:	b006      	add	sp, #24
 8011522:	bd80      	pop	{r7, pc}

08011524 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8011524:	b580      	push	{r7, lr}
 8011526:	b086      	sub	sp, #24
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	6818      	ldr	r0, [r3, #0]
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	6859      	ldr	r1, [r3, #4]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	f7ff fca9 	bl	8010e96 <lfs_dir_commitattr>
 8011544:	0003      	movs	r3, r0
}
 8011546:	0018      	movs	r0, r3
 8011548:	46bd      	mov	sp, r7
 801154a:	b006      	add	sp, #24
 801154c:	bd80      	pop	{r7, pc}

0801154e <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 801154e:	b580      	push	{r7, lr}
 8011550:	b082      	sub	sp, #8
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801155e:	2b00      	cmp	r3, #0
 8011560:	dd10      	ble.n	8011584 <lfs_dir_needsrelocation+0x36>
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	1c5a      	adds	r2, r3, #1
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801156e:	3301      	adds	r3, #1
 8011570:	2101      	movs	r1, #1
 8011572:	430b      	orrs	r3, r1
 8011574:	0019      	movs	r1, r3
 8011576:	0010      	movs	r0, r2
 8011578:	f7ee fe72 	bl	8000260 <__aeabi_uidivmod>
 801157c:	1e0b      	subs	r3, r1, #0
 801157e:	d101      	bne.n	8011584 <lfs_dir_needsrelocation+0x36>
 8011580:	2301      	movs	r3, #1
 8011582:	e000      	b.n	8011586 <lfs_dir_needsrelocation+0x38>
 8011584:	2300      	movs	r3, #0
 8011586:	1c1a      	adds	r2, r3, #0
 8011588:	2301      	movs	r3, #1
 801158a:	4013      	ands	r3, r2
 801158c:	b2db      	uxtb	r3, r3
}
 801158e:	0018      	movs	r0, r3
 8011590:	46bd      	mov	sp, r7
 8011592:	b002      	add	sp, #8
 8011594:	bd80      	pop	{r7, pc}
	...

08011598 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8011598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801159a:	b0a5      	sub	sp, #148	; 0x94
 801159c:	af0a      	add	r7, sp, #40	; 0x28
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	607a      	str	r2, [r7, #4]
 80115a4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80115a6:	2367      	movs	r3, #103	; 0x67
 80115a8:	18fb      	adds	r3, r7, r3
 80115aa:	2200      	movs	r2, #0
 80115ac:	701a      	strb	r2, [r3, #0]
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80115ae:	2566      	movs	r5, #102	; 0x66
 80115b0:	197c      	adds	r4, r7, r5
 80115b2:	68ba      	ldr	r2, [r7, #8]
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	0011      	movs	r1, r2
 80115b8:	0018      	movs	r0, r3
 80115ba:	f7ff ffc8 	bl	801154e <lfs_dir_needsrelocation>
 80115be:	0003      	movs	r3, r0
 80115c0:	7023      	strb	r3, [r4, #0]

    // increment revision count
    dir->rev += 1;
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	689b      	ldr	r3, [r3, #8]
 80115c6:	1c5a      	adds	r2, r3, #1
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80115cc:	197b      	adds	r3, r7, r5
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00f      	beq.n	80115f4 <lfs_dir_compact+0x5c>
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	2054      	movs	r0, #84	; 0x54
 80115d8:	183b      	adds	r3, r7, r0
 80115da:	2100      	movs	r1, #0
 80115dc:	6019      	str	r1, [r3, #0]
 80115de:	183b      	adds	r3, r7, r0
 80115e0:	2101      	movs	r1, #1
 80115e2:	6059      	str	r1, [r3, #4]
 80115e4:	183b      	adds	r3, r7, r0
 80115e6:	0019      	movs	r1, r3
 80115e8:	0010      	movs	r0, r2
 80115ea:	f7fd fa84 	bl	800eaf6 <lfs_pair_cmp>
 80115ee:	1e03      	subs	r3, r0, #0
 80115f0:	d000      	beq.n	80115f4 <lfs_dir_compact+0x5c>
 80115f2:	e179      	b.n	80118e8 <lfs_dir_compact+0x350>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	685a      	ldr	r2, [r3, #4]
            struct lfs_commit commit = {
 80115f8:	213c      	movs	r1, #60	; 0x3c
 80115fa:	187b      	adds	r3, r7, r1
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	187b      	adds	r3, r7, r1
 8011600:	2200      	movs	r2, #0
 8011602:	605a      	str	r2, [r3, #4]
 8011604:	187b      	adds	r3, r7, r1
 8011606:	2201      	movs	r2, #1
 8011608:	4252      	negs	r2, r2
 801160a:	609a      	str	r2, [r3, #8]
 801160c:	187b      	adds	r3, r7, r1
 801160e:	2201      	movs	r2, #1
 8011610:	4252      	negs	r2, r2
 8011612:	60da      	str	r2, [r3, #12]
 8011614:	187b      	adds	r3, r7, r1
 8011616:	2200      	movs	r2, #0
 8011618:	611a      	str	r2, [r3, #16]
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801161e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8011620:	2b00      	cmp	r3, #0
 8011622:	d005      	beq.n	8011630 <lfs_dir_compact+0x98>
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801162a:	3b08      	subs	r3, #8
 801162c:	001a      	movs	r2, r3
 801162e:	e004      	b.n	801163a <lfs_dir_compact+0xa2>
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011634:	69db      	ldr	r3, [r3, #28]
 8011636:	3b08      	subs	r3, #8
 8011638:	001a      	movs	r2, r3
            struct lfs_commit commit = {
 801163a:	233c      	movs	r3, #60	; 0x3c
 801163c:	18fb      	adds	r3, r7, r3
 801163e:	615a      	str	r2, [r3, #20]
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	685a      	ldr	r2, [r3, #4]
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	0011      	movs	r1, r2
 8011648:	0018      	movs	r0, r3
 801164a:	f7fd f9f7 	bl	800ea3c <lfs_bd_erase>
 801164e:	0003      	movs	r3, r0
 8011650:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (err) {
 8011652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011654:	2b00      	cmp	r3, #0
 8011656:	d005      	beq.n	8011664 <lfs_dir_compact+0xcc>
                if (err == LFS_ERR_CORRUPT) {
 8011658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801165a:	3354      	adds	r3, #84	; 0x54
 801165c:	d100      	bne.n	8011660 <lfs_dir_compact+0xc8>
 801165e:	e145      	b.n	80118ec <lfs_dir_compact+0x354>
                    goto relocate;
                }
                return err;
 8011660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011662:	e199      	b.n	8011998 <lfs_dir_compact+0x400>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	0018      	movs	r0, r3
 801166a:	f7fc fe1e 	bl	800e2aa <lfs_tole32>
 801166e:	0002      	movs	r2, r0
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	3308      	adds	r3, #8
 8011678:	001a      	movs	r2, r3
            err = lfs_dir_commitprog(lfs, &commit,
 801167a:	233c      	movs	r3, #60	; 0x3c
 801167c:	18f9      	adds	r1, r7, r3
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	2304      	movs	r3, #4
 8011682:	f7ff fbd1 	bl	8010e28 <lfs_dir_commitprog>
 8011686:	0003      	movs	r3, r0
 8011688:	65fb      	str	r3, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	689b      	ldr	r3, [r3, #8]
 801168e:	0018      	movs	r0, r3
 8011690:	f7fc fe02 	bl	800e298 <lfs_fromle32>
 8011694:	0002      	movs	r2, r0
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	609a      	str	r2, [r3, #8]
            if (err) {
 801169a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801169c:	2b00      	cmp	r3, #0
 801169e:	d005      	beq.n	80116ac <lfs_dir_compact+0x114>
                if (err == LFS_ERR_CORRUPT) {
 80116a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116a2:	3354      	adds	r3, #84	; 0x54
 80116a4:	d100      	bne.n	80116a8 <lfs_dir_compact+0x110>
 80116a6:	e123      	b.n	80118f0 <lfs_dir_compact+0x358>
                    goto relocate;
                }
                return err;
 80116a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116aa:	e175      	b.n	8011998 <lfs_dir_compact+0x400>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80116ac:	267c      	movs	r6, #124	; 0x7c
 80116ae:	2208      	movs	r2, #8
 80116b0:	18b3      	adds	r3, r6, r2
 80116b2:	19db      	adds	r3, r3, r7
 80116b4:	881b      	ldrh	r3, [r3, #0]
 80116b6:	425b      	negs	r3, r3
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	b21a      	sxth	r2, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80116bc:	2534      	movs	r5, #52	; 0x34
 80116be:	197b      	adds	r3, r7, r5
 80116c0:	68f9      	ldr	r1, [r7, #12]
 80116c2:	6019      	str	r1, [r3, #0]
 80116c4:	197b      	adds	r3, r7, r5
 80116c6:	213c      	movs	r1, #60	; 0x3c
 80116c8:	1879      	adds	r1, r7, r1
 80116ca:	6059      	str	r1, [r3, #4]
            err = lfs_dir_traverse(lfs,
 80116cc:	2301      	movs	r3, #1
 80116ce:	425c      	negs	r4, r3
 80116d0:	2380      	movs	r3, #128	; 0x80
 80116d2:	18f9      	adds	r1, r7, r3
 80116d4:	6809      	ldr	r1, [r1, #0]
 80116d6:	68f8      	ldr	r0, [r7, #12]
 80116d8:	197b      	adds	r3, r7, r5
 80116da:	9308      	str	r3, [sp, #32]
 80116dc:	4bb0      	ldr	r3, [pc, #704]	; (80119a0 <lfs_dir_compact+0x408>)
 80116de:	9307      	str	r3, [sp, #28]
 80116e0:	9206      	str	r2, [sp, #24]
 80116e2:	2380      	movs	r3, #128	; 0x80
 80116e4:	2208      	movs	r2, #8
 80116e6:	189b      	adds	r3, r3, r2
 80116e8:	19db      	adds	r3, r3, r7
 80116ea:	881b      	ldrh	r3, [r3, #0]
 80116ec:	9305      	str	r3, [sp, #20]
 80116ee:	18b3      	adds	r3, r6, r2
 80116f0:	19db      	adds	r3, r3, r7
 80116f2:	881b      	ldrh	r3, [r3, #0]
 80116f4:	9304      	str	r3, [sp, #16]
 80116f6:	2300      	movs	r3, #0
 80116f8:	9303      	str	r3, [sp, #12]
 80116fa:	4baa      	ldr	r3, [pc, #680]	; (80119a4 <lfs_dir_compact+0x40c>)
 80116fc:	9302      	str	r3, [sp, #8]
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	9301      	str	r3, [sp, #4]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	0023      	movs	r3, r4
 8011708:	2200      	movs	r2, #0
 801170a:	f7fe f8a1 	bl	800f850 <lfs_dir_traverse>
 801170e:	0003      	movs	r3, r0
 8011710:	65fb      	str	r3, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8011712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011714:	2b00      	cmp	r3, #0
 8011716:	d005      	beq.n	8011724 <lfs_dir_compact+0x18c>
                if (err == LFS_ERR_CORRUPT) {
 8011718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801171a:	3354      	adds	r3, #84	; 0x54
 801171c:	d100      	bne.n	8011720 <lfs_dir_compact+0x188>
 801171e:	e0e9      	b.n	80118f4 <lfs_dir_compact+0x35c>
                    goto relocate;
                }
                return err;
 8011720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011722:	e139      	b.n	8011998 <lfs_dir_compact+0x400>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	3318      	adds	r3, #24
 8011728:	0018      	movs	r0, r3
 801172a:	f7fd f9cc 	bl	800eac6 <lfs_pair_isnull>
 801172e:	0003      	movs	r3, r0
 8011730:	001a      	movs	r2, r3
 8011732:	2301      	movs	r3, #1
 8011734:	4053      	eors	r3, r2
 8011736:	b2db      	uxtb	r3, r3
 8011738:	2b00      	cmp	r3, #0
 801173a:	d024      	beq.n	8011786 <lfs_dir_compact+0x1ee>
                lfs_pair_tole32(dir->tail);
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	3318      	adds	r3, #24
 8011740:	0018      	movs	r0, r3
 8011742:	f7fd fa46 	bl	800ebd2 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	7ddb      	ldrb	r3, [r3, #23]
 801174a:	22c0      	movs	r2, #192	; 0xc0
 801174c:	00d2      	lsls	r2, r2, #3
 801174e:	4694      	mov	ip, r2
 8011750:	4463      	add	r3, ip
 8011752:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8011754:	4a94      	ldr	r2, [pc, #592]	; (80119a8 <lfs_dir_compact+0x410>)
 8011756:	431a      	orrs	r2, r3
                        dir->tail);
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 801175c:	213c      	movs	r1, #60	; 0x3c
 801175e:	1879      	adds	r1, r7, r1
 8011760:	68f8      	ldr	r0, [r7, #12]
 8011762:	f7ff fb98 	bl	8010e96 <lfs_dir_commitattr>
 8011766:	0003      	movs	r3, r0
 8011768:	65fb      	str	r3, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	3318      	adds	r3, #24
 801176e:	0018      	movs	r0, r3
 8011770:	f7fd fa15 	bl	800eb9e <lfs_pair_fromle32>
                if (err) {
 8011774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011776:	2b00      	cmp	r3, #0
 8011778:	d005      	beq.n	8011786 <lfs_dir_compact+0x1ee>
                    if (err == LFS_ERR_CORRUPT) {
 801177a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801177c:	3354      	adds	r3, #84	; 0x54
 801177e:	d100      	bne.n	8011782 <lfs_dir_compact+0x1ea>
 8011780:	e0ba      	b.n	80118f8 <lfs_dir_compact+0x360>
                        goto relocate;
                    }
                    return err;
 8011782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011784:	e108      	b.n	8011998 <lfs_dir_compact+0x400>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8011786:	2428      	movs	r4, #40	; 0x28
 8011788:	193b      	adds	r3, r7, r4
 801178a:	0018      	movs	r0, r3
 801178c:	230c      	movs	r3, #12
 801178e:	001a      	movs	r2, r3
 8011790:	2100      	movs	r1, #0
 8011792:	f005 f850 	bl	8016836 <memset>
            if (!relocated) {
 8011796:	2367      	movs	r3, #103	; 0x67
 8011798:	18fb      	adds	r3, r7, r3
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	2201      	movs	r2, #1
 801179e:	4053      	eors	r3, r2
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d00f      	beq.n	80117c6 <lfs_dir_compact+0x22e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	333c      	adds	r3, #60	; 0x3c
 80117aa:	001a      	movs	r2, r3
 80117ac:	193b      	adds	r3, r7, r4
 80117ae:	0011      	movs	r1, r2
 80117b0:	0018      	movs	r0, r3
 80117b2:	f7fd fab6 	bl	800ed22 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	3330      	adds	r3, #48	; 0x30
 80117ba:	001a      	movs	r2, r3
 80117bc:	193b      	adds	r3, r7, r4
 80117be:	0011      	movs	r1, r2
 80117c0:	0018      	movs	r0, r3
 80117c2:	f7fd faae 	bl	800ed22 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3348      	adds	r3, #72	; 0x48
 80117ca:	001a      	movs	r2, r3
 80117cc:	2428      	movs	r4, #40	; 0x28
 80117ce:	193b      	adds	r3, r7, r4
 80117d0:	0011      	movs	r1, r2
 80117d2:	0018      	movs	r0, r3
 80117d4:	f7fd faa5 	bl	800ed22 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80117d8:	0021      	movs	r1, r4
 80117da:	187b      	adds	r3, r7, r1
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	0a9b      	lsrs	r3, r3, #10
 80117e0:	029a      	lsls	r2, r3, #10
 80117e2:	187b      	adds	r3, r7, r1
 80117e4:	601a      	str	r2, [r3, #0]

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80117e6:	187a      	adds	r2, r7, r1
 80117e8:	68b9      	ldr	r1, [r7, #8]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	0018      	movs	r0, r3
 80117ee:	f7ff f905 	bl	80109fc <lfs_dir_getgstate>
 80117f2:	0003      	movs	r3, r0
 80117f4:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (err) {
 80117f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d001      	beq.n	8011800 <lfs_dir_compact+0x268>
                return err;
 80117fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117fe:	e0cb      	b.n	8011998 <lfs_dir_compact+0x400>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8011800:	2428      	movs	r4, #40	; 0x28
 8011802:	193b      	adds	r3, r7, r4
 8011804:	0018      	movs	r0, r3
 8011806:	f7fd faaf 	bl	800ed68 <lfs_gstate_iszero>
 801180a:	0003      	movs	r3, r0
 801180c:	001a      	movs	r2, r3
 801180e:	2301      	movs	r3, #1
 8011810:	4053      	eors	r3, r2
 8011812:	b2db      	uxtb	r3, r3
 8011814:	2b00      	cmp	r3, #0
 8011816:	d014      	beq.n	8011842 <lfs_dir_compact+0x2aa>
                lfs_gstate_tole32(&delta);
 8011818:	193b      	adds	r3, r7, r4
 801181a:	0018      	movs	r0, r3
 801181c:	f7fd fb42 	bl	800eea4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8011820:	193b      	adds	r3, r7, r4
 8011822:	4a62      	ldr	r2, [pc, #392]	; (80119ac <lfs_dir_compact+0x414>)
 8011824:	213c      	movs	r1, #60	; 0x3c
 8011826:	1879      	adds	r1, r7, r1
 8011828:	68f8      	ldr	r0, [r7, #12]
 801182a:	f7ff fb34 	bl	8010e96 <lfs_dir_commitattr>
 801182e:	0003      	movs	r3, r0
 8011830:	65fb      	str	r3, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8011832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011834:	2b00      	cmp	r3, #0
 8011836:	d004      	beq.n	8011842 <lfs_dir_compact+0x2aa>
                    if (err == LFS_ERR_CORRUPT) {
 8011838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801183a:	3354      	adds	r3, #84	; 0x54
 801183c:	d05e      	beq.n	80118fc <lfs_dir_compact+0x364>
                        goto relocate;
                    }
                    return err;
 801183e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011840:	e0aa      	b.n	8011998 <lfs_dir_compact+0x400>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8011842:	233c      	movs	r3, #60	; 0x3c
 8011844:	18fa      	adds	r2, r7, r3
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	0011      	movs	r1, r2
 801184a:	0018      	movs	r0, r3
 801184c:	f7ff fbaa 	bl	8010fa4 <lfs_dir_commitcrc>
 8011850:	0003      	movs	r3, r0
 8011852:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (err) {
 8011854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011856:	2b00      	cmp	r3, #0
 8011858:	d004      	beq.n	8011864 <lfs_dir_compact+0x2cc>
                if (err == LFS_ERR_CORRUPT) {
 801185a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801185c:	3354      	adds	r3, #84	; 0x54
 801185e:	d04f      	beq.n	8011900 <lfs_dir_compact+0x368>
                    goto relocate;
                }
                return err;
 8011860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011862:	e099      	b.n	8011998 <lfs_dir_compact+0x400>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8011864:	233c      	movs	r3, #60	; 0x3c
 8011866:	18fb      	adds	r3, r7, r3
 8011868:	685a      	ldr	r2, [r3, #4]
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801186e:	699b      	ldr	r3, [r3, #24]
 8011870:	0019      	movs	r1, r3
 8011872:	0010      	movs	r0, r2
 8011874:	f7ee fcf4 	bl	8000260 <__aeabi_uidivmod>
 8011878:	1e0b      	subs	r3, r1, #0
 801187a:	d005      	beq.n	8011888 <lfs_dir_compact+0x2f0>
 801187c:	4b4c      	ldr	r3, [pc, #304]	; (80119b0 <lfs_dir_compact+0x418>)
 801187e:	4a4d      	ldr	r2, [pc, #308]	; (80119b4 <lfs_dir_compact+0x41c>)
 8011880:	494d      	ldr	r1, [pc, #308]	; (80119b8 <lfs_dir_compact+0x420>)
 8011882:	484e      	ldr	r0, [pc, #312]	; (80119bc <lfs_dir_compact+0x424>)
 8011884:	f004 ff36 	bl	80166f4 <__assert_func>
            lfs_pair_swap(dir->pair);
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	0018      	movs	r0, r3
 801188c:	f7fd f908 	bl	800eaa0 <lfs_pair_swap>
            dir->count = end - begin;
 8011890:	2380      	movs	r3, #128	; 0x80
 8011892:	2108      	movs	r1, #8
 8011894:	185b      	adds	r3, r3, r1
 8011896:	19da      	adds	r2, r3, r7
 8011898:	237c      	movs	r3, #124	; 0x7c
 801189a:	185b      	adds	r3, r3, r1
 801189c:	19db      	adds	r3, r3, r7
 801189e:	8812      	ldrh	r2, [r2, #0]
 80118a0:	881b      	ldrh	r3, [r3, #0]
 80118a2:	1ad3      	subs	r3, r2, r3
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80118aa:	213c      	movs	r1, #60	; 0x3c
 80118ac:	187b      	adds	r3, r7, r1
 80118ae:	685a      	ldr	r2, [r3, #4]
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80118b4:	187b      	adds	r3, r7, r1
 80118b6:	689a      	ldr	r2, [r3, #8]
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	3348      	adds	r3, #72	; 0x48
 80118c0:	220c      	movs	r2, #12
 80118c2:	2100      	movs	r1, #0
 80118c4:	0018      	movs	r0, r3
 80118c6:	f004 ffb6 	bl	8016836 <memset>
            if (!relocated) {
 80118ca:	2367      	movs	r3, #103	; 0x67
 80118cc:	18fb      	adds	r3, r7, r3
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	2201      	movs	r2, #1
 80118d2:	4053      	eors	r3, r2
 80118d4:	b2db      	uxtb	r3, r3
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d05a      	beq.n	8011990 <lfs_dir_compact+0x3f8>
                lfs->gdisk = lfs->gstate;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	333c      	adds	r3, #60	; 0x3c
 80118e0:	3230      	adds	r2, #48	; 0x30
 80118e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80118e4:	c313      	stmia	r3!, {r0, r1, r4}
            }
        }
        break;
 80118e6:	e053      	b.n	8011990 <lfs_dir_compact+0x3f8>
        goto relocate;
 80118e8:	46c0      	nop			; (mov r8, r8)
 80118ea:	e00a      	b.n	8011902 <lfs_dir_compact+0x36a>
                    goto relocate;
 80118ec:	46c0      	nop			; (mov r8, r8)
 80118ee:	e008      	b.n	8011902 <lfs_dir_compact+0x36a>
                    goto relocate;
 80118f0:	46c0      	nop			; (mov r8, r8)
 80118f2:	e006      	b.n	8011902 <lfs_dir_compact+0x36a>
                    goto relocate;
 80118f4:	46c0      	nop			; (mov r8, r8)
 80118f6:	e004      	b.n	8011902 <lfs_dir_compact+0x36a>
                        goto relocate;
 80118f8:	46c0      	nop			; (mov r8, r8)
 80118fa:	e002      	b.n	8011902 <lfs_dir_compact+0x36a>
                        goto relocate;
 80118fc:	46c0      	nop			; (mov r8, r8)
 80118fe:	e000      	b.n	8011902 <lfs_dir_compact+0x36a>
                    goto relocate;
 8011900:	46c0      	nop			; (mov r8, r8)

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8011902:	2367      	movs	r3, #103	; 0x67
 8011904:	18fb      	adds	r3, r7, r3
 8011906:	2201      	movs	r2, #1
 8011908:	701a      	strb	r2, [r3, #0]
        lfs_cache_drop(lfs, &lfs->pcache);
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	3310      	adds	r3, #16
 801190e:	001a      	movs	r2, r3
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	0011      	movs	r1, r2
 8011914:	0018      	movs	r0, r3
 8011916:	f7fc fd05 	bl	800e324 <lfs_cache_drop>
        if (!tired) {
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801191a:	68ba      	ldr	r2, [r7, #8]
 801191c:	2014      	movs	r0, #20
 801191e:	183b      	adds	r3, r7, r0
 8011920:	2100      	movs	r1, #0
 8011922:	6019      	str	r1, [r3, #0]
 8011924:	183b      	adds	r3, r7, r0
 8011926:	2101      	movs	r1, #1
 8011928:	6059      	str	r1, [r3, #4]
 801192a:	183b      	adds	r3, r7, r0
 801192c:	0019      	movs	r1, r3
 801192e:	0010      	movs	r0, r2
 8011930:	f7fd f8e1 	bl	800eaf6 <lfs_pair_cmp>
 8011934:	1e03      	subs	r3, r0, #0
 8011936:	d10d      	bne.n	8011954 <lfs_dir_compact+0x3bc>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	685a      	ldr	r2, [r3, #4]
 801193c:	4c20      	ldr	r4, [pc, #128]	; (80119c0 <lfs_dir_compact+0x428>)
 801193e:	491f      	ldr	r1, [pc, #124]	; (80119bc <lfs_dir_compact+0x424>)
 8011940:	4820      	ldr	r0, [pc, #128]	; (80119c4 <lfs_dir_compact+0x42c>)
 8011942:	4b21      	ldr	r3, [pc, #132]	; (80119c8 <lfs_dir_compact+0x430>)
 8011944:	9300      	str	r3, [sp, #0]
 8011946:	0013      	movs	r3, r2
 8011948:	0022      	movs	r2, r4
 801194a:	f005 fe2f 	bl	80175ac <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 801194e:	231c      	movs	r3, #28
 8011950:	425b      	negs	r3, r3
 8011952:	e021      	b.n	8011998 <lfs_dir_compact+0x400>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	1d1a      	adds	r2, r3, #4
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	0011      	movs	r1, r2
 801195c:	0018      	movs	r0, r3
 801195e:	f7fd fc9b 	bl	800f298 <lfs_alloc>
 8011962:	0003      	movs	r3, r0
 8011964:	663b      	str	r3, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8011966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011968:	2b00      	cmp	r3, #0
 801196a:	d00c      	beq.n	8011986 <lfs_dir_compact+0x3ee>
 801196c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801196e:	331c      	adds	r3, #28
 8011970:	d107      	bne.n	8011982 <lfs_dir_compact+0x3ea>
 8011972:	2366      	movs	r3, #102	; 0x66
 8011974:	18fb      	adds	r3, r7, r3
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	2201      	movs	r2, #1
 801197a:	4053      	eors	r3, r2
 801197c:	b2db      	uxtb	r3, r3
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <lfs_dir_compact+0x3ee>
            return err;
 8011982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011984:	e008      	b.n	8011998 <lfs_dir_compact+0x400>
        }

        tired = false;
 8011986:	2366      	movs	r3, #102	; 0x66
 8011988:	18fb      	adds	r3, r7, r3
 801198a:	2200      	movs	r2, #0
 801198c:	701a      	strb	r2, [r3, #0]
    while (true) {
 801198e:	e631      	b.n	80115f4 <lfs_dir_compact+0x5c>
        break;
 8011990:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8011992:	2367      	movs	r3, #103	; 0x67
 8011994:	18fb      	adds	r3, r7, r3
 8011996:	781b      	ldrb	r3, [r3, #0]
}
 8011998:	0018      	movs	r0, r3
 801199a:	46bd      	mov	sp, r7
 801199c:	b01b      	add	sp, #108	; 0x6c
 801199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119a0:	08011525 	.word	0x08011525
 80119a4:	400ffc00 	.word	0x400ffc00
 80119a8:	000ffc08 	.word	0x000ffc08
 80119ac:	7ffffc0c 	.word	0x7ffffc0c
 80119b0:	0801c698 	.word	0x0801c698
 80119b4:	0801cf5c 	.word	0x0801cf5c
 80119b8:	000007ee 	.word	0x000007ee
 80119bc:	0801c52c 	.word	0x0801c52c
 80119c0:	00000805 	.word	0x00000805
 80119c4:	0801c6c0 	.word	0x0801c6c0
 80119c8:	0801c640 	.word	0x0801c640

080119cc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80119cc:	b5b0      	push	{r4, r5, r7, lr}
 80119ce:	b096      	sub	sp, #88	; 0x58
 80119d0:	af0a      	add	r7, sp, #40	; 0x28
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	60b9      	str	r1, [r7, #8]
 80119d6:	607a      	str	r2, [r7, #4]
 80119d8:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80119da:	2344      	movs	r3, #68	; 0x44
 80119dc:	18fb      	adds	r3, r7, r3
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80119e2:	e05e      	b.n	8011aa2 <lfs_dir_splittingcompact+0xd6>
            lfs_size_t size = 0;
 80119e4:	2300      	movs	r3, #0
 80119e6:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80119e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119ee:	b292      	uxth	r2, r2
 80119f0:	4252      	negs	r2, r2
 80119f2:	b292      	uxth	r2, r2
 80119f4:	b212      	sxth	r2, r2
 80119f6:	2101      	movs	r1, #1
 80119f8:	424d      	negs	r5, r1
 80119fa:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	2118      	movs	r1, #24
 8011a00:	1879      	adds	r1, r7, r1
 8011a02:	9108      	str	r1, [sp, #32]
 8011a04:	497c      	ldr	r1, [pc, #496]	; (8011bf8 <lfs_dir_splittingcompact+0x22c>)
 8011a06:	9107      	str	r1, [sp, #28]
 8011a08:	9206      	str	r2, [sp, #24]
 8011a0a:	2248      	movs	r2, #72	; 0x48
 8011a0c:	18ba      	adds	r2, r7, r2
 8011a0e:	8812      	ldrh	r2, [r2, #0]
 8011a10:	9205      	str	r2, [sp, #20]
 8011a12:	9304      	str	r3, [sp, #16]
 8011a14:	2300      	movs	r3, #0
 8011a16:	9303      	str	r3, [sp, #12]
 8011a18:	4b78      	ldr	r3, [pc, #480]	; (8011bfc <lfs_dir_splittingcompact+0x230>)
 8011a1a:	9302      	str	r3, [sp, #8]
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	9301      	str	r3, [sp, #4]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	9300      	str	r3, [sp, #0]
 8011a24:	002b      	movs	r3, r5
 8011a26:	2200      	movs	r2, #0
 8011a28:	0021      	movs	r1, r4
 8011a2a:	f7fd ff11 	bl	800f850 <lfs_dir_traverse>
 8011a2e:	0003      	movs	r3, r0
 8011a30:	62bb      	str	r3, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8011a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d001      	beq.n	8011a3c <lfs_dir_splittingcompact+0x70>
                return err;
 8011a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a3a:	e0d9      	b.n	8011bf0 <lfs_dir_splittingcompact+0x224>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8011a3c:	2348      	movs	r3, #72	; 0x48
 8011a3e:	18fb      	adds	r3, r7, r3
 8011a40:	881a      	ldrh	r2, [r3, #0]
 8011a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a44:	1ad3      	subs	r3, r2, r3
 8011a46:	2bfe      	cmp	r3, #254	; 0xfe
 8011a48:	d822      	bhi.n	8011a90 <lfs_dir_splittingcompact+0xc4>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a4e:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8011a50:	3b28      	subs	r3, #40	; 0x28
 8011a52:	001c      	movs	r4, r3
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d004      	beq.n	8011a68 <lfs_dir_splittingcompact+0x9c>
                                ? lfs->cfg->metadata_max
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8011a64:	085a      	lsrs	r2, r3, #1
 8011a66:	e003      	b.n	8011a70 <lfs_dir_splittingcompact+0xa4>
                                : lfs->cfg->block_size)/2,
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a6c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8011a6e:	085a      	lsrs	r2, r3, #1
                            lfs->cfg->prog_size))) {
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                    && size <= lfs_min(
 8011a74:	699b      	ldr	r3, [r3, #24]
 8011a76:	0019      	movs	r1, r3
 8011a78:	0010      	movs	r0, r2
 8011a7a:	f7fc fbc5 	bl	800e208 <lfs_alignup>
 8011a7e:	0003      	movs	r3, r0
 8011a80:	0019      	movs	r1, r3
 8011a82:	0020      	movs	r0, r4
 8011a84:	f7fc fba0 	bl	800e1c8 <lfs_min>
 8011a88:	0002      	movs	r2, r0
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d210      	bcs.n	8011ab2 <lfs_dir_splittingcompact+0xe6>
                break;
            }

            split = split + ((end - split) / 2);
 8011a90:	2348      	movs	r3, #72	; 0x48
 8011a92:	18fb      	adds	r3, r7, r3
 8011a94:	881a      	ldrh	r2, [r3, #0]
 8011a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	085b      	lsrs	r3, r3, #1
 8011a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a9e:	18d3      	adds	r3, r2, r3
 8011aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8011aa2:	2348      	movs	r3, #72	; 0x48
 8011aa4:	18fb      	adds	r3, r7, r3
 8011aa6:	881a      	ldrh	r2, [r3, #0]
 8011aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aaa:	1ad3      	subs	r3, r2, r3
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d899      	bhi.n	80119e4 <lfs_dir_splittingcompact+0x18>
 8011ab0:	e000      	b.n	8011ab4 <lfs_dir_splittingcompact+0xe8>
                break;
 8011ab2:	46c0      	nop			; (mov r8, r8)
        }

        if (split == begin) {
 8011ab4:	2344      	movs	r3, #68	; 0x44
 8011ab6:	18fb      	adds	r3, r7, r3
 8011ab8:	881b      	ldrh	r3, [r3, #0]
 8011aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d031      	beq.n	8011b24 <lfs_dir_splittingcompact+0x158>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8011ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	683d      	ldr	r5, [r7, #0]
 8011ac6:	687c      	ldr	r4, [r7, #4]
 8011ac8:	68b9      	ldr	r1, [r7, #8]
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	2248      	movs	r2, #72	; 0x48
 8011ace:	18ba      	adds	r2, r7, r2
 8011ad0:	8812      	ldrh	r2, [r2, #0]
 8011ad2:	9202      	str	r2, [sp, #8]
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	002b      	movs	r3, r5
 8011adc:	0022      	movs	r2, r4
 8011ade:	f7ff fca9 	bl	8011434 <lfs_dir_split>
 8011ae2:	0003      	movs	r3, r0
 8011ae4:	627b      	str	r3, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8011ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d004      	beq.n	8011af6 <lfs_dir_splittingcompact+0x12a>
 8011aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aee:	331c      	adds	r3, #28
 8011af0:	d001      	beq.n	8011af6 <lfs_dir_splittingcompact+0x12a>
            return err;
 8011af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af4:	e07c      	b.n	8011bf0 <lfs_dir_splittingcompact+0x224>
        }

        if (err) {
 8011af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d00e      	beq.n	8011b1a <lfs_dir_splittingcompact+0x14e>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	681c      	ldr	r4, [r3, #0]
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	4d3e      	ldr	r5, [pc, #248]	; (8011c00 <lfs_dir_splittingcompact+0x234>)
 8011b06:	493f      	ldr	r1, [pc, #252]	; (8011c04 <lfs_dir_splittingcompact+0x238>)
 8011b08:	483f      	ldr	r0, [pc, #252]	; (8011c08 <lfs_dir_splittingcompact+0x23c>)
 8011b0a:	4a40      	ldr	r2, [pc, #256]	; (8011c0c <lfs_dir_splittingcompact+0x240>)
 8011b0c:	9201      	str	r2, [sp, #4]
 8011b0e:	9300      	str	r3, [sp, #0]
 8011b10:	0023      	movs	r3, r4
 8011b12:	002a      	movs	r2, r5
 8011b14:	f005 fd4a 	bl	80175ac <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8011b18:	e005      	b.n	8011b26 <lfs_dir_splittingcompact+0x15a>
        } else {
            end = split;
 8011b1a:	2348      	movs	r3, #72	; 0x48
 8011b1c:	18fb      	adds	r3, r7, r3
 8011b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b20:	801a      	strh	r2, [r3, #0]
    while (true) {
 8011b22:	e75a      	b.n	80119da <lfs_dir_splittingcompact+0xe>
            break;
 8011b24:	46c0      	nop			; (mov r8, r8)
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8011b26:	68ba      	ldr	r2, [r7, #8]
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	0011      	movs	r1, r2
 8011b2c:	0018      	movs	r0, r3
 8011b2e:	f7ff fd0e 	bl	801154e <lfs_dir_needsrelocation>
 8011b32:	1e03      	subs	r3, r0, #0
 8011b34:	d04a      	beq.n	8011bcc <lfs_dir_splittingcompact+0x200>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8011b36:	68ba      	ldr	r2, [r7, #8]
 8011b38:	2010      	movs	r0, #16
 8011b3a:	183b      	adds	r3, r7, r0
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	6019      	str	r1, [r3, #0]
 8011b40:	183b      	adds	r3, r7, r0
 8011b42:	2101      	movs	r1, #1
 8011b44:	6059      	str	r1, [r3, #4]
 8011b46:	183b      	adds	r3, r7, r0
 8011b48:	0019      	movs	r1, r3
 8011b4a:	0010      	movs	r0, r2
 8011b4c:	f7fc ffd3 	bl	800eaf6 <lfs_pair_cmp>
 8011b50:	1e03      	subs	r3, r0, #0
 8011b52:	d13b      	bne.n	8011bcc <lfs_dir_splittingcompact+0x200>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	0018      	movs	r0, r3
 8011b58:	f003 fe02 	bl	8015760 <lfs_fs_rawsize>
 8011b5c:	0003      	movs	r3, r0
 8011b5e:	623b      	str	r3, [r7, #32]
        if (size < 0) {
 8011b60:	6a3b      	ldr	r3, [r7, #32]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	da01      	bge.n	8011b6a <lfs_dir_splittingcompact+0x19e>
            return size;
 8011b66:	6a3b      	ldr	r3, [r7, #32]
 8011b68:	e042      	b.n	8011bf0 <lfs_dir_splittingcompact+0x224>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->block_count/2) {
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b6e:	085a      	lsrs	r2, r3, #1
 8011b70:	6a3b      	ldr	r3, [r7, #32]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d92a      	bls.n	8011bcc <lfs_dir_splittingcompact+0x200>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8011b76:	683c      	ldr	r4, [r7, #0]
 8011b78:	687a      	ldr	r2, [r7, #4]
 8011b7a:	68b9      	ldr	r1, [r7, #8]
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	2348      	movs	r3, #72	; 0x48
 8011b80:	18fb      	adds	r3, r7, r3
 8011b82:	881b      	ldrh	r3, [r3, #0]
 8011b84:	9302      	str	r3, [sp, #8]
 8011b86:	2344      	movs	r3, #68	; 0x44
 8011b88:	18fb      	adds	r3, r7, r3
 8011b8a:	881b      	ldrh	r3, [r3, #0]
 8011b8c:	9301      	str	r3, [sp, #4]
 8011b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b90:	9300      	str	r3, [sp, #0]
 8011b92:	0023      	movs	r3, r4
 8011b94:	f7ff fc4e 	bl	8011434 <lfs_dir_split>
 8011b98:	0003      	movs	r3, r0
 8011b9a:	61fb      	str	r3, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d004      	beq.n	8011bac <lfs_dir_splittingcompact+0x1e0>
 8011ba2:	69fb      	ldr	r3, [r7, #28]
 8011ba4:	331c      	adds	r3, #28
 8011ba6:	d001      	beq.n	8011bac <lfs_dir_splittingcompact+0x1e0>
                return err;
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	e021      	b.n	8011bf0 <lfs_dir_splittingcompact+0x224>
            }

            if (err) {
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d006      	beq.n	8011bc0 <lfs_dir_splittingcompact+0x1f4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8011bb2:	4b16      	ldr	r3, [pc, #88]	; (8011c0c <lfs_dir_splittingcompact+0x240>)
 8011bb4:	4a16      	ldr	r2, [pc, #88]	; (8011c10 <lfs_dir_splittingcompact+0x244>)
 8011bb6:	4913      	ldr	r1, [pc, #76]	; (8011c04 <lfs_dir_splittingcompact+0x238>)
 8011bb8:	4816      	ldr	r0, [pc, #88]	; (8011c14 <lfs_dir_splittingcompact+0x248>)
 8011bba:	f005 fcf7 	bl	80175ac <iprintf>
 8011bbe:	e005      	b.n	8011bcc <lfs_dir_splittingcompact+0x200>
            } else {
                end = begin;
 8011bc0:	2348      	movs	r3, #72	; 0x48
 8011bc2:	18fb      	adds	r3, r7, r3
 8011bc4:	2244      	movs	r2, #68	; 0x44
 8011bc6:	18ba      	adds	r2, r7, r2
 8011bc8:	8812      	ldrh	r2, [r2, #0]
 8011bca:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8011bcc:	683c      	ldr	r4, [r7, #0]
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	68b9      	ldr	r1, [r7, #8]
 8011bd2:	68f8      	ldr	r0, [r7, #12]
 8011bd4:	2348      	movs	r3, #72	; 0x48
 8011bd6:	18fb      	adds	r3, r7, r3
 8011bd8:	881b      	ldrh	r3, [r3, #0]
 8011bda:	9302      	str	r3, [sp, #8]
 8011bdc:	2344      	movs	r3, #68	; 0x44
 8011bde:	18fb      	adds	r3, r7, r3
 8011be0:	881b      	ldrh	r3, [r3, #0]
 8011be2:	9301      	str	r3, [sp, #4]
 8011be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011be6:	9300      	str	r3, [sp, #0]
 8011be8:	0023      	movs	r3, r4
 8011bea:	f7ff fcd5 	bl	8011598 <lfs_dir_compact>
 8011bee:	0003      	movs	r3, r0
}
 8011bf0:	0018      	movs	r0, r3
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	b00c      	add	sp, #48	; 0x30
 8011bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8011bf8:	080114f7 	.word	0x080114f7
 8011bfc:	400ffc00 	.word	0x400ffc00
 8011c00:	00000858 	.word	0x00000858
 8011c04:	0801c52c 	.word	0x0801c52c
 8011c08:	0801c6f8 	.word	0x0801c6f8
 8011c0c:	0801c640 	.word	0x0801c640
 8011c10:	00000876 	.word	0x00000876
 8011c14:	0801c728 	.word	0x0801c728

08011c18 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8011c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c1a:	b0a7      	sub	sp, #156	; 0x9c
 8011c1c:	af0a      	add	r7, sp, #40	; 0x28
 8011c1e:	60f8      	str	r0, [r7, #12]
 8011c20:	60b9      	str	r1, [r7, #8]
 8011c22:	607a      	str	r2, [r7, #4]
 8011c24:	603b      	str	r3, [r7, #0]
    int state = 0;
 8011c26:	2300      	movs	r3, #0
 8011c28:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8011c2a:	236b      	movs	r3, #107	; 0x6b
 8011c2c:	18fb      	adds	r3, r7, r3
 8011c2e:	2200      	movs	r2, #0
 8011c30:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < attrcount; i++) {
 8011c32:	2300      	movs	r3, #0
 8011c34:	667b      	str	r3, [r7, #100]	; 0x64
 8011c36:	e06c      	b.n	8011d12 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8011c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c3a:	00db      	lsls	r3, r3, #3
 8011c3c:	683a      	ldr	r2, [r7, #0]
 8011c3e:	18d3      	adds	r3, r2, r3
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	0018      	movs	r0, r3
 8011c44:	f7fd f818 	bl	800ec78 <lfs_tag_type3>
 8011c48:	0003      	movs	r3, r0
 8011c4a:	001a      	movs	r2, r3
 8011c4c:	4bd4      	ldr	r3, [pc, #848]	; (8011fa0 <lfs_dir_relocatingcommit+0x388>)
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d106      	bne.n	8011c60 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	8a9b      	ldrh	r3, [r3, #20]
 8011c56:	3301      	adds	r3, #1
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	829a      	strh	r2, [r3, #20]
 8011c5e:	e055      	b.n	8011d0c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8011c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c62:	00db      	lsls	r3, r3, #3
 8011c64:	683a      	ldr	r2, [r7, #0]
 8011c66:	18d3      	adds	r3, r2, r3
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	0018      	movs	r0, r3
 8011c6c:	f7fd f804 	bl	800ec78 <lfs_tag_type3>
 8011c70:	0003      	movs	r3, r0
 8011c72:	001a      	movs	r2, r3
 8011c74:	4bcb      	ldr	r3, [pc, #812]	; (8011fa4 <lfs_dir_relocatingcommit+0x38c>)
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d114      	bne.n	8011ca4 <lfs_dir_relocatingcommit+0x8c>
            LFS_ASSERT(dir->count > 0);
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	8a9b      	ldrh	r3, [r3, #20]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d105      	bne.n	8011c8e <lfs_dir_relocatingcommit+0x76>
 8011c82:	4bc9      	ldr	r3, [pc, #804]	; (8011fa8 <lfs_dir_relocatingcommit+0x390>)
 8011c84:	4ac9      	ldr	r2, [pc, #804]	; (8011fac <lfs_dir_relocatingcommit+0x394>)
 8011c86:	49ca      	ldr	r1, [pc, #808]	; (8011fb0 <lfs_dir_relocatingcommit+0x398>)
 8011c88:	48ca      	ldr	r0, [pc, #808]	; (8011fb4 <lfs_dir_relocatingcommit+0x39c>)
 8011c8a:	f004 fd33 	bl	80166f4 <__assert_func>
            dir->count -= 1;
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	8a9b      	ldrh	r3, [r3, #20]
 8011c92:	3b01      	subs	r3, #1
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8011c9a:	236b      	movs	r3, #107	; 0x6b
 8011c9c:	18fb      	adds	r3, r7, r3
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	701a      	strb	r2, [r3, #0]
 8011ca2:	e033      	b.n	8011d0c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8011ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ca6:	00db      	lsls	r3, r3, #3
 8011ca8:	683a      	ldr	r2, [r7, #0]
 8011caa:	18d3      	adds	r3, r2, r3
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	0018      	movs	r0, r3
 8011cb0:	f7fc ffc4 	bl	800ec3c <lfs_tag_type1>
 8011cb4:	0003      	movs	r3, r0
 8011cb6:	001a      	movs	r2, r3
 8011cb8:	23c0      	movs	r3, #192	; 0xc0
 8011cba:	00db      	lsls	r3, r3, #3
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d125      	bne.n	8011d0c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8011cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cc2:	00db      	lsls	r3, r3, #3
 8011cc4:	683a      	ldr	r2, [r7, #0]
 8011cc6:	18d3      	adds	r3, r2, r3
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	681a      	ldr	r2, [r3, #0]
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8011cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cd2:	00db      	lsls	r3, r3, #3
 8011cd4:	683a      	ldr	r2, [r7, #0]
 8011cd6:	18d3      	adds	r3, r2, r3
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	685a      	ldr	r2, [r3, #4]
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8011ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ce2:	00db      	lsls	r3, r3, #3
 8011ce4:	683a      	ldr	r2, [r7, #0]
 8011ce6:	18d3      	adds	r3, r2, r3
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	0018      	movs	r0, r3
 8011cec:	f7fc ffd2 	bl	800ec94 <lfs_tag_chunk>
 8011cf0:	0003      	movs	r3, r0
 8011cf2:	001a      	movs	r2, r3
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	4013      	ands	r3, r2
 8011cf8:	1e5a      	subs	r2, r3, #1
 8011cfa:	4193      	sbcs	r3, r2
 8011cfc:	b2da      	uxtb	r2, r3
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	3318      	adds	r3, #24
 8011d06:	0018      	movs	r0, r3
 8011d08:	f7fc ff49 	bl	800eb9e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8011d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d0e:	3301      	adds	r3, #1
 8011d10:	667b      	str	r3, [r7, #100]	; 0x64
 8011d12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011d14:	2380      	movs	r3, #128	; 0x80
 8011d16:	2108      	movs	r1, #8
 8011d18:	185b      	adds	r3, r3, r1
 8011d1a:	19db      	adds	r3, r3, r7
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	db8a      	blt.n	8011c38 <lfs_dir_relocatingcommit+0x20>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8011d22:	236b      	movs	r3, #107	; 0x6b
 8011d24:	18fb      	adds	r3, r7, r3
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d031      	beq.n	8011d90 <lfs_dir_relocatingcommit+0x178>
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	8a9b      	ldrh	r3, [r3, #20]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d12d      	bne.n	8011d90 <lfs_dir_relocatingcommit+0x178>
        LFS_ASSERT(pdir);
 8011d34:	2384      	movs	r3, #132	; 0x84
 8011d36:	185b      	adds	r3, r3, r1
 8011d38:	19db      	adds	r3, r3, r7
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d105      	bne.n	8011d4c <lfs_dir_relocatingcommit+0x134>
 8011d40:	4b9d      	ldr	r3, [pc, #628]	; (8011fb8 <lfs_dir_relocatingcommit+0x3a0>)
 8011d42:	4a9a      	ldr	r2, [pc, #616]	; (8011fac <lfs_dir_relocatingcommit+0x394>)
 8011d44:	499d      	ldr	r1, [pc, #628]	; (8011fbc <lfs_dir_relocatingcommit+0x3a4>)
 8011d46:	489b      	ldr	r0, [pc, #620]	; (8011fb4 <lfs_dir_relocatingcommit+0x39c>)
 8011d48:	f004 fcd4 	bl	80166f4 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8011d4c:	68b9      	ldr	r1, [r7, #8]
 8011d4e:	2384      	movs	r3, #132	; 0x84
 8011d50:	2208      	movs	r2, #8
 8011d52:	189b      	adds	r3, r3, r2
 8011d54:	19db      	adds	r3, r3, r7
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	0018      	movs	r0, r3
 8011d5c:	f003 f864 	bl	8014e28 <lfs_fs_pred>
 8011d60:	0003      	movs	r3, r0
 8011d62:	65bb      	str	r3, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8011d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d004      	beq.n	8011d74 <lfs_dir_relocatingcommit+0x15c>
 8011d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d6c:	3302      	adds	r3, #2
 8011d6e:	d001      	beq.n	8011d74 <lfs_dir_relocatingcommit+0x15c>
            return err;
 8011d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d72:	e228      	b.n	80121c6 <lfs_dir_relocatingcommit+0x5ae>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8011d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d76:	3302      	adds	r3, #2
 8011d78:	d00a      	beq.n	8011d90 <lfs_dir_relocatingcommit+0x178>
 8011d7a:	2384      	movs	r3, #132	; 0x84
 8011d7c:	2208      	movs	r2, #8
 8011d7e:	189b      	adds	r3, r3, r2
 8011d80:	19db      	adds	r3, r3, r7
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	7ddb      	ldrb	r3, [r3, #23]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d002      	beq.n	8011d90 <lfs_dir_relocatingcommit+0x178>
            state = LFS_OK_DROPPED;
 8011d8a:	2302      	movs	r3, #2
 8011d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8011d8e:	e142      	b.n	8012016 <lfs_dir_relocatingcommit+0x3fe>
        }
    }

    if (dir->erased) {
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	7d9b      	ldrb	r3, [r3, #22]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d100      	bne.n	8011d9a <lfs_dir_relocatingcommit+0x182>
 8011d98:	e0fc      	b.n	8011f94 <lfs_dir_relocatingcommit+0x37c>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	681a      	ldr	r2, [r3, #0]
        struct lfs_commit commit = {
 8011d9e:	2130      	movs	r1, #48	; 0x30
 8011da0:	187b      	adds	r3, r7, r1
 8011da2:	601a      	str	r2, [r3, #0]
            .off = dir->off,
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	68da      	ldr	r2, [r3, #12]
        struct lfs_commit commit = {
 8011da8:	187b      	adds	r3, r7, r1
 8011daa:	605a      	str	r2, [r3, #4]
            .ptag = dir->etag,
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	691a      	ldr	r2, [r3, #16]
        struct lfs_commit commit = {
 8011db0:	187b      	adds	r3, r7, r1
 8011db2:	609a      	str	r2, [r3, #8]
 8011db4:	187b      	adds	r3, r7, r1
 8011db6:	2201      	movs	r2, #1
 8011db8:	4252      	negs	r2, r2
 8011dba:	60da      	str	r2, [r3, #12]
            .crc = 0xffffffff,

            .begin = dir->off,
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	68da      	ldr	r2, [r3, #12]
        struct lfs_commit commit = {
 8011dc0:	187b      	adds	r3, r7, r1
 8011dc2:	611a      	str	r2, [r3, #16]
            .end = (lfs->cfg->metadata_max ?
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d005      	beq.n	8011dda <lfs_dir_relocatingcommit+0x1c2>
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011dd4:	3b08      	subs	r3, #8
 8011dd6:	001a      	movs	r2, r3
 8011dd8:	e004      	b.n	8011de4 <lfs_dir_relocatingcommit+0x1cc>
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011dde:	69db      	ldr	r3, [r3, #28]
 8011de0:	3b08      	subs	r3, #8
 8011de2:	001a      	movs	r2, r3
        struct lfs_commit commit = {
 8011de4:	2330      	movs	r3, #48	; 0x30
 8011de6:	18fb      	adds	r3, r7, r3
 8011de8:	615a      	str	r2, [r3, #20]
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	3318      	adds	r3, #24
 8011dee:	0018      	movs	r0, r3
 8011df0:	f7fc feef 	bl	800ebd2 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	68dc      	ldr	r4, [r3, #12]
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	691d      	ldr	r5, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8011dfc:	2628      	movs	r6, #40	; 0x28
 8011dfe:	19bb      	adds	r3, r7, r6
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	19bb      	adds	r3, r7, r6
 8011e06:	2230      	movs	r2, #48	; 0x30
 8011e08:	18ba      	adds	r2, r7, r2
 8011e0a:	605a      	str	r2, [r3, #4]
        int err = lfs_dir_traverse(lfs,
 8011e0c:	68b9      	ldr	r1, [r7, #8]
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	19bb      	adds	r3, r7, r6
 8011e12:	9308      	str	r3, [sp, #32]
 8011e14:	4b6a      	ldr	r3, [pc, #424]	; (8011fc0 <lfs_dir_relocatingcommit+0x3a8>)
 8011e16:	9307      	str	r3, [sp, #28]
 8011e18:	2300      	movs	r3, #0
 8011e1a:	9306      	str	r3, [sp, #24]
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	9305      	str	r3, [sp, #20]
 8011e20:	2300      	movs	r3, #0
 8011e22:	9304      	str	r3, [sp, #16]
 8011e24:	2300      	movs	r3, #0
 8011e26:	9303      	str	r3, [sp, #12]
 8011e28:	2300      	movs	r3, #0
 8011e2a:	9302      	str	r3, [sp, #8]
 8011e2c:	2380      	movs	r3, #128	; 0x80
 8011e2e:	2208      	movs	r2, #8
 8011e30:	189b      	adds	r3, r3, r2
 8011e32:	19db      	adds	r3, r3, r7
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	9301      	str	r3, [sp, #4]
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	002b      	movs	r3, r5
 8011e3e:	0022      	movs	r2, r4
 8011e40:	f7fd fd06 	bl	800f850 <lfs_dir_traverse>
 8011e44:	0003      	movs	r3, r0
 8011e46:	657b      	str	r3, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	3318      	adds	r3, #24
 8011e4c:	0018      	movs	r0, r3
 8011e4e:	f7fc fea6 	bl	800eb9e <lfs_pair_fromle32>
        if (err) {
 8011e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d009      	beq.n	8011e6c <lfs_dir_relocatingcommit+0x254>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8011e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e5a:	331c      	adds	r3, #28
 8011e5c:	d100      	bne.n	8011e60 <lfs_dir_relocatingcommit+0x248>
 8011e5e:	e09b      	b.n	8011f98 <lfs_dir_relocatingcommit+0x380>
 8011e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e62:	3354      	adds	r3, #84	; 0x54
 8011e64:	d100      	bne.n	8011e68 <lfs_dir_relocatingcommit+0x250>
 8011e66:	e097      	b.n	8011f98 <lfs_dir_relocatingcommit+0x380>
                goto compact;
            }
            return err;
 8011e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e6a:	e1ac      	b.n	80121c6 <lfs_dir_relocatingcommit+0x5ae>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8011e6c:	241c      	movs	r4, #28
 8011e6e:	193b      	adds	r3, r7, r4
 8011e70:	0018      	movs	r0, r3
 8011e72:	230c      	movs	r3, #12
 8011e74:	001a      	movs	r2, r3
 8011e76:	2100      	movs	r1, #0
 8011e78:	f004 fcdd 	bl	8016836 <memset>
        lfs_gstate_xor(&delta, &lfs->gstate);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	3330      	adds	r3, #48	; 0x30
 8011e80:	001a      	movs	r2, r3
 8011e82:	193b      	adds	r3, r7, r4
 8011e84:	0011      	movs	r1, r2
 8011e86:	0018      	movs	r0, r3
 8011e88:	f7fc ff4b 	bl	800ed22 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	333c      	adds	r3, #60	; 0x3c
 8011e90:	001a      	movs	r2, r3
 8011e92:	193b      	adds	r3, r7, r4
 8011e94:	0011      	movs	r1, r2
 8011e96:	0018      	movs	r0, r3
 8011e98:	f7fc ff43 	bl	800ed22 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	3348      	adds	r3, #72	; 0x48
 8011ea0:	001a      	movs	r2, r3
 8011ea2:	193b      	adds	r3, r7, r4
 8011ea4:	0011      	movs	r1, r2
 8011ea6:	0018      	movs	r0, r3
 8011ea8:	f7fc ff3b 	bl	800ed22 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8011eac:	193b      	adds	r3, r7, r4
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	0a9b      	lsrs	r3, r3, #10
 8011eb2:	029a      	lsls	r2, r3, #10
 8011eb4:	193b      	adds	r3, r7, r4
 8011eb6:	601a      	str	r2, [r3, #0]
        if (!lfs_gstate_iszero(&delta)) {
 8011eb8:	193b      	adds	r3, r7, r4
 8011eba:	0018      	movs	r0, r3
 8011ebc:	f7fc ff54 	bl	800ed68 <lfs_gstate_iszero>
 8011ec0:	0003      	movs	r3, r0
 8011ec2:	001a      	movs	r2, r3
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	4053      	eors	r3, r2
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d025      	beq.n	8011f1a <lfs_dir_relocatingcommit+0x302>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8011ece:	193a      	adds	r2, r7, r4
 8011ed0:	68b9      	ldr	r1, [r7, #8]
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	0018      	movs	r0, r3
 8011ed6:	f7fe fd91 	bl	80109fc <lfs_dir_getgstate>
 8011eda:	0003      	movs	r3, r0
 8011edc:	657b      	str	r3, [r7, #84]	; 0x54
            if (err) {
 8011ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d001      	beq.n	8011ee8 <lfs_dir_relocatingcommit+0x2d0>
                return err;
 8011ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ee6:	e16e      	b.n	80121c6 <lfs_dir_relocatingcommit+0x5ae>
            }

            lfs_gstate_tole32(&delta);
 8011ee8:	241c      	movs	r4, #28
 8011eea:	193b      	adds	r3, r7, r4
 8011eec:	0018      	movs	r0, r3
 8011eee:	f7fc ffd9 	bl	800eea4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8011ef2:	193b      	adds	r3, r7, r4
 8011ef4:	4a33      	ldr	r2, [pc, #204]	; (8011fc4 <lfs_dir_relocatingcommit+0x3ac>)
 8011ef6:	2130      	movs	r1, #48	; 0x30
 8011ef8:	1879      	adds	r1, r7, r1
 8011efa:	68f8      	ldr	r0, [r7, #12]
 8011efc:	f7fe ffcb 	bl	8010e96 <lfs_dir_commitattr>
 8011f00:	0003      	movs	r3, r0
 8011f02:	657b      	str	r3, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8011f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d007      	beq.n	8011f1a <lfs_dir_relocatingcommit+0x302>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8011f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f0c:	331c      	adds	r3, #28
 8011f0e:	d045      	beq.n	8011f9c <lfs_dir_relocatingcommit+0x384>
 8011f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f12:	3354      	adds	r3, #84	; 0x54
 8011f14:	d042      	beq.n	8011f9c <lfs_dir_relocatingcommit+0x384>
                    goto compact;
                }
                return err;
 8011f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f18:	e155      	b.n	80121c6 <lfs_dir_relocatingcommit+0x5ae>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8011f1a:	2330      	movs	r3, #48	; 0x30
 8011f1c:	18fa      	adds	r2, r7, r3
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	0011      	movs	r1, r2
 8011f22:	0018      	movs	r0, r3
 8011f24:	f7ff f83e 	bl	8010fa4 <lfs_dir_commitcrc>
 8011f28:	0003      	movs	r3, r0
 8011f2a:	657b      	str	r3, [r7, #84]	; 0x54
        if (err) {
 8011f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d007      	beq.n	8011f42 <lfs_dir_relocatingcommit+0x32a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8011f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f34:	331c      	adds	r3, #28
 8011f36:	d04b      	beq.n	8011fd0 <lfs_dir_relocatingcommit+0x3b8>
 8011f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f3a:	3354      	adds	r3, #84	; 0x54
 8011f3c:	d048      	beq.n	8011fd0 <lfs_dir_relocatingcommit+0x3b8>
                goto compact;
            }
            return err;
 8011f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f40:	e141      	b.n	80121c6 <lfs_dir_relocatingcommit+0x5ae>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8011f42:	2330      	movs	r3, #48	; 0x30
 8011f44:	18fb      	adds	r3, r7, r3
 8011f46:	685a      	ldr	r2, [r3, #4]
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f4c:	699b      	ldr	r3, [r3, #24]
 8011f4e:	0019      	movs	r1, r3
 8011f50:	0010      	movs	r0, r2
 8011f52:	f7ee f985 	bl	8000260 <__aeabi_uidivmod>
 8011f56:	1e0b      	subs	r3, r1, #0
 8011f58:	d005      	beq.n	8011f66 <lfs_dir_relocatingcommit+0x34e>
 8011f5a:	4b1b      	ldr	r3, [pc, #108]	; (8011fc8 <lfs_dir_relocatingcommit+0x3b0>)
 8011f5c:	4a13      	ldr	r2, [pc, #76]	; (8011fac <lfs_dir_relocatingcommit+0x394>)
 8011f5e:	491b      	ldr	r1, [pc, #108]	; (8011fcc <lfs_dir_relocatingcommit+0x3b4>)
 8011f60:	4814      	ldr	r0, [pc, #80]	; (8011fb4 <lfs_dir_relocatingcommit+0x39c>)
 8011f62:	f004 fbc7 	bl	80166f4 <__assert_func>
        dir->off = commit.off;
 8011f66:	2130      	movs	r1, #48	; 0x30
 8011f68:	187b      	adds	r3, r7, r1
 8011f6a:	685a      	ldr	r2, [r3, #4]
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8011f70:	187b      	adds	r3, r7, r1
 8011f72:	689a      	ldr	r2, [r3, #8]
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	68fa      	ldr	r2, [r7, #12]
 8011f7c:	333c      	adds	r3, #60	; 0x3c
 8011f7e:	3230      	adds	r2, #48	; 0x30
 8011f80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8011f82:	c313      	stmia	r3!, {r0, r1, r4}
        lfs->gdelta = (lfs_gstate_t){0};
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	3348      	adds	r3, #72	; 0x48
 8011f88:	220c      	movs	r2, #12
 8011f8a:	2100      	movs	r1, #0
 8011f8c:	0018      	movs	r0, r3
 8011f8e:	f004 fc52 	bl	8016836 <memset>
 8011f92:	e040      	b.n	8012016 <lfs_dir_relocatingcommit+0x3fe>

        goto fixmlist;
    }

compact:
 8011f94:	46c0      	nop			; (mov r8, r8)
 8011f96:	e01c      	b.n	8011fd2 <lfs_dir_relocatingcommit+0x3ba>
                goto compact;
 8011f98:	46c0      	nop			; (mov r8, r8)
 8011f9a:	e01a      	b.n	8011fd2 <lfs_dir_relocatingcommit+0x3ba>
                    goto compact;
 8011f9c:	46c0      	nop			; (mov r8, r8)
 8011f9e:	e018      	b.n	8011fd2 <lfs_dir_relocatingcommit+0x3ba>
 8011fa0:	00000401 	.word	0x00000401
 8011fa4:	000004ff 	.word	0x000004ff
 8011fa8:	0801c754 	.word	0x0801c754
 8011fac:	0801cf6c 	.word	0x0801cf6c
 8011fb0:	0000088e 	.word	0x0000088e
 8011fb4:	0801c52c 	.word	0x0801c52c
 8011fb8:	0801c764 	.word	0x0801c764
 8011fbc:	0000089b 	.word	0x0000089b
 8011fc0:	08011525 	.word	0x08011525
 8011fc4:	7ffffc0c 	.word	0x7ffffc0c
 8011fc8:	0801c698 	.word	0x0801c698
 8011fcc:	000008e5 	.word	0x000008e5
                goto compact;
 8011fd0:	46c0      	nop			; (mov r8, r8)
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	3310      	adds	r3, #16
 8011fd6:	001a      	movs	r2, r3
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	0011      	movs	r1, r2
 8011fdc:	0018      	movs	r0, r3
 8011fde:	f7fc f9a1 	bl	800e324 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	8a9b      	ldrh	r3, [r3, #20]
 8011fe6:	2280      	movs	r2, #128	; 0x80
 8011fe8:	2108      	movs	r1, #8
 8011fea:	1852      	adds	r2, r2, r1
 8011fec:	19d2      	adds	r2, r2, r7
 8011fee:	6814      	ldr	r4, [r2, #0]
 8011ff0:	683a      	ldr	r2, [r7, #0]
 8011ff2:	68b9      	ldr	r1, [r7, #8]
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	9302      	str	r3, [sp, #8]
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	9301      	str	r3, [sp, #4]
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	9300      	str	r3, [sp, #0]
 8012000:	0023      	movs	r3, r4
 8012002:	f7ff fce3 	bl	80119cc <lfs_dir_splittingcompact>
 8012006:	0003      	movs	r3, r0
 8012008:	66fb      	str	r3, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 801200a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801200c:	2b00      	cmp	r3, #0
 801200e:	da01      	bge.n	8012014 <lfs_dir_relocatingcommit+0x3fc>
        return state;
 8012010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012012:	e0d8      	b.n	80121c6 <lfs_dir_relocatingcommit+0x5ae>
    }

    goto fixmlist;
 8012014:	46c0      	nop			; (mov r8, r8)
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	2148      	movs	r1, #72	; 0x48
 801201c:	187b      	adds	r3, r7, r1
 801201e:	601a      	str	r2, [r3, #0]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	685a      	ldr	r2, [r3, #4]
 8012024:	187b      	adds	r3, r7, r1
 8012026:	605a      	str	r2, [r3, #4]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801202c:	663b      	str	r3, [r7, #96]	; 0x60
 801202e:	e0c5      	b.n	80121bc <lfs_dir_relocatingcommit+0x5a4>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8012030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012032:	3308      	adds	r3, #8
 8012034:	2248      	movs	r2, #72	; 0x48
 8012036:	18ba      	adds	r2, r7, r2
 8012038:	0011      	movs	r1, r2
 801203a:	0018      	movs	r0, r3
 801203c:	f7fc fd5b 	bl	800eaf6 <lfs_pair_cmp>
 8012040:	1e03      	subs	r3, r0, #0
 8012042:	d000      	beq.n	8012046 <lfs_dir_relocatingcommit+0x42e>
 8012044:	e0b7      	b.n	80121b6 <lfs_dir_relocatingcommit+0x59e>
            d->m = *dir;
 8012046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012048:	68ba      	ldr	r2, [r7, #8]
 801204a:	3308      	adds	r3, #8
 801204c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801204e:	c313      	stmia	r3!, {r0, r1, r4}
 8012050:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012052:	c313      	stmia	r3!, {r0, r1, r4}
 8012054:	ca03      	ldmia	r2!, {r0, r1}
 8012056:	c303      	stmia	r3!, {r0, r1}
            if (d->m.pair != pair) {
 8012058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801205a:	3308      	adds	r3, #8
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	429a      	cmp	r2, r3
 8012060:	d100      	bne.n	8012064 <lfs_dir_relocatingcommit+0x44c>
 8012062:	e09e      	b.n	80121a2 <lfs_dir_relocatingcommit+0x58a>
                for (int i = 0; i < attrcount; i++) {
 8012064:	2300      	movs	r3, #0
 8012066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012068:	e078      	b.n	801215c <lfs_dir_relocatingcommit+0x544>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801206a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801206c:	00db      	lsls	r3, r3, #3
 801206e:	683a      	ldr	r2, [r7, #0]
 8012070:	18d3      	adds	r3, r2, r3
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	0018      	movs	r0, r3
 8012076:	f7fc fdff 	bl	800ec78 <lfs_tag_type3>
 801207a:	0003      	movs	r3, r0
 801207c:	001a      	movs	r2, r3
 801207e:	4b54      	ldr	r3, [pc, #336]	; (80121d0 <lfs_dir_relocatingcommit+0x5b8>)
 8012080:	429a      	cmp	r2, r3
 8012082:	d115      	bne.n	80120b0 <lfs_dir_relocatingcommit+0x498>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8012084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012086:	889c      	ldrh	r4, [r3, #4]
 8012088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	683a      	ldr	r2, [r7, #0]
 801208e:	18d3      	adds	r3, r2, r3
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	0018      	movs	r0, r3
 8012094:	f7fc fe17 	bl	800ecc6 <lfs_tag_id>
 8012098:	0003      	movs	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801209a:	429c      	cmp	r4, r3
 801209c:	d108      	bne.n	80120b0 <lfs_dir_relocatingcommit+0x498>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801209e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120a0:	2201      	movs	r2, #1
 80120a2:	4252      	negs	r2, r2
 80120a4:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80120a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120a8:	2201      	movs	r2, #1
 80120aa:	4252      	negs	r2, r2
 80120ac:	60da      	str	r2, [r3, #12]
 80120ae:	e052      	b.n	8012156 <lfs_dir_relocatingcommit+0x53e>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80120b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120b2:	00db      	lsls	r3, r3, #3
 80120b4:	683a      	ldr	r2, [r7, #0]
 80120b6:	18d3      	adds	r3, r2, r3
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	0018      	movs	r0, r3
 80120bc:	f7fc fddc 	bl	800ec78 <lfs_tag_type3>
 80120c0:	0003      	movs	r3, r0
 80120c2:	001a      	movs	r2, r3
 80120c4:	4b42      	ldr	r3, [pc, #264]	; (80121d0 <lfs_dir_relocatingcommit+0x5b8>)
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d11c      	bne.n	8012104 <lfs_dir_relocatingcommit+0x4ec>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80120ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120cc:	889c      	ldrh	r4, [r3, #4]
 80120ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120d0:	00db      	lsls	r3, r3, #3
 80120d2:	683a      	ldr	r2, [r7, #0]
 80120d4:	18d3      	adds	r3, r2, r3
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	0018      	movs	r0, r3
 80120da:	f7fc fdf4 	bl	800ecc6 <lfs_tag_id>
 80120de:	0003      	movs	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80120e0:	429c      	cmp	r4, r3
 80120e2:	d90f      	bls.n	8012104 <lfs_dir_relocatingcommit+0x4ec>
                        d->id -= 1;
 80120e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120e6:	889b      	ldrh	r3, [r3, #4]
 80120e8:	3b01      	subs	r3, #1
 80120ea:	b29a      	uxth	r2, r3
 80120ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120ee:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80120f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120f2:	799b      	ldrb	r3, [r3, #6]
 80120f4:	2b02      	cmp	r3, #2
 80120f6:	d12e      	bne.n	8012156 <lfs_dir_relocatingcommit+0x53e>
                            ((lfs_dir_t*)d)->pos -= 1;
 80120f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120fc:	1e5a      	subs	r2, r3, #1
 80120fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012100:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8012102:	e028      	b.n	8012156 <lfs_dir_relocatingcommit+0x53e>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8012104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012106:	00db      	lsls	r3, r3, #3
 8012108:	683a      	ldr	r2, [r7, #0]
 801210a:	18d3      	adds	r3, r2, r3
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	0018      	movs	r0, r3
 8012110:	f7fc fdb2 	bl	800ec78 <lfs_tag_type3>
 8012114:	0003      	movs	r3, r0
 8012116:	001a      	movs	r2, r3
 8012118:	4b2e      	ldr	r3, [pc, #184]	; (80121d4 <lfs_dir_relocatingcommit+0x5bc>)
 801211a:	429a      	cmp	r2, r3
 801211c:	d11b      	bne.n	8012156 <lfs_dir_relocatingcommit+0x53e>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801211e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012120:	889c      	ldrh	r4, [r3, #4]
 8012122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012124:	00db      	lsls	r3, r3, #3
 8012126:	683a      	ldr	r2, [r7, #0]
 8012128:	18d3      	adds	r3, r2, r3
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	0018      	movs	r0, r3
 801212e:	f7fc fdca 	bl	800ecc6 <lfs_tag_id>
 8012132:	0003      	movs	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8012134:	429c      	cmp	r4, r3
 8012136:	d30e      	bcc.n	8012156 <lfs_dir_relocatingcommit+0x53e>
                        d->id += 1;
 8012138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801213a:	889b      	ldrh	r3, [r3, #4]
 801213c:	3301      	adds	r3, #1
 801213e:	b29a      	uxth	r2, r3
 8012140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012142:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8012144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012146:	799b      	ldrb	r3, [r3, #6]
 8012148:	2b02      	cmp	r3, #2
 801214a:	d104      	bne.n	8012156 <lfs_dir_relocatingcommit+0x53e>
                            ((lfs_dir_t*)d)->pos += 1;
 801214c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012150:	1c5a      	adds	r2, r3, #1
 8012152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012154:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8012156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012158:	3301      	adds	r3, #1
 801215a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801215c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801215e:	2380      	movs	r3, #128	; 0x80
 8012160:	2108      	movs	r1, #8
 8012162:	185b      	adds	r3, r3, r1
 8012164:	19db      	adds	r3, r3, r7
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	429a      	cmp	r2, r3
 801216a:	da00      	bge.n	801216e <lfs_dir_relocatingcommit+0x556>
 801216c:	e77d      	b.n	801206a <lfs_dir_relocatingcommit+0x452>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 801216e:	e018      	b.n	80121a2 <lfs_dir_relocatingcommit+0x58a>
                // we split and id is on tail now
                d->id -= d->m.count;
 8012170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012172:	889a      	ldrh	r2, [r3, #4]
 8012174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012176:	8b9b      	ldrh	r3, [r3, #28]
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	b29a      	uxth	r2, r3
 801217c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801217e:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8012180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012182:	3308      	adds	r3, #8
 8012184:	0019      	movs	r1, r3
 8012186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012188:	3320      	adds	r3, #32
 801218a:	001a      	movs	r2, r3
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	0018      	movs	r0, r3
 8012190:	f7fe fc18 	bl	80109c4 <lfs_dir_fetch>
 8012194:	0003      	movs	r3, r0
 8012196:	653b      	str	r3, [r7, #80]	; 0x50
                if (err) {
 8012198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801219a:	2b00      	cmp	r3, #0
 801219c:	d001      	beq.n	80121a2 <lfs_dir_relocatingcommit+0x58a>
                    return err;
 801219e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121a0:	e011      	b.n	80121c6 <lfs_dir_relocatingcommit+0x5ae>
            while (d->id >= d->m.count && d->m.split) {
 80121a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121a4:	889a      	ldrh	r2, [r3, #4]
 80121a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121a8:	8b9b      	ldrh	r3, [r3, #28]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d303      	bcc.n	80121b6 <lfs_dir_relocatingcommit+0x59e>
 80121ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121b0:	7fdb      	ldrb	r3, [r3, #31]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d1dc      	bne.n	8012170 <lfs_dir_relocatingcommit+0x558>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80121b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	663b      	str	r3, [r7, #96]	; 0x60
 80121bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d000      	beq.n	80121c4 <lfs_dir_relocatingcommit+0x5ac>
 80121c2:	e735      	b.n	8012030 <lfs_dir_relocatingcommit+0x418>
                }
            }
        }
    }

    return state;
 80121c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80121c6:	0018      	movs	r0, r3
 80121c8:	46bd      	mov	sp, r7
 80121ca:	b01d      	add	sp, #116	; 0x74
 80121cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ce:	46c0      	nop			; (mov r8, r8)
 80121d0:	000004ff 	.word	0x000004ff
 80121d4:	00000401 	.word	0x00000401

080121d8 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80121d8:	b5b0      	push	{r4, r5, r7, lr}
 80121da:	b0ba      	sub	sp, #232	; 0xe8
 80121dc:	af02      	add	r7, sp, #8
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
 80121e4:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121ea:	22dc      	movs	r2, #220	; 0xdc
 80121ec:	18ba      	adds	r2, r7, r2
 80121ee:	6013      	str	r3, [r2, #0]
 80121f0:	e050      	b.n	8012294 <lfs_dir_orphaningcommit+0xbc>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80121f2:	24dc      	movs	r4, #220	; 0xdc
 80121f4:	193b      	adds	r3, r7, r4
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	3308      	adds	r3, #8
 80121fa:	68ba      	ldr	r2, [r7, #8]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d043      	beq.n	8012288 <lfs_dir_orphaningcommit+0xb0>
 8012200:	193b      	adds	r3, r7, r4
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	3308      	adds	r3, #8
 8012206:	68ba      	ldr	r2, [r7, #8]
 8012208:	0011      	movs	r1, r2
 801220a:	0018      	movs	r0, r3
 801220c:	f7fc fc73 	bl	800eaf6 <lfs_pair_cmp>
 8012210:	1e03      	subs	r3, r0, #0
 8012212:	d139      	bne.n	8012288 <lfs_dir_orphaningcommit+0xb0>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8012214:	0021      	movs	r1, r4
 8012216:	187b      	adds	r3, r7, r1
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801221c:	2b01      	cmp	r3, #1
 801221e:	d133      	bne.n	8012288 <lfs_dir_orphaningcommit+0xb0>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8012220:	187b      	adds	r3, r7, r1
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012226:	2380      	movs	r3, #128	; 0x80
 8012228:	035b      	lsls	r3, r3, #13
 801222a:	4013      	ands	r3, r2
 801222c:	d02c      	beq.n	8012288 <lfs_dir_orphaningcommit+0xb0>
                f->ctz.size > lfs->cfg->cache_size) {
 801222e:	187b      	adds	r3, r7, r1
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801223a:	429a      	cmp	r2, r3
 801223c:	d924      	bls.n	8012288 <lfs_dir_orphaningcommit+0xb0>
            int err = lfs_file_outline(lfs, f);
 801223e:	187b      	adds	r3, r7, r1
 8012240:	681a      	ldr	r2, [r3, #0]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	0011      	movs	r1, r2
 8012246:	0018      	movs	r0, r3
 8012248:	f001 f950 	bl	80134ec <lfs_file_outline>
 801224c:	0003      	movs	r3, r0
 801224e:	22b4      	movs	r2, #180	; 0xb4
 8012250:	18b9      	adds	r1, r7, r2
 8012252:	600b      	str	r3, [r1, #0]
            if (err) {
 8012254:	18bb      	adds	r3, r7, r2
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d002      	beq.n	8012262 <lfs_dir_orphaningcommit+0x8a>
                return err;
 801225c:	18bb      	adds	r3, r7, r2
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	e2c1      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
            }

            err = lfs_file_flush(lfs, f);
 8012262:	23dc      	movs	r3, #220	; 0xdc
 8012264:	18fb      	adds	r3, r7, r3
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	0011      	movs	r1, r2
 801226c:	0018      	movs	r0, r3
 801226e:	f001 f965 	bl	801353c <lfs_file_flush>
 8012272:	0003      	movs	r3, r0
 8012274:	22b4      	movs	r2, #180	; 0xb4
 8012276:	18b9      	adds	r1, r7, r2
 8012278:	600b      	str	r3, [r1, #0]
            if (err) {
 801227a:	18bb      	adds	r3, r7, r2
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d002      	beq.n	8012288 <lfs_dir_orphaningcommit+0xb0>
                return err;
 8012282:	18bb      	adds	r3, r7, r2
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	e2ae      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8012288:	22dc      	movs	r2, #220	; 0xdc
 801228a:	18bb      	adds	r3, r7, r2
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	18ba      	adds	r2, r7, r2
 8012292:	6013      	str	r3, [r2, #0]
 8012294:	23dc      	movs	r3, #220	; 0xdc
 8012296:	18fb      	adds	r3, r7, r3
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d1a9      	bne.n	80121f2 <lfs_dir_orphaningcommit+0x1a>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	21ac      	movs	r1, #172	; 0xac
 80122a4:	187b      	adds	r3, r7, r1
 80122a6:	601a      	str	r2, [r3, #0]
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	685a      	ldr	r2, [r3, #4]
 80122ac:	187b      	adds	r3, r7, r1
 80122ae:	605a      	str	r2, [r3, #4]
    lfs_mdir_t ldir = *dir;
 80122b0:	218c      	movs	r1, #140	; 0x8c
 80122b2:	187b      	adds	r3, r7, r1
 80122b4:	68ba      	ldr	r2, [r7, #8]
 80122b6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80122b8:	c331      	stmia	r3!, {r0, r4, r5}
 80122ba:	ca31      	ldmia	r2!, {r0, r4, r5}
 80122bc:	c331      	stmia	r3!, {r0, r4, r5}
 80122be:	ca11      	ldmia	r2!, {r0, r4}
 80122c0:	c311      	stmia	r3!, {r0, r4}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80122c2:	68ba      	ldr	r2, [r7, #8]
 80122c4:	687c      	ldr	r4, [r7, #4]
 80122c6:	1879      	adds	r1, r7, r1
 80122c8:	68f8      	ldr	r0, [r7, #12]
 80122ca:	236c      	movs	r3, #108	; 0x6c
 80122cc:	18fb      	adds	r3, r7, r3
 80122ce:	9301      	str	r3, [sp, #4]
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	9300      	str	r3, [sp, #0]
 80122d4:	0023      	movs	r3, r4
 80122d6:	f7ff fc9f 	bl	8011c18 <lfs_dir_relocatingcommit>
 80122da:	0003      	movs	r3, r0
 80122dc:	22d8      	movs	r2, #216	; 0xd8
 80122de:	18b9      	adds	r1, r7, r2
 80122e0:	600b      	str	r3, [r1, #0]
            attrs, attrcount, &pdir);
    if (state < 0) {
 80122e2:	18bb      	adds	r3, r7, r2
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	da02      	bge.n	80122f0 <lfs_dir_orphaningcommit+0x118>
        return state;
 80122ea:	18bb      	adds	r3, r7, r2
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	e27a      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	22ac      	movs	r2, #172	; 0xac
 80122f4:	18ba      	adds	r2, r7, r2
 80122f6:	0011      	movs	r1, r2
 80122f8:	0018      	movs	r0, r3
 80122fa:	f7fc fbfc 	bl	800eaf6 <lfs_pair_cmp>
 80122fe:	1e03      	subs	r3, r0, #0
 8012300:	d108      	bne.n	8012314 <lfs_dir_orphaningcommit+0x13c>
        *dir = ldir;
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	228c      	movs	r2, #140	; 0x8c
 8012306:	18ba      	adds	r2, r7, r2
 8012308:	ca13      	ldmia	r2!, {r0, r1, r4}
 801230a:	c313      	stmia	r3!, {r0, r1, r4}
 801230c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801230e:	c313      	stmia	r3!, {r0, r1, r4}
 8012310:	ca03      	ldmia	r2!, {r0, r1}
 8012312:	c303      	stmia	r3!, {r0, r1}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8012314:	23d8      	movs	r3, #216	; 0xd8
 8012316:	18fb      	adds	r3, r7, r3
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	2b02      	cmp	r3, #2
 801231c:	d157      	bne.n	80123ce <lfs_dir_orphaningcommit+0x1f6>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	3348      	adds	r3, #72	; 0x48
 8012322:	001a      	movs	r2, r3
 8012324:	68b9      	ldr	r1, [r7, #8]
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	0018      	movs	r0, r3
 801232a:	f7fe fb67 	bl	80109fc <lfs_dir_getgstate>
 801232e:	0003      	movs	r3, r0
 8012330:	22c4      	movs	r2, #196	; 0xc4
 8012332:	18b9      	adds	r1, r7, r2
 8012334:	600b      	str	r3, [r1, #0]
        if (err) {
 8012336:	18bb      	adds	r3, r7, r2
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d002      	beq.n	8012344 <lfs_dir_orphaningcommit+0x16c>
            return err;
 801233e:	18bb      	adds	r3, r7, r2
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	e250      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8012344:	246c      	movs	r4, #108	; 0x6c
 8012346:	193b      	adds	r3, r7, r4
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	25ac      	movs	r5, #172	; 0xac
 801234c:	197b      	adds	r3, r7, r5
 801234e:	601a      	str	r2, [r3, #0]
        lpair[1] = pdir.pair[1];
 8012350:	193b      	adds	r3, r7, r4
 8012352:	685a      	ldr	r2, [r3, #4]
 8012354:	197b      	adds	r3, r7, r5
 8012356:	605a      	str	r2, [r3, #4]
        lfs_pair_tole32(dir->tail);
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	3318      	adds	r3, #24
 801235c:	0018      	movs	r0, r3
 801235e:	f7fc fc38 	bl	800ebd2 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	7ddb      	ldrb	r3, [r3, #23]
 8012366:	22c0      	movs	r2, #192	; 0xc0
 8012368:	00d2      	lsls	r2, r2, #3
 801236a:	4694      	mov	ip, r2
 801236c:	4463      	add	r3, ip
 801236e:	051b      	lsls	r3, r3, #20
 8012370:	4ad4      	ldr	r2, [pc, #848]	; (80126c4 <lfs_dir_orphaningcommit+0x4ec>)
 8012372:	431a      	orrs	r2, r3
 8012374:	2164      	movs	r1, #100	; 0x64
 8012376:	187b      	adds	r3, r7, r1
 8012378:	601a      	str	r2, [r3, #0]
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	3318      	adds	r3, #24
 801237e:	001a      	movs	r2, r3
 8012380:	187b      	adds	r3, r7, r1
 8012382:	605a      	str	r2, [r3, #4]
 8012384:	187b      	adds	r3, r7, r1
 8012386:	197a      	adds	r2, r7, r5
 8012388:	1939      	adds	r1, r7, r4
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	2400      	movs	r4, #0
 801238e:	9401      	str	r4, [sp, #4]
 8012390:	2401      	movs	r4, #1
 8012392:	9400      	str	r4, [sp, #0]
 8012394:	f7ff fc40 	bl	8011c18 <lfs_dir_relocatingcommit>
 8012398:	0003      	movs	r3, r0
 801239a:	24d8      	movs	r4, #216	; 0xd8
 801239c:	193a      	adds	r2, r7, r4
 801239e:	6013      	str	r3, [r2, #0]
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	3318      	adds	r3, #24
 80123a4:	0018      	movs	r0, r3
 80123a6:	f7fc fbfa 	bl	800eb9e <lfs_pair_fromle32>
        if (state < 0) {
 80123aa:	0022      	movs	r2, r4
 80123ac:	18bb      	adds	r3, r7, r2
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	da02      	bge.n	80123ba <lfs_dir_orphaningcommit+0x1e2>
            return state;
 80123b4:	18bb      	adds	r3, r7, r2
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	e215      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
        }

        ldir = pdir;
 80123ba:	238c      	movs	r3, #140	; 0x8c
 80123bc:	18fb      	adds	r3, r7, r3
 80123be:	226c      	movs	r2, #108	; 0x6c
 80123c0:	18ba      	adds	r2, r7, r2
 80123c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80123c4:	c313      	stmia	r3!, {r0, r1, r4}
 80123c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80123c8:	c313      	stmia	r3!, {r0, r1, r4}
 80123ca:	ca03      	ldmia	r2!, {r0, r1}
 80123cc:	c303      	stmia	r3!, {r0, r1}
    }

    // need to relocate?
    bool orphans = false;
 80123ce:	23d7      	movs	r3, #215	; 0xd7
 80123d0:	18fb      	adds	r3, r7, r3
 80123d2:	2200      	movs	r2, #0
 80123d4:	701a      	strb	r2, [r3, #0]
    while (state == LFS_OK_RELOCATED) {
 80123d6:	e1f8      	b.n	80127ca <lfs_dir_orphaningcommit+0x5f2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80123d8:	2300      	movs	r3, #0
 80123da:	22d8      	movs	r2, #216	; 0xd8
 80123dc:	18ba      	adds	r2, r7, r2
 80123de:	6013      	str	r3, [r2, #0]

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	3320      	adds	r3, #32
 80123e4:	001a      	movs	r2, r3
 80123e6:	23ac      	movs	r3, #172	; 0xac
 80123e8:	18fb      	adds	r3, r7, r3
 80123ea:	0011      	movs	r1, r2
 80123ec:	0018      	movs	r0, r3
 80123ee:	f7fc fb82 	bl	800eaf6 <lfs_pair_cmp>
 80123f2:	1e03      	subs	r3, r0, #0
 80123f4:	d108      	bne.n	8012408 <lfs_dir_orphaningcommit+0x230>
            lfs->root[0] = ldir.pair[0];
 80123f6:	218c      	movs	r1, #140	; 0x8c
 80123f8:	187b      	adds	r3, r7, r1
 80123fa:	681a      	ldr	r2, [r3, #0]
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8012400:	187b      	adds	r3, r7, r1
 8012402:	685a      	ldr	r2, [r3, #4]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801240c:	22d0      	movs	r2, #208	; 0xd0
 801240e:	18ba      	adds	r2, r7, r2
 8012410:	6013      	str	r3, [r2, #0]
 8012412:	e03a      	b.n	801248a <lfs_dir_orphaningcommit+0x2b2>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8012414:	24d0      	movs	r4, #208	; 0xd0
 8012416:	193b      	adds	r3, r7, r4
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	3308      	adds	r3, #8
 801241c:	001a      	movs	r2, r3
 801241e:	23ac      	movs	r3, #172	; 0xac
 8012420:	18fb      	adds	r3, r7, r3
 8012422:	0011      	movs	r1, r2
 8012424:	0018      	movs	r0, r3
 8012426:	f7fc fb66 	bl	800eaf6 <lfs_pair_cmp>
 801242a:	1e03      	subs	r3, r0, #0
 801242c:	d10a      	bne.n	8012444 <lfs_dir_orphaningcommit+0x26c>
                d->m.pair[0] = ldir.pair[0];
 801242e:	218c      	movs	r1, #140	; 0x8c
 8012430:	187b      	adds	r3, r7, r1
 8012432:	681a      	ldr	r2, [r3, #0]
 8012434:	193b      	adds	r3, r7, r4
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801243a:	187b      	adds	r3, r7, r1
 801243c:	685a      	ldr	r2, [r3, #4]
 801243e:	193b      	adds	r3, r7, r4
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8012444:	24d0      	movs	r4, #208	; 0xd0
 8012446:	193b      	adds	r3, r7, r4
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	799b      	ldrb	r3, [r3, #6]
 801244c:	2b02      	cmp	r3, #2
 801244e:	d116      	bne.n	801247e <lfs_dir_orphaningcommit+0x2a6>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8012450:	193b      	adds	r3, r7, r4
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	332c      	adds	r3, #44	; 0x2c
 8012456:	001a      	movs	r2, r3
 8012458:	23ac      	movs	r3, #172	; 0xac
 801245a:	18fb      	adds	r3, r7, r3
 801245c:	0011      	movs	r1, r2
 801245e:	0018      	movs	r0, r3
 8012460:	f7fc fb49 	bl	800eaf6 <lfs_pair_cmp>
 8012464:	1e03      	subs	r3, r0, #0
            if (d->type == LFS_TYPE_DIR &&
 8012466:	d10a      	bne.n	801247e <lfs_dir_orphaningcommit+0x2a6>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8012468:	218c      	movs	r1, #140	; 0x8c
 801246a:	187b      	adds	r3, r7, r1
 801246c:	681a      	ldr	r2, [r3, #0]
 801246e:	193b      	adds	r3, r7, r4
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8012474:	187b      	adds	r3, r7, r1
 8012476:	685a      	ldr	r2, [r3, #4]
 8012478:	193b      	adds	r3, r7, r4
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801247e:	22d0      	movs	r2, #208	; 0xd0
 8012480:	18bb      	adds	r3, r7, r2
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	18ba      	adds	r2, r7, r2
 8012488:	6013      	str	r3, [r2, #0]
 801248a:	23d0      	movs	r3, #208	; 0xd0
 801248c:	18fb      	adds	r3, r7, r3
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d1bf      	bne.n	8012414 <lfs_dir_orphaningcommit+0x23c>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8012494:	236c      	movs	r3, #108	; 0x6c
 8012496:	18fa      	adds	r2, r7, r3
 8012498:	23ac      	movs	r3, #172	; 0xac
 801249a:	18f9      	adds	r1, r7, r3
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	0018      	movs	r0, r3
 80124a0:	f002 fd76 	bl	8014f90 <lfs_fs_parent>
 80124a4:	0003      	movs	r3, r0
 80124a6:	22cc      	movs	r2, #204	; 0xcc
 80124a8:	18b9      	adds	r1, r7, r2
 80124aa:	600b      	str	r3, [r1, #0]
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80124ac:	18bb      	adds	r3, r7, r2
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	da06      	bge.n	80124c2 <lfs_dir_orphaningcommit+0x2ea>
 80124b4:	18bb      	adds	r3, r7, r2
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	3302      	adds	r3, #2
 80124ba:	d002      	beq.n	80124c2 <lfs_dir_orphaningcommit+0x2ea>
            return tag;
 80124bc:	18bb      	adds	r3, r7, r2
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	e191      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80124c2:	23c3      	movs	r3, #195	; 0xc3
 80124c4:	18fb      	adds	r3, r7, r3
 80124c6:	20cc      	movs	r0, #204	; 0xcc
 80124c8:	183a      	adds	r2, r7, r0
 80124ca:	6812      	ldr	r2, [r2, #0]
 80124cc:	3202      	adds	r2, #2
 80124ce:	1e51      	subs	r1, r2, #1
 80124d0:	418a      	sbcs	r2, r1
 80124d2:	701a      	strb	r2, [r3, #0]
        if (tag != LFS_ERR_NOENT) {
 80124d4:	183b      	adds	r3, r7, r0
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	3302      	adds	r3, #2
 80124da:	d100      	bne.n	80124de <lfs_dir_orphaningcommit+0x306>
 80124dc:	e0a3      	b.n	8012626 <lfs_dir_orphaningcommit+0x44e>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	2101      	movs	r1, #1
 80124e2:	0018      	movs	r0, r3
 80124e4:	f002 fdf6 	bl	80150d4 <lfs_fs_preporphans>
 80124e8:	0003      	movs	r3, r0
 80124ea:	22bc      	movs	r2, #188	; 0xbc
 80124ec:	18b9      	adds	r1, r7, r2
 80124ee:	600b      	str	r3, [r1, #0]
            if (err) {
 80124f0:	18bb      	adds	r3, r7, r2
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d002      	beq.n	80124fe <lfs_dir_orphaningcommit+0x326>
                return err;
 80124f8:	18bb      	adds	r3, r7, r2
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	e173      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80124fe:	25ca      	movs	r5, #202	; 0xca
 8012500:	197b      	adds	r3, r7, r5
 8012502:	4a71      	ldr	r2, [pc, #452]	; (80126c8 <lfs_dir_orphaningcommit+0x4f0>)
 8012504:	801a      	strh	r2, [r3, #0]
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	3330      	adds	r3, #48	; 0x30
 801250a:	226c      	movs	r2, #108	; 0x6c
 801250c:	18ba      	adds	r2, r7, r2
 801250e:	0011      	movs	r1, r2
 8012510:	0018      	movs	r0, r3
 8012512:	f7fc fc87 	bl	800ee24 <lfs_gstate_hasmovehere>
 8012516:	1e03      	subs	r3, r0, #0
 8012518:	d020      	beq.n	801255c <lfs_dir_orphaningcommit+0x384>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801251e:	197c      	adds	r4, r7, r5
 8012520:	0018      	movs	r0, r3
 8012522:	f7fc fbd0 	bl	800ecc6 <lfs_tag_id>
 8012526:	0003      	movs	r3, r0
 8012528:	8023      	strh	r3, [r4, #0]
                LFS_DEBUG("Fixing move while relocating "
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801252a:	4967      	ldr	r1, [pc, #412]	; (80126c8 <lfs_dir_orphaningcommit+0x4f0>)
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2200      	movs	r2, #0
 8012530:	0018      	movs	r0, r3
 8012532:	f002 fe25 	bl	8015180 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8012536:	24cc      	movs	r4, #204	; 0xcc
 8012538:	193b      	adds	r3, r7, r4
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	0018      	movs	r0, r3
 801253e:	f7fc fbc2 	bl	800ecc6 <lfs_tag_id>
 8012542:	0003      	movs	r3, r0
 8012544:	001a      	movs	r2, r3
 8012546:	197b      	adds	r3, r7, r5
 8012548:	881b      	ldrh	r3, [r3, #0]
 801254a:	4293      	cmp	r3, r2
 801254c:	d206      	bcs.n	801255c <lfs_dir_orphaningcommit+0x384>
                    tag -= LFS_MKTAG(0, 1, 0);
 801254e:	193b      	adds	r3, r7, r4
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	4a5e      	ldr	r2, [pc, #376]	; (80126cc <lfs_dir_orphaningcommit+0x4f4>)
 8012554:	4694      	mov	ip, r2
 8012556:	4463      	add	r3, ip
 8012558:	193a      	adds	r2, r7, r4
 801255a:	6013      	str	r3, [r2, #0]
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801255c:	216c      	movs	r1, #108	; 0x6c
 801255e:	187b      	adds	r3, r7, r1
 8012560:	681a      	ldr	r2, [r3, #0]
 8012562:	2054      	movs	r0, #84	; 0x54
 8012564:	183b      	adds	r3, r7, r0
 8012566:	601a      	str	r2, [r3, #0]
 8012568:	187b      	adds	r3, r7, r1
 801256a:	685a      	ldr	r2, [r3, #4]
 801256c:	183b      	adds	r3, r7, r0
 801256e:	605a      	str	r2, [r3, #4]
            lfs_pair_tole32(ldir.pair);
 8012570:	238c      	movs	r3, #140	; 0x8c
 8012572:	18fb      	adds	r3, r7, r3
 8012574:	0018      	movs	r0, r3
 8012576:	f7fc fb2c 	bl	800ebd2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801257a:	21ca      	movs	r1, #202	; 0xca
 801257c:	187b      	adds	r3, r7, r1
 801257e:	881b      	ldrh	r3, [r3, #0]
 8012580:	4a51      	ldr	r2, [pc, #324]	; (80126c8 <lfs_dir_orphaningcommit+0x4f0>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d005      	beq.n	8012592 <lfs_dir_orphaningcommit+0x3ba>
 8012586:	187b      	adds	r3, r7, r1
 8012588:	881b      	ldrh	r3, [r3, #0]
 801258a:	029b      	lsls	r3, r3, #10
 801258c:	4a50      	ldr	r2, [pc, #320]	; (80126d0 <lfs_dir_orphaningcommit+0x4f8>)
 801258e:	431a      	orrs	r2, r3
 8012590:	e000      	b.n	8012594 <lfs_dir_orphaningcommit+0x3bc>
 8012592:	2200      	movs	r2, #0
 8012594:	2144      	movs	r1, #68	; 0x44
 8012596:	187b      	adds	r3, r7, r1
 8012598:	601a      	str	r2, [r3, #0]
 801259a:	187b      	adds	r3, r7, r1
 801259c:	2200      	movs	r2, #0
 801259e:	605a      	str	r2, [r3, #4]
 80125a0:	23cc      	movs	r3, #204	; 0xcc
 80125a2:	18fb      	adds	r3, r7, r3
 80125a4:	681a      	ldr	r2, [r3, #0]
 80125a6:	187b      	adds	r3, r7, r1
 80125a8:	609a      	str	r2, [r3, #8]
 80125aa:	187b      	adds	r3, r7, r1
 80125ac:	258c      	movs	r5, #140	; 0x8c
 80125ae:	197a      	adds	r2, r7, r5
 80125b0:	60da      	str	r2, [r3, #12]
 80125b2:	187b      	adds	r3, r7, r1
 80125b4:	2254      	movs	r2, #84	; 0x54
 80125b6:	18ba      	adds	r2, r7, r2
 80125b8:	216c      	movs	r1, #108	; 0x6c
 80125ba:	1879      	adds	r1, r7, r1
 80125bc:	68f8      	ldr	r0, [r7, #12]
 80125be:	2400      	movs	r4, #0
 80125c0:	9401      	str	r4, [sp, #4]
 80125c2:	2402      	movs	r4, #2
 80125c4:	9400      	str	r4, [sp, #0]
 80125c6:	f7ff fb27 	bl	8011c18 <lfs_dir_relocatingcommit>
 80125ca:	0003      	movs	r3, r0
 80125cc:	24d8      	movs	r4, #216	; 0xd8
 80125ce:	193a      	adds	r2, r7, r4
 80125d0:	6013      	str	r3, [r2, #0]
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80125d2:	197b      	adds	r3, r7, r5
 80125d4:	0018      	movs	r0, r3
 80125d6:	f7fc fae2 	bl	800eb9e <lfs_pair_fromle32>
            if (state < 0) {
 80125da:	0022      	movs	r2, r4
 80125dc:	18bb      	adds	r3, r7, r2
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	da02      	bge.n	80125ea <lfs_dir_orphaningcommit+0x412>
                return state;
 80125e4:	18bb      	adds	r3, r7, r2
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	e0fd      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
            }

            if (state == LFS_OK_RELOCATED) {
 80125ea:	23d8      	movs	r3, #216	; 0xd8
 80125ec:	18fb      	adds	r3, r7, r3
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	2b01      	cmp	r3, #1
 80125f2:	d118      	bne.n	8012626 <lfs_dir_orphaningcommit+0x44e>
                lpair[0] = ppair[0];
 80125f4:	2154      	movs	r1, #84	; 0x54
 80125f6:	187b      	adds	r3, r7, r1
 80125f8:	681a      	ldr	r2, [r3, #0]
 80125fa:	20ac      	movs	r0, #172	; 0xac
 80125fc:	183b      	adds	r3, r7, r0
 80125fe:	601a      	str	r2, [r3, #0]
                lpair[1] = ppair[1];
 8012600:	187b      	adds	r3, r7, r1
 8012602:	685a      	ldr	r2, [r3, #4]
 8012604:	183b      	adds	r3, r7, r0
 8012606:	605a      	str	r2, [r3, #4]
                ldir = pdir;
 8012608:	238c      	movs	r3, #140	; 0x8c
 801260a:	18fb      	adds	r3, r7, r3
 801260c:	226c      	movs	r2, #108	; 0x6c
 801260e:	18ba      	adds	r2, r7, r2
 8012610:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012612:	c313      	stmia	r3!, {r0, r1, r4}
 8012614:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012616:	c313      	stmia	r3!, {r0, r1, r4}
 8012618:	ca03      	ldmia	r2!, {r0, r1}
 801261a:	c303      	stmia	r3!, {r0, r1}
                orphans = true;
 801261c:	23d7      	movs	r3, #215	; 0xd7
 801261e:	18fb      	adds	r3, r7, r3
 8012620:	2201      	movs	r2, #1
 8012622:	701a      	strb	r2, [r3, #0]
 8012624:	e0d1      	b.n	80127ca <lfs_dir_orphaningcommit+0x5f2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8012626:	236c      	movs	r3, #108	; 0x6c
 8012628:	18fa      	adds	r2, r7, r3
 801262a:	23ac      	movs	r3, #172	; 0xac
 801262c:	18f9      	adds	r1, r7, r3
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	0018      	movs	r0, r3
 8012632:	f002 fbf9 	bl	8014e28 <lfs_fs_pred>
 8012636:	0003      	movs	r3, r0
 8012638:	22b8      	movs	r2, #184	; 0xb8
 801263a:	18b9      	adds	r1, r7, r2
 801263c:	600b      	str	r3, [r1, #0]
        if (err && err != LFS_ERR_NOENT) {
 801263e:	18bb      	adds	r3, r7, r2
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d006      	beq.n	8012654 <lfs_dir_orphaningcommit+0x47c>
 8012646:	18bb      	adds	r3, r7, r2
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	3302      	adds	r3, #2
 801264c:	d002      	beq.n	8012654 <lfs_dir_orphaningcommit+0x47c>
            return err;
 801264e:	18bb      	adds	r3, r7, r2
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	e0c8      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8012654:	23c3      	movs	r3, #195	; 0xc3
 8012656:	18fb      	adds	r3, r7, r3
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d00a      	beq.n	8012674 <lfs_dir_orphaningcommit+0x49c>
 801265e:	23b8      	movs	r3, #184	; 0xb8
 8012660:	18fb      	adds	r3, r7, r3
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	3302      	adds	r3, #2
 8012666:	d105      	bne.n	8012674 <lfs_dir_orphaningcommit+0x49c>
 8012668:	4b1a      	ldr	r3, [pc, #104]	; (80126d4 <lfs_dir_orphaningcommit+0x4fc>)
 801266a:	4a1b      	ldr	r2, [pc, #108]	; (80126d8 <lfs_dir_orphaningcommit+0x500>)
 801266c:	491b      	ldr	r1, [pc, #108]	; (80126dc <lfs_dir_orphaningcommit+0x504>)
 801266e:	481c      	ldr	r0, [pc, #112]	; (80126e0 <lfs_dir_orphaningcommit+0x508>)
 8012670:	f004 f840 	bl	80166f4 <__assert_func>
 8012674:	22d7      	movs	r2, #215	; 0xd7
 8012676:	18bb      	adds	r3, r7, r2
 8012678:	18ba      	adds	r2, r7, r2
 801267a:	7812      	ldrb	r2, [r2, #0]
 801267c:	701a      	strb	r2, [r3, #0]

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 801267e:	24b8      	movs	r4, #184	; 0xb8
 8012680:	193b      	adds	r3, r7, r4
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	3302      	adds	r3, #2
 8012686:	d100      	bne.n	801268a <lfs_dir_orphaningcommit+0x4b2>
 8012688:	e09f      	b.n	80127ca <lfs_dir_orphaningcommit+0x5f2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	3330      	adds	r3, #48	; 0x30
 801268e:	0018      	movs	r0, r3
 8012690:	f7fc fb85 	bl	800ed9e <lfs_gstate_hasorphans>
 8012694:	1e03      	subs	r3, r0, #0
 8012696:	d025      	beq.n	80126e4 <lfs_dir_orphaningcommit+0x50c>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8012698:	23c3      	movs	r3, #195	; 0xc3
 801269a:	18fb      	adds	r3, r7, r3
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	425b      	negs	r3, r3
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	b25a      	sxtb	r2, r3
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	0011      	movs	r1, r2
 80126a8:	0018      	movs	r0, r3
 80126aa:	f002 fd13 	bl	80150d4 <lfs_fs_preporphans>
 80126ae:	0003      	movs	r3, r0
 80126b0:	193a      	adds	r2, r7, r4
 80126b2:	6013      	str	r3, [r2, #0]
                if (err) {
 80126b4:	193b      	adds	r3, r7, r4
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d013      	beq.n	80126e4 <lfs_dir_orphaningcommit+0x50c>
                    return err;
 80126bc:	193b      	adds	r3, r7, r4
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	e091      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
 80126c2:	46c0      	nop			; (mov r8, r8)
 80126c4:	000ffc08 	.word	0x000ffc08
 80126c8:	000003ff 	.word	0x000003ff
 80126cc:	fffffc00 	.word	0xfffffc00
 80126d0:	4ff00000 	.word	0x4ff00000
 80126d4:	0801c76c 	.word	0x0801c76c
 80126d8:	0801cf88 	.word	0x0801cf88
 80126dc:	000009bf 	.word	0x000009bf
 80126e0:	0801c52c 	.word	0x0801c52c
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80126e4:	24c8      	movs	r4, #200	; 0xc8
 80126e6:	193b      	adds	r3, r7, r4
 80126e8:	4a41      	ldr	r2, [pc, #260]	; (80127f0 <lfs_dir_orphaningcommit+0x618>)
 80126ea:	801a      	strh	r2, [r3, #0]
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	3330      	adds	r3, #48	; 0x30
 80126f0:	226c      	movs	r2, #108	; 0x6c
 80126f2:	18ba      	adds	r2, r7, r2
 80126f4:	0011      	movs	r1, r2
 80126f6:	0018      	movs	r0, r3
 80126f8:	f7fc fb94 	bl	800ee24 <lfs_gstate_hasmovehere>
 80126fc:	1e03      	subs	r3, r0, #0
 80126fe:	d00d      	beq.n	801271c <lfs_dir_orphaningcommit+0x544>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012704:	193c      	adds	r4, r7, r4
 8012706:	0018      	movs	r0, r3
 8012708:	f7fc fadd 	bl	800ecc6 <lfs_tag_id>
 801270c:	0003      	movs	r3, r0
 801270e:	8023      	strh	r3, [r4, #0]
                LFS_DEBUG("Fixing move while relocating "
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012710:	4937      	ldr	r1, [pc, #220]	; (80127f0 <lfs_dir_orphaningcommit+0x618>)
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	2200      	movs	r2, #0
 8012716:	0018      	movs	r0, r3
 8012718:	f002 fd32 	bl	8015180 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 801271c:	216c      	movs	r1, #108	; 0x6c
 801271e:	187b      	adds	r3, r7, r1
 8012720:	681a      	ldr	r2, [r3, #0]
 8012722:	20ac      	movs	r0, #172	; 0xac
 8012724:	183b      	adds	r3, r7, r0
 8012726:	601a      	str	r2, [r3, #0]
            lpair[1] = pdir.pair[1];
 8012728:	187b      	adds	r3, r7, r1
 801272a:	685a      	ldr	r2, [r3, #4]
 801272c:	183b      	adds	r3, r7, r0
 801272e:	605a      	str	r2, [r3, #4]
            lfs_pair_tole32(ldir.pair);
 8012730:	238c      	movs	r3, #140	; 0x8c
 8012732:	18fb      	adds	r3, r7, r3
 8012734:	0018      	movs	r0, r3
 8012736:	f7fc fa4c 	bl	800ebd2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801273a:	21c8      	movs	r1, #200	; 0xc8
 801273c:	187b      	adds	r3, r7, r1
 801273e:	881b      	ldrh	r3, [r3, #0]
 8012740:	4a2b      	ldr	r2, [pc, #172]	; (80127f0 <lfs_dir_orphaningcommit+0x618>)
 8012742:	4293      	cmp	r3, r2
 8012744:	d005      	beq.n	8012752 <lfs_dir_orphaningcommit+0x57a>
 8012746:	187b      	adds	r3, r7, r1
 8012748:	881b      	ldrh	r3, [r3, #0]
 801274a:	029b      	lsls	r3, r3, #10
 801274c:	4a29      	ldr	r2, [pc, #164]	; (80127f4 <lfs_dir_orphaningcommit+0x61c>)
 801274e:	431a      	orrs	r2, r3
 8012750:	e000      	b.n	8012754 <lfs_dir_orphaningcommit+0x57c>
 8012752:	2200      	movs	r2, #0
 8012754:	2124      	movs	r1, #36	; 0x24
 8012756:	187b      	adds	r3, r7, r1
 8012758:	601a      	str	r2, [r3, #0]
 801275a:	187b      	adds	r3, r7, r1
 801275c:	2200      	movs	r2, #0
 801275e:	605a      	str	r2, [r3, #4]
 8012760:	206c      	movs	r0, #108	; 0x6c
 8012762:	183b      	adds	r3, r7, r0
 8012764:	7ddb      	ldrb	r3, [r3, #23]
 8012766:	22c0      	movs	r2, #192	; 0xc0
 8012768:	00d2      	lsls	r2, r2, #3
 801276a:	4694      	mov	ip, r2
 801276c:	4463      	add	r3, ip
 801276e:	051b      	lsls	r3, r3, #20
 8012770:	4a21      	ldr	r2, [pc, #132]	; (80127f8 <lfs_dir_orphaningcommit+0x620>)
 8012772:	431a      	orrs	r2, r3
 8012774:	187b      	adds	r3, r7, r1
 8012776:	609a      	str	r2, [r3, #8]
 8012778:	187b      	adds	r3, r7, r1
 801277a:	258c      	movs	r5, #140	; 0x8c
 801277c:	197a      	adds	r2, r7, r5
 801277e:	60da      	str	r2, [r3, #12]
 8012780:	187b      	adds	r3, r7, r1
 8012782:	22ac      	movs	r2, #172	; 0xac
 8012784:	18ba      	adds	r2, r7, r2
 8012786:	1839      	adds	r1, r7, r0
 8012788:	68f8      	ldr	r0, [r7, #12]
 801278a:	2400      	movs	r4, #0
 801278c:	9401      	str	r4, [sp, #4]
 801278e:	2402      	movs	r4, #2
 8012790:	9400      	str	r4, [sp, #0]
 8012792:	f7ff fa41 	bl	8011c18 <lfs_dir_relocatingcommit>
 8012796:	0003      	movs	r3, r0
 8012798:	24d8      	movs	r4, #216	; 0xd8
 801279a:	193a      	adds	r2, r7, r4
 801279c:	6013      	str	r3, [r2, #0]
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 801279e:	197b      	adds	r3, r7, r5
 80127a0:	0018      	movs	r0, r3
 80127a2:	f7fc f9fc 	bl	800eb9e <lfs_pair_fromle32>
            if (state < 0) {
 80127a6:	0022      	movs	r2, r4
 80127a8:	18bb      	adds	r3, r7, r2
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	da02      	bge.n	80127b6 <lfs_dir_orphaningcommit+0x5de>
                return state;
 80127b0:	18bb      	adds	r3, r7, r2
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	e017      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
            }

            ldir = pdir;
 80127b6:	238c      	movs	r3, #140	; 0x8c
 80127b8:	18fb      	adds	r3, r7, r3
 80127ba:	226c      	movs	r2, #108	; 0x6c
 80127bc:	18ba      	adds	r2, r7, r2
 80127be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80127c0:	c313      	stmia	r3!, {r0, r1, r4}
 80127c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80127c4:	c313      	stmia	r3!, {r0, r1, r4}
 80127c6:	ca03      	ldmia	r2!, {r0, r1}
 80127c8:	c303      	stmia	r3!, {r0, r1}
    while (state == LFS_OK_RELOCATED) {
 80127ca:	23d8      	movs	r3, #216	; 0xd8
 80127cc:	18fb      	adds	r3, r7, r3
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d100      	bne.n	80127d6 <lfs_dir_orphaningcommit+0x5fe>
 80127d4:	e600      	b.n	80123d8 <lfs_dir_orphaningcommit+0x200>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80127d6:	23d7      	movs	r3, #215	; 0xd7
 80127d8:	18fb      	adds	r3, r7, r3
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d001      	beq.n	80127e4 <lfs_dir_orphaningcommit+0x60c>
 80127e0:	2303      	movs	r3, #3
 80127e2:	e000      	b.n	80127e6 <lfs_dir_orphaningcommit+0x60e>
 80127e4:	2300      	movs	r3, #0
}
 80127e6:	0018      	movs	r0, r3
 80127e8:	46bd      	mov	sp, r7
 80127ea:	b038      	add	sp, #224	; 0xe0
 80127ec:	bdb0      	pop	{r4, r5, r7, pc}
 80127ee:	46c0      	nop			; (mov r8, r8)
 80127f0:	000003ff 	.word	0x000003ff
 80127f4:	4ff00000 	.word	0x4ff00000
 80127f8:	000ffc08 	.word	0x000ffc08

080127fc <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b086      	sub	sp, #24
 8012800:	af00      	add	r7, sp, #0
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	607a      	str	r2, [r7, #4]
 8012808:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	68b9      	ldr	r1, [r7, #8]
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	f7ff fce1 	bl	80121d8 <lfs_dir_orphaningcommit>
 8012816:	0003      	movs	r3, r0
 8012818:	617b      	str	r3, [r7, #20]
    if (orphans < 0) {
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	2b00      	cmp	r3, #0
 801281e:	da01      	bge.n	8012824 <lfs_dir_commit+0x28>
        return orphans;
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	e00f      	b.n	8012844 <lfs_dir_commit+0x48>
    }

    if (orphans) {
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d00b      	beq.n	8012842 <lfs_dir_commit+0x46>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2100      	movs	r1, #0
 801282e:	0018      	movs	r0, r3
 8012830:	f002 fdba 	bl	80153a8 <lfs_fs_deorphan>
 8012834:	0003      	movs	r3, r0
 8012836:	613b      	str	r3, [r7, #16]
        if (err) {
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d001      	beq.n	8012842 <lfs_dir_commit+0x46>
            return err;
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	e000      	b.n	8012844 <lfs_dir_commit+0x48>
        }
    }

    return 0;
 8012842:	2300      	movs	r3, #0
}
 8012844:	0018      	movs	r0, r3
 8012846:	46bd      	mov	sp, r7
 8012848:	b006      	add	sp, #24
 801284a:	bd80      	pop	{r7, pc}

0801284c <lfs_dir_rawopen>:

    return 0;
}
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801284c:	b590      	push	{r4, r7, lr}
 801284e:	b08d      	sub	sp, #52	; 0x34
 8012850:	af02      	add	r7, sp, #8
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	3308      	adds	r3, #8
 801285c:	0019      	movs	r1, r3
 801285e:	1d3a      	adds	r2, r7, #4
 8012860:	68f8      	ldr	r0, [r7, #12]
 8012862:	2300      	movs	r3, #0
 8012864:	f7fe f9d4 	bl	8010c10 <lfs_dir_find>
 8012868:	0003      	movs	r3, r0
 801286a:	627b      	str	r3, [r7, #36]	; 0x24
    if (tag < 0) {
 801286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286e:	2b00      	cmp	r3, #0
 8012870:	da01      	bge.n	8012876 <lfs_dir_rawopen+0x2a>
        return tag;
 8012872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012874:	e065      	b.n	8012942 <lfs_dir_rawopen+0xf6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8012876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012878:	0018      	movs	r0, r3
 801287a:	f7fc f9fd 	bl	800ec78 <lfs_tag_type3>
 801287e:	0003      	movs	r3, r0
 8012880:	2b02      	cmp	r3, #2
 8012882:	d002      	beq.n	801288a <lfs_dir_rawopen+0x3e>
        return LFS_ERR_NOTDIR;
 8012884:	2314      	movs	r3, #20
 8012886:	425b      	negs	r3, r3
 8012888:	e05b      	b.n	8012942 <lfs_dir_rawopen+0xf6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 801288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288c:	0018      	movs	r0, r3
 801288e:	f7fc fa1a 	bl	800ecc6 <lfs_tag_id>
 8012892:	0003      	movs	r3, r0
 8012894:	001a      	movs	r2, r3
 8012896:	4b2d      	ldr	r3, [pc, #180]	; (801294c <lfs_dir_rawopen+0x100>)
 8012898:	429a      	cmp	r2, r3
 801289a:	d109      	bne.n	80128b0 <lfs_dir_rawopen+0x64>
        // handle root dir separately
        pair[0] = lfs->root[0];
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	6a1a      	ldr	r2, [r3, #32]
 80128a0:	2114      	movs	r1, #20
 80128a2:	187b      	adds	r3, r7, r1
 80128a4:	601a      	str	r2, [r3, #0]
        pair[1] = lfs->root[1];
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128aa:	187b      	adds	r3, r7, r1
 80128ac:	605a      	str	r2, [r3, #4]
 80128ae:	e020      	b.n	80128f2 <lfs_dir_rawopen+0xa6>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	3308      	adds	r3, #8
 80128b4:	001c      	movs	r4, r3
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 80128b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b8:	0018      	movs	r0, r3
 80128ba:	f7fc fa04 	bl	800ecc6 <lfs_tag_id>
 80128be:	0003      	movs	r3, r0
 80128c0:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80128c2:	4a23      	ldr	r2, [pc, #140]	; (8012950 <lfs_dir_rawopen+0x104>)
 80128c4:	431a      	orrs	r2, r3
 80128c6:	4923      	ldr	r1, [pc, #140]	; (8012954 <lfs_dir_rawopen+0x108>)
 80128c8:	68f8      	ldr	r0, [r7, #12]
 80128ca:	2314      	movs	r3, #20
 80128cc:	18fb      	adds	r3, r7, r3
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	0013      	movs	r3, r2
 80128d2:	000a      	movs	r2, r1
 80128d4:	0021      	movs	r1, r4
 80128d6:	f7fc fe57 	bl	800f588 <lfs_dir_get>
 80128da:	0003      	movs	r3, r0
 80128dc:	623b      	str	r3, [r7, #32]
        if (res < 0) {
 80128de:	6a3b      	ldr	r3, [r7, #32]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	da01      	bge.n	80128e8 <lfs_dir_rawopen+0x9c>
            return res;
 80128e4:	6a3b      	ldr	r3, [r7, #32]
 80128e6:	e02c      	b.n	8012942 <lfs_dir_rawopen+0xf6>
        }
        lfs_pair_fromle32(pair);
 80128e8:	2314      	movs	r3, #20
 80128ea:	18fb      	adds	r3, r7, r3
 80128ec:	0018      	movs	r0, r3
 80128ee:	f7fc f956 	bl	800eb9e <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	3308      	adds	r3, #8
 80128f6:	0019      	movs	r1, r3
 80128f8:	2314      	movs	r3, #20
 80128fa:	18fa      	adds	r2, r7, r3
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	0018      	movs	r0, r3
 8012900:	f7fe f860 	bl	80109c4 <lfs_dir_fetch>
 8012904:	0003      	movs	r3, r0
 8012906:	61fb      	str	r3, [r7, #28]
    if (err) {
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d001      	beq.n	8012912 <lfs_dir_rawopen+0xc6>
        return err;
 801290e:	69fb      	ldr	r3, [r7, #28]
 8012910:	e017      	b.n	8012942 <lfs_dir_rawopen+0xf6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	689a      	ldr	r2, [r3, #8]
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	68da      	ldr	r2, [r3, #12]
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	2200      	movs	r2, #0
 8012926:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	2200      	movs	r2, #0
 801292c:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	2202      	movs	r2, #2
 8012932:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8012934:	68ba      	ldr	r2, [r7, #8]
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	0011      	movs	r1, r2
 801293a:	0018      	movs	r0, r3
 801293c:	f7fc fbdd 	bl	800f0fa <lfs_mlist_append>

    return 0;
 8012940:	2300      	movs	r3, #0
}
 8012942:	0018      	movs	r0, r3
 8012944:	46bd      	mov	sp, r7
 8012946:	b00b      	add	sp, #44	; 0x2c
 8012948:	bd90      	pop	{r4, r7, pc}
 801294a:	46c0      	nop			; (mov r8, r8)
 801294c:	000003ff 	.word	0x000003ff
 8012950:	20000008 	.word	0x20000008
 8012954:	700ffc00 	.word	0x700ffc00

08012958 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8012962:	683a      	ldr	r2, [r7, #0]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	0011      	movs	r1, r2
 8012968:	0018      	movs	r0, r3
 801296a:	f7fc fba6 	bl	800f0ba <lfs_mlist_remove>

    return 0;
 801296e:	2300      	movs	r3, #0
}
 8012970:	0018      	movs	r0, r3
 8012972:	46bd      	mov	sp, r7
 8012974:	b002      	add	sp, #8
 8012976:	bd80      	pop	{r7, pc}

08012978 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8012978:	b580      	push	{r7, lr}
 801297a:	b086      	sub	sp, #24
 801297c:	af00      	add	r7, sp, #0
 801297e:	60f8      	str	r0, [r7, #12]
 8012980:	60b9      	str	r1, [r7, #8]
 8012982:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8012984:	2384      	movs	r3, #132	; 0x84
 8012986:	005a      	lsls	r2, r3, #1
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2100      	movs	r1, #0
 801298c:	0018      	movs	r0, r3
 801298e:	f003 ff52 	bl	8016836 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012996:	2b00      	cmp	r3, #0
 8012998:	d113      	bne.n	80129c2 <lfs_dir_rawread+0x4a>
        info->type = LFS_TYPE_DIR;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2202      	movs	r2, #2
 801299e:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	3308      	adds	r3, #8
 80129a4:	001a      	movs	r2, r3
 80129a6:	4b38      	ldr	r3, [pc, #224]	; (8012a88 <lfs_dir_rawread+0x110>)
 80129a8:	0010      	movs	r0, r2
 80129aa:	0019      	movs	r1, r3
 80129ac:	2302      	movs	r3, #2
 80129ae:	001a      	movs	r2, r3
 80129b0:	f003 ff38 	bl	8016824 <memcpy>
        dir->pos += 1;
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129b8:	1c5a      	adds	r2, r3, #1
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 80129be:	2301      	movs	r3, #1
 80129c0:	e05e      	b.n	8012a80 <lfs_dir_rawread+0x108>
    } else if (dir->pos == 1) {
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d113      	bne.n	80129f2 <lfs_dir_rawread+0x7a>
        info->type = LFS_TYPE_DIR;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2202      	movs	r2, #2
 80129ce:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	3308      	adds	r3, #8
 80129d4:	001a      	movs	r2, r3
 80129d6:	4b2d      	ldr	r3, [pc, #180]	; (8012a8c <lfs_dir_rawread+0x114>)
 80129d8:	0010      	movs	r0, r2
 80129da:	0019      	movs	r1, r3
 80129dc:	2303      	movs	r3, #3
 80129de:	001a      	movs	r2, r3
 80129e0:	f003 ff20 	bl	8016824 <memcpy>
        dir->pos += 1;
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129e8:	1c5a      	adds	r2, r3, #1
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 80129ee:	2301      	movs	r3, #1
 80129f0:	e046      	b.n	8012a80 <lfs_dir_rawread+0x108>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	889a      	ldrh	r2, [r3, #4]
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	8b9b      	ldrh	r3, [r3, #28]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d11c      	bne.n	8012a38 <lfs_dir_rawread+0xc0>
            if (!dir->m.split) {
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	7fdb      	ldrb	r3, [r3, #31]
 8012a02:	2201      	movs	r2, #1
 8012a04:	4053      	eors	r3, r2
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d001      	beq.n	8012a10 <lfs_dir_rawread+0x98>
                return false;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	e037      	b.n	8012a80 <lfs_dir_rawread+0x108>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	3308      	adds	r3, #8
 8012a14:	0019      	movs	r1, r3
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	3320      	adds	r3, #32
 8012a1a:	001a      	movs	r2, r3
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	0018      	movs	r0, r3
 8012a20:	f7fd ffd0 	bl	80109c4 <lfs_dir_fetch>
 8012a24:	0003      	movs	r3, r0
 8012a26:	617b      	str	r3, [r7, #20]
            if (err) {
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d001      	beq.n	8012a32 <lfs_dir_rawread+0xba>
                return err;
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	e026      	b.n	8012a80 <lfs_dir_rawread+0x108>
            }

            dir->id = 0;
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	2200      	movs	r2, #0
 8012a36:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	3308      	adds	r3, #8
 8012a3c:	0019      	movs	r1, r3
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	889a      	ldrh	r2, [r3, #4]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	f7fe f80b 	bl	8010a60 <lfs_dir_getinfo>
 8012a4a:	0003      	movs	r3, r0
 8012a4c:	613b      	str	r3, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d004      	beq.n	8012a5e <lfs_dir_rawread+0xe6>
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	3302      	adds	r3, #2
 8012a58:	d001      	beq.n	8012a5e <lfs_dir_rawread+0xe6>
            return err;
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	e010      	b.n	8012a80 <lfs_dir_rawread+0x108>
        }

        dir->id += 1;
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	889b      	ldrh	r3, [r3, #4]
 8012a62:	3301      	adds	r3, #1
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	3302      	adds	r3, #2
 8012a6e:	d100      	bne.n	8012a72 <lfs_dir_rawread+0xfa>
    while (true) {
 8012a70:	e7bf      	b.n	80129f2 <lfs_dir_rawread+0x7a>
            break;
 8012a72:	46c0      	nop			; (mov r8, r8)
        }
    }

    dir->pos += 1;
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a78:	1c5a      	adds	r2, r3, #1
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8012a7e:	2301      	movs	r3, #1
}
 8012a80:	0018      	movs	r0, r3
 8012a82:	46bd      	mov	sp, r7
 8012a84:	b006      	add	sp, #24
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	0801c690 	.word	0x0801c690
 8012a8c:	0801c694 	.word	0x0801c694

08012a90 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8012a90:	b590      	push	{r4, r7, lr}
 8012a92:	b087      	sub	sp, #28
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012aa4:	69db      	ldr	r3, [r3, #28]
 8012aa6:	3b08      	subs	r3, #8
 8012aa8:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8012aaa:	6939      	ldr	r1, [r7, #16]
 8012aac:	6978      	ldr	r0, [r7, #20]
 8012aae:	f7ed fb51 	bl	8000154 <__udivsi3>
 8012ab2:	0003      	movs	r3, r0
 8012ab4:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d101      	bne.n	8012ac0 <lfs_ctz_index+0x30>
        return 0;
 8012abc:	2300      	movs	r3, #0
 8012abe:	e01e      	b.n	8012afe <lfs_ctz_index+0x6e>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	0018      	movs	r0, r3
 8012ac6:	f7fb fbcf 	bl	800e268 <lfs_popc>
 8012aca:	0003      	movs	r3, r0
 8012acc:	3302      	adds	r3, #2
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	697a      	ldr	r2, [r7, #20]
 8012ad2:	1ad3      	subs	r3, r2, r3
 8012ad4:	6939      	ldr	r1, [r7, #16]
 8012ad6:	0018      	movs	r0, r3
 8012ad8:	f7ed fb3c 	bl	8000154 <__udivsi3>
 8012adc:	0003      	movs	r3, r0
 8012ade:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	68fa      	ldr	r2, [r7, #12]
 8012ae4:	4353      	muls	r3, r2
 8012ae6:	697a      	ldr	r2, [r7, #20]
 8012ae8:	1ad4      	subs	r4, r2, r3
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	0018      	movs	r0, r3
 8012aee:	f7fb fbbb 	bl	800e268 <lfs_popc>
 8012af2:	0003      	movs	r3, r0
 8012af4:	009b      	lsls	r3, r3, #2
 8012af6:	1ae2      	subs	r2, r4, r3
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	601a      	str	r2, [r3, #0]
    return i;
 8012afc:	68fb      	ldr	r3, [r7, #12]
}
 8012afe:	0018      	movs	r0, r3
 8012b00:	46bd      	mov	sp, r7
 8012b02:	b007      	add	sp, #28
 8012b04:	bd90      	pop	{r4, r7, pc}

08012b06 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8012b06:	b5b0      	push	{r4, r5, r7, lr}
 8012b08:	b08e      	sub	sp, #56	; 0x38
 8012b0a:	af04      	add	r7, sp, #16
 8012b0c:	60f8      	str	r0, [r7, #12]
 8012b0e:	60b9      	str	r1, [r7, #8]
 8012b10:	607a      	str	r2, [r7, #4]
 8012b12:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8012b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d108      	bne.n	8012b2c <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8012b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b1c:	2201      	movs	r2, #1
 8012b1e:	4252      	negs	r2, r2
 8012b20:	601a      	str	r2, [r3, #0]
        *off = 0;
 8012b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b24:	2200      	movs	r2, #0
 8012b26:	601a      	str	r2, [r3, #0]
        return 0;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	e05a      	b.n	8012be2 <lfs_ctz_find+0xdc>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8012b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2e:	3b01      	subs	r3, #1
 8012b30:	617b      	str	r3, [r7, #20]
 8012b32:	2314      	movs	r3, #20
 8012b34:	18fa      	adds	r2, r7, r3
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	0011      	movs	r1, r2
 8012b3a:	0018      	movs	r0, r3
 8012b3c:	f7ff ffa8 	bl	8012a90 <lfs_ctz_index>
 8012b40:	0003      	movs	r3, r0
 8012b42:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8012b44:	233c      	movs	r3, #60	; 0x3c
 8012b46:	18fa      	adds	r2, r7, r3
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	0011      	movs	r1, r2
 8012b4c:	0018      	movs	r0, r3
 8012b4e:	f7ff ff9f 	bl	8012a90 <lfs_ctz_index>
 8012b52:	0003      	movs	r3, r0
 8012b54:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8012b56:	e039      	b.n	8012bcc <lfs_ctz_find+0xc6>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8012b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b5a:	6a3b      	ldr	r3, [r7, #32]
 8012b5c:	1ad3      	subs	r3, r2, r3
 8012b5e:	3301      	adds	r3, #1
 8012b60:	0018      	movs	r0, r3
 8012b62:	f7fb fb64 	bl	800e22e <lfs_npw2>
 8012b66:	0003      	movs	r3, r0
        lfs_size_t skip = lfs_min(
 8012b68:	1e5c      	subs	r4, r3, #1
 8012b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6c:	0018      	movs	r0, r3
 8012b6e:	f7fb fb6f 	bl	800e250 <lfs_ctz>
 8012b72:	0003      	movs	r3, r0
 8012b74:	0019      	movs	r1, r3
 8012b76:	0020      	movs	r0, r4
 8012b78:	f7fb fb26 	bl	800e1c8 <lfs_min>
 8012b7c:	0003      	movs	r3, r0
 8012b7e:	61fb      	str	r3, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	69fa      	ldr	r2, [r7, #28]
 8012b84:	0092      	lsls	r2, r2, #2
 8012b86:	687d      	ldr	r5, [r7, #4]
 8012b88:	68bc      	ldr	r4, [r7, #8]
 8012b8a:	68f8      	ldr	r0, [r7, #12]
 8012b8c:	2104      	movs	r1, #4
 8012b8e:	9103      	str	r1, [sp, #12]
 8012b90:	0039      	movs	r1, r7
 8012b92:	9102      	str	r1, [sp, #8]
 8012b94:	9201      	str	r2, [sp, #4]
 8012b96:	9300      	str	r3, [sp, #0]
 8012b98:	2304      	movs	r3, #4
 8012b9a:	002a      	movs	r2, r5
 8012b9c:	0021      	movs	r1, r4
 8012b9e:	f7fb fbe5 	bl	800e36c <lfs_bd_read>
 8012ba2:	0003      	movs	r3, r0
 8012ba4:	61bb      	str	r3, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	0018      	movs	r0, r3
 8012baa:	f7fb fb75 	bl	800e298 <lfs_fromle32>
 8012bae:	0003      	movs	r3, r0
 8012bb0:	603b      	str	r3, [r7, #0]
        if (err) {
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d001      	beq.n	8012bbc <lfs_ctz_find+0xb6>
            return err;
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	e012      	b.n	8012be2 <lfs_ctz_find+0xdc>
        }

        current -= 1 << skip;
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	409a      	lsls	r2, r3
 8012bc2:	0013      	movs	r3, r2
 8012bc4:	001a      	movs	r2, r3
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc8:	1a9b      	subs	r3, r3, r2
 8012bca:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8012bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bce:	6a3b      	ldr	r3, [r7, #32]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d8c1      	bhi.n	8012b58 <lfs_ctz_find+0x52>
    }

    *block = head;
 8012bd4:	683a      	ldr	r2, [r7, #0]
 8012bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bd8:	601a      	str	r2, [r3, #0]
    *off = pos;
 8012bda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bde:	601a      	str	r2, [r3, #0]
    return 0;
 8012be0:	2300      	movs	r3, #0
}
 8012be2:	0018      	movs	r0, r3
 8012be4:	46bd      	mov	sp, r7
 8012be6:	b00a      	add	sp, #40	; 0x28
 8012be8:	bdb0      	pop	{r4, r5, r7, pc}

08012bea <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8012bea:	b5b0      	push	{r4, r5, r7, lr}
 8012bec:	b092      	sub	sp, #72	; 0x48
 8012bee:	af04      	add	r7, sp, #16
 8012bf0:	60f8      	str	r0, [r7, #12]
 8012bf2:	60b9      	str	r1, [r7, #8]
 8012bf4:	607a      	str	r2, [r7, #4]
 8012bf6:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8012bf8:	2320      	movs	r3, #32
 8012bfa:	18fa      	adds	r2, r7, r3
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	0011      	movs	r1, r2
 8012c00:	0018      	movs	r0, r3
 8012c02:	f7fc fb49 	bl	800f298 <lfs_alloc>
 8012c06:	0003      	movs	r3, r0
 8012c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (err) {
 8012c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d001      	beq.n	8012c14 <lfs_ctz_extend+0x2a>
            return err;
 8012c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c12:	e0eb      	b.n	8012dec <lfs_ctz_extend+0x202>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8012c14:	6a3a      	ldr	r2, [r7, #32]
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	0011      	movs	r1, r2
 8012c1a:	0018      	movs	r0, r3
 8012c1c:	f7fb ff0e 	bl	800ea3c <lfs_bd_erase>
 8012c20:	0003      	movs	r3, r0
 8012c22:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (err) {
 8012c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d005      	beq.n	8012c36 <lfs_ctz_extend+0x4c>
                if (err == LFS_ERR_CORRUPT) {
 8012c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c2c:	3354      	adds	r3, #84	; 0x54
 8012c2e:	d100      	bne.n	8012c32 <lfs_ctz_extend+0x48>
 8012c30:	e0d2      	b.n	8012dd8 <lfs_ctz_extend+0x1ee>
                    goto relocate;
                }
                return err;
 8012c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c34:	e0da      	b.n	8012dec <lfs_ctz_extend+0x202>
            }

            if (size == 0) {
 8012c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d107      	bne.n	8012c4c <lfs_ctz_extend+0x62>
                *block = nblock;
 8012c3c:	6a3a      	ldr	r2, [r7, #32]
 8012c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c40:	601a      	str	r2, [r3, #0]
                *off = 0;
 8012c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c44:	2200      	movs	r2, #0
 8012c46:	601a      	str	r2, [r3, #0]
                return 0;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	e0cf      	b.n	8012dec <lfs_ctz_extend+0x202>
            }

            lfs_size_t noff = size - 1;
 8012c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c4e:	3b01      	subs	r3, #1
 8012c50:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8012c52:	231c      	movs	r3, #28
 8012c54:	18fa      	adds	r2, r7, r3
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	0011      	movs	r1, r2
 8012c5a:	0018      	movs	r0, r3
 8012c5c:	f7ff ff18 	bl	8012a90 <lfs_ctz_index>
 8012c60:	0003      	movs	r3, r0
 8012c62:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	3301      	adds	r3, #1
 8012c68:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c6e:	69da      	ldr	r2, [r3, #28]
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d046      	beq.n	8012d04 <lfs_ctz_extend+0x11a>
                for (lfs_off_t i = 0; i < noff; i++) {
 8012c76:	2300      	movs	r3, #0
 8012c78:	637b      	str	r3, [r7, #52]	; 0x34
 8012c7a:	e037      	b.n	8012cec <lfs_ctz_extend+0x102>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8012c7c:	69fa      	ldr	r2, [r7, #28]
 8012c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c80:	1ad1      	subs	r1, r2, r3
 8012c82:	687a      	ldr	r2, [r7, #4]
 8012c84:	68f8      	ldr	r0, [r7, #12]
 8012c86:	2301      	movs	r3, #1
 8012c88:	9303      	str	r3, [sp, #12]
 8012c8a:	2317      	movs	r3, #23
 8012c8c:	18fb      	adds	r3, r7, r3
 8012c8e:	9302      	str	r3, [sp, #8]
 8012c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c92:	9301      	str	r3, [sp, #4]
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	9300      	str	r3, [sp, #0]
 8012c98:	000b      	movs	r3, r1
 8012c9a:	2100      	movs	r1, #0
 8012c9c:	f7fb fb66 	bl	800e36c <lfs_bd_read>
 8012ca0:	0003      	movs	r3, r0
 8012ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8012ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d001      	beq.n	8012cae <lfs_ctz_extend+0xc4>
                        return err;
 8012caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cac:	e09e      	b.n	8012dec <lfs_ctz_extend+0x202>
                    }

                    err = lfs_bd_prog(lfs,
 8012cae:	6a3b      	ldr	r3, [r7, #32]
 8012cb0:	687c      	ldr	r4, [r7, #4]
 8012cb2:	68b9      	ldr	r1, [r7, #8]
 8012cb4:	68f8      	ldr	r0, [r7, #12]
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	9203      	str	r2, [sp, #12]
 8012cba:	2217      	movs	r2, #23
 8012cbc:	18ba      	adds	r2, r7, r2
 8012cbe:	9202      	str	r2, [sp, #8]
 8012cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cc2:	9201      	str	r2, [sp, #4]
 8012cc4:	9300      	str	r3, [sp, #0]
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	0022      	movs	r2, r4
 8012cca:	f7fb fe05 	bl	800e8d8 <lfs_bd_prog>
 8012cce:	0003      	movs	r3, r0
 8012cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8012cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d006      	beq.n	8012ce6 <lfs_ctz_extend+0xfc>
                        if (err == LFS_ERR_CORRUPT) {
 8012cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cda:	3354      	adds	r3, #84	; 0x54
 8012cdc:	d101      	bne.n	8012ce2 <lfs_ctz_extend+0xf8>
                            goto relocate;
 8012cde:	46c0      	nop			; (mov r8, r8)
                    goto relocate;
 8012ce0:	e07a      	b.n	8012dd8 <lfs_ctz_extend+0x1ee>
                        }
                        return err;
 8012ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8012ce4:	e082      	b.n	8012dec <lfs_ctz_extend+0x202>
                for (lfs_off_t i = 0; i < noff; i++) {
 8012ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ce8:	3301      	adds	r3, #1
 8012cea:	637b      	str	r3, [r7, #52]	; 0x34
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d3c3      	bcc.n	8012c7c <lfs_ctz_extend+0x92>
                    }
                }

                *block = nblock;
 8012cf4:	6a3a      	ldr	r2, [r7, #32]
 8012cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cf8:	601a      	str	r2, [r3, #0]
                *off = noff;
 8012cfa:	69fa      	ldr	r2, [r7, #28]
 8012cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cfe:	601a      	str	r2, [r3, #0]
                return 0;
 8012d00:	2300      	movs	r3, #0
 8012d02:	e073      	b.n	8012dec <lfs_ctz_extend+0x202>
            }

            // append block
            index += 1;
 8012d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d06:	3301      	adds	r3, #1
 8012d08:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8012d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0c:	0018      	movs	r0, r3
 8012d0e:	f7fb fa9f 	bl	800e250 <lfs_ctz>
 8012d12:	0003      	movs	r3, r0
 8012d14:	3301      	adds	r3, #1
 8012d16:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8012d20:	e04d      	b.n	8012dbe <lfs_ctz_extend+0x1d4>
                nhead = lfs_tole32(nhead);
 8012d22:	69bb      	ldr	r3, [r7, #24]
 8012d24:	0018      	movs	r0, r3
 8012d26:	f7fb fac0 	bl	800e2aa <lfs_tole32>
 8012d2a:	0003      	movs	r3, r0
 8012d2c:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8012d2e:	6a3b      	ldr	r3, [r7, #32]
 8012d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d32:	0092      	lsls	r2, r2, #2
 8012d34:	687d      	ldr	r5, [r7, #4]
 8012d36:	68bc      	ldr	r4, [r7, #8]
 8012d38:	68f8      	ldr	r0, [r7, #12]
 8012d3a:	2104      	movs	r1, #4
 8012d3c:	9103      	str	r1, [sp, #12]
 8012d3e:	2118      	movs	r1, #24
 8012d40:	1879      	adds	r1, r7, r1
 8012d42:	9102      	str	r1, [sp, #8]
 8012d44:	9201      	str	r2, [sp, #4]
 8012d46:	9300      	str	r3, [sp, #0]
 8012d48:	2301      	movs	r3, #1
 8012d4a:	002a      	movs	r2, r5
 8012d4c:	0021      	movs	r1, r4
 8012d4e:	f7fb fdc3 	bl	800e8d8 <lfs_bd_prog>
 8012d52:	0003      	movs	r3, r0
 8012d54:	62fb      	str	r3, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8012d56:	69bb      	ldr	r3, [r7, #24]
 8012d58:	0018      	movs	r0, r3
 8012d5a:	f7fb fa9d 	bl	800e298 <lfs_fromle32>
 8012d5e:	0003      	movs	r3, r0
 8012d60:	61bb      	str	r3, [r7, #24]
                if (err) {
 8012d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d004      	beq.n	8012d72 <lfs_ctz_extend+0x188>
                    if (err == LFS_ERR_CORRUPT) {
 8012d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6a:	3354      	adds	r3, #84	; 0x54
 8012d6c:	d036      	beq.n	8012ddc <lfs_ctz_extend+0x1f2>
                        goto relocate;
                    }
                    return err;
 8012d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d70:	e03c      	b.n	8012dec <lfs_ctz_extend+0x202>
                }

                if (i != skips-1) {
 8012d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d74:	3b01      	subs	r3, #1
 8012d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d01d      	beq.n	8012db8 <lfs_ctz_extend+0x1ce>
                    err = lfs_bd_read(lfs,
 8012d7c:	69bb      	ldr	r3, [r7, #24]
 8012d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d80:	0092      	lsls	r2, r2, #2
 8012d82:	687c      	ldr	r4, [r7, #4]
 8012d84:	68f8      	ldr	r0, [r7, #12]
 8012d86:	2104      	movs	r1, #4
 8012d88:	9103      	str	r1, [sp, #12]
 8012d8a:	2118      	movs	r1, #24
 8012d8c:	1879      	adds	r1, r7, r1
 8012d8e:	9102      	str	r1, [sp, #8]
 8012d90:	9201      	str	r2, [sp, #4]
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	2304      	movs	r3, #4
 8012d96:	0022      	movs	r2, r4
 8012d98:	2100      	movs	r1, #0
 8012d9a:	f7fb fae7 	bl	800e36c <lfs_bd_read>
 8012d9e:	0003      	movs	r3, r0
 8012da0:	62fb      	str	r3, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8012da2:	69bb      	ldr	r3, [r7, #24]
 8012da4:	0018      	movs	r0, r3
 8012da6:	f7fb fa77 	bl	800e298 <lfs_fromle32>
 8012daa:	0003      	movs	r3, r0
 8012dac:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8012dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d001      	beq.n	8012db8 <lfs_ctz_extend+0x1ce>
                        return err;
 8012db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db6:	e019      	b.n	8012dec <lfs_ctz_extend+0x202>
            for (lfs_off_t i = 0; i < skips; i++) {
 8012db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dba:	3301      	adds	r3, #1
 8012dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8012dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d3ad      	bcc.n	8012d22 <lfs_ctz_extend+0x138>
                    }
                }
            }

            *block = nblock;
 8012dc6:	6a3a      	ldr	r2, [r7, #32]
 8012dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dca:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dce:	009a      	lsls	r2, r3, #2
 8012dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dd2:	601a      	str	r2, [r3, #0]
            return 0;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	e009      	b.n	8012dec <lfs_ctz_extend+0x202>
                    goto relocate;
 8012dd8:	46c0      	nop			; (mov r8, r8)
 8012dda:	e000      	b.n	8012dde <lfs_ctz_extend+0x1f4>
                        goto relocate;
 8012ddc:	46c0      	nop			; (mov r8, r8)

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8012dde:	68ba      	ldr	r2, [r7, #8]
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	0011      	movs	r1, r2
 8012de4:	0018      	movs	r0, r3
 8012de6:	f7fb fa9d 	bl	800e324 <lfs_cache_drop>
    while (true) {
 8012dea:	e705      	b.n	8012bf8 <lfs_ctz_extend+0xe>
    }
}
 8012dec:	0018      	movs	r0, r3
 8012dee:	46bd      	mov	sp, r7
 8012df0:	b00e      	add	sp, #56	; 0x38
 8012df2:	bdb0      	pop	{r4, r5, r7, pc}

08012df4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8012df4:	b5b0      	push	{r4, r5, r7, lr}
 8012df6:	b090      	sub	sp, #64	; 0x40
 8012df8:	af04      	add	r7, sp, #16
 8012dfa:	60f8      	str	r0, [r7, #12]
 8012dfc:	60b9      	str	r1, [r7, #8]
 8012dfe:	607a      	str	r2, [r7, #4]
 8012e00:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8012e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d101      	bne.n	8012e0c <lfs_ctz_traverse+0x18>
        return 0;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	e072      	b.n	8012ef2 <lfs_ctz_traverse+0xfe>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8012e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e0e:	3b01      	subs	r3, #1
 8012e10:	61fb      	str	r3, [r7, #28]
 8012e12:	231c      	movs	r3, #28
 8012e14:	18fa      	adds	r2, r7, r3
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	0011      	movs	r1, r2
 8012e1a:	0018      	movs	r0, r3
 8012e1c:	f7ff fe38 	bl	8012a90 <lfs_ctz_index>
 8012e20:	0003      	movs	r3, r0
 8012e22:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8012e24:	6839      	ldr	r1, [r7, #0]
 8012e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e2a:	0010      	movs	r0, r2
 8012e2c:	4798      	blx	r3
 8012e2e:	0003      	movs	r3, r0
 8012e30:	627b      	str	r3, [r7, #36]	; 0x24
        if (err) {
 8012e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d001      	beq.n	8012e3c <lfs_ctz_traverse+0x48>
            return err;
 8012e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3a:	e05a      	b.n	8012ef2 <lfs_ctz_traverse+0xfe>
        }

        if (index == 0) {
 8012e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d101      	bne.n	8012e46 <lfs_ctz_traverse+0x52>
            return 0;
 8012e42:	2300      	movs	r3, #0
 8012e44:	e055      	b.n	8012ef2 <lfs_ctz_traverse+0xfe>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8012e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e48:	2201      	movs	r2, #1
 8012e4a:	4013      	ands	r3, r2
 8012e4c:	2202      	movs	r2, #2
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8012e52:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8012e54:	009c      	lsls	r4, r3, #2
        err = lfs_bd_read(lfs,
 8012e56:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8012e58:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	68b9      	ldr	r1, [r7, #8]
 8012e5e:	68f8      	ldr	r0, [r7, #12]
 8012e60:	9303      	str	r3, [sp, #12]
 8012e62:	2514      	movs	r5, #20
 8012e64:	197b      	adds	r3, r7, r5
 8012e66:	9302      	str	r3, [sp, #8]
 8012e68:	2300      	movs	r3, #0
 8012e6a:	9301      	str	r3, [sp, #4]
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	0023      	movs	r3, r4
 8012e72:	f7fb fa7b 	bl	800e36c <lfs_bd_read>
 8012e76:	0003      	movs	r3, r0
 8012e78:	627b      	str	r3, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8012e7a:	197b      	adds	r3, r7, r5
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	0018      	movs	r0, r3
 8012e80:	f7fb fa0a 	bl	800e298 <lfs_fromle32>
 8012e84:	0002      	movs	r2, r0
 8012e86:	197b      	adds	r3, r7, r5
 8012e88:	601a      	str	r2, [r3, #0]
        heads[1] = lfs_fromle32(heads[1]);
 8012e8a:	197b      	adds	r3, r7, r5
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	0018      	movs	r0, r3
 8012e90:	f7fb fa02 	bl	800e298 <lfs_fromle32>
 8012e94:	0002      	movs	r2, r0
 8012e96:	197b      	adds	r3, r7, r5
 8012e98:	605a      	str	r2, [r3, #4]
        if (err) {
 8012e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d001      	beq.n	8012ea4 <lfs_ctz_traverse+0xb0>
            return err;
 8012ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea2:	e026      	b.n	8012ef2 <lfs_ctz_traverse+0xfe>
        }

        for (int i = 0; i < count-1; i++) {
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ea8:	e012      	b.n	8012ed0 <lfs_ctz_traverse+0xdc>
            err = cb(data, heads[i]);
 8012eaa:	2314      	movs	r3, #20
 8012eac:	18fb      	adds	r3, r7, r3
 8012eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012eb0:	0092      	lsls	r2, r2, #2
 8012eb2:	58d1      	ldr	r1, [r2, r3]
 8012eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eb8:	0010      	movs	r0, r2
 8012eba:	4798      	blx	r3
 8012ebc:	0003      	movs	r3, r0
 8012ebe:	627b      	str	r3, [r7, #36]	; 0x24
            if (err) {
 8012ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d001      	beq.n	8012eca <lfs_ctz_traverse+0xd6>
                return err;
 8012ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec8:	e013      	b.n	8012ef2 <lfs_ctz_traverse+0xfe>
        for (int i = 0; i < count-1; i++) {
 8012eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ecc:	3301      	adds	r3, #1
 8012ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ed0:	6a3b      	ldr	r3, [r7, #32]
 8012ed2:	3b01      	subs	r3, #1
 8012ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	dbe7      	blt.n	8012eaa <lfs_ctz_traverse+0xb6>
            }
        }

        head = heads[count-1];
 8012eda:	6a3b      	ldr	r3, [r7, #32]
 8012edc:	1e5a      	subs	r2, r3, #1
 8012ede:	2314      	movs	r3, #20
 8012ee0:	18fb      	adds	r3, r7, r3
 8012ee2:	0092      	lsls	r2, r2, #2
 8012ee4:	58d3      	ldr	r3, [r2, r3]
 8012ee6:	603b      	str	r3, [r7, #0]
        index -= count;
 8012ee8:	6a3b      	ldr	r3, [r7, #32]
 8012eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012eec:	1ad3      	subs	r3, r2, r3
 8012eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8012ef0:	e798      	b.n	8012e24 <lfs_ctz_traverse+0x30>
    }
}
 8012ef2:	0018      	movs	r0, r3
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	b00c      	add	sp, #48	; 0x30
 8012ef8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012efc <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8012efc:	b5b0      	push	{r4, r5, r7, lr}
 8012efe:	b09a      	sub	sp, #104	; 0x68
 8012f00:	af02      	add	r7, sp, #8
 8012f02:	60f8      	str	r0, [r7, #12]
 8012f04:	60b9      	str	r1, [r7, #8]
 8012f06:	607a      	str	r2, [r7, #4]
 8012f08:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	2202      	movs	r2, #2
 8012f0e:	4013      	ands	r3, r2
 8012f10:	d00a      	beq.n	8012f28 <lfs_file_rawopencfg+0x2c>
        int err = lfs_fs_forceconsistency(lfs);
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	0018      	movs	r0, r3
 8012f16:	f002 fbe7 	bl	80156e8 <lfs_fs_forceconsistency>
 8012f1a:	0003      	movs	r3, r0
 8012f1c:	653b      	str	r3, [r7, #80]	; 0x50
        if (err) {
 8012f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d001      	beq.n	8012f28 <lfs_file_rawopencfg+0x2c>
            return err;
 8012f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f26:	e1bd      	b.n	80132a4 <lfs_file_rawopencfg+0x3a8>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012f2c:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	2200      	movs	r2, #0
 8012f38:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	2200      	movs	r2, #0
 8012f44:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	3308      	adds	r3, #8
 8012f4a:	0019      	movs	r1, r3
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	3304      	adds	r3, #4
 8012f50:	1d3a      	adds	r2, r7, #4
 8012f52:	68f8      	ldr	r0, [r7, #12]
 8012f54:	f7fd fe5c 	bl	8010c10 <lfs_dir_find>
 8012f58:	0003      	movs	r3, r0
 8012f5a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8012f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	da0a      	bge.n	8012f78 <lfs_file_rawopencfg+0x7c>
 8012f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f64:	3302      	adds	r3, #2
 8012f66:	d104      	bne.n	8012f72 <lfs_file_rawopencfg+0x76>
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	889b      	ldrh	r3, [r3, #4]
 8012f6c:	4acf      	ldr	r2, [pc, #828]	; (80132ac <lfs_file_rawopencfg+0x3b0>)
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	d102      	bne.n	8012f78 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8012f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f74:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8012f76:	e187      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8012f7e:	68ba      	ldr	r2, [r7, #8]
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	0011      	movs	r1, r2
 8012f84:	0018      	movs	r0, r3
 8012f86:	f7fc f8b8 	bl	800f0fa <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8012f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f8c:	3302      	adds	r3, #2
 8012f8e:	d152      	bne.n	8013036 <lfs_file_rawopencfg+0x13a>
        if (!(flags & LFS_O_CREAT)) {
 8012f90:	683a      	ldr	r2, [r7, #0]
 8012f92:	2380      	movs	r3, #128	; 0x80
 8012f94:	005b      	lsls	r3, r3, #1
 8012f96:	4013      	ands	r3, r2
 8012f98:	d103      	bne.n	8012fa2 <lfs_file_rawopencfg+0xa6>
            err = LFS_ERR_NOENT;
 8012f9a:	2302      	movs	r3, #2
 8012f9c:	425b      	negs	r3, r3
 8012f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8012fa0:	e172      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	0018      	movs	r0, r3
 8012fa6:	f7ed f8b9 	bl	800011c <strlen>
 8012faa:	0003      	movs	r3, r0
 8012fac:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d903      	bls.n	8012fc0 <lfs_file_rawopencfg+0xc4>
            err = LFS_ERR_NAMETOOLONG;
 8012fb8:	2324      	movs	r3, #36	; 0x24
 8012fba:	425b      	negs	r3, r3
 8012fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8012fbe:	e163      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	3308      	adds	r3, #8
 8012fc4:	0019      	movs	r1, r3
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	889b      	ldrh	r3, [r3, #4]
 8012fca:	029b      	lsls	r3, r3, #10
 8012fcc:	4ab8      	ldr	r2, [pc, #736]	; (80132b0 <lfs_file_rawopencfg+0x3b4>)
 8012fce:	431a      	orrs	r2, r3
 8012fd0:	202c      	movs	r0, #44	; 0x2c
 8012fd2:	183b      	adds	r3, r7, r0
 8012fd4:	601a      	str	r2, [r3, #0]
 8012fd6:	183b      	adds	r3, r7, r0
 8012fd8:	2200      	movs	r2, #0
 8012fda:	605a      	str	r2, [r3, #4]
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	889b      	ldrh	r3, [r3, #4]
 8012fe0:	029a      	lsls	r2, r3, #10
 8012fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fe4:	4313      	orrs	r3, r2
 8012fe6:	2280      	movs	r2, #128	; 0x80
 8012fe8:	0352      	lsls	r2, r2, #13
 8012fea:	431a      	orrs	r2, r3
 8012fec:	183b      	adds	r3, r7, r0
 8012fee:	609a      	str	r2, [r3, #8]
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	183b      	adds	r3, r7, r0
 8012ff4:	60da      	str	r2, [r3, #12]
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	889b      	ldrh	r3, [r3, #4]
 8012ffa:	029b      	lsls	r3, r3, #10
 8012ffc:	4aad      	ldr	r2, [pc, #692]	; (80132b4 <lfs_file_rawopencfg+0x3b8>)
 8012ffe:	431a      	orrs	r2, r3
 8013000:	183b      	adds	r3, r7, r0
 8013002:	611a      	str	r2, [r3, #16]
 8013004:	183b      	adds	r3, r7, r0
 8013006:	2200      	movs	r2, #0
 8013008:	615a      	str	r2, [r3, #20]
 801300a:	183a      	adds	r2, r7, r0
 801300c:	68f8      	ldr	r0, [r7, #12]
 801300e:	2303      	movs	r3, #3
 8013010:	f7ff fbf4 	bl	80127fc <lfs_dir_commit>
 8013014:	0003      	movs	r3, r0
 8013016:	65fb      	str	r3, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8013018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801301a:	331c      	adds	r3, #28
 801301c:	d001      	beq.n	8013022 <lfs_file_rawopencfg+0x126>
 801301e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013020:	e001      	b.n	8013026 <lfs_file_rawopencfg+0x12a>
 8013022:	2324      	movs	r3, #36	; 0x24
 8013024:	425b      	negs	r3, r3
 8013026:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8013028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801302a:	2b00      	cmp	r3, #0
 801302c:	d000      	beq.n	8013030 <lfs_file_rawopencfg+0x134>
 801302e:	e12a      	b.n	8013286 <lfs_file_rawopencfg+0x38a>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8013030:	4ba0      	ldr	r3, [pc, #640]	; (80132b4 <lfs_file_rawopencfg+0x3b8>)
 8013032:	65bb      	str	r3, [r7, #88]	; 0x58
 8013034:	e044      	b.n	80130c0 <lfs_file_rawopencfg+0x1c4>
    } else if (flags & LFS_O_EXCL) {
 8013036:	683a      	ldr	r2, [r7, #0]
 8013038:	2380      	movs	r3, #128	; 0x80
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	4013      	ands	r3, r2
 801303e:	d003      	beq.n	8013048 <lfs_file_rawopencfg+0x14c>
        err = LFS_ERR_EXIST;
 8013040:	2311      	movs	r3, #17
 8013042:	425b      	negs	r3, r3
 8013044:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8013046:	e11f      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8013048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801304a:	0018      	movs	r0, r3
 801304c:	f7fb fe14 	bl	800ec78 <lfs_tag_type3>
 8013050:	0003      	movs	r3, r0
 8013052:	2b01      	cmp	r3, #1
 8013054:	d003      	beq.n	801305e <lfs_file_rawopencfg+0x162>
        err = LFS_ERR_ISDIR;
 8013056:	2315      	movs	r3, #21
 8013058:	425b      	negs	r3, r3
 801305a:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 801305c:	e114      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 801305e:	683a      	ldr	r2, [r7, #0]
 8013060:	2380      	movs	r3, #128	; 0x80
 8013062:	00db      	lsls	r3, r3, #3
 8013064:	4013      	ands	r3, r2
 8013066:	d00d      	beq.n	8013084 <lfs_file_rawopencfg+0x188>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	889b      	ldrh	r3, [r3, #4]
 801306c:	029b      	lsls	r3, r3, #10
 801306e:	4a91      	ldr	r2, [pc, #580]	; (80132b4 <lfs_file_rawopencfg+0x3b8>)
 8013070:	4313      	orrs	r3, r2
 8013072:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013078:	2280      	movs	r2, #128	; 0x80
 801307a:	0252      	lsls	r2, r2, #9
 801307c:	431a      	orrs	r2, r3
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	631a      	str	r2, [r3, #48]	; 0x30
 8013082:	e01d      	b.n	80130c0 <lfs_file_rawopencfg+0x1c4>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	3308      	adds	r3, #8
 8013088:	0019      	movs	r1, r3
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	889b      	ldrh	r3, [r3, #4]
 801308e:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8013090:	4a89      	ldr	r2, [pc, #548]	; (80132b8 <lfs_file_rawopencfg+0x3bc>)
 8013092:	431a      	orrs	r2, r3
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	3328      	adds	r3, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8013098:	4c88      	ldr	r4, [pc, #544]	; (80132bc <lfs_file_rawopencfg+0x3c0>)
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	9300      	str	r3, [sp, #0]
 801309e:	0013      	movs	r3, r2
 80130a0:	0022      	movs	r2, r4
 80130a2:	f7fc fa71 	bl	800f588 <lfs_dir_get>
 80130a6:	0003      	movs	r3, r0
 80130a8:	65bb      	str	r3, [r7, #88]	; 0x58
        if (tag < 0) {
 80130aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	da02      	bge.n	80130b6 <lfs_file_rawopencfg+0x1ba>
            err = tag;
 80130b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80130b2:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80130b4:	e0e8      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
        }
        lfs_ctz_fromle32(&file->ctz);
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	3328      	adds	r3, #40	; 0x28
 80130ba:	0018      	movs	r0, r3
 80130bc:	f7fb ff42 	bl	800ef44 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80130c0:	2300      	movs	r3, #0
 80130c2:	657b      	str	r3, [r7, #84]	; 0x54
 80130c4:	e064      	b.n	8013190 <lfs_file_rawopencfg+0x294>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ca:	2201      	movs	r2, #1
 80130cc:	4013      	ands	r3, r2
 80130ce:	d03e      	beq.n	801314e <lfs_file_rawopencfg+0x252>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	3308      	adds	r3, #8
 80130d4:	001c      	movs	r4, r3
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130da:	6859      	ldr	r1, [r3, #4]
 80130dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80130de:	0013      	movs	r3, r2
 80130e0:	005b      	lsls	r3, r3, #1
 80130e2:	189b      	adds	r3, r3, r2
 80130e4:	009b      	lsls	r3, r3, #2
 80130e6:	18cb      	adds	r3, r1, r3
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	22c0      	movs	r2, #192	; 0xc0
 80130ec:	0092      	lsls	r2, r2, #2
 80130ee:	4694      	mov	ip, r2
 80130f0:	4463      	add	r3, ip
 80130f2:	051a      	lsls	r2, r3, #20
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	889b      	ldrh	r3, [r3, #4]
 80130f8:	029b      	lsls	r3, r3, #10
 80130fa:	431a      	orrs	r2, r3
 80130fc:	0011      	movs	r1, r2
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013102:	6858      	ldr	r0, [r3, #4]
 8013104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013106:	0013      	movs	r3, r2
 8013108:	005b      	lsls	r3, r3, #1
 801310a:	189b      	adds	r3, r3, r2
 801310c:	009b      	lsls	r3, r3, #2
 801310e:	18c3      	adds	r3, r0, r3
 8013110:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8013112:	4319      	orrs	r1, r3
 8013114:	000d      	movs	r5, r1
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801311a:	6859      	ldr	r1, [r3, #4]
 801311c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801311e:	0013      	movs	r3, r2
 8013120:	005b      	lsls	r3, r3, #1
 8013122:	189b      	adds	r3, r3, r2
 8013124:	009b      	lsls	r3, r3, #2
 8013126:	18cb      	adds	r3, r1, r3
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	4a65      	ldr	r2, [pc, #404]	; (80132c0 <lfs_file_rawopencfg+0x3c4>)
 801312c:	68f8      	ldr	r0, [r7, #12]
 801312e:	9300      	str	r3, [sp, #0]
 8013130:	002b      	movs	r3, r5
 8013132:	0021      	movs	r1, r4
 8013134:	f7fc fa28 	bl	800f588 <lfs_dir_get>
 8013138:	0003      	movs	r3, r0
 801313a:	647b      	str	r3, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 801313c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801313e:	2b00      	cmp	r3, #0
 8013140:	da05      	bge.n	801314e <lfs_file_rawopencfg+0x252>
 8013142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013144:	3302      	adds	r3, #2
 8013146:	d002      	beq.n	801314e <lfs_file_rawopencfg+0x252>
                err = res;
 8013148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801314a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 801314c:	e09c      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013152:	2202      	movs	r2, #2
 8013154:	4013      	ands	r3, r2
 8013156:	d018      	beq.n	801318a <lfs_file_rawopencfg+0x28e>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801315c:	6859      	ldr	r1, [r3, #4]
 801315e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013160:	0013      	movs	r3, r2
 8013162:	005b      	lsls	r3, r3, #1
 8013164:	189b      	adds	r3, r3, r2
 8013166:	009b      	lsls	r3, r3, #2
 8013168:	18cb      	adds	r3, r1, r3
 801316a:	689a      	ldr	r2, [r3, #8]
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013170:	429a      	cmp	r2, r3
 8013172:	d903      	bls.n	801317c <lfs_file_rawopencfg+0x280>
                err = LFS_ERR_NOSPC;
 8013174:	231c      	movs	r3, #28
 8013176:	425b      	negs	r3, r3
 8013178:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 801317a:	e085      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
            }

            file->flags |= LFS_F_DIRTY;
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013180:	2280      	movs	r2, #128	; 0x80
 8013182:	0252      	lsls	r2, r2, #9
 8013184:	431a      	orrs	r2, r3
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801318a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801318c:	3301      	adds	r3, #1
 801318e:	657b      	str	r3, [r7, #84]	; 0x54
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013194:	689b      	ldr	r3, [r3, #8]
 8013196:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013198:	429a      	cmp	r2, r3
 801319a:	d394      	bcc.n	80130c6 <lfs_file_rawopencfg+0x1ca>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d005      	beq.n	80131b2 <lfs_file_rawopencfg+0x2b6>
        file->cache.buffer = file->cfg->buffer;
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80131b0:	e010      	b.n	80131d4 <lfs_file_rawopencfg+0x2d8>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131b8:	0018      	movs	r0, r3
 80131ba:	f7fb f89a 	bl	800e2f2 <lfs_malloc>
 80131be:	0002      	movs	r2, r0
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d103      	bne.n	80131d4 <lfs_file_rawopencfg+0x2d8>
            err = LFS_ERR_NOMEM;
 80131cc:	230c      	movs	r3, #12
 80131ce:	425b      	negs	r3, r3
 80131d0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80131d2:	e059      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	3340      	adds	r3, #64	; 0x40
 80131d8:	001a      	movs	r2, r3
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	0011      	movs	r1, r2
 80131de:	0018      	movs	r0, r3
 80131e0:	f7fb f8ad 	bl	800e33e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80131e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131e6:	0018      	movs	r0, r3
 80131e8:	f7fb fd46 	bl	800ec78 <lfs_tag_type3>
 80131ec:	0003      	movs	r3, r0
 80131ee:	001a      	movs	r2, r3
 80131f0:	4b34      	ldr	r3, [pc, #208]	; (80132c4 <lfs_file_rawopencfg+0x3c8>)
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d145      	bne.n	8013282 <lfs_file_rawopencfg+0x386>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	2202      	movs	r2, #2
 80131fa:	4252      	negs	r2, r2
 80131fc:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80131fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013200:	0018      	movs	r0, r3
 8013202:	f7fb fd6e 	bl	800ece2 <lfs_tag_size>
 8013206:	0002      	movs	r2, r0
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013210:	2280      	movs	r2, #128	; 0x80
 8013212:	0352      	lsls	r2, r2, #13
 8013214:	431a      	orrs	r2, r3
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	2200      	movs	r2, #0
 8013226:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801322c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013236:	2b00      	cmp	r3, #0
 8013238:	d023      	beq.n	8013282 <lfs_file_rawopencfg+0x386>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	3308      	adds	r3, #8
 801323e:	001d      	movs	r5, r3
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	889b      	ldrh	r3, [r3, #4]
 8013244:	029c      	lsls	r4, r3, #10
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801324a:	4a1f      	ldr	r2, [pc, #124]	; (80132c8 <lfs_file_rawopencfg+0x3cc>)
 801324c:	0011      	movs	r1, r2
 801324e:	0018      	movs	r0, r3
 8013250:	f7fa ffba 	bl	800e1c8 <lfs_min>
 8013254:	0003      	movs	r3, r0
 8013256:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8013258:	2280      	movs	r2, #128	; 0x80
 801325a:	0592      	lsls	r2, r2, #22
 801325c:	431a      	orrs	r2, r3
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8013262:	4916      	ldr	r1, [pc, #88]	; (80132bc <lfs_file_rawopencfg+0x3c0>)
 8013264:	68f8      	ldr	r0, [r7, #12]
 8013266:	9300      	str	r3, [sp, #0]
 8013268:	0013      	movs	r3, r2
 801326a:	000a      	movs	r2, r1
 801326c:	0029      	movs	r1, r5
 801326e:	f7fc f98b 	bl	800f588 <lfs_dir_get>
 8013272:	0003      	movs	r3, r0
 8013274:	64bb      	str	r3, [r7, #72]	; 0x48
            if (res < 0) {
 8013276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013278:	2b00      	cmp	r3, #0
 801327a:	da02      	bge.n	8013282 <lfs_file_rawopencfg+0x386>
                err = res;
 801327c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801327e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8013280:	e002      	b.n	8013288 <lfs_file_rawopencfg+0x38c>
            }
        }
    }

    return 0;
 8013282:	2300      	movs	r3, #0
 8013284:	e00e      	b.n	80132a4 <lfs_file_rawopencfg+0x3a8>
            goto cleanup;
 8013286:	46c0      	nop			; (mov r8, r8)

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801328c:	2280      	movs	r2, #128	; 0x80
 801328e:	0312      	lsls	r2, r2, #12
 8013290:	431a      	orrs	r2, r3
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8013296:	68ba      	ldr	r2, [r7, #8]
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	0011      	movs	r1, r2
 801329c:	0018      	movs	r0, r3
 801329e:	f000 f82f 	bl	8013300 <lfs_file_rawclose>
    return err;
 80132a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80132a4:	0018      	movs	r0, r3
 80132a6:	46bd      	mov	sp, r7
 80132a8:	b018      	add	sp, #96	; 0x60
 80132aa:	bdb0      	pop	{r4, r5, r7, pc}
 80132ac:	000003ff 	.word	0x000003ff
 80132b0:	40100000 	.word	0x40100000
 80132b4:	20100000 	.word	0x20100000
 80132b8:	20000008 	.word	0x20000008
 80132bc:	700ffc00 	.word	0x700ffc00
 80132c0:	7ffffc00 	.word	0x7ffffc00
 80132c4:	00000201 	.word	0x00000201
 80132c8:	000003fe 	.word	0x000003fe

080132cc <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80132cc:	b590      	push	{r4, r7, lr}
 80132ce:	b089      	sub	sp, #36	; 0x24
 80132d0:	af02      	add	r7, sp, #8
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	607a      	str	r2, [r7, #4]
 80132d8:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 80132da:	683c      	ldr	r4, [r7, #0]
 80132dc:	687a      	ldr	r2, [r7, #4]
 80132de:	68b9      	ldr	r1, [r7, #8]
 80132e0:	68f8      	ldr	r0, [r7, #12]
 80132e2:	4b06      	ldr	r3, [pc, #24]	; (80132fc <lfs_file_rawopen+0x30>)
 80132e4:	9300      	str	r3, [sp, #0]
 80132e6:	0023      	movs	r3, r4
 80132e8:	f7ff fe08 	bl	8012efc <lfs_file_rawopencfg>
 80132ec:	0003      	movs	r3, r0
 80132ee:	617b      	str	r3, [r7, #20]
    return err;
 80132f0:	697b      	ldr	r3, [r7, #20]
}
 80132f2:	0018      	movs	r0, r3
 80132f4:	46bd      	mov	sp, r7
 80132f6:	b007      	add	sp, #28
 80132f8:	bd90      	pop	{r4, r7, pc}
 80132fa:	46c0      	nop			; (mov r8, r8)
 80132fc:	0801cfa0 	.word	0x0801cfa0

08013300 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 801330a:	683a      	ldr	r2, [r7, #0]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	0011      	movs	r1, r2
 8013310:	0018      	movs	r0, r3
 8013312:	f000 f9ed 	bl	80136f0 <lfs_file_rawsync>
 8013316:	0003      	movs	r3, r0
 8013318:	60fb      	str	r3, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801331a:	683a      	ldr	r2, [r7, #0]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	0011      	movs	r1, r2
 8013320:	0018      	movs	r0, r3
 8013322:	f7fb feca 	bl	800f0ba <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d104      	bne.n	801333a <lfs_file_rawclose+0x3a>
        lfs_free(file->cache.buffer);
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013334:	0018      	movs	r0, r3
 8013336:	f7fa ffe9 	bl	800e30c <lfs_free>
    }

    return err;
 801333a:	68fb      	ldr	r3, [r7, #12]
}
 801333c:	0018      	movs	r0, r3
 801333e:	46bd      	mov	sp, r7
 8013340:	b004      	add	sp, #16
 8013342:	bd80      	pop	{r7, pc}

08013344 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8013344:	b5b0      	push	{r4, r5, r7, lr}
 8013346:	b08c      	sub	sp, #48	; 0x30
 8013348:	af06      	add	r7, sp, #24
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 801334e:	230c      	movs	r3, #12
 8013350:	18fa      	adds	r2, r7, r3
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	0011      	movs	r1, r2
 8013356:	0018      	movs	r0, r3
 8013358:	f7fb ff9e 	bl	800f298 <lfs_alloc>
 801335c:	0003      	movs	r3, r0
 801335e:	613b      	str	r3, [r7, #16]
        if (err) {
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d001      	beq.n	801336a <lfs_file_relocate+0x26>
            return err;
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	e0b8      	b.n	80134dc <lfs_file_relocate+0x198>
        }

        err = lfs_bd_erase(lfs, nblock);
 801336a:	68fa      	ldr	r2, [r7, #12]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	0011      	movs	r1, r2
 8013370:	0018      	movs	r0, r3
 8013372:	f7fb fb63 	bl	800ea3c <lfs_bd_erase>
 8013376:	0003      	movs	r3, r0
 8013378:	613b      	str	r3, [r7, #16]
        if (err) {
 801337a:	693b      	ldr	r3, [r7, #16]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d005      	beq.n	801338c <lfs_file_relocate+0x48>
            if (err == LFS_ERR_CORRUPT) {
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	3354      	adds	r3, #84	; 0x54
 8013384:	d100      	bne.n	8013388 <lfs_file_relocate+0x44>
 8013386:	e09d      	b.n	80134c4 <lfs_file_relocate+0x180>
                goto relocate;
            }
            return err;
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	e0a7      	b.n	80134dc <lfs_file_relocate+0x198>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 801338c:	2300      	movs	r3, #0
 801338e:	617b      	str	r3, [r7, #20]
 8013390:	e069      	b.n	8013466 <lfs_file_relocate+0x122>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013396:	2380      	movs	r3, #128	; 0x80
 8013398:	035b      	lsls	r3, r3, #13
 801339a:	4013      	ands	r3, r2
 801339c:	d026      	beq.n	80133ec <lfs_file_relocate+0xa8>
                err = lfs_dir_getread(lfs, &file->m,
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	3308      	adds	r3, #8
 80133a2:	001c      	movs	r4, r3
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	3340      	adds	r3, #64	; 0x40
 80133a8:	001d      	movs	r5, r3
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	1ad3      	subs	r3, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80133b2:	683a      	ldr	r2, [r7, #0]
 80133b4:	8892      	ldrh	r2, [r2, #4]
 80133b6:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 80133b8:	494a      	ldr	r1, [pc, #296]	; (80134e4 <lfs_file_relocate+0x1a0>)
 80133ba:	430a      	orrs	r2, r1
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	2101      	movs	r1, #1
 80133c0:	9105      	str	r1, [sp, #20]
 80133c2:	210b      	movs	r1, #11
 80133c4:	1879      	adds	r1, r7, r1
 80133c6:	9104      	str	r1, [sp, #16]
 80133c8:	6979      	ldr	r1, [r7, #20]
 80133ca:	9103      	str	r1, [sp, #12]
 80133cc:	9202      	str	r2, [sp, #8]
 80133ce:	4a46      	ldr	r2, [pc, #280]	; (80134e8 <lfs_file_relocate+0x1a4>)
 80133d0:	9201      	str	r2, [sp, #4]
 80133d2:	9300      	str	r3, [sp, #0]
 80133d4:	002b      	movs	r3, r5
 80133d6:	2200      	movs	r2, #0
 80133d8:	0021      	movs	r1, r4
 80133da:	f7fc f8f2 	bl	800f5c2 <lfs_dir_getread>
 80133de:	0003      	movs	r3, r0
 80133e0:	613b      	str	r3, [r7, #16]
                        i, &data, 1);
                if (err) {
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d01f      	beq.n	8013428 <lfs_file_relocate+0xe4>
                    return err;
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	e077      	b.n	80134dc <lfs_file_relocate+0x198>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	3340      	adds	r3, #64	; 0x40
 80133f0:	0019      	movs	r1, r3
                err = lfs_bd_read(lfs,
 80133f2:	687c      	ldr	r4, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	1ad5      	subs	r5, r2, r3
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	2201      	movs	r2, #1
 8013404:	9203      	str	r2, [sp, #12]
 8013406:	220b      	movs	r2, #11
 8013408:	18ba      	adds	r2, r7, r2
 801340a:	9202      	str	r2, [sp, #8]
 801340c:	697a      	ldr	r2, [r7, #20]
 801340e:	9201      	str	r2, [sp, #4]
 8013410:	9300      	str	r3, [sp, #0]
 8013412:	002b      	movs	r3, r5
 8013414:	0022      	movs	r2, r4
 8013416:	f7fa ffa9 	bl	800e36c <lfs_bd_read>
 801341a:	0003      	movs	r3, r0
 801341c:	613b      	str	r3, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d001      	beq.n	8013428 <lfs_file_relocate+0xe4>
                    return err;
 8013424:	693b      	ldr	r3, [r7, #16]
 8013426:	e059      	b.n	80134dc <lfs_file_relocate+0x198>
                }
            }

            err = lfs_bd_prog(lfs,
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	3310      	adds	r3, #16
 801342c:	0019      	movs	r1, r3
 801342e:	687c      	ldr	r4, [r7, #4]
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	2201      	movs	r2, #1
 8013436:	9203      	str	r2, [sp, #12]
 8013438:	220b      	movs	r2, #11
 801343a:	18ba      	adds	r2, r7, r2
 801343c:	9202      	str	r2, [sp, #8]
 801343e:	697a      	ldr	r2, [r7, #20]
 8013440:	9201      	str	r2, [sp, #4]
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	2301      	movs	r3, #1
 8013446:	0022      	movs	r2, r4
 8013448:	f7fb fa46 	bl	800e8d8 <lfs_bd_prog>
 801344c:	0003      	movs	r3, r0
 801344e:	613b      	str	r3, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d004      	beq.n	8013460 <lfs_file_relocate+0x11c>
                if (err == LFS_ERR_CORRUPT) {
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	3354      	adds	r3, #84	; 0x54
 801345a:	d035      	beq.n	80134c8 <lfs_file_relocate+0x184>
                    goto relocate;
                }
                return err;
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	e03d      	b.n	80134dc <lfs_file_relocate+0x198>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	3301      	adds	r3, #1
 8013464:	617b      	str	r3, [r7, #20]
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801346a:	697a      	ldr	r2, [r7, #20]
 801346c:	429a      	cmp	r2, r3
 801346e:	d390      	bcc.n	8013392 <lfs_file_relocate+0x4e>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	69d9      	ldr	r1, [r3, #28]
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801347e:	001a      	movs	r2, r3
 8013480:	f003 f9d0 	bl	8016824 <memcpy>
        file->cache.block = lfs->pcache.block;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	691a      	ldr	r2, [r3, #16]
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	695a      	ldr	r2, [r3, #20]
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	699a      	ldr	r2, [r3, #24]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	3310      	adds	r3, #16
 80134a0:	001a      	movs	r2, r3
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	0011      	movs	r1, r2
 80134a6:	0018      	movs	r0, r3
 80134a8:	f7fa ff49 	bl	800e33e <lfs_cache_zero>

        file->block = nblock;
 80134ac:	68fa      	ldr	r2, [r7, #12]
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134b6:	2280      	movs	r2, #128	; 0x80
 80134b8:	0292      	lsls	r2, r2, #10
 80134ba:	431a      	orrs	r2, r3
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80134c0:	2300      	movs	r3, #0
 80134c2:	e00b      	b.n	80134dc <lfs_file_relocate+0x198>
                goto relocate;
 80134c4:	46c0      	nop			; (mov r8, r8)
 80134c6:	e000      	b.n	80134ca <lfs_file_relocate+0x186>
                    goto relocate;
 80134c8:	46c0      	nop			; (mov r8, r8)

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	3310      	adds	r3, #16
 80134ce:	001a      	movs	r2, r3
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	0011      	movs	r1, r2
 80134d4:	0018      	movs	r0, r3
 80134d6:	f7fa ff25 	bl	800e324 <lfs_cache_drop>
    while (true) {
 80134da:	e738      	b.n	801334e <lfs_file_relocate+0xa>
    }
}
 80134dc:	0018      	movs	r0, r3
 80134de:	46bd      	mov	sp, r7
 80134e0:	b006      	add	sp, #24
 80134e2:	bdb0      	pop	{r4, r5, r7, pc}
 80134e4:	20100000 	.word	0x20100000
 80134e8:	fff7fc00 	.word	0xfff7fc00

080134ec <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	0018      	movs	r0, r3
 8013502:	f7fb fe67 	bl	800f1d4 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8013506:	683a      	ldr	r2, [r7, #0]
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	0011      	movs	r1, r2
 801350c:	0018      	movs	r0, r3
 801350e:	f7ff ff19 	bl	8013344 <lfs_file_relocate>
 8013512:	0003      	movs	r3, r0
 8013514:	60fb      	str	r3, [r7, #12]
    if (err) {
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d001      	beq.n	8013520 <lfs_file_outline+0x34>
        return err;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	e006      	b.n	801352e <lfs_file_outline+0x42>
    }

    file->flags &= ~LFS_F_INLINE;
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013524:	4a04      	ldr	r2, [pc, #16]	; (8013538 <lfs_file_outline+0x4c>)
 8013526:	401a      	ands	r2, r3
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 801352c:	2300      	movs	r3, #0
}
 801352e:	0018      	movs	r0, r3
 8013530:	46bd      	mov	sp, r7
 8013532:	b004      	add	sp, #16
 8013534:	bd80      	pop	{r7, pc}
 8013536:	46c0      	nop			; (mov r8, r8)
 8013538:	ffefffff 	.word	0xffefffff

0801353c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801353c:	b590      	push	{r4, r7, lr}
 801353e:	b09d      	sub	sp, #116	; 0x74
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801354a:	2380      	movs	r3, #128	; 0x80
 801354c:	02db      	lsls	r3, r3, #11
 801354e:	4013      	ands	r3, r2
 8013550:	d013      	beq.n	801357a <lfs_file_flush+0x3e>
        if (!(file->flags & LFS_F_INLINE)) {
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013556:	2380      	movs	r3, #128	; 0x80
 8013558:	035b      	lsls	r3, r3, #13
 801355a:	4013      	ands	r3, r2
 801355c:	d107      	bne.n	801356e <lfs_file_flush+0x32>
            lfs_cache_drop(lfs, &file->cache);
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	3340      	adds	r3, #64	; 0x40
 8013562:	001a      	movs	r2, r3
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	0011      	movs	r1, r2
 8013568:	0018      	movs	r0, r3
 801356a:	f7fa fedb 	bl	800e324 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013572:	4a5d      	ldr	r2, [pc, #372]	; (80136e8 <lfs_file_flush+0x1ac>)
 8013574:	401a      	ands	r2, r3
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801357e:	2380      	movs	r3, #128	; 0x80
 8013580:	029b      	lsls	r3, r3, #10
 8013582:	4013      	ands	r3, r2
 8013584:	d100      	bne.n	8013588 <lfs_file_flush+0x4c>
 8013586:	e0a9      	b.n	80136dc <lfs_file_flush+0x1a0>
        lfs_off_t pos = file->pos;
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801358c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013592:	2380      	movs	r3, #128	; 0x80
 8013594:	035b      	lsls	r3, r3, #13
 8013596:	4013      	ands	r3, r2
 8013598:	d000      	beq.n	801359c <lfs_file_flush+0x60>
 801359a:	e07a      	b.n	8013692 <lfs_file_flush+0x156>
            // copy over anything after current branch
            lfs_file_t orig = {
 801359c:	240c      	movs	r4, #12
 801359e:	193b      	adds	r3, r7, r4
 80135a0:	0018      	movs	r0, r3
 80135a2:	2354      	movs	r3, #84	; 0x54
 80135a4:	001a      	movs	r2, r3
 80135a6:	2100      	movs	r1, #0
 80135a8:	f003 f945 	bl	8016836 <memset>
                .ctz.head = file->ctz.head,
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80135b0:	193b      	adds	r3, r7, r4
 80135b2:	629a      	str	r2, [r3, #40]	; 0x28
                .ctz.size = file->ctz.size,
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80135b8:	193b      	adds	r3, r7, r4
 80135ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80135bc:	193b      	adds	r3, r7, r4
 80135be:	2201      	movs	r2, #1
 80135c0:	631a      	str	r2, [r3, #48]	; 0x30
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80135c6:	193b      	adds	r3, r7, r4
 80135c8:	635a      	str	r2, [r3, #52]	; 0x34
 80135ca:	193b      	adds	r3, r7, r4
 80135cc:	687a      	ldr	r2, [r7, #4]
 80135ce:	3340      	adds	r3, #64	; 0x40
 80135d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80135d2:	c313      	stmia	r3!, {r0, r1, r4}
 80135d4:	6812      	ldr	r2, [r2, #0]
 80135d6:	601a      	str	r2, [r3, #0]
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80135d8:	687a      	ldr	r2, [r7, #4]
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	0011      	movs	r1, r2
 80135de:	0018      	movs	r0, r3
 80135e0:	f7fa fea0 	bl	800e324 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80135e4:	e02f      	b.n	8013646 <lfs_file_flush+0x10a>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80135e6:	2363      	movs	r3, #99	; 0x63
 80135e8:	18fa      	adds	r2, r7, r3
 80135ea:	230c      	movs	r3, #12
 80135ec:	18f9      	adds	r1, r7, r3
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	2301      	movs	r3, #1
 80135f2:	f000 f91d 	bl	8013830 <lfs_file_flushedread>
 80135f6:	0003      	movs	r3, r0
 80135f8:	667b      	str	r3, [r7, #100]	; 0x64
                if (res < 0) {
 80135fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	da01      	bge.n	8013604 <lfs_file_flush+0xc8>
                    return res;
 8013600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013602:	e06c      	b.n	80136de <lfs_file_flush+0x1a2>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8013604:	2363      	movs	r3, #99	; 0x63
 8013606:	18fa      	adds	r2, r7, r3
 8013608:	6839      	ldr	r1, [r7, #0]
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	2301      	movs	r3, #1
 801360e:	f000 fa23 	bl	8013a58 <lfs_file_flushedwrite>
 8013612:	0003      	movs	r3, r0
 8013614:	667b      	str	r3, [r7, #100]	; 0x64
                if (res < 0) {
 8013616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013618:	2b00      	cmp	r3, #0
 801361a:	da01      	bge.n	8013620 <lfs_file_flush+0xe4>
                    return res;
 801361c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801361e:	e05e      	b.n	80136de <lfs_file_flush+0x1a2>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	3301      	adds	r3, #1
 8013626:	d00e      	beq.n	8013646 <lfs_file_flush+0x10a>
                    lfs_cache_drop(lfs, &orig.cache);
 8013628:	230c      	movs	r3, #12
 801362a:	18fb      	adds	r3, r7, r3
 801362c:	3340      	adds	r3, #64	; 0x40
 801362e:	001a      	movs	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	0011      	movs	r1, r2
 8013634:	0018      	movs	r0, r3
 8013636:	f7fa fe75 	bl	800e324 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 801363a:	687a      	ldr	r2, [r7, #4]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	0011      	movs	r1, r2
 8013640:	0018      	movs	r0, r3
 8013642:	f7fa fe6f 	bl	800e324 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801364e:	429a      	cmp	r2, r3
 8013650:	d3c9      	bcc.n	80135e6 <lfs_file_flush+0xaa>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	3340      	adds	r3, #64	; 0x40
 8013656:	0019      	movs	r1, r3
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	2301      	movs	r3, #1
 801365e:	f7fb f87b 	bl	800e758 <lfs_bd_flush>
 8013662:	0003      	movs	r3, r0
 8013664:	66bb      	str	r3, [r7, #104]	; 0x68
                if (err) {
 8013666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013668:	2b00      	cmp	r3, #0
 801366a:	d01e      	beq.n	80136aa <lfs_file_flush+0x16e>
                    if (err == LFS_ERR_CORRUPT) {
 801366c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801366e:	3354      	adds	r3, #84	; 0x54
 8013670:	d001      	beq.n	8013676 <lfs_file_flush+0x13a>
                        goto relocate;
                    }
                    return err;
 8013672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013674:	e033      	b.n	80136de <lfs_file_flush+0x1a2>
                        goto relocate;
 8013676:	46c0      	nop			; (mov r8, r8)

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
 8013678:	683a      	ldr	r2, [r7, #0]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	0011      	movs	r1, r2
 801367e:	0018      	movs	r0, r3
 8013680:	f7ff fe60 	bl	8013344 <lfs_file_relocate>
 8013684:	0003      	movs	r3, r0
 8013686:	66bb      	str	r3, [r7, #104]	; 0x68
                if (err) {
 8013688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801368a:	2b00      	cmp	r3, #0
 801368c:	d0e1      	beq.n	8013652 <lfs_file_flush+0x116>
                    return err;
 801368e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013690:	e025      	b.n	80136de <lfs_file_flush+0x1a2>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801369a:	0019      	movs	r1, r3
 801369c:	0010      	movs	r0, r2
 801369e:	f7fa fd85 	bl	800e1ac <lfs_max>
 80136a2:	0002      	movs	r2, r0
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	635a      	str	r2, [r3, #52]	; 0x34
 80136a8:	e000      	b.n	80136ac <lfs_file_flush+0x170>
                break;
 80136aa:	46c0      	nop			; (mov r8, r8)
        }

        // actual file updates
        file->ctz.head = file->block;
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136c0:	4a0a      	ldr	r2, [pc, #40]	; (80136ec <lfs_file_flush+0x1b0>)
 80136c2:	401a      	ands	r2, r3
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136cc:	2280      	movs	r2, #128	; 0x80
 80136ce:	0252      	lsls	r2, r2, #9
 80136d0:	431a      	orrs	r2, r3
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80136da:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80136dc:	2300      	movs	r3, #0
}
 80136de:	0018      	movs	r0, r3
 80136e0:	46bd      	mov	sp, r7
 80136e2:	b01d      	add	sp, #116	; 0x74
 80136e4:	bd90      	pop	{r4, r7, pc}
 80136e6:	46c0      	nop			; (mov r8, r8)
 80136e8:	fffbffff 	.word	0xfffbffff
 80136ec:	fffdffff 	.word	0xfffdffff

080136f0 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80136f0:	b590      	push	{r4, r7, lr}
 80136f2:	b091      	sub	sp, #68	; 0x44
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80136fe:	2380      	movs	r3, #128	; 0x80
 8013700:	031b      	lsls	r3, r3, #12
 8013702:	4013      	ands	r3, r2
 8013704:	d001      	beq.n	801370a <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8013706:	2300      	movs	r3, #0
 8013708:	e087      	b.n	801381a <lfs_file_rawsync+0x12a>
    }

    int err = lfs_file_flush(lfs, file);
 801370a:	683a      	ldr	r2, [r7, #0]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	0011      	movs	r1, r2
 8013710:	0018      	movs	r0, r3
 8013712:	f7ff ff13 	bl	801353c <lfs_file_flush>
 8013716:	0003      	movs	r3, r0
 8013718:	633b      	str	r3, [r7, #48]	; 0x30
    if (err) {
 801371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371c:	2b00      	cmp	r3, #0
 801371e:	d008      	beq.n	8013732 <lfs_file_rawsync+0x42>
        file->flags |= LFS_F_ERRED;
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013724:	2280      	movs	r2, #128	; 0x80
 8013726:	0312      	lsls	r2, r2, #12
 8013728:	431a      	orrs	r2, r3
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 801372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013730:	e073      	b.n	801381a <lfs_file_rawsync+0x12a>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013736:	2380      	movs	r3, #128	; 0x80
 8013738:	025b      	lsls	r3, r3, #9
 801373a:	4013      	ands	r3, r2
 801373c:	d06c      	beq.n	8013818 <lfs_file_rawsync+0x128>
            !lfs_pair_isnull(file->m.pair)) {
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	3308      	adds	r3, #8
 8013742:	0018      	movs	r0, r3
 8013744:	f7fb f9bf 	bl	800eac6 <lfs_pair_isnull>
 8013748:	0003      	movs	r3, r0
 801374a:	001a      	movs	r2, r3
 801374c:	2301      	movs	r3, #1
 801374e:	4053      	eors	r3, r2
 8013750:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8013752:	2b00      	cmp	r3, #0
 8013754:	d060      	beq.n	8013818 <lfs_file_rawsync+0x128>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801375a:	2380      	movs	r3, #128	; 0x80
 801375c:	035b      	lsls	r3, r3, #13
 801375e:	4013      	ands	r3, r2
 8013760:	d00a      	beq.n	8013778 <lfs_file_rawsync+0x88>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8013762:	233e      	movs	r3, #62	; 0x3e
 8013764:	18fb      	adds	r3, r7, r3
 8013766:	4a2f      	ldr	r2, [pc, #188]	; (8013824 <lfs_file_rawsync+0x134>)
 8013768:	801a      	strh	r2, [r3, #0]
            buffer = file->cache.buffer;
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801376e:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013774:	637b      	str	r3, [r7, #52]	; 0x34
 8013776:	e012      	b.n	801379e <lfs_file_rawsync+0xae>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8013778:	233e      	movs	r3, #62	; 0x3e
 801377a:	18fb      	adds	r3, r7, r3
 801377c:	4a2a      	ldr	r2, [pc, #168]	; (8013828 <lfs_file_rawsync+0x138>)
 801377e:	801a      	strh	r2, [r3, #0]
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8013780:	2128      	movs	r1, #40	; 0x28
 8013782:	187a      	adds	r2, r7, r1
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	3328      	adds	r3, #40	; 0x28
 8013788:	cb11      	ldmia	r3!, {r0, r4}
 801378a:	c211      	stmia	r2!, {r0, r4}
            lfs_ctz_tole32(&ctz);
 801378c:	000c      	movs	r4, r1
 801378e:	187b      	adds	r3, r7, r1
 8013790:	0018      	movs	r0, r3
 8013792:	f7fb fbef 	bl	800ef74 <lfs_ctz_tole32>
            buffer = &ctz;
 8013796:	193b      	adds	r3, r7, r4
 8013798:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 801379a:	2308      	movs	r3, #8
 801379c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	3308      	adds	r3, #8
 80137a2:	0019      	movs	r1, r3
 80137a4:	233e      	movs	r3, #62	; 0x3e
 80137a6:	18fb      	adds	r3, r7, r3
 80137a8:	881b      	ldrh	r3, [r3, #0]
 80137aa:	051a      	lsls	r2, r3, #20
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	889b      	ldrh	r3, [r3, #4]
 80137b0:	029b      	lsls	r3, r3, #10
 80137b2:	431a      	orrs	r2, r3
 80137b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137b6:	431a      	orrs	r2, r3
 80137b8:	2018      	movs	r0, #24
 80137ba:	183b      	adds	r3, r7, r0
 80137bc:	601a      	str	r2, [r3, #0]
 80137be:	183b      	adds	r3, r7, r0
 80137c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137c2:	605a      	str	r2, [r3, #4]
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	889b      	ldrh	r3, [r3, #4]
 80137c8:	029a      	lsls	r2, r3, #10
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137ce:	689b      	ldr	r3, [r3, #8]
 80137d0:	4313      	orrs	r3, r2
 80137d2:	2281      	movs	r2, #129	; 0x81
 80137d4:	0552      	lsls	r2, r2, #21
 80137d6:	431a      	orrs	r2, r3
 80137d8:	183b      	adds	r3, r7, r0
 80137da:	609a      	str	r2, [r3, #8]
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137e0:	685a      	ldr	r2, [r3, #4]
 80137e2:	183b      	adds	r3, r7, r0
 80137e4:	60da      	str	r2, [r3, #12]
 80137e6:	183a      	adds	r2, r7, r0
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	2302      	movs	r3, #2
 80137ec:	f7ff f806 	bl	80127fc <lfs_dir_commit>
 80137f0:	0003      	movs	r3, r0
 80137f2:	633b      	str	r3, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80137f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d008      	beq.n	801380c <lfs_file_rawsync+0x11c>
            file->flags |= LFS_F_ERRED;
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137fe:	2280      	movs	r2, #128	; 0x80
 8013800:	0312      	lsls	r2, r2, #12
 8013802:	431a      	orrs	r2, r3
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8013808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380a:	e006      	b.n	801381a <lfs_file_rawsync+0x12a>
        }

        file->flags &= ~LFS_F_DIRTY;
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013810:	4a06      	ldr	r2, [pc, #24]	; (801382c <lfs_file_rawsync+0x13c>)
 8013812:	401a      	ands	r2, r3
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8013818:	2300      	movs	r3, #0
}
 801381a:	0018      	movs	r0, r3
 801381c:	46bd      	mov	sp, r7
 801381e:	b011      	add	sp, #68	; 0x44
 8013820:	bd90      	pop	{r4, r7, pc}
 8013822:	46c0      	nop			; (mov r8, r8)
 8013824:	00000201 	.word	0x00000201
 8013828:	00000202 	.word	0x00000202
 801382c:	fffeffff 	.word	0xfffeffff

08013830 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8013830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013832:	b091      	sub	sp, #68	; 0x44
 8013834:	af06      	add	r7, sp, #24
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	607a      	str	r2, [r7, #4]
 801383c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801384e:	429a      	cmp	r2, r3
 8013850:	d301      	bcc.n	8013856 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8013852:	2300      	movs	r3, #0
 8013854:	e0bf      	b.n	80139d6 <lfs_file_flushedread+0x1a6>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801385e:	1ad2      	subs	r2, r2, r3
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	0011      	movs	r1, r2
 8013864:	0018      	movs	r0, r3
 8013866:	f7fa fcaf 	bl	800e1c8 <lfs_min>
 801386a:	0003      	movs	r3, r0
 801386c:	603b      	str	r3, [r7, #0]
    nsize = size;
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8013872:	e0ab      	b.n	80139cc <lfs_file_flushedread+0x19c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013878:	2380      	movs	r3, #128	; 0x80
 801387a:	02db      	lsls	r3, r3, #11
 801387c:	4013      	ands	r3, r2
 801387e:	d006      	beq.n	801388e <lfs_file_flushedread+0x5e>
                file->off == lfs->cfg->block_size) {
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013888:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 801388a:	429a      	cmp	r2, r3
 801388c:	d133      	bne.n	80138f6 <lfs_file_flushedread+0xc6>
            if (!(file->flags & LFS_F_INLINE)) {
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013892:	2380      	movs	r3, #128	; 0x80
 8013894:	035b      	lsls	r3, r3, #13
 8013896:	4013      	ands	r3, r2
 8013898:	d11e      	bne.n	80138d8 <lfs_file_flushedread+0xa8>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	3340      	adds	r3, #64	; 0x40
 801389e:	001d      	movs	r5, r3
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138ac:	68b9      	ldr	r1, [r7, #8]
 80138ae:	3138      	adds	r1, #56	; 0x38
 80138b0:	68b8      	ldr	r0, [r7, #8]
 80138b2:	303c      	adds	r0, #60	; 0x3c
 80138b4:	68fc      	ldr	r4, [r7, #12]
 80138b6:	9003      	str	r0, [sp, #12]
 80138b8:	9102      	str	r1, [sp, #8]
 80138ba:	9301      	str	r3, [sp, #4]
 80138bc:	9200      	str	r2, [sp, #0]
 80138be:	0033      	movs	r3, r6
 80138c0:	002a      	movs	r2, r5
 80138c2:	2100      	movs	r1, #0
 80138c4:	0020      	movs	r0, r4
 80138c6:	f7ff f91e 	bl	8012b06 <lfs_ctz_find>
 80138ca:	0003      	movs	r3, r0
 80138cc:	61fb      	str	r3, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d009      	beq.n	80138e8 <lfs_file_flushedread+0xb8>
                    return err;
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	e07e      	b.n	80139d6 <lfs_file_flushedread+0x1a6>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	2202      	movs	r2, #2
 80138dc:	4252      	negs	r2, r2
 80138de:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ec:	2280      	movs	r2, #128	; 0x80
 80138ee:	02d2      	lsls	r2, r2, #11
 80138f0:	431a      	orrs	r2, r3
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138fa:	69da      	ldr	r2, [r3, #28]
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013900:	1ad2      	subs	r2, r2, r3
 8013902:	6a3b      	ldr	r3, [r7, #32]
 8013904:	0011      	movs	r1, r2
 8013906:	0018      	movs	r0, r3
 8013908:	f7fa fc5e 	bl	800e1c8 <lfs_min>
 801390c:	0003      	movs	r3, r0
 801390e:	61bb      	str	r3, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013914:	2380      	movs	r3, #128	; 0x80
 8013916:	035b      	lsls	r3, r3, #13
 8013918:	4013      	ands	r3, r2
 801391a:	d026      	beq.n	801396a <lfs_file_flushedread+0x13a>
            int err = lfs_dir_getread(lfs, &file->m,
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	3308      	adds	r3, #8
 8013920:	001d      	movs	r5, r3
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	3340      	adds	r3, #64	; 0x40
 8013926:	001e      	movs	r6, r3
                    NULL, &file->cache, lfs->cfg->block_size,
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 801392c:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	889b      	ldrh	r3, [r3, #4]
 8013932:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8013934:	492a      	ldr	r1, [pc, #168]	; (80139e0 <lfs_file_flushedread+0x1b0>)
 8013936:	4319      	orrs	r1, r3
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801393c:	68fc      	ldr	r4, [r7, #12]
 801393e:	69b8      	ldr	r0, [r7, #24]
 8013940:	9005      	str	r0, [sp, #20]
 8013942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013944:	9004      	str	r0, [sp, #16]
 8013946:	9303      	str	r3, [sp, #12]
 8013948:	9102      	str	r1, [sp, #8]
 801394a:	4b26      	ldr	r3, [pc, #152]	; (80139e4 <lfs_file_flushedread+0x1b4>)
 801394c:	9301      	str	r3, [sp, #4]
 801394e:	9200      	str	r2, [sp, #0]
 8013950:	0033      	movs	r3, r6
 8013952:	2200      	movs	r2, #0
 8013954:	0029      	movs	r1, r5
 8013956:	0020      	movs	r0, r4
 8013958:	f7fb fe33 	bl	800f5c2 <lfs_dir_getread>
 801395c:	0003      	movs	r3, r0
 801395e:	613b      	str	r3, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d01e      	beq.n	80139a4 <lfs_file_flushedread+0x174>
                return err;
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	e035      	b.n	80139d6 <lfs_file_flushedread+0x1a6>
            }
        } else {
            int err = lfs_bd_read(lfs,
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	3340      	adds	r3, #64	; 0x40
 801396e:	001c      	movs	r4, r3
                    NULL, &file->cache, lfs->cfg->block_size,
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8013974:	69dd      	ldr	r5, [r3, #28]
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801397e:	68f8      	ldr	r0, [r7, #12]
 8013980:	69b9      	ldr	r1, [r7, #24]
 8013982:	9103      	str	r1, [sp, #12]
 8013984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013986:	9102      	str	r1, [sp, #8]
 8013988:	9301      	str	r3, [sp, #4]
 801398a:	9200      	str	r2, [sp, #0]
 801398c:	002b      	movs	r3, r5
 801398e:	0022      	movs	r2, r4
 8013990:	2100      	movs	r1, #0
 8013992:	f7fa fceb 	bl	800e36c <lfs_bd_read>
 8013996:	0003      	movs	r3, r0
 8013998:	617b      	str	r3, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d001      	beq.n	80139a4 <lfs_file_flushedread+0x174>
                return err;
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	e018      	b.n	80139d6 <lfs_file_flushedread+0x1a6>
            }
        }

        file->pos += diff;
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80139a8:	69bb      	ldr	r3, [r7, #24]
 80139aa:	18d2      	adds	r2, r2, r3
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80139b4:	69bb      	ldr	r3, [r7, #24]
 80139b6:	18d2      	adds	r2, r2, r3
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80139bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139be:	69bb      	ldr	r3, [r7, #24]
 80139c0:	18d3      	adds	r3, r2, r3
 80139c2:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 80139c4:	6a3a      	ldr	r2, [r7, #32]
 80139c6:	69bb      	ldr	r3, [r7, #24]
 80139c8:	1ad3      	subs	r3, r2, r3
 80139ca:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80139cc:	6a3b      	ldr	r3, [r7, #32]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d000      	beq.n	80139d4 <lfs_file_flushedread+0x1a4>
 80139d2:	e74f      	b.n	8013874 <lfs_file_flushedread+0x44>
    }

    return size;
 80139d4:	683b      	ldr	r3, [r7, #0]
}
 80139d6:	0018      	movs	r0, r3
 80139d8:	46bd      	mov	sp, r7
 80139da:	b00b      	add	sp, #44	; 0x2c
 80139dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139de:	46c0      	nop			; (mov r8, r8)
 80139e0:	20100000 	.word	0x20100000
 80139e4:	fff7fc00 	.word	0xfff7fc00

080139e8 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b086      	sub	sp, #24
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	607a      	str	r2, [r7, #4]
 80139f4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139fa:	2201      	movs	r2, #1
 80139fc:	4013      	ands	r3, r2
 80139fe:	d105      	bne.n	8013a0c <lfs_file_rawread+0x24>
 8013a00:	4b11      	ldr	r3, [pc, #68]	; (8013a48 <lfs_file_rawread+0x60>)
 8013a02:	4a12      	ldr	r2, [pc, #72]	; (8013a4c <lfs_file_rawread+0x64>)
 8013a04:	4912      	ldr	r1, [pc, #72]	; (8013a50 <lfs_file_rawread+0x68>)
 8013a06:	4813      	ldr	r0, [pc, #76]	; (8013a54 <lfs_file_rawread+0x6c>)
 8013a08:	f002 fe74 	bl	80166f4 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a10:	2380      	movs	r3, #128	; 0x80
 8013a12:	029b      	lsls	r3, r3, #10
 8013a14:	4013      	ands	r3, r2
 8013a16:	d00c      	beq.n	8013a32 <lfs_file_rawread+0x4a>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8013a18:	68ba      	ldr	r2, [r7, #8]
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	0011      	movs	r1, r2
 8013a1e:	0018      	movs	r0, r3
 8013a20:	f7ff fd8c 	bl	801353c <lfs_file_flush>
 8013a24:	0003      	movs	r3, r0
 8013a26:	617b      	str	r3, [r7, #20]
        if (err) {
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d001      	beq.n	8013a32 <lfs_file_rawread+0x4a>
            return err;
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	e006      	b.n	8013a40 <lfs_file_rawread+0x58>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	687a      	ldr	r2, [r7, #4]
 8013a36:	68b9      	ldr	r1, [r7, #8]
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f7ff fef9 	bl	8013830 <lfs_file_flushedread>
 8013a3e:	0003      	movs	r3, r0
}
 8013a40:	0018      	movs	r0, r3
 8013a42:	46bd      	mov	sp, r7
 8013a44:	b006      	add	sp, #24
 8013a46:	bd80      	pop	{r7, pc}
 8013a48:	0801c794 	.word	0x0801c794
 8013a4c:	0801cfac 	.word	0x0801cfac
 8013a50:	00000d99 	.word	0x00000d99
 8013a54:	0801c52c 	.word	0x0801c52c

08013a58 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8013a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a5a:	b091      	sub	sp, #68	; 0x44
 8013a5c:	af04      	add	r7, sp, #16
 8013a5e:	60f8      	str	r0, [r7, #12]
 8013a60:	60b9      	str	r1, [r7, #8]
 8013a62:	607a      	str	r2, [r7, #4]
 8013a64:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a72:	2380      	movs	r3, #128	; 0x80
 8013a74:	035b      	lsls	r3, r3, #13
 8013a76:	4013      	ands	r3, r2
 8013a78:	d100      	bne.n	8013a7c <lfs_file_flushedwrite+0x24>
 8013a7a:	e123      	b.n	8013cc4 <lfs_file_flushedwrite+0x26c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a82:	18d2      	adds	r2, r2, r3
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a88:	0019      	movs	r1, r3
 8013a8a:	0010      	movs	r0, r2
 8013a8c:	f7fa fb8e 	bl	800e1ac <lfs_max>
 8013a90:	0004      	movs	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8013a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d004      	beq.n	8013aac <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8013aa8:	08db      	lsrs	r3, r3, #3
 8013aaa:	e003      	b.n	8013ab4 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ab0:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8013ab2:	08db      	lsrs	r3, r3, #3
 8013ab4:	0019      	movs	r1, r3
 8013ab6:	0010      	movs	r0, r2
 8013ab8:	f7fa fb86 	bl	800e1c8 <lfs_min>
 8013abc:	0003      	movs	r3, r0
 8013abe:	4a86      	ldr	r2, [pc, #536]	; (8013cd8 <lfs_file_flushedwrite+0x280>)
 8013ac0:	0019      	movs	r1, r3
 8013ac2:	0010      	movs	r0, r2
 8013ac4:	f7fa fb80 	bl	800e1c8 <lfs_min>
 8013ac8:	0003      	movs	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8013aca:	429c      	cmp	r4, r3
 8013acc:	d800      	bhi.n	8013ad0 <lfs_file_flushedwrite+0x78>
 8013ace:	e0f9      	b.n	8013cc4 <lfs_file_flushedwrite+0x26c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	0011      	movs	r1, r2
 8013ad6:	0018      	movs	r0, r3
 8013ad8:	f7ff fd08 	bl	80134ec <lfs_file_outline>
 8013adc:	0003      	movs	r3, r0
 8013ade:	627b      	str	r3, [r7, #36]	; 0x24
        if (err) {
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d100      	bne.n	8013ae8 <lfs_file_flushedwrite+0x90>
 8013ae6:	e0ed      	b.n	8013cc4 <lfs_file_flushedwrite+0x26c>
            file->flags |= LFS_F_ERRED;
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aec:	2280      	movs	r2, #128	; 0x80
 8013aee:	0312      	lsls	r2, r2, #12
 8013af0:	431a      	orrs	r2, r3
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8013af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af8:	e0e9      	b.n	8013cce <lfs_file_flushedwrite+0x276>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013afe:	2380      	movs	r3, #128	; 0x80
 8013b00:	029b      	lsls	r3, r3, #10
 8013b02:	4013      	ands	r3, r2
 8013b04:	d007      	beq.n	8013b16 <lfs_file_flushedwrite+0xbe>
                file->off == lfs->cfg->block_size) {
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013b0e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d000      	beq.n	8013b16 <lfs_file_flushedwrite+0xbe>
 8013b14:	e076      	b.n	8013c04 <lfs_file_flushedwrite+0x1ac>
            if (!(file->flags & LFS_F_INLINE)) {
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b1a:	2380      	movs	r3, #128	; 0x80
 8013b1c:	035b      	lsls	r3, r3, #13
 8013b1e:	4013      	ands	r3, r2
 8013b20:	d161      	bne.n	8013be6 <lfs_file_flushedwrite+0x18e>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b26:	2380      	movs	r3, #128	; 0x80
 8013b28:	029b      	lsls	r3, r3, #10
 8013b2a:	4013      	ands	r3, r2
 8013b2c:	d134      	bne.n	8013b98 <lfs_file_flushedwrite+0x140>
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d030      	beq.n	8013b98 <lfs_file_flushedwrite+0x140>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	3340      	adds	r3, #64	; 0x40
 8013b3a:	001d      	movs	r5, r3
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8013b48:	3b01      	subs	r3, #1
 8013b4a:	68b9      	ldr	r1, [r7, #8]
 8013b4c:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8013b4e:	2000      	movs	r0, #0
 8013b50:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8013b52:	68fc      	ldr	r4, [r7, #12]
 8013b54:	2010      	movs	r0, #16
 8013b56:	1838      	adds	r0, r7, r0
 8013b58:	9003      	str	r0, [sp, #12]
 8013b5a:	9102      	str	r1, [sp, #8]
 8013b5c:	9301      	str	r3, [sp, #4]
 8013b5e:	9200      	str	r2, [sp, #0]
 8013b60:	0033      	movs	r3, r6
 8013b62:	002a      	movs	r2, r5
 8013b64:	2100      	movs	r1, #0
 8013b66:	0020      	movs	r0, r4
 8013b68:	f7fe ffcd 	bl	8012b06 <lfs_ctz_find>
 8013b6c:	0003      	movs	r3, r0
 8013b6e:	623b      	str	r3, [r7, #32]
                    if (err) {
 8013b70:	6a3b      	ldr	r3, [r7, #32]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d008      	beq.n	8013b88 <lfs_file_flushedwrite+0x130>
                        file->flags |= LFS_F_ERRED;
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b7a:	2280      	movs	r2, #128	; 0x80
 8013b7c:	0312      	lsls	r2, r2, #12
 8013b7e:	431a      	orrs	r2, r3
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8013b84:	6a3b      	ldr	r3, [r7, #32]
 8013b86:	e0a2      	b.n	8013cce <lfs_file_flushedwrite+0x276>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	3340      	adds	r3, #64	; 0x40
 8013b8c:	001a      	movs	r2, r3
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	0011      	movs	r1, r2
 8013b92:	0018      	movs	r0, r3
 8013b94:	f7fa fbd3 	bl	800e33e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	0018      	movs	r0, r3
 8013b9c:	f7fb fb1a 	bl	800f1d4 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	3340      	adds	r3, #64	; 0x40
 8013ba4:	001c      	movs	r4, r3
 8013ba6:	68fd      	ldr	r5, [r7, #12]
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bb0:	68ba      	ldr	r2, [r7, #8]
 8013bb2:	3238      	adds	r2, #56	; 0x38
 8013bb4:	68b9      	ldr	r1, [r7, #8]
 8013bb6:	313c      	adds	r1, #60	; 0x3c
 8013bb8:	68f8      	ldr	r0, [r7, #12]
 8013bba:	9102      	str	r1, [sp, #8]
 8013bbc:	9201      	str	r2, [sp, #4]
 8013bbe:	9300      	str	r3, [sp, #0]
 8013bc0:	0033      	movs	r3, r6
 8013bc2:	002a      	movs	r2, r5
 8013bc4:	0021      	movs	r1, r4
 8013bc6:	f7ff f810 	bl	8012bea <lfs_ctz_extend>
 8013bca:	0003      	movs	r3, r0
 8013bcc:	61fb      	str	r3, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d010      	beq.n	8013bf6 <lfs_file_flushedwrite+0x19e>
                    file->flags |= LFS_F_ERRED;
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bd8:	2280      	movs	r2, #128	; 0x80
 8013bda:	0312      	lsls	r2, r2, #12
 8013bdc:	431a      	orrs	r2, r3
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	e073      	b.n	8013cce <lfs_file_flushedwrite+0x276>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	2202      	movs	r2, #2
 8013bea:	4252      	negs	r2, r2
 8013bec:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfa:	2280      	movs	r2, #128	; 0x80
 8013bfc:	0292      	lsls	r2, r2, #10
 8013bfe:	431a      	orrs	r2, r3
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c08:	69da      	ldr	r2, [r3, #28]
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c0e:	1ad2      	subs	r2, r2, r3
 8013c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c12:	0011      	movs	r1, r2
 8013c14:	0018      	movs	r0, r3
 8013c16:	f7fa fad7 	bl	800e1c8 <lfs_min>
 8013c1a:	0003      	movs	r3, r0
 8013c1c:	61bb      	str	r3, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	3340      	adds	r3, #64	; 0x40
 8013c22:	001c      	movs	r4, r3
 8013c24:	68fd      	ldr	r5, [r7, #12]
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c2e:	68f8      	ldr	r0, [r7, #12]
 8013c30:	69b9      	ldr	r1, [r7, #24]
 8013c32:	9103      	str	r1, [sp, #12]
 8013c34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c36:	9102      	str	r1, [sp, #8]
 8013c38:	9301      	str	r3, [sp, #4]
 8013c3a:	9200      	str	r2, [sp, #0]
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	002a      	movs	r2, r5
 8013c40:	0021      	movs	r1, r4
 8013c42:	f7fa fe49 	bl	800e8d8 <lfs_bd_prog>
 8013c46:	0003      	movs	r3, r0
 8013c48:	617b      	str	r3, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d020      	beq.n	8013c92 <lfs_file_flushedwrite+0x23a>
                if (err == LFS_ERR_CORRUPT) {
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	3354      	adds	r3, #84	; 0x54
 8013c54:	d008      	beq.n	8013c68 <lfs_file_flushedwrite+0x210>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c5a:	2280      	movs	r2, #128	; 0x80
 8013c5c:	0312      	lsls	r2, r2, #12
 8013c5e:	431a      	orrs	r2, r3
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	e032      	b.n	8013cce <lfs_file_flushedwrite+0x276>
                    goto relocate;
 8013c68:	46c0      	nop			; (mov r8, r8)
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8013c6a:	68ba      	ldr	r2, [r7, #8]
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	0011      	movs	r1, r2
 8013c70:	0018      	movs	r0, r3
 8013c72:	f7ff fb67 	bl	8013344 <lfs_file_relocate>
 8013c76:	0003      	movs	r3, r0
 8013c78:	617b      	str	r3, [r7, #20]
            if (err) {
 8013c7a:	697b      	ldr	r3, [r7, #20]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d0ce      	beq.n	8013c1e <lfs_file_flushedwrite+0x1c6>
                file->flags |= LFS_F_ERRED;
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c84:	2280      	movs	r2, #128	; 0x80
 8013c86:	0312      	lsls	r2, r2, #12
 8013c88:	431a      	orrs	r2, r3
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	e01d      	b.n	8013cce <lfs_file_flushedwrite+0x276>
            break;
 8013c92:	46c0      	nop			; (mov r8, r8)
            }
        }

        file->pos += diff;
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013c98:	69bb      	ldr	r3, [r7, #24]
 8013c9a:	18d2      	adds	r2, r2, r3
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ca4:	69bb      	ldr	r3, [r7, #24]
 8013ca6:	18d2      	adds	r2, r2, r3
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8013cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	18d3      	adds	r3, r2, r3
 8013cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8013cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cb6:	69bb      	ldr	r3, [r7, #24]
 8013cb8:	1ad3      	subs	r3, r2, r3
 8013cba:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	0018      	movs	r0, r3
 8013cc0:	f7fb fa88 	bl	800f1d4 <lfs_alloc_ack>
    while (nsize > 0) {
 8013cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d000      	beq.n	8013ccc <lfs_file_flushedwrite+0x274>
 8013cca:	e716      	b.n	8013afa <lfs_file_flushedwrite+0xa2>
    }

    return size;
 8013ccc:	683b      	ldr	r3, [r7, #0]
}
 8013cce:	0018      	movs	r0, r3
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	b00d      	add	sp, #52	; 0x34
 8013cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cd6:	46c0      	nop			; (mov r8, r8)
 8013cd8:	000003fe 	.word	0x000003fe

08013cdc <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b08a      	sub	sp, #40	; 0x28
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]
 8013ce8:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cee:	2202      	movs	r2, #2
 8013cf0:	4013      	ands	r3, r2
 8013cf2:	d105      	bne.n	8013d00 <lfs_file_rawwrite+0x24>
 8013cf4:	4b3a      	ldr	r3, [pc, #232]	; (8013de0 <lfs_file_rawwrite+0x104>)
 8013cf6:	4a3b      	ldr	r2, [pc, #236]	; (8013de4 <lfs_file_rawwrite+0x108>)
 8013cf8:	493b      	ldr	r1, [pc, #236]	; (8013de8 <lfs_file_rawwrite+0x10c>)
 8013cfa:	483c      	ldr	r0, [pc, #240]	; (8013dec <lfs_file_rawwrite+0x110>)
 8013cfc:	f002 fcfa 	bl	80166f4 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d04:	2380      	movs	r3, #128	; 0x80
 8013d06:	02db      	lsls	r3, r3, #11
 8013d08:	4013      	ands	r3, r2
 8013d0a:	d00c      	beq.n	8013d26 <lfs_file_rawwrite+0x4a>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8013d0c:	68ba      	ldr	r2, [r7, #8]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	0011      	movs	r1, r2
 8013d12:	0018      	movs	r0, r3
 8013d14:	f7ff fc12 	bl	801353c <lfs_file_flush>
 8013d18:	0003      	movs	r3, r0
 8013d1a:	627b      	str	r3, [r7, #36]	; 0x24
        if (err) {
 8013d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d001      	beq.n	8013d26 <lfs_file_rawwrite+0x4a>
            return err;
 8013d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d24:	e058      	b.n	8013dd8 <lfs_file_rawwrite+0xfc>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d2a:	2380      	movs	r3, #128	; 0x80
 8013d2c:	011b      	lsls	r3, r3, #4
 8013d2e:	4013      	ands	r3, r2
 8013d30:	d009      	beq.n	8013d46 <lfs_file_rawwrite+0x6a>
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d36:	68bb      	ldr	r3, [r7, #8]
 8013d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d203      	bcs.n	8013d46 <lfs_file_rawwrite+0x6a>
        file->pos = file->ctz.size;
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	18d2      	adds	r2, r2, r3
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d902      	bls.n	8013d5c <lfs_file_rawwrite+0x80>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8013d56:	231b      	movs	r3, #27
 8013d58:	425b      	negs	r3, r3
 8013d5a:	e03d      	b.n	8013dd8 <lfs_file_rawwrite+0xfc>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d60:	2380      	movs	r3, #128	; 0x80
 8013d62:	029b      	lsls	r3, r3, #10
 8013d64:	4013      	ands	r3, r2
 8013d66:	d123      	bne.n	8013db0 <lfs_file_rawwrite+0xd4>
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d91d      	bls.n	8013db0 <lfs_file_rawwrite+0xd4>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d78:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8013d82:	e010      	b.n	8013da6 <lfs_file_rawwrite+0xca>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8013d84:	2117      	movs	r1, #23
 8013d86:	187b      	adds	r3, r7, r1
 8013d88:	2200      	movs	r2, #0
 8013d8a:	701a      	strb	r2, [r3, #0]
 8013d8c:	187a      	adds	r2, r7, r1
 8013d8e:	68b9      	ldr	r1, [r7, #8]
 8013d90:	68f8      	ldr	r0, [r7, #12]
 8013d92:	2301      	movs	r3, #1
 8013d94:	f7ff fe60 	bl	8013a58 <lfs_file_flushedwrite>
 8013d98:	0003      	movs	r3, r0
 8013d9a:	61fb      	str	r3, [r7, #28]
            if (res < 0) {
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	da01      	bge.n	8013da6 <lfs_file_rawwrite+0xca>
                return res;
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	e018      	b.n	8013dd8 <lfs_file_rawwrite+0xfc>
        while (file->pos < pos) {
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013daa:	6a3a      	ldr	r2, [r7, #32]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d8e9      	bhi.n	8013d84 <lfs_file_rawwrite+0xa8>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	687a      	ldr	r2, [r7, #4]
 8013db4:	68b9      	ldr	r1, [r7, #8]
 8013db6:	68f8      	ldr	r0, [r7, #12]
 8013db8:	f7ff fe4e 	bl	8013a58 <lfs_file_flushedwrite>
 8013dbc:	0003      	movs	r3, r0
 8013dbe:	61bb      	str	r3, [r7, #24]
    if (nsize < 0) {
 8013dc0:	69bb      	ldr	r3, [r7, #24]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	da01      	bge.n	8013dca <lfs_file_rawwrite+0xee>
        return nsize;
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	e006      	b.n	8013dd8 <lfs_file_rawwrite+0xfc>
    }

    file->flags &= ~LFS_F_ERRED;
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dce:	4a08      	ldr	r2, [pc, #32]	; (8013df0 <lfs_file_rawwrite+0x114>)
 8013dd0:	401a      	ands	r2, r3
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8013dd6:	69bb      	ldr	r3, [r7, #24]
}
 8013dd8:	0018      	movs	r0, r3
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	b00a      	add	sp, #40	; 0x28
 8013dde:	bd80      	pop	{r7, pc}
 8013de0:	0801c7c4 	.word	0x0801c7c4
 8013de4:	0801cfc0 	.word	0x0801cfc0
 8013de8:	00000e04 	.word	0x00000e04
 8013dec:	0801c52c 	.word	0x0801c52c
 8013df0:	fff7ffff 	.word	0xfff7ffff

08013df4 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b08c      	sub	sp, #48	; 0x30
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	60f8      	str	r0, [r7, #12]
 8013dfc:	60b9      	str	r1, [r7, #8]
 8013dfe:	607a      	str	r2, [r7, #4]
 8013e00:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d102      	bne.n	8013e14 <lfs_file_rawseek+0x20>
        npos = off;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e12:	e027      	b.n	8013e64 <lfs_file_rawseek+0x70>
    } else if (whence == LFS_SEEK_CUR) {
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d10f      	bne.n	8013e3a <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e1e:	001a      	movs	r2, r3
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	18d3      	adds	r3, r2, r3
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	da02      	bge.n	8013e2e <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8013e28:	2316      	movs	r3, #22
 8013e2a:	425b      	negs	r3, r3
 8013e2c:	e070      	b.n	8013f10 <lfs_file_rawseek+0x11c>
        } else {
            npos = file->pos + off;
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	18d3      	adds	r3, r2, r3
 8013e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e38:	e014      	b.n	8013e64 <lfs_file_rawseek+0x70>
        }
    } else if (whence == LFS_SEEK_END) {
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	2b02      	cmp	r3, #2
 8013e3e:	d111      	bne.n	8013e64 <lfs_file_rawseek+0x70>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8013e40:	68ba      	ldr	r2, [r7, #8]
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	0011      	movs	r1, r2
 8013e46:	0018      	movs	r0, r3
 8013e48:	f000 f87d 	bl	8013f46 <lfs_file_rawsize>
 8013e4c:	0002      	movs	r2, r0
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	189b      	adds	r3, r3, r2
 8013e52:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8013e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	da02      	bge.n	8013e60 <lfs_file_rawseek+0x6c>
            return LFS_ERR_INVAL;
 8013e5a:	2316      	movs	r3, #22
 8013e5c:	425b      	negs	r3, r3
 8013e5e:	e057      	b.n	8013f10 <lfs_file_rawseek+0x11c>
        } else {
            npos = res;
 8013e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d902      	bls.n	8013e74 <lfs_file_rawseek+0x80>
        // file position out of range
        return LFS_ERR_INVAL;
 8013e6e:	2316      	movs	r3, #22
 8013e70:	425b      	negs	r3, r3
 8013e72:	e04d      	b.n	8013f10 <lfs_file_rawseek+0x11c>
    }

    if (file->pos == npos) {
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d101      	bne.n	8013e82 <lfs_file_rawseek+0x8e>
        // noop - position has not changed
        return npos;
 8013e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e80:	e046      	b.n	8013f10 <lfs_file_rawseek+0x11c>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e86:	2380      	movs	r3, #128	; 0x80
 8013e88:	029b      	lsls	r3, r3, #10
 8013e8a:	4013      	ands	r3, r2
    if (
 8013e8c:	d12f      	bne.n	8013eee <lfs_file_rawseek+0xfa>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e92:	61bb      	str	r3, [r7, #24]
 8013e94:	2318      	movs	r3, #24
 8013e96:	18fa      	adds	r2, r7, r3
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	0011      	movs	r1, r2
 8013e9c:	0018      	movs	r0, r3
 8013e9e:	f7fe fdf7 	bl	8012a90 <lfs_ctz_index>
 8013ea2:	0003      	movs	r3, r0
 8013ea4:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8013ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea8:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8013eaa:	2314      	movs	r3, #20
 8013eac:	18fa      	adds	r2, r7, r3
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	0011      	movs	r1, r2
 8013eb2:	0018      	movs	r0, r3
 8013eb4:	f7fe fdec 	bl	8012a90 <lfs_ctz_index>
 8013eb8:	0003      	movs	r3, r0
 8013eba:	623b      	str	r3, [r7, #32]
        if (oindex == nindex
 8013ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ebe:	6a3b      	ldr	r3, [r7, #32]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d114      	bne.n	8013eee <lfs_file_rawseek+0xfa>
                && noff >= file->cache.off
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d80f      	bhi.n	8013eee <lfs_file_rawseek+0xfa>
                && noff < file->cache.off + file->cache.size) {
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ed6:	18d2      	adds	r2, r2, r3
 8013ed8:	697b      	ldr	r3, [r7, #20]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d907      	bls.n	8013eee <lfs_file_rawseek+0xfa>
            file->pos = npos;
 8013ede:	68bb      	ldr	r3, [r7, #8]
 8013ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ee2:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8013ee4:	697a      	ldr	r2, [r7, #20]
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8013eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eec:	e010      	b.n	8013f10 <lfs_file_rawseek+0x11c>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8013eee:	68ba      	ldr	r2, [r7, #8]
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	0011      	movs	r1, r2
 8013ef4:	0018      	movs	r0, r3
 8013ef6:	f7ff fb21 	bl	801353c <lfs_file_flush>
 8013efa:	0003      	movs	r3, r0
 8013efc:	61fb      	str	r3, [r7, #28]
    if (err) {
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d001      	beq.n	8013f08 <lfs_file_rawseek+0x114>
        return err;
 8013f04:	69fb      	ldr	r3, [r7, #28]
 8013f06:	e003      	b.n	8013f10 <lfs_file_rawseek+0x11c>
    }

    // update pos
    file->pos = npos;
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f0c:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8013f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013f10:	0018      	movs	r0, r3
 8013f12:	46bd      	mov	sp, r7
 8013f14:	b00c      	add	sp, #48	; 0x30
 8013f16:	bd80      	pop	{r7, pc}

08013f18 <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b084      	sub	sp, #16
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8013f22:	6839      	ldr	r1, [r7, #0]
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	2300      	movs	r3, #0
 8013f28:	2200      	movs	r2, #0
 8013f2a:	f7ff ff63 	bl	8013df4 <lfs_file_rawseek>
 8013f2e:	0003      	movs	r3, r0
 8013f30:	60fb      	str	r3, [r7, #12]
    if (res < 0) {
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	da01      	bge.n	8013f3c <lfs_file_rawrewind+0x24>
        return (int)res;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	e000      	b.n	8013f3e <lfs_file_rawrewind+0x26>
    }

    return 0;
 8013f3c:	2300      	movs	r3, #0
}
 8013f3e:	0018      	movs	r0, r3
 8013f40:	46bd      	mov	sp, r7
 8013f42:	b004      	add	sp, #16
 8013f44:	bd80      	pop	{r7, pc}

08013f46 <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8013f46:	b580      	push	{r7, lr}
 8013f48:	b082      	sub	sp, #8
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
 8013f4e:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f54:	2380      	movs	r3, #128	; 0x80
 8013f56:	029b      	lsls	r3, r3, #10
 8013f58:	4013      	ands	r3, r2
 8013f5a:	d009      	beq.n	8013f70 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f64:	0019      	movs	r1, r3
 8013f66:	0010      	movs	r0, r2
 8013f68:	f7fa f920 	bl	800e1ac <lfs_max>
 8013f6c:	0003      	movs	r3, r0
 8013f6e:	e001      	b.n	8013f74 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8013f74:	0018      	movs	r0, r3
 8013f76:	46bd      	mov	sp, r7
 8013f78:	b002      	add	sp, #8
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <lfs_rawremove>:

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
}

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 8013f7c:	b590      	push	{r4, r7, lr}
 8013f7e:	b0a1      	sub	sp, #132	; 0x84
 8013f80:	af02      	add	r7, sp, #8
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	0018      	movs	r0, r3
 8013f8a:	f001 fbad 	bl	80156e8 <lfs_fs_forceconsistency>
 8013f8e:	0003      	movs	r3, r0
 8013f90:	677b      	str	r3, [r7, #116]	; 0x74
    if (err) {
 8013f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d001      	beq.n	8013f9c <lfs_rawremove+0x20>
        return err;
 8013f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013f9a:	e0d7      	b.n	801414c <lfs_rawremove+0x1d0>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8013f9c:	003a      	movs	r2, r7
 8013f9e:	234c      	movs	r3, #76	; 0x4c
 8013fa0:	18f9      	adds	r1, r7, r3
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	f7fc fe33 	bl	8010c10 <lfs_dir_find>
 8013faa:	0003      	movs	r3, r0
 8013fac:	673b      	str	r3, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8013fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	db08      	blt.n	8013fc6 <lfs_rawremove+0x4a>
 8013fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fb6:	0018      	movs	r0, r3
 8013fb8:	f7fa fe85 	bl	800ecc6 <lfs_tag_id>
 8013fbc:	0003      	movs	r3, r0
 8013fbe:	001a      	movs	r2, r3
 8013fc0:	4b64      	ldr	r3, [pc, #400]	; (8014154 <lfs_rawremove+0x1d8>)
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d107      	bne.n	8013fd6 <lfs_rawremove+0x5a>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8013fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	da01      	bge.n	8013fd0 <lfs_rawremove+0x54>
 8013fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fce:	e0bd      	b.n	801414c <lfs_rawremove+0x1d0>
 8013fd0:	2316      	movs	r3, #22
 8013fd2:	425b      	negs	r3, r3
 8013fd4:	e0ba      	b.n	801414c <lfs_rawremove+0x1d0>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013fda:	2324      	movs	r3, #36	; 0x24
 8013fdc:	18fb      	adds	r3, r7, r3
 8013fde:	601a      	str	r2, [r3, #0]
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8013fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fe2:	0018      	movs	r0, r3
 8013fe4:	f7fa fe48 	bl	800ec78 <lfs_tag_type3>
 8013fe8:	0003      	movs	r3, r0
 8013fea:	2b02      	cmp	r3, #2
 8013fec:	d150      	bne.n	8014090 <lfs_rawremove+0x114>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8013fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013ff0:	0018      	movs	r0, r3
 8013ff2:	f7fa fe68 	bl	800ecc6 <lfs_tag_id>
 8013ff6:	0003      	movs	r3, r0
 8013ff8:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8013ffa:	4a57      	ldr	r2, [pc, #348]	; (8014158 <lfs_rawremove+0x1dc>)
 8013ffc:	431a      	orrs	r2, r3
 8013ffe:	4c57      	ldr	r4, [pc, #348]	; (801415c <lfs_rawremove+0x1e0>)
 8014000:	234c      	movs	r3, #76	; 0x4c
 8014002:	18f9      	adds	r1, r7, r3
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	230c      	movs	r3, #12
 8014008:	18fb      	adds	r3, r7, r3
 801400a:	9300      	str	r3, [sp, #0]
 801400c:	0013      	movs	r3, r2
 801400e:	0022      	movs	r2, r4
 8014010:	f7fb faba 	bl	800f588 <lfs_dir_get>
 8014014:	0003      	movs	r3, r0
 8014016:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (res < 0) {
 8014018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801401a:	2b00      	cmp	r3, #0
 801401c:	da01      	bge.n	8014022 <lfs_rawremove+0xa6>
            return (int)res;
 801401e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014020:	e094      	b.n	801414c <lfs_rawremove+0x1d0>
        }
        lfs_pair_fromle32(pair);
 8014022:	240c      	movs	r4, #12
 8014024:	193b      	adds	r3, r7, r4
 8014026:	0018      	movs	r0, r3
 8014028:	f7fa fdb9 	bl	800eb9e <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801402c:	193a      	adds	r2, r7, r4
 801402e:	2324      	movs	r3, #36	; 0x24
 8014030:	18fb      	adds	r3, r7, r3
 8014032:	3308      	adds	r3, #8
 8014034:	0019      	movs	r1, r3
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	0018      	movs	r0, r3
 801403a:	f7fc fcc3 	bl	80109c4 <lfs_dir_fetch>
 801403e:	0003      	movs	r3, r0
 8014040:	677b      	str	r3, [r7, #116]	; 0x74
        if (err) {
 8014042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014044:	2b00      	cmp	r3, #0
 8014046:	d001      	beq.n	801404c <lfs_rawremove+0xd0>
            return err;
 8014048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801404a:	e07f      	b.n	801414c <lfs_rawremove+0x1d0>
        }

        if (dir.m.count > 0 || dir.m.split) {
 801404c:	2224      	movs	r2, #36	; 0x24
 801404e:	18bb      	adds	r3, r7, r2
 8014050:	8b9b      	ldrh	r3, [r3, #28]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d103      	bne.n	801405e <lfs_rawremove+0xe2>
 8014056:	18bb      	adds	r3, r7, r2
 8014058:	7fdb      	ldrb	r3, [r3, #31]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d002      	beq.n	8014064 <lfs_rawremove+0xe8>
            return LFS_ERR_NOTEMPTY;
 801405e:	2327      	movs	r3, #39	; 0x27
 8014060:	425b      	negs	r3, r3
 8014062:	e073      	b.n	801414c <lfs_rawremove+0x1d0>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2101      	movs	r1, #1
 8014068:	0018      	movs	r0, r3
 801406a:	f001 f833 	bl	80150d4 <lfs_fs_preporphans>
 801406e:	0003      	movs	r3, r0
 8014070:	677b      	str	r3, [r7, #116]	; 0x74
        if (err) {
 8014072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014074:	2b00      	cmp	r3, #0
 8014076:	d001      	beq.n	801407c <lfs_rawremove+0x100>
            return err;
 8014078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801407a:	e067      	b.n	801414c <lfs_rawremove+0x1d0>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 801407c:	2124      	movs	r1, #36	; 0x24
 801407e:	187b      	adds	r3, r7, r1
 8014080:	2200      	movs	r2, #0
 8014082:	719a      	strb	r2, [r3, #6]
        dir.id = 0;
 8014084:	187b      	adds	r3, r7, r1
 8014086:	2200      	movs	r2, #0
 8014088:	809a      	strh	r2, [r3, #4]
        lfs->mlist = &dir;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	187a      	adds	r2, r7, r1
 801408e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8014090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014092:	0018      	movs	r0, r3
 8014094:	f7fa fe17 	bl	800ecc6 <lfs_tag_id>
 8014098:	0003      	movs	r3, r0
 801409a:	029b      	lsls	r3, r3, #10
 801409c:	4a30      	ldr	r2, [pc, #192]	; (8014160 <lfs_rawremove+0x1e4>)
 801409e:	431a      	orrs	r2, r3
 80140a0:	211c      	movs	r1, #28
 80140a2:	187b      	adds	r3, r7, r1
 80140a4:	601a      	str	r2, [r3, #0]
 80140a6:	187b      	adds	r3, r7, r1
 80140a8:	2200      	movs	r2, #0
 80140aa:	605a      	str	r2, [r3, #4]
 80140ac:	187a      	adds	r2, r7, r1
 80140ae:	234c      	movs	r3, #76	; 0x4c
 80140b0:	18f9      	adds	r1, r7, r3
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	2301      	movs	r3, #1
 80140b6:	f7fe fba1 	bl	80127fc <lfs_dir_commit>
 80140ba:	0003      	movs	r3, r0
 80140bc:	677b      	str	r3, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 80140be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d006      	beq.n	80140d2 <lfs_rawremove+0x156>
        lfs->mlist = dir.next;
 80140c4:	2324      	movs	r3, #36	; 0x24
 80140c6:	18fb      	adds	r3, r7, r3
 80140c8:	681a      	ldr	r2, [r3, #0]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 80140ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80140d0:	e03c      	b.n	801414c <lfs_rawremove+0x1d0>
    }

    lfs->mlist = dir.next;
 80140d2:	2324      	movs	r3, #36	; 0x24
 80140d4:	18fb      	adds	r3, r7, r3
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 80140dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80140de:	0018      	movs	r0, r3
 80140e0:	f7fa fdca 	bl	800ec78 <lfs_tag_type3>
 80140e4:	0003      	movs	r3, r0
 80140e6:	2b02      	cmp	r3, #2
 80140e8:	d12f      	bne.n	801414a <lfs_rawremove+0x1ce>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 80140ea:	2301      	movs	r3, #1
 80140ec:	425a      	negs	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	0011      	movs	r1, r2
 80140f2:	0018      	movs	r0, r3
 80140f4:	f000 ffee 	bl	80150d4 <lfs_fs_preporphans>
 80140f8:	0003      	movs	r3, r0
 80140fa:	677b      	str	r3, [r7, #116]	; 0x74
        if (err) {
 80140fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d001      	beq.n	8014106 <lfs_rawremove+0x18a>
            return err;
 8014102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014104:	e022      	b.n	801414c <lfs_rawremove+0x1d0>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8014106:	234c      	movs	r3, #76	; 0x4c
 8014108:	18fa      	adds	r2, r7, r3
 801410a:	2324      	movs	r3, #36	; 0x24
 801410c:	18fb      	adds	r3, r7, r3
 801410e:	3308      	adds	r3, #8
 8014110:	0019      	movs	r1, r3
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	0018      	movs	r0, r3
 8014116:	f000 fe87 	bl	8014e28 <lfs_fs_pred>
 801411a:	0003      	movs	r3, r0
 801411c:	677b      	str	r3, [r7, #116]	; 0x74
        if (err) {
 801411e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014120:	2b00      	cmp	r3, #0
 8014122:	d001      	beq.n	8014128 <lfs_rawremove+0x1ac>
            return err;
 8014124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014126:	e011      	b.n	801414c <lfs_rawremove+0x1d0>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8014128:	2324      	movs	r3, #36	; 0x24
 801412a:	18fb      	adds	r3, r7, r3
 801412c:	3308      	adds	r3, #8
 801412e:	001a      	movs	r2, r3
 8014130:	234c      	movs	r3, #76	; 0x4c
 8014132:	18f9      	adds	r1, r7, r3
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	0018      	movs	r0, r3
 8014138:	f7fd f938 	bl	80113ac <lfs_dir_drop>
 801413c:	0003      	movs	r3, r0
 801413e:	677b      	str	r3, [r7, #116]	; 0x74
        if (err) {
 8014140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014142:	2b00      	cmp	r3, #0
 8014144:	d001      	beq.n	801414a <lfs_rawremove+0x1ce>
            return err;
 8014146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014148:	e000      	b.n	801414c <lfs_rawremove+0x1d0>
        }
    }

    return 0;
 801414a:	2300      	movs	r3, #0
}
 801414c:	0018      	movs	r0, r3
 801414e:	46bd      	mov	sp, r7
 8014150:	b01f      	add	sp, #124	; 0x7c
 8014152:	bd90      	pop	{r4, r7, pc}
 8014154:	000003ff 	.word	0x000003ff
 8014158:	20000008 	.word	0x20000008
 801415c:	700ffc00 	.word	0x700ffc00
 8014160:	4ff00000 	.word	0x4ff00000

08014164 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8014164:	b580      	push	{r7, lr}
 8014166:	b08c      	sub	sp, #48	; 0x30
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	683a      	ldr	r2, [r7, #0]
 8014172:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	6a1a      	ldr	r2, [r3, #32]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 801417c:	2300      	movs	r3, #0
 801417e:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014184:	695b      	ldr	r3, [r3, #20]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d105      	bne.n	8014196 <lfs_init+0x32>
 801418a:	4bc2      	ldr	r3, [pc, #776]	; (8014494 <lfs_init+0x330>)
 801418c:	4ac2      	ldr	r2, [pc, #776]	; (8014498 <lfs_init+0x334>)
 801418e:	49c3      	ldr	r1, [pc, #780]	; (801449c <lfs_init+0x338>)
 8014190:	48c3      	ldr	r0, [pc, #780]	; (80144a0 <lfs_init+0x33c>)
 8014192:	f002 faaf 	bl	80166f4 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801419a:	699b      	ldr	r3, [r3, #24]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d105      	bne.n	80141ac <lfs_init+0x48>
 80141a0:	4bc0      	ldr	r3, [pc, #768]	; (80144a4 <lfs_init+0x340>)
 80141a2:	4abd      	ldr	r2, [pc, #756]	; (8014498 <lfs_init+0x334>)
 80141a4:	49c0      	ldr	r1, [pc, #768]	; (80144a8 <lfs_init+0x344>)
 80141a6:	48be      	ldr	r0, [pc, #760]	; (80144a0 <lfs_init+0x33c>)
 80141a8:	f002 faa4 	bl	80166f4 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80141b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d105      	bne.n	80141c2 <lfs_init+0x5e>
 80141b6:	4bbd      	ldr	r3, [pc, #756]	; (80144ac <lfs_init+0x348>)
 80141b8:	4ab7      	ldr	r2, [pc, #732]	; (8014498 <lfs_init+0x334>)
 80141ba:	49bd      	ldr	r1, [pc, #756]	; (80144b0 <lfs_init+0x34c>)
 80141bc:	48b8      	ldr	r0, [pc, #736]	; (80144a0 <lfs_init+0x33c>)
 80141be:	f002 fa99 	bl	80166f4 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80141c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80141cc:	695b      	ldr	r3, [r3, #20]
 80141ce:	0019      	movs	r1, r3
 80141d0:	0010      	movs	r0, r2
 80141d2:	f7ec f845 	bl	8000260 <__aeabi_uidivmod>
 80141d6:	1e0b      	subs	r3, r1, #0
 80141d8:	d005      	beq.n	80141e6 <lfs_init+0x82>
 80141da:	4bb6      	ldr	r3, [pc, #728]	; (80144b4 <lfs_init+0x350>)
 80141dc:	4aae      	ldr	r2, [pc, #696]	; (8014498 <lfs_init+0x334>)
 80141de:	49b6      	ldr	r1, [pc, #728]	; (80144b8 <lfs_init+0x354>)
 80141e0:	48af      	ldr	r0, [pc, #700]	; (80144a0 <lfs_init+0x33c>)
 80141e2:	f002 fa87 	bl	80166f4 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80141ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80141f0:	699b      	ldr	r3, [r3, #24]
 80141f2:	0019      	movs	r1, r3
 80141f4:	0010      	movs	r0, r2
 80141f6:	f7ec f833 	bl	8000260 <__aeabi_uidivmod>
 80141fa:	1e0b      	subs	r3, r1, #0
 80141fc:	d005      	beq.n	801420a <lfs_init+0xa6>
 80141fe:	4baf      	ldr	r3, [pc, #700]	; (80144bc <lfs_init+0x358>)
 8014200:	4aa5      	ldr	r2, [pc, #660]	; (8014498 <lfs_init+0x334>)
 8014202:	49af      	ldr	r1, [pc, #700]	; (80144c0 <lfs_init+0x35c>)
 8014204:	48a6      	ldr	r0, [pc, #664]	; (80144a0 <lfs_init+0x33c>)
 8014206:	f002 fa75 	bl	80166f4 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801420e:	69da      	ldr	r2, [r3, #28]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014216:	0019      	movs	r1, r3
 8014218:	0010      	movs	r0, r2
 801421a:	f7ec f821 	bl	8000260 <__aeabi_uidivmod>
 801421e:	1e0b      	subs	r3, r1, #0
 8014220:	d005      	beq.n	801422e <lfs_init+0xca>
 8014222:	4ba8      	ldr	r3, [pc, #672]	; (80144c4 <lfs_init+0x360>)
 8014224:	4a9c      	ldr	r2, [pc, #624]	; (8014498 <lfs_init+0x334>)
 8014226:	49a8      	ldr	r1, [pc, #672]	; (80144c8 <lfs_init+0x364>)
 8014228:	489d      	ldr	r0, [pc, #628]	; (80144a0 <lfs_init+0x33c>)
 801422a:	f002 fa63 	bl	80166f4 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014232:	69db      	ldr	r3, [r3, #28]
 8014234:	2b7f      	cmp	r3, #127	; 0x7f
 8014236:	d805      	bhi.n	8014244 <lfs_init+0xe0>
 8014238:	4ba4      	ldr	r3, [pc, #656]	; (80144cc <lfs_init+0x368>)
 801423a:	4a97      	ldr	r2, [pc, #604]	; (8014498 <lfs_init+0x334>)
 801423c:	49a4      	ldr	r1, [pc, #656]	; (80144d0 <lfs_init+0x36c>)
 801423e:	4898      	ldr	r0, [pc, #608]	; (80144a0 <lfs_init+0x33c>)
 8014240:	f002 fa58 	bl	80166f4 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014248:	69db      	ldr	r3, [r3, #28]
 801424a:	3b08      	subs	r3, #8
 801424c:	0019      	movs	r1, r3
 801424e:	2301      	movs	r3, #1
 8014250:	4258      	negs	r0, r3
 8014252:	f7eb ff7f 	bl	8000154 <__udivsi3>
 8014256:	0003      	movs	r3, r0
 8014258:	0018      	movs	r0, r3
 801425a:	f7f9 ffe8 	bl	800e22e <lfs_npw2>
 801425e:	0003      	movs	r3, r0
 8014260:	009a      	lsls	r2, r3, #2
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014266:	69db      	ldr	r3, [r3, #28]
 8014268:	429a      	cmp	r2, r3
 801426a:	d905      	bls.n	8014278 <lfs_init+0x114>
 801426c:	4b99      	ldr	r3, [pc, #612]	; (80144d4 <lfs_init+0x370>)
 801426e:	4a8a      	ldr	r2, [pc, #552]	; (8014498 <lfs_init+0x334>)
 8014270:	4999      	ldr	r1, [pc, #612]	; (80144d8 <lfs_init+0x374>)
 8014272:	488b      	ldr	r0, [pc, #556]	; (80144a0 <lfs_init+0x33c>)
 8014274:	f002 fa3e 	bl	80166f4 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801427e:	2b00      	cmp	r3, #0
 8014280:	d105      	bne.n	801428e <lfs_init+0x12a>
 8014282:	4b96      	ldr	r3, [pc, #600]	; (80144dc <lfs_init+0x378>)
 8014284:	4a84      	ldr	r2, [pc, #528]	; (8014498 <lfs_init+0x334>)
 8014286:	4996      	ldr	r1, [pc, #600]	; (80144e0 <lfs_init+0x37c>)
 8014288:	4885      	ldr	r0, [pc, #532]	; (80144a0 <lfs_init+0x33c>)
 801428a:	f002 fa33 	bl	80166f4 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014294:	2b00      	cmp	r3, #0
 8014296:	d005      	beq.n	80142a4 <lfs_init+0x140>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801429c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	60da      	str	r2, [r3, #12]
 80142a2:	e010      	b.n	80142c6 <lfs_init+0x162>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142aa:	0018      	movs	r0, r3
 80142ac:	f7fa f821 	bl	800e2f2 <lfs_malloc>
 80142b0:	0002      	movs	r2, r0
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	68db      	ldr	r3, [r3, #12]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d103      	bne.n	80142c6 <lfs_init+0x162>
            err = LFS_ERR_NOMEM;
 80142be:	230c      	movs	r3, #12
 80142c0:	425b      	negs	r3, r3
 80142c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80142c4:	e0dc      	b.n	8014480 <lfs_init+0x31c>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d005      	beq.n	80142dc <lfs_init+0x178>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	61da      	str	r2, [r3, #28]
 80142da:	e010      	b.n	80142fe <lfs_init+0x19a>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142e2:	0018      	movs	r0, r3
 80142e4:	f7fa f805 	bl	800e2f2 <lfs_malloc>
 80142e8:	0002      	movs	r2, r0
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	69db      	ldr	r3, [r3, #28]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d103      	bne.n	80142fe <lfs_init+0x19a>
            err = LFS_ERR_NOMEM;
 80142f6:	230c      	movs	r3, #12
 80142f8:	425b      	negs	r3, r3
 80142fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80142fc:	e0c0      	b.n	8014480 <lfs_init+0x31c>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 80142fe:	687a      	ldr	r2, [r7, #4]
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	0011      	movs	r1, r2
 8014304:	0018      	movs	r0, r3
 8014306:	f7fa f81a 	bl	800e33e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	3310      	adds	r3, #16
 801430e:	001a      	movs	r2, r3
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	0011      	movs	r1, r2
 8014314:	0018      	movs	r0, r3
 8014316:	f7fa f812 	bl	800e33e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014320:	2b00      	cmp	r3, #0
 8014322:	d105      	bne.n	8014330 <lfs_init+0x1cc>
 8014324:	4b6f      	ldr	r3, [pc, #444]	; (80144e4 <lfs_init+0x380>)
 8014326:	4a5c      	ldr	r2, [pc, #368]	; (8014498 <lfs_init+0x334>)
 8014328:	496f      	ldr	r1, [pc, #444]	; (80144e8 <lfs_init+0x384>)
 801432a:	485d      	ldr	r0, [pc, #372]	; (80144a0 <lfs_init+0x33c>)
 801432c:	f002 f9e2 	bl	80166f4 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014336:	2207      	movs	r2, #7
 8014338:	4013      	ands	r3, r2
 801433a:	d106      	bne.n	801434a <lfs_init+0x1e6>
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014342:	001a      	movs	r2, r3
 8014344:	2303      	movs	r3, #3
 8014346:	4013      	ands	r3, r2
 8014348:	d005      	beq.n	8014356 <lfs_init+0x1f2>
 801434a:	4b68      	ldr	r3, [pc, #416]	; (80144ec <lfs_init+0x388>)
 801434c:	4a52      	ldr	r2, [pc, #328]	; (8014498 <lfs_init+0x334>)
 801434e:	4968      	ldr	r1, [pc, #416]	; (80144f0 <lfs_init+0x38c>)
 8014350:	4853      	ldr	r0, [pc, #332]	; (80144a0 <lfs_init+0x33c>)
 8014352:	f002 f9cf 	bl	80166f4 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801435c:	2b00      	cmp	r3, #0
 801435e:	d005      	beq.n	801436c <lfs_init+0x208>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	665a      	str	r2, [r3, #100]	; 0x64
 801436a:	e010      	b.n	801438e <lfs_init+0x22a>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014372:	0018      	movs	r0, r3
 8014374:	f7f9 ffbd 	bl	800e2f2 <lfs_malloc>
 8014378:	0002      	movs	r2, r0
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014382:	2b00      	cmp	r3, #0
 8014384:	d103      	bne.n	801438e <lfs_init+0x22a>
            err = LFS_ERR_NOMEM;
 8014386:	230c      	movs	r3, #12
 8014388:	425b      	negs	r3, r3
 801438a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 801438c:	e078      	b.n	8014480 <lfs_init+0x31c>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014394:	2bff      	cmp	r3, #255	; 0xff
 8014396:	d905      	bls.n	80143a4 <lfs_init+0x240>
 8014398:	4b56      	ldr	r3, [pc, #344]	; (80144f4 <lfs_init+0x390>)
 801439a:	4a3f      	ldr	r2, [pc, #252]	; (8014498 <lfs_init+0x334>)
 801439c:	4956      	ldr	r1, [pc, #344]	; (80144f8 <lfs_init+0x394>)
 801439e:	4840      	ldr	r0, [pc, #256]	; (80144a0 <lfs_init+0x33c>)
 80143a0:	f002 f9a8 	bl	80166f4 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80143a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d102      	bne.n	80143bc <lfs_init+0x258>
        lfs->name_max = LFS_NAME_MAX;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	22ff      	movs	r2, #255	; 0xff
 80143ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80143c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	da05      	bge.n	80143d2 <lfs_init+0x26e>
 80143c6:	4b4d      	ldr	r3, [pc, #308]	; (80144fc <lfs_init+0x398>)
 80143c8:	4a33      	ldr	r2, [pc, #204]	; (8014498 <lfs_init+0x334>)
 80143ca:	494d      	ldr	r1, [pc, #308]	; (8014500 <lfs_init+0x39c>)
 80143cc:	4834      	ldr	r0, [pc, #208]	; (80144a0 <lfs_init+0x33c>)
 80143ce:	f002 f991 	bl	80166f4 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80143d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d102      	bne.n	80143ea <lfs_init+0x286>
        lfs->file_max = LFS_FILE_MAX;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	4a47      	ldr	r2, [pc, #284]	; (8014504 <lfs_init+0x3a0>)
 80143e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80143ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143f0:	4a45      	ldr	r2, [pc, #276]	; (8014508 <lfs_init+0x3a4>)
 80143f2:	4293      	cmp	r3, r2
 80143f4:	d905      	bls.n	8014402 <lfs_init+0x29e>
 80143f6:	4b45      	ldr	r3, [pc, #276]	; (801450c <lfs_init+0x3a8>)
 80143f8:	4a27      	ldr	r2, [pc, #156]	; (8014498 <lfs_init+0x334>)
 80143fa:	4945      	ldr	r1, [pc, #276]	; (8014510 <lfs_init+0x3ac>)
 80143fc:	4828      	ldr	r0, [pc, #160]	; (80144a0 <lfs_init+0x33c>)
 80143fe:	f002 f979 	bl	80166f4 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014410:	2b00      	cmp	r3, #0
 8014412:	d102      	bne.n	801441a <lfs_init+0x2b6>
        lfs->attr_max = LFS_ATTR_MAX;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	4a3c      	ldr	r2, [pc, #240]	; (8014508 <lfs_init+0x3a4>)
 8014418:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801441e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014424:	69db      	ldr	r3, [r3, #28]
 8014426:	429a      	cmp	r2, r3
 8014428:	d905      	bls.n	8014436 <lfs_init+0x2d2>
 801442a:	4b3a      	ldr	r3, [pc, #232]	; (8014514 <lfs_init+0x3b0>)
 801442c:	4a1a      	ldr	r2, [pc, #104]	; (8014498 <lfs_init+0x334>)
 801442e:	493a      	ldr	r1, [pc, #232]	; (8014518 <lfs_init+0x3b4>)
 8014430:	481b      	ldr	r0, [pc, #108]	; (80144a0 <lfs_init+0x33c>)
 8014432:	f002 f95f 	bl	80166f4 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	2201      	movs	r2, #1
 801443a:	4252      	negs	r2, r2
 801443c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	2201      	movs	r2, #1
 8014442:	4252      	negs	r2, r2
 8014444:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2200      	movs	r2, #0
 801444a:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2200      	movs	r2, #0
 8014450:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	333c      	adds	r3, #60	; 0x3c
 8014456:	220c      	movs	r2, #12
 8014458:	2100      	movs	r1, #0
 801445a:	0018      	movs	r0, r3
 801445c:	f002 f9eb 	bl	8016836 <memset>
    lfs->gstate = (lfs_gstate_t){0};
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	3330      	adds	r3, #48	; 0x30
 8014464:	220c      	movs	r2, #12
 8014466:	2100      	movs	r1, #0
 8014468:	0018      	movs	r0, r3
 801446a:	f002 f9e4 	bl	8016836 <memset>
    lfs->gdelta = (lfs_gstate_t){0};
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	3348      	adds	r3, #72	; 0x48
 8014472:	220c      	movs	r2, #12
 8014474:	2100      	movs	r1, #0
 8014476:	0018      	movs	r0, r3
 8014478:	f002 f9dd 	bl	8016836 <memset>
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 801447c:	2300      	movs	r3, #0
 801447e:	e004      	b.n	801448a <lfs_init+0x326>

cleanup:
    lfs_deinit(lfs);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	0018      	movs	r0, r3
 8014484:	f000 f84a 	bl	801451c <lfs_deinit>
    return err;
 8014488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801448a:	0018      	movs	r0, r3
 801448c:	46bd      	mov	sp, r7
 801448e:	b00c      	add	sp, #48	; 0x30
 8014490:	bd80      	pop	{r7, pc}
 8014492:	46c0      	nop			; (mov r8, r8)
 8014494:	0801c7f4 	.word	0x0801c7f4
 8014498:	0801cfd4 	.word	0x0801cfd4
 801449c:	00001022 	.word	0x00001022
 80144a0:	0801c52c 	.word	0x0801c52c
 80144a4:	0801c810 	.word	0x0801c810
 80144a8:	00001023 	.word	0x00001023
 80144ac:	0801c82c 	.word	0x0801c82c
 80144b0:	00001024 	.word	0x00001024
 80144b4:	0801c848 	.word	0x0801c848
 80144b8:	00001028 	.word	0x00001028
 80144bc:	0801c878 	.word	0x0801c878
 80144c0:	00001029 	.word	0x00001029
 80144c4:	0801c8a8 	.word	0x0801c8a8
 80144c8:	0000102a 	.word	0x0000102a
 80144cc:	0801c8dc 	.word	0x0801c8dc
 80144d0:	0000102d 	.word	0x0000102d
 80144d4:	0801c8f8 	.word	0x0801c8f8
 80144d8:	00001030 	.word	0x00001030
 80144dc:	0801c944 	.word	0x0801c944
 80144e0:	00001039 	.word	0x00001039
 80144e4:	0801c960 	.word	0x0801c960
 80144e8:	00001057 	.word	0x00001057
 80144ec:	0801c980 	.word	0x0801c980
 80144f0:	00001058 	.word	0x00001058
 80144f4:	0801c9d4 	.word	0x0801c9d4
 80144f8:	00001065 	.word	0x00001065
 80144fc:	0801c9f0 	.word	0x0801c9f0
 8014500:	0000106b 	.word	0x0000106b
 8014504:	7fffffff 	.word	0x7fffffff
 8014508:	000003fe 	.word	0x000003fe
 801450c:	0801ca14 	.word	0x0801ca14
 8014510:	00001071 	.word	0x00001071
 8014514:	0801ca30 	.word	0x0801ca30
 8014518:	00001077 	.word	0x00001077

0801451c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 801451c:	b580      	push	{r7, lr}
 801451e:	b082      	sub	sp, #8
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801452a:	2b00      	cmp	r3, #0
 801452c:	d104      	bne.n	8014538 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	68db      	ldr	r3, [r3, #12]
 8014532:	0018      	movs	r0, r3
 8014534:	f7f9 feea 	bl	800e30c <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801453e:	2b00      	cmp	r3, #0
 8014540:	d104      	bne.n	801454c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	69db      	ldr	r3, [r3, #28]
 8014546:	0018      	movs	r0, r3
 8014548:	f7f9 fee0 	bl	800e30c <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014552:	2b00      	cmp	r3, #0
 8014554:	d104      	bne.n	8014560 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801455a:	0018      	movs	r0, r3
 801455c:	f7f9 fed6 	bl	800e30c <lfs_free>
    }

    return 0;
 8014560:	2300      	movs	r3, #0
}
 8014562:	0018      	movs	r0, r3
 8014564:	46bd      	mov	sp, r7
 8014566:	b002      	add	sp, #8
 8014568:	bd80      	pop	{r7, pc}
	...

0801456c <lfs_rawformat>:



#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 801456c:	b5b0      	push	{r4, r5, r7, lr}
 801456e:	b0a0      	sub	sp, #128	; 0x80
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	6039      	str	r1, [r7, #0]
    int err = 0;
 8014576:	2300      	movs	r3, #0
 8014578:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 801457a:	683a      	ldr	r2, [r7, #0]
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	0011      	movs	r1, r2
 8014580:	0018      	movs	r0, r3
 8014582:	f7ff fdef 	bl	8014164 <lfs_init>
 8014586:	0003      	movs	r3, r0
 8014588:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (err) {
 801458a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801458c:	2b00      	cmp	r3, #0
 801458e:	d001      	beq.n	8014594 <lfs_rawformat+0x28>
            return err;
 8014590:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014592:	e09d      	b.n	80146d0 <lfs_rawformat+0x164>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	6a1b      	ldr	r3, [r3, #32]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d105      	bne.n	80145a8 <lfs_rawformat+0x3c>
 801459c:	4b4e      	ldr	r3, [pc, #312]	; (80146d8 <lfs_rawformat+0x16c>)
 801459e:	4a4f      	ldr	r2, [pc, #316]	; (80146dc <lfs_rawformat+0x170>)
 80145a0:	494f      	ldr	r1, [pc, #316]	; (80146e0 <lfs_rawformat+0x174>)
 80145a2:	4850      	ldr	r0, [pc, #320]	; (80146e4 <lfs_rawformat+0x178>)
 80145a4:	f002 f8a6 	bl	80166f4 <__assert_func>

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80145b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145b2:	001a      	movs	r2, r3
 80145b4:	2100      	movs	r1, #0
 80145b6:	f002 f93e 	bl	8016836 <memset>
        lfs->free.off = 0;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2200      	movs	r2, #0
 80145be:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80145c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145c6:	00da      	lsls	r2, r3, #3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145cc:	0019      	movs	r1, r3
 80145ce:	0010      	movs	r0, r2
 80145d0:	f7f9 fdfa 	bl	800e1c8 <lfs_min>
 80145d4:	0002      	movs	r2, r0
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->free.i = 0;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2200      	movs	r2, #0
 80145de:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	0018      	movs	r0, r3
 80145e4:	f7fa fdf6 	bl	800f1d4 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80145e8:	250c      	movs	r5, #12
 80145ea:	197a      	adds	r2, r7, r5
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	0011      	movs	r1, r2
 80145f0:	0018      	movs	r0, r3
 80145f2:	f7fc fe5b 	bl	80112ac <lfs_dir_alloc>
 80145f6:	0003      	movs	r3, r0
 80145f8:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (err) {
 80145fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d15d      	bne.n	80146bc <lfs_rawformat+0x150>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	0018      	movs	r0, r3
 8014604:	f7fa fd8a 	bl	800f11c <lfs_fs_disk_version>
 8014608:	0002      	movs	r2, r0
        lfs_superblock_t superblock = {
 801460a:	2164      	movs	r1, #100	; 0x64
 801460c:	187b      	adds	r3, r7, r1
 801460e:	601a      	str	r2, [r3, #0]
            .block_size  = lfs->cfg->block_size,
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014614:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
 8014616:	000c      	movs	r4, r1
 8014618:	193b      	adds	r3, r7, r4
 801461a:	605a      	str	r2, [r3, #4]
            .block_count = lfs->block_count,
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8014620:	193b      	adds	r3, r7, r4
 8014622:	609a      	str	r2, [r3, #8]
            .name_max    = lfs->name_max,
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8014628:	193b      	adds	r3, r7, r4
 801462a:	60da      	str	r2, [r3, #12]
            .file_max    = lfs->file_max,
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8014630:	193b      	adds	r3, r7, r4
 8014632:	611a      	str	r2, [r3, #16]
            .attr_max    = lfs->attr_max,
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6f9a      	ldr	r2, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 8014638:	193b      	adds	r3, r7, r4
 801463a:	615a      	str	r2, [r3, #20]
        };

        lfs_superblock_tole32(&superblock);
 801463c:	193b      	adds	r3, r7, r4
 801463e:	0018      	movs	r0, r3
 8014640:	f7fa fce8 	bl	800f014 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8014644:	214c      	movs	r1, #76	; 0x4c
 8014646:	187b      	adds	r3, r7, r1
 8014648:	4a27      	ldr	r2, [pc, #156]	; (80146e8 <lfs_rawformat+0x17c>)
 801464a:	601a      	str	r2, [r3, #0]
 801464c:	187b      	adds	r3, r7, r1
 801464e:	2200      	movs	r2, #0
 8014650:	605a      	str	r2, [r3, #4]
 8014652:	187b      	adds	r3, r7, r1
 8014654:	4a25      	ldr	r2, [pc, #148]	; (80146ec <lfs_rawformat+0x180>)
 8014656:	609a      	str	r2, [r3, #8]
 8014658:	187b      	adds	r3, r7, r1
 801465a:	4a25      	ldr	r2, [pc, #148]	; (80146f0 <lfs_rawformat+0x184>)
 801465c:	60da      	str	r2, [r3, #12]
 801465e:	187b      	adds	r3, r7, r1
 8014660:	4a24      	ldr	r2, [pc, #144]	; (80146f4 <lfs_rawformat+0x188>)
 8014662:	611a      	str	r2, [r3, #16]
 8014664:	187b      	adds	r3, r7, r1
 8014666:	193a      	adds	r2, r7, r4
 8014668:	615a      	str	r2, [r3, #20]
 801466a:	187a      	adds	r2, r7, r1
 801466c:	1979      	adds	r1, r7, r5
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	2303      	movs	r3, #3
 8014672:	f7fe f8c3 	bl	80127fc <lfs_dir_commit>
 8014676:	0003      	movs	r3, r0
 8014678:	67fb      	str	r3, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 801467a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801467c:	2b00      	cmp	r3, #0
 801467e:	d11f      	bne.n	80146c0 <lfs_rawformat+0x154>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8014680:	197b      	adds	r3, r7, r5
 8014682:	2200      	movs	r2, #0
 8014684:	759a      	strb	r2, [r3, #22]
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8014686:	1979      	adds	r1, r7, r5
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	2300      	movs	r3, #0
 801468c:	2200      	movs	r2, #0
 801468e:	f7fe f8b5 	bl	80127fc <lfs_dir_commit>
 8014692:	0003      	movs	r3, r0
 8014694:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (err) {
 8014696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014698:	2b00      	cmp	r3, #0
 801469a:	d113      	bne.n	80146c4 <lfs_rawformat+0x158>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801469c:	212c      	movs	r1, #44	; 0x2c
 801469e:	187b      	adds	r3, r7, r1
 80146a0:	2200      	movs	r2, #0
 80146a2:	601a      	str	r2, [r3, #0]
 80146a4:	187b      	adds	r3, r7, r1
 80146a6:	2201      	movs	r2, #1
 80146a8:	605a      	str	r2, [r3, #4]
 80146aa:	187a      	adds	r2, r7, r1
 80146ac:	1979      	adds	r1, r7, r5
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	0018      	movs	r0, r3
 80146b2:	f7fc f987 	bl	80109c4 <lfs_dir_fetch>
 80146b6:	0003      	movs	r3, r0
 80146b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80146ba:	e004      	b.n	80146c6 <lfs_rawformat+0x15a>
            goto cleanup;
 80146bc:	46c0      	nop			; (mov r8, r8)
 80146be:	e002      	b.n	80146c6 <lfs_rawformat+0x15a>
            goto cleanup;
 80146c0:	46c0      	nop			; (mov r8, r8)
 80146c2:	e000      	b.n	80146c6 <lfs_rawformat+0x15a>
            goto cleanup;
 80146c4:	46c0      	nop			; (mov r8, r8)
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	0018      	movs	r0, r3
 80146ca:	f7ff ff27 	bl	801451c <lfs_deinit>
    return err;
 80146ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80146d0:	0018      	movs	r0, r3
 80146d2:	46bd      	mov	sp, r7
 80146d4:	b020      	add	sp, #128	; 0x80
 80146d6:	bdb0      	pop	{r4, r5, r7, pc}
 80146d8:	0801ca60 	.word	0x0801ca60
 80146dc:	0801cfe0 	.word	0x0801cfe0
 80146e0:	000010a8 	.word	0x000010a8
 80146e4:	0801c52c 	.word	0x0801c52c
 80146e8:	40100000 	.word	0x40100000
 80146ec:	0ff00008 	.word	0x0ff00008
 80146f0:	0801ca78 	.word	0x0801ca78
 80146f4:	20100018 	.word	0x20100018

080146f8 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 80146f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146fa:	b09f      	sub	sp, #124	; 0x7c
 80146fc:	af04      	add	r7, sp, #16
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8014702:	683a      	ldr	r2, [r7, #0]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	0011      	movs	r1, r2
 8014708:	0018      	movs	r0, r3
 801470a:	f7ff fd2b 	bl	8014164 <lfs_init>
 801470e:	0003      	movs	r3, r0
 8014710:	667b      	str	r3, [r7, #100]	; 0x64
    if (err) {
 8014712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014714:	2b00      	cmp	r3, #0
 8014716:	d001      	beq.n	801471c <lfs_rawmount+0x24>
        return err;
 8014718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801471a:	e206      	b.n	8014b2a <lfs_rawmount+0x432>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 801471c:	2434      	movs	r4, #52	; 0x34
 801471e:	193b      	adds	r3, r7, r4
 8014720:	0018      	movs	r0, r3
 8014722:	2320      	movs	r3, #32
 8014724:	001a      	movs	r2, r3
 8014726:	2100      	movs	r1, #0
 8014728:	f002 f885 	bl	8016836 <memset>
 801472c:	193b      	adds	r3, r7, r4
 801472e:	2201      	movs	r2, #1
 8014730:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8014732:	232c      	movs	r3, #44	; 0x2c
 8014734:	18fb      	adds	r3, r7, r3
 8014736:	4abf      	ldr	r2, [pc, #764]	; (8014a34 <lfs_rawmount+0x33c>)
 8014738:	ca03      	ldmia	r2!, {r0, r1}
 801473a:	c303      	stmia	r3!, {r0, r1}
    lfs_size_t tortoise_i = 1;
 801473c:	2301      	movs	r3, #1
 801473e:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 8014740:	2301      	movs	r3, #1
 8014742:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8014744:	e1b0      	b.n	8014aa8 <lfs_rawmount+0x3b0>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8014746:	232c      	movs	r3, #44	; 0x2c
 8014748:	18fa      	adds	r2, r7, r3
 801474a:	2334      	movs	r3, #52	; 0x34
 801474c:	18fb      	adds	r3, r7, r3
 801474e:	3318      	adds	r3, #24
 8014750:	0011      	movs	r1, r2
 8014752:	0018      	movs	r0, r3
 8014754:	f7fa f9f7 	bl	800eb46 <lfs_pair_issync>
 8014758:	1e03      	subs	r3, r0, #0
 801475a:	d009      	beq.n	8014770 <lfs_rawmount+0x78>
            LFS_WARN("Cycle detected in tail list");
 801475c:	4bb6      	ldr	r3, [pc, #728]	; (8014a38 <lfs_rawmount+0x340>)
 801475e:	4ab7      	ldr	r2, [pc, #732]	; (8014a3c <lfs_rawmount+0x344>)
 8014760:	49b7      	ldr	r1, [pc, #732]	; (8014a40 <lfs_rawmount+0x348>)
 8014762:	48b8      	ldr	r0, [pc, #736]	; (8014a44 <lfs_rawmount+0x34c>)
 8014764:	f002 ff22 	bl	80175ac <iprintf>
            err = LFS_ERR_CORRUPT;
 8014768:	2354      	movs	r3, #84	; 0x54
 801476a:	425b      	negs	r3, r3
 801476c:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 801476e:	e1d7      	b.n	8014b20 <lfs_rawmount+0x428>
        }
        if (tortoise_i == tortoise_period) {
 8014770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014774:	429a      	cmp	r2, r3
 8014776:	d10e      	bne.n	8014796 <lfs_rawmount+0x9e>
            tortoise[0] = dir.tail[0];
 8014778:	2134      	movs	r1, #52	; 0x34
 801477a:	187b      	adds	r3, r7, r1
 801477c:	699a      	ldr	r2, [r3, #24]
 801477e:	202c      	movs	r0, #44	; 0x2c
 8014780:	183b      	adds	r3, r7, r0
 8014782:	601a      	str	r2, [r3, #0]
            tortoise[1] = dir.tail[1];
 8014784:	187b      	adds	r3, r7, r1
 8014786:	69da      	ldr	r2, [r3, #28]
 8014788:	183b      	adds	r3, r7, r0
 801478a:	605a      	str	r2, [r3, #4]
            tortoise_i = 0;
 801478c:	2300      	movs	r3, #0
 801478e:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 8014790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014792:	005b      	lsls	r3, r3, #1
 8014794:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 8014796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014798:	3301      	adds	r3, #1
 801479a:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801479c:	2520      	movs	r5, #32
 801479e:	197b      	adds	r3, r7, r5
 80147a0:	687a      	ldr	r2, [r7, #4]
 80147a2:	601a      	str	r2, [r3, #0]
 80147a4:	197b      	adds	r3, r7, r5
 80147a6:	4aa8      	ldr	r2, [pc, #672]	; (8014a48 <lfs_rawmount+0x350>)
 80147a8:	605a      	str	r2, [r3, #4]
 80147aa:	197b      	adds	r3, r7, r5
 80147ac:	2208      	movs	r2, #8
 80147ae:	609a      	str	r2, [r3, #8]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80147b0:	4ca6      	ldr	r4, [pc, #664]	; (8014a4c <lfs_rawmount+0x354>)
 80147b2:	2134      	movs	r1, #52	; 0x34
 80147b4:	187b      	adds	r3, r7, r1
 80147b6:	3318      	adds	r3, #24
 80147b8:	001a      	movs	r2, r3
 80147ba:	1879      	adds	r1, r7, r1
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	197b      	adds	r3, r7, r5
 80147c0:	9303      	str	r3, [sp, #12]
 80147c2:	4ba3      	ldr	r3, [pc, #652]	; (8014a50 <lfs_rawmount+0x358>)
 80147c4:	9302      	str	r3, [sp, #8]
 80147c6:	2300      	movs	r3, #0
 80147c8:	9301      	str	r3, [sp, #4]
 80147ca:	4ba2      	ldr	r3, [pc, #648]	; (8014a54 <lfs_rawmount+0x35c>)
 80147cc:	9300      	str	r3, [sp, #0]
 80147ce:	0023      	movs	r3, r4
 80147d0:	f7fb fcfa 	bl	80101c8 <lfs_dir_fetchmatch>
 80147d4:	0003      	movs	r3, r0
 80147d6:	65bb      	str	r3, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80147d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80147da:	2b00      	cmp	r3, #0
 80147dc:	da02      	bge.n	80147e4 <lfs_rawmount+0xec>
            err = tag;
 80147de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80147e0:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 80147e2:	e19d      	b.n	8014b20 <lfs_rawmount+0x428>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80147e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d100      	bne.n	80147ec <lfs_rawmount+0xf4>
 80147ea:	e14f      	b.n	8014a8c <lfs_rawmount+0x394>
 80147ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80147ee:	0018      	movs	r0, r3
 80147f0:	f7fa fa15 	bl	800ec1e <lfs_tag_isdelete>
 80147f4:	0003      	movs	r3, r0
 80147f6:	001a      	movs	r2, r3
 80147f8:	2301      	movs	r3, #1
 80147fa:	4053      	eors	r3, r2
 80147fc:	b2db      	uxtb	r3, r3
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d100      	bne.n	8014804 <lfs_rawmount+0x10c>
 8014802:	e143      	b.n	8014a8c <lfs_rawmount+0x394>
            // update root
            lfs->root[0] = dir.pair[0];
 8014804:	2134      	movs	r1, #52	; 0x34
 8014806:	187b      	adds	r3, r7, r1
 8014808:	681a      	ldr	r2, [r3, #0]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 801480e:	187b      	adds	r3, r7, r1
 8014810:	685a      	ldr	r2, [r3, #4]
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8014816:	4c90      	ldr	r4, [pc, #576]	; (8014a58 <lfs_rawmount+0x360>)
 8014818:	4a8c      	ldr	r2, [pc, #560]	; (8014a4c <lfs_rawmount+0x354>)
 801481a:	1879      	adds	r1, r7, r1
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	2308      	movs	r3, #8
 8014820:	18fb      	adds	r3, r7, r3
 8014822:	9300      	str	r3, [sp, #0]
 8014824:	0023      	movs	r3, r4
 8014826:	f7fa feaf 	bl	800f588 <lfs_dir_get>
 801482a:	0003      	movs	r3, r0
 801482c:	65bb      	str	r3, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 801482e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014830:	2b00      	cmp	r3, #0
 8014832:	da02      	bge.n	801483a <lfs_rawmount+0x142>
                err = tag;
 8014834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014836:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8014838:	e172      	b.n	8014b20 <lfs_rawmount+0x428>
            }
            lfs_superblock_fromle32(&superblock);
 801483a:	2408      	movs	r4, #8
 801483c:	193b      	adds	r3, r7, r4
 801483e:	0018      	movs	r0, r3
 8014840:	f7fa fbb0 	bl	800efa4 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8014844:	0021      	movs	r1, r4
 8014846:	187b      	adds	r3, r7, r1
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	0c1a      	lsrs	r2, r3, #16
 801484c:	2456      	movs	r4, #86	; 0x56
 801484e:	193b      	adds	r3, r7, r4
 8014850:	801a      	strh	r2, [r3, #0]
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8014852:	187b      	adds	r3, r7, r1
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	2554      	movs	r5, #84	; 0x54
 8014858:	197b      	adds	r3, r7, r5
 801485a:	801a      	strh	r2, [r3, #0]
            if (major_version != lfs_fs_disk_version_major(lfs)
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	0018      	movs	r0, r3
 8014860:	f7fa fc68 	bl	800f134 <lfs_fs_disk_version_major>
 8014864:	0003      	movs	r3, r0
 8014866:	001a      	movs	r2, r3
 8014868:	193b      	adds	r3, r7, r4
 801486a:	881b      	ldrh	r3, [r3, #0]
 801486c:	4293      	cmp	r3, r2
 801486e:	d109      	bne.n	8014884 <lfs_rawmount+0x18c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	0018      	movs	r0, r3
 8014874:	f7fa fc6d 	bl	800f152 <lfs_fs_disk_version_minor>
 8014878:	0003      	movs	r3, r0
 801487a:	001a      	movs	r2, r3
 801487c:	197b      	adds	r3, r7, r5
 801487e:	881b      	ldrh	r3, [r3, #0]
 8014880:	4293      	cmp	r3, r2
 8014882:	d921      	bls.n	80148c8 <lfs_rawmount+0x1d0>
                LFS_ERROR("Invalid version "
 8014884:	2356      	movs	r3, #86	; 0x56
 8014886:	18fb      	adds	r3, r7, r3
 8014888:	881d      	ldrh	r5, [r3, #0]
 801488a:	2354      	movs	r3, #84	; 0x54
 801488c:	18fb      	adds	r3, r7, r3
 801488e:	881c      	ldrh	r4, [r3, #0]
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	0018      	movs	r0, r3
 8014894:	f7fa fc4e 	bl	800f134 <lfs_fs_disk_version_major>
 8014898:	0003      	movs	r3, r0
 801489a:	001e      	movs	r6, r3
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	0018      	movs	r0, r3
 80148a0:	f7fa fc57 	bl	800f152 <lfs_fs_disk_version_minor>
 80148a4:	0003      	movs	r3, r0
 80148a6:	469c      	mov	ip, r3
 80148a8:	4a6c      	ldr	r2, [pc, #432]	; (8014a5c <lfs_rawmount+0x364>)
 80148aa:	4965      	ldr	r1, [pc, #404]	; (8014a40 <lfs_rawmount+0x348>)
 80148ac:	486c      	ldr	r0, [pc, #432]	; (8014a60 <lfs_rawmount+0x368>)
 80148ae:	4b62      	ldr	r3, [pc, #392]	; (8014a38 <lfs_rawmount+0x340>)
 80148b0:	9303      	str	r3, [sp, #12]
 80148b2:	4663      	mov	r3, ip
 80148b4:	9302      	str	r3, [sp, #8]
 80148b6:	9601      	str	r6, [sp, #4]
 80148b8:	9400      	str	r4, [sp, #0]
 80148ba:	002b      	movs	r3, r5
 80148bc:	f002 fe76 	bl	80175ac <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80148c0:	2316      	movs	r3, #22
 80148c2:	425b      	negs	r3, r3
 80148c4:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80148c6:	e0b4      	b.n	8014a32 <lfs_rawmount+0x33a>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	0018      	movs	r0, r3
 80148cc:	f7fa fc41 	bl	800f152 <lfs_fs_disk_version_minor>
 80148d0:	0003      	movs	r3, r0
 80148d2:	001a      	movs	r2, r3
 80148d4:	2354      	movs	r3, #84	; 0x54
 80148d6:	18fb      	adds	r3, r7, r3
 80148d8:	881b      	ldrh	r3, [r3, #0]
 80148da:	4293      	cmp	r3, r2
 80148dc:	d204      	bcs.n	80148e8 <lfs_rawmount+0x1f0>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2101      	movs	r1, #1
 80148e2:	0018      	movs	r0, r3
 80148e4:	f000 fbde 	bl	80150a4 <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 80148e8:	2108      	movs	r1, #8
 80148ea:	187b      	adds	r3, r7, r1
 80148ec:	68db      	ldr	r3, [r3, #12]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d01c      	beq.n	801492c <lfs_rawmount+0x234>
                if (superblock.name_max > lfs->name_max) {
 80148f2:	187b      	adds	r3, r7, r1
 80148f4:	68da      	ldr	r2, [r3, #12]
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d911      	bls.n	8014922 <lfs_rawmount+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80148fe:	187b      	adds	r3, r7, r1
 8014900:	68dc      	ldr	r4, [r3, #12]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014906:	4d57      	ldr	r5, [pc, #348]	; (8014a64 <lfs_rawmount+0x36c>)
 8014908:	494d      	ldr	r1, [pc, #308]	; (8014a40 <lfs_rawmount+0x348>)
 801490a:	4857      	ldr	r0, [pc, #348]	; (8014a68 <lfs_rawmount+0x370>)
 801490c:	4a4a      	ldr	r2, [pc, #296]	; (8014a38 <lfs_rawmount+0x340>)
 801490e:	9201      	str	r2, [sp, #4]
 8014910:	9300      	str	r3, [sp, #0]
 8014912:	0023      	movs	r3, r4
 8014914:	002a      	movs	r2, r5
 8014916:	f002 fe49 	bl	80175ac <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 801491a:	2316      	movs	r3, #22
 801491c:	425b      	negs	r3, r3
 801491e:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8014920:	e087      	b.n	8014a32 <lfs_rawmount+0x33a>
                }

                lfs->name_max = superblock.name_max;
 8014922:	2308      	movs	r3, #8
 8014924:	18fb      	adds	r3, r7, r3
 8014926:	68da      	ldr	r2, [r3, #12]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 801492c:	2108      	movs	r1, #8
 801492e:	187b      	adds	r3, r7, r1
 8014930:	691b      	ldr	r3, [r3, #16]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d01c      	beq.n	8014970 <lfs_rawmount+0x278>
                if (superblock.file_max > lfs->file_max) {
 8014936:	187b      	adds	r3, r7, r1
 8014938:	691a      	ldr	r2, [r3, #16]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801493e:	429a      	cmp	r2, r3
 8014940:	d911      	bls.n	8014966 <lfs_rawmount+0x26e>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8014942:	187b      	adds	r3, r7, r1
 8014944:	691c      	ldr	r4, [r3, #16]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801494a:	4d48      	ldr	r5, [pc, #288]	; (8014a6c <lfs_rawmount+0x374>)
 801494c:	493c      	ldr	r1, [pc, #240]	; (8014a40 <lfs_rawmount+0x348>)
 801494e:	4848      	ldr	r0, [pc, #288]	; (8014a70 <lfs_rawmount+0x378>)
 8014950:	4a39      	ldr	r2, [pc, #228]	; (8014a38 <lfs_rawmount+0x340>)
 8014952:	9201      	str	r2, [sp, #4]
 8014954:	9300      	str	r3, [sp, #0]
 8014956:	0023      	movs	r3, r4
 8014958:	002a      	movs	r2, r5
 801495a:	f002 fe27 	bl	80175ac <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 801495e:	2316      	movs	r3, #22
 8014960:	425b      	negs	r3, r3
 8014962:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8014964:	e065      	b.n	8014a32 <lfs_rawmount+0x33a>
                }

                lfs->file_max = superblock.file_max;
 8014966:	2308      	movs	r3, #8
 8014968:	18fb      	adds	r3, r7, r3
 801496a:	691a      	ldr	r2, [r3, #16]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 8014970:	2108      	movs	r1, #8
 8014972:	187b      	adds	r3, r7, r1
 8014974:	695b      	ldr	r3, [r3, #20]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d01c      	beq.n	80149b4 <lfs_rawmount+0x2bc>
                if (superblock.attr_max > lfs->attr_max) {
 801497a:	187b      	adds	r3, r7, r1
 801497c:	695a      	ldr	r2, [r3, #20]
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014982:	429a      	cmp	r2, r3
 8014984:	d911      	bls.n	80149aa <lfs_rawmount+0x2b2>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8014986:	187b      	adds	r3, r7, r1
 8014988:	695c      	ldr	r4, [r3, #20]
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801498e:	4d39      	ldr	r5, [pc, #228]	; (8014a74 <lfs_rawmount+0x37c>)
 8014990:	492b      	ldr	r1, [pc, #172]	; (8014a40 <lfs_rawmount+0x348>)
 8014992:	4839      	ldr	r0, [pc, #228]	; (8014a78 <lfs_rawmount+0x380>)
 8014994:	4a28      	ldr	r2, [pc, #160]	; (8014a38 <lfs_rawmount+0x340>)
 8014996:	9201      	str	r2, [sp, #4]
 8014998:	9300      	str	r3, [sp, #0]
 801499a:	0023      	movs	r3, r4
 801499c:	002a      	movs	r2, r5
 801499e:	f002 fe05 	bl	80175ac <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80149a2:	2316      	movs	r3, #22
 80149a4:	425b      	negs	r3, r3
 80149a6:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80149a8:	e043      	b.n	8014a32 <lfs_rawmount+0x33a>
                }

                lfs->attr_max = superblock.attr_max;
 80149aa:	2308      	movs	r3, #8
 80149ac:	18fb      	adds	r3, r7, r3
 80149ae:	695a      	ldr	r2, [r3, #20]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	679a      	str	r2, [r3, #120]	; 0x78
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80149b8:	6a1b      	ldr	r3, [r3, #32]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d01a      	beq.n	80149f4 <lfs_rawmount+0x2fc>
                    && superblock.block_count != lfs->cfg->block_count) {
 80149be:	2108      	movs	r1, #8
 80149c0:	187b      	adds	r3, r7, r1
 80149c2:	689a      	ldr	r2, [r3, #8]
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80149c8:	6a1b      	ldr	r3, [r3, #32]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d012      	beq.n	80149f4 <lfs_rawmount+0x2fc>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80149ce:	187b      	adds	r3, r7, r1
 80149d0:	689c      	ldr	r4, [r3, #8]
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80149d6:	6a1b      	ldr	r3, [r3, #32]
 80149d8:	4d28      	ldr	r5, [pc, #160]	; (8014a7c <lfs_rawmount+0x384>)
 80149da:	4919      	ldr	r1, [pc, #100]	; (8014a40 <lfs_rawmount+0x348>)
 80149dc:	4828      	ldr	r0, [pc, #160]	; (8014a80 <lfs_rawmount+0x388>)
 80149de:	4a16      	ldr	r2, [pc, #88]	; (8014a38 <lfs_rawmount+0x340>)
 80149e0:	9201      	str	r2, [sp, #4]
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	0023      	movs	r3, r4
 80149e6:	002a      	movs	r2, r5
 80149e8:	f002 fde0 	bl	80175ac <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80149ec:	2316      	movs	r3, #22
 80149ee:	425b      	negs	r3, r3
 80149f0:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80149f2:	e01e      	b.n	8014a32 <lfs_rawmount+0x33a>
            }

            lfs->block_count = superblock.block_count;
 80149f4:	2108      	movs	r1, #8
 80149f6:	187b      	adds	r3, r7, r1
 80149f8:	689a      	ldr	r2, [r3, #8]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 80149fe:	187b      	adds	r3, r7, r1
 8014a00:	685a      	ldr	r2, [r3, #4]
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a06:	69db      	ldr	r3, [r3, #28]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d03f      	beq.n	8014a8c <lfs_rawmount+0x394>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8014a0c:	187b      	adds	r3, r7, r1
 8014a0e:	685c      	ldr	r4, [r3, #4]
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a14:	69db      	ldr	r3, [r3, #28]
 8014a16:	4d1b      	ldr	r5, [pc, #108]	; (8014a84 <lfs_rawmount+0x38c>)
 8014a18:	4909      	ldr	r1, [pc, #36]	; (8014a40 <lfs_rawmount+0x348>)
 8014a1a:	481b      	ldr	r0, [pc, #108]	; (8014a88 <lfs_rawmount+0x390>)
 8014a1c:	4a06      	ldr	r2, [pc, #24]	; (8014a38 <lfs_rawmount+0x340>)
 8014a1e:	9201      	str	r2, [sp, #4]
 8014a20:	9300      	str	r3, [sp, #0]
 8014a22:	0023      	movs	r3, r4
 8014a24:	002a      	movs	r2, r5
 8014a26:	f002 fdc1 	bl	80175ac <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8014a2a:	2316      	movs	r3, #22
 8014a2c:	425b      	negs	r3, r3
 8014a2e:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8014a30:	46c0      	nop			; (mov r8, r8)
            goto cleanup;
 8014a32:	e075      	b.n	8014b20 <lfs_rawmount+0x428>
 8014a34:	0801c684 	.word	0x0801c684
 8014a38:	0801c640 	.word	0x0801c640
 8014a3c:	000010f1 	.word	0x000010f1
 8014a40:	0801c52c 	.word	0x0801c52c
 8014a44:	0801ca84 	.word	0x0801ca84
 8014a48:	0801ca78 	.word	0x0801ca78
 8014a4c:	7ffffc00 	.word	0x7ffffc00
 8014a50:	08010b71 	.word	0x08010b71
 8014a54:	0ff00008 	.word	0x0ff00008
 8014a58:	20100018 	.word	0x20100018
 8014a5c:	0000111f 	.word	0x0000111f
 8014a60:	0801cab0 	.word	0x0801cab0
 8014a64:	0000113b 	.word	0x0000113b
 8014a68:	0801cae8 	.word	0x0801cae8
 8014a6c:	00001146 	.word	0x00001146
 8014a70:	0801cb1c 	.word	0x0801cb1c
 8014a74:	00001151 	.word	0x00001151
 8014a78:	0801cb50 	.word	0x0801cb50
 8014a7c:	0000115d 	.word	0x0000115d
 8014a80:	0801cb84 	.word	0x0801cb84
 8014a84:	00001166 	.word	0x00001166
 8014a88:	0801cbb8 	.word	0x0801cbb8
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	3330      	adds	r3, #48	; 0x30
 8014a90:	001a      	movs	r2, r3
 8014a92:	2334      	movs	r3, #52	; 0x34
 8014a94:	18f9      	adds	r1, r7, r3
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	0018      	movs	r0, r3
 8014a9a:	f7fb ffaf 	bl	80109fc <lfs_dir_getgstate>
 8014a9e:	0003      	movs	r3, r0
 8014aa0:	667b      	str	r3, [r7, #100]	; 0x64
        if (err) {
 8014aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d13a      	bne.n	8014b1e <lfs_rawmount+0x426>
    while (!lfs_pair_isnull(dir.tail)) {
 8014aa8:	2334      	movs	r3, #52	; 0x34
 8014aaa:	18fb      	adds	r3, r7, r3
 8014aac:	3318      	adds	r3, #24
 8014aae:	0018      	movs	r0, r3
 8014ab0:	f7fa f809 	bl	800eac6 <lfs_pair_isnull>
 8014ab4:	0003      	movs	r3, r0
 8014ab6:	001a      	movs	r2, r3
 8014ab8:	2301      	movs	r3, #1
 8014aba:	4053      	eors	r3, r2
 8014abc:	b2db      	uxtb	r3, r3
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d000      	beq.n	8014ac4 <lfs_rawmount+0x3cc>
 8014ac2:	e640      	b.n	8014746 <lfs_rawmount+0x4e>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	3330      	adds	r3, #48	; 0x30
 8014ac8:	0018      	movs	r0, r3
 8014aca:	f7fa f94d 	bl	800ed68 <lfs_gstate_iszero>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ad2:	0018      	movs	r0, r3
 8014ad4:	f7fa f897 	bl	800ec06 <lfs_tag_isvalid>
 8014ad8:	0003      	movs	r3, r0
 8014ada:	001a      	movs	r2, r3
 8014adc:	2301      	movs	r3, #1
 8014ade:	4053      	eors	r3, r2
 8014ae0:	b2db      	uxtb	r3, r3
 8014ae2:	001a      	movs	r2, r3
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ae8:	189a      	adds	r2, r3, r2
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	333c      	adds	r3, #60	; 0x3c
 8014af4:	3230      	adds	r2, #48	; 0x30
 8014af6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014af8:	c313      	stmia	r3!, {r0, r1, r4}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->block_count;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b02:	0019      	movs	r1, r3
 8014b04:	0010      	movs	r0, r2
 8014b06:	f7eb fbab 	bl	8000260 <__aeabi_uidivmod>
 8014b0a:	000b      	movs	r3, r1
 8014b0c:	001a      	movs	r2, r3
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	0018      	movs	r0, r3
 8014b16:	f7fa fb69 	bl	800f1ec <lfs_alloc_drop>

    return 0;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	e005      	b.n	8014b2a <lfs_rawmount+0x432>
            goto cleanup;
 8014b1e:	46c0      	nop			; (mov r8, r8)

cleanup:
    lfs_rawunmount(lfs);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	0018      	movs	r0, r3
 8014b24:	f000 f806 	bl	8014b34 <lfs_rawunmount>
    return err;
 8014b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8014b2a:	0018      	movs	r0, r3
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	b01b      	add	sp, #108	; 0x6c
 8014b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b32:	46c0      	nop			; (mov r8, r8)

08014b34 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	0018      	movs	r0, r3
 8014b40:	f7ff fcec 	bl	801451c <lfs_deinit>
 8014b44:	0003      	movs	r3, r0
}
 8014b46:	0018      	movs	r0, r3
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	b002      	add	sp, #8
 8014b4c:	bd80      	pop	{r7, pc}
	...

08014b50 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8014b50:	b5b0      	push	{r4, r5, r7, lr}
 8014b52:	b0a0      	sub	sp, #128	; 0x80
 8014b54:	af04      	add	r7, sp, #16
 8014b56:	60f8      	str	r0, [r7, #12]
 8014b58:	60b9      	str	r1, [r7, #8]
 8014b5a:	607a      	str	r2, [r7, #4]
 8014b5c:	001a      	movs	r2, r3
 8014b5e:	1cfb      	adds	r3, r7, #3
 8014b60:	701a      	strb	r2, [r3, #0]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8014b62:	2424      	movs	r4, #36	; 0x24
 8014b64:	193b      	adds	r3, r7, r4
 8014b66:	0018      	movs	r0, r3
 8014b68:	2320      	movs	r3, #32
 8014b6a:	001a      	movs	r2, r3
 8014b6c:	2100      	movs	r1, #0
 8014b6e:	f001 fe62 	bl	8016836 <memset>
 8014b72:	193b      	adds	r3, r7, r4
 8014b74:	2201      	movs	r2, #1
 8014b76:	61da      	str	r2, [r3, #28]
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8014b78:	231c      	movs	r3, #28
 8014b7a:	18fb      	adds	r3, r7, r3
 8014b7c:	4aa2      	ldr	r2, [pc, #648]	; (8014e08 <lfs_fs_rawtraverse+0x2b8>)
 8014b7e:	ca03      	ldmia	r2!, {r0, r1}
 8014b80:	c303      	stmia	r3!, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8014b82:	2301      	movs	r3, #1
 8014b84:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8014b86:	2301      	movs	r3, #1
 8014b88:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8014b8a:	e0d1      	b.n	8014d30 <lfs_fs_rawtraverse+0x1e0>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8014b8c:	231c      	movs	r3, #28
 8014b8e:	18fa      	adds	r2, r7, r3
 8014b90:	2324      	movs	r3, #36	; 0x24
 8014b92:	18fb      	adds	r3, r7, r3
 8014b94:	3318      	adds	r3, #24
 8014b96:	0011      	movs	r1, r2
 8014b98:	0018      	movs	r0, r3
 8014b9a:	f7f9 ffd4 	bl	800eb46 <lfs_pair_issync>
 8014b9e:	1e03      	subs	r3, r0, #0
 8014ba0:	d008      	beq.n	8014bb4 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 8014ba2:	4b9a      	ldr	r3, [pc, #616]	; (8014e0c <lfs_fs_rawtraverse+0x2bc>)
 8014ba4:	4a9a      	ldr	r2, [pc, #616]	; (8014e10 <lfs_fs_rawtraverse+0x2c0>)
 8014ba6:	499b      	ldr	r1, [pc, #620]	; (8014e14 <lfs_fs_rawtraverse+0x2c4>)
 8014ba8:	489b      	ldr	r0, [pc, #620]	; (8014e18 <lfs_fs_rawtraverse+0x2c8>)
 8014baa:	f002 fcff 	bl	80175ac <iprintf>
            return LFS_ERR_CORRUPT;
 8014bae:	2354      	movs	r3, #84	; 0x54
 8014bb0:	425b      	negs	r3, r3
 8014bb2:	e125      	b.n	8014e00 <lfs_fs_rawtraverse+0x2b0>
        }
        if (tortoise_i == tortoise_period) {
 8014bb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d10e      	bne.n	8014bda <lfs_fs_rawtraverse+0x8a>
            tortoise[0] = dir.tail[0];
 8014bbc:	2124      	movs	r1, #36	; 0x24
 8014bbe:	187b      	adds	r3, r7, r1
 8014bc0:	699a      	ldr	r2, [r3, #24]
 8014bc2:	201c      	movs	r0, #28
 8014bc4:	183b      	adds	r3, r7, r0
 8014bc6:	601a      	str	r2, [r3, #0]
            tortoise[1] = dir.tail[1];
 8014bc8:	187b      	adds	r3, r7, r1
 8014bca:	69da      	ldr	r2, [r3, #28]
 8014bcc:	183b      	adds	r3, r7, r0
 8014bce:	605a      	str	r2, [r3, #4]
            tortoise_i = 0;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 8014bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014bd6:	005b      	lsls	r3, r3, #1
 8014bd8:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 8014bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bdc:	3301      	adds	r3, #1
 8014bde:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8014be0:	2300      	movs	r3, #0
 8014be2:	667b      	str	r3, [r7, #100]	; 0x64
 8014be4:	e013      	b.n	8014c0e <lfs_fs_rawtraverse+0xbe>
            int err = cb(data, dir.tail[i]);
 8014be6:	2324      	movs	r3, #36	; 0x24
 8014be8:	18fb      	adds	r3, r7, r3
 8014bea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014bec:	3206      	adds	r2, #6
 8014bee:	0092      	lsls	r2, r2, #2
 8014bf0:	58d1      	ldr	r1, [r2, r3]
 8014bf2:	687a      	ldr	r2, [r7, #4]
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	0010      	movs	r0, r2
 8014bf8:	4798      	blx	r3
 8014bfa:	0003      	movs	r3, r0
 8014bfc:	647b      	str	r3, [r7, #68]	; 0x44
            if (err) {
 8014bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d001      	beq.n	8014c08 <lfs_fs_rawtraverse+0xb8>
                return err;
 8014c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c06:	e0fb      	b.n	8014e00 <lfs_fs_rawtraverse+0x2b0>
        for (int i = 0; i < 2; i++) {
 8014c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8014c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c10:	2b01      	cmp	r3, #1
 8014c12:	dde8      	ble.n	8014be6 <lfs_fs_rawtraverse+0x96>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8014c14:	2124      	movs	r1, #36	; 0x24
 8014c16:	187b      	adds	r3, r7, r1
 8014c18:	3318      	adds	r3, #24
 8014c1a:	001a      	movs	r2, r3
 8014c1c:	1879      	adds	r1, r7, r1
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	0018      	movs	r0, r3
 8014c22:	f7fb fecf 	bl	80109c4 <lfs_dir_fetch>
 8014c26:	0003      	movs	r3, r0
 8014c28:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (err) {
 8014c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d001      	beq.n	8014c34 <lfs_fs_rawtraverse+0xe4>
            return err;
 8014c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c32:	e0e5      	b.n	8014e00 <lfs_fs_rawtraverse+0x2b0>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8014c34:	2362      	movs	r3, #98	; 0x62
 8014c36:	18fb      	adds	r3, r7, r3
 8014c38:	2200      	movs	r2, #0
 8014c3a:	801a      	strh	r2, [r3, #0]
 8014c3c:	e070      	b.n	8014d20 <lfs_fs_rawtraverse+0x1d0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8014c3e:	2362      	movs	r3, #98	; 0x62
 8014c40:	18fb      	adds	r3, r7, r3
 8014c42:	881b      	ldrh	r3, [r3, #0]
 8014c44:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8014c46:	4a75      	ldr	r2, [pc, #468]	; (8014e1c <lfs_fs_rawtraverse+0x2cc>)
 8014c48:	431a      	orrs	r2, r3
 8014c4a:	4c75      	ldr	r4, [pc, #468]	; (8014e20 <lfs_fs_rawtraverse+0x2d0>)
 8014c4c:	2324      	movs	r3, #36	; 0x24
 8014c4e:	18f9      	adds	r1, r7, r3
 8014c50:	68f8      	ldr	r0, [r7, #12]
 8014c52:	2314      	movs	r3, #20
 8014c54:	18fb      	adds	r3, r7, r3
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	0013      	movs	r3, r2
 8014c5a:	0022      	movs	r2, r4
 8014c5c:	f7fa fc94 	bl	800f588 <lfs_dir_get>
 8014c60:	0003      	movs	r3, r0
 8014c62:	64bb      	str	r3, [r7, #72]	; 0x48
            if (tag < 0) {
 8014c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	da04      	bge.n	8014c74 <lfs_fs_rawtraverse+0x124>
                if (tag == LFS_ERR_NOENT) {
 8014c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c6c:	3302      	adds	r3, #2
 8014c6e:	d050      	beq.n	8014d12 <lfs_fs_rawtraverse+0x1c2>
                    continue;
                }
                return tag;
 8014c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c72:	e0c5      	b.n	8014e00 <lfs_fs_rawtraverse+0x2b0>
            }
            lfs_ctz_fromle32(&ctz);
 8014c74:	2414      	movs	r4, #20
 8014c76:	193b      	adds	r3, r7, r4
 8014c78:	0018      	movs	r0, r3
 8014c7a:	f7fa f963 	bl	800ef44 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8014c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c80:	0018      	movs	r0, r3
 8014c82:	f7f9 fff9 	bl	800ec78 <lfs_tag_type3>
 8014c86:	0003      	movs	r3, r0
 8014c88:	001a      	movs	r2, r3
 8014c8a:	4b66      	ldr	r3, [pc, #408]	; (8014e24 <lfs_fs_rawtraverse+0x2d4>)
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d117      	bne.n	8014cc0 <lfs_fs_rawtraverse+0x170>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8014c90:	68f9      	ldr	r1, [r7, #12]
 8014c92:	0022      	movs	r2, r4
 8014c94:	18bb      	adds	r3, r7, r2
 8014c96:	681c      	ldr	r4, [r3, #0]
 8014c98:	18bb      	adds	r3, r7, r2
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	68f8      	ldr	r0, [r7, #12]
 8014c9e:	687a      	ldr	r2, [r7, #4]
 8014ca0:	9202      	str	r2, [sp, #8]
 8014ca2:	68ba      	ldr	r2, [r7, #8]
 8014ca4:	9201      	str	r2, [sp, #4]
 8014ca6:	9300      	str	r3, [sp, #0]
 8014ca8:	0023      	movs	r3, r4
 8014caa:	000a      	movs	r2, r1
 8014cac:	2100      	movs	r1, #0
 8014cae:	f7fe f8a1 	bl	8012df4 <lfs_ctz_traverse>
 8014cb2:	0003      	movs	r3, r0
 8014cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8014cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d02b      	beq.n	8014d14 <lfs_fs_rawtraverse+0x1c4>
                    return err;
 8014cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cbe:	e09f      	b.n	8014e00 <lfs_fs_rawtraverse+0x2b0>
                }
            } else if (includeorphans &&
 8014cc0:	1cfb      	adds	r3, r7, #3
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d025      	beq.n	8014d14 <lfs_fs_rawtraverse+0x1c4>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8014cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cca:	0018      	movs	r0, r3
 8014ccc:	f7f9 ffd4 	bl	800ec78 <lfs_tag_type3>
 8014cd0:	0003      	movs	r3, r0
 8014cd2:	001a      	movs	r2, r3
            } else if (includeorphans &&
 8014cd4:	2380      	movs	r3, #128	; 0x80
 8014cd6:	009b      	lsls	r3, r3, #2
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d11b      	bne.n	8014d14 <lfs_fs_rawtraverse+0x1c4>
                for (int i = 0; i < 2; i++) {
 8014cdc:	2300      	movs	r3, #0
 8014cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014ce0:	e013      	b.n	8014d0a <lfs_fs_rawtraverse+0x1ba>
                    err = cb(data, (&ctz.head)[i]);
 8014ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ce4:	009b      	lsls	r3, r3, #2
 8014ce6:	2214      	movs	r2, #20
 8014ce8:	18ba      	adds	r2, r7, r2
 8014cea:	18d3      	adds	r3, r2, r3
 8014cec:	6819      	ldr	r1, [r3, #0]
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	0010      	movs	r0, r2
 8014cf4:	4798      	blx	r3
 8014cf6:	0003      	movs	r3, r0
 8014cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (err) {
 8014cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d001      	beq.n	8014d04 <lfs_fs_rawtraverse+0x1b4>
                        return err;
 8014d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d02:	e07d      	b.n	8014e00 <lfs_fs_rawtraverse+0x2b0>
                for (int i = 0; i < 2; i++) {
 8014d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d06:	3301      	adds	r3, #1
 8014d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d0c:	2b01      	cmp	r3, #1
 8014d0e:	dde8      	ble.n	8014ce2 <lfs_fs_rawtraverse+0x192>
 8014d10:	e000      	b.n	8014d14 <lfs_fs_rawtraverse+0x1c4>
                    continue;
 8014d12:	46c0      	nop			; (mov r8, r8)
        for (uint16_t id = 0; id < dir.count; id++) {
 8014d14:	2162      	movs	r1, #98	; 0x62
 8014d16:	187b      	adds	r3, r7, r1
 8014d18:	881a      	ldrh	r2, [r3, #0]
 8014d1a:	187b      	adds	r3, r7, r1
 8014d1c:	3201      	adds	r2, #1
 8014d1e:	801a      	strh	r2, [r3, #0]
 8014d20:	2324      	movs	r3, #36	; 0x24
 8014d22:	18fb      	adds	r3, r7, r3
 8014d24:	8a9b      	ldrh	r3, [r3, #20]
 8014d26:	2262      	movs	r2, #98	; 0x62
 8014d28:	18ba      	adds	r2, r7, r2
 8014d2a:	8812      	ldrh	r2, [r2, #0]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d386      	bcc.n	8014c3e <lfs_fs_rawtraverse+0xee>
    while (!lfs_pair_isnull(dir.tail)) {
 8014d30:	2324      	movs	r3, #36	; 0x24
 8014d32:	18fb      	adds	r3, r7, r3
 8014d34:	3318      	adds	r3, #24
 8014d36:	0018      	movs	r0, r3
 8014d38:	f7f9 fec5 	bl	800eac6 <lfs_pair_isnull>
 8014d3c:	0003      	movs	r3, r0
 8014d3e:	001a      	movs	r2, r3
 8014d40:	2301      	movs	r3, #1
 8014d42:	4053      	eors	r3, r2
 8014d44:	b2db      	uxtb	r3, r3
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d000      	beq.n	8014d4c <lfs_fs_rawtraverse+0x1fc>
 8014d4a:	e71f      	b.n	8014b8c <lfs_fs_rawtraverse+0x3c>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d50:	65bb      	str	r3, [r7, #88]	; 0x58
 8014d52:	e051      	b.n	8014df8 <lfs_fs_rawtraverse+0x2a8>
        if (f->type != LFS_TYPE_REG) {
 8014d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d56:	799b      	ldrb	r3, [r3, #6]
 8014d58:	2b01      	cmp	r3, #1
 8014d5a:	d149      	bne.n	8014df0 <lfs_fs_rawtraverse+0x2a0>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8014d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d60:	2380      	movs	r3, #128	; 0x80
 8014d62:	025b      	lsls	r3, r3, #9
 8014d64:	4013      	ands	r3, r2
 8014d66:	d01e      	beq.n	8014da6 <lfs_fs_rawtraverse+0x256>
 8014d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d6c:	2380      	movs	r3, #128	; 0x80
 8014d6e:	035b      	lsls	r3, r3, #13
 8014d70:	4013      	ands	r3, r2
 8014d72:	d118      	bne.n	8014da6 <lfs_fs_rawtraverse+0x256>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8014d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d76:	3340      	adds	r3, #64	; 0x40
 8014d78:	0019      	movs	r1, r3
 8014d7a:	68fc      	ldr	r4, [r7, #12]
 8014d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d7e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8014d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d84:	68f8      	ldr	r0, [r7, #12]
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	9202      	str	r2, [sp, #8]
 8014d8a:	68ba      	ldr	r2, [r7, #8]
 8014d8c:	9201      	str	r2, [sp, #4]
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	002b      	movs	r3, r5
 8014d92:	0022      	movs	r2, r4
 8014d94:	f7fe f82e 	bl	8012df4 <lfs_ctz_traverse>
 8014d98:	0003      	movs	r3, r0
 8014d9a:	657b      	str	r3, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8014d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d001      	beq.n	8014da6 <lfs_fs_rawtraverse+0x256>
                return err;
 8014da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014da4:	e02c      	b.n	8014e00 <lfs_fs_rawtraverse+0x2b0>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8014da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014daa:	2380      	movs	r3, #128	; 0x80
 8014dac:	029b      	lsls	r3, r3, #10
 8014dae:	4013      	ands	r3, r2
 8014db0:	d01f      	beq.n	8014df2 <lfs_fs_rawtraverse+0x2a2>
 8014db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014db6:	2380      	movs	r3, #128	; 0x80
 8014db8:	035b      	lsls	r3, r3, #13
 8014dba:	4013      	ands	r3, r2
 8014dbc:	d119      	bne.n	8014df2 <lfs_fs_rawtraverse+0x2a2>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8014dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014dc0:	3340      	adds	r3, #64	; 0x40
 8014dc2:	0019      	movs	r1, r3
 8014dc4:	68fc      	ldr	r4, [r7, #12]
 8014dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014dc8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8014dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dce:	68f8      	ldr	r0, [r7, #12]
 8014dd0:	687a      	ldr	r2, [r7, #4]
 8014dd2:	9202      	str	r2, [sp, #8]
 8014dd4:	68ba      	ldr	r2, [r7, #8]
 8014dd6:	9201      	str	r2, [sp, #4]
 8014dd8:	9300      	str	r3, [sp, #0]
 8014dda:	002b      	movs	r3, r5
 8014ddc:	0022      	movs	r2, r4
 8014dde:	f7fe f809 	bl	8012df4 <lfs_ctz_traverse>
 8014de2:	0003      	movs	r3, r0
 8014de4:	653b      	str	r3, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8014de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d002      	beq.n	8014df2 <lfs_fs_rawtraverse+0x2a2>
                return err;
 8014dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dee:	e007      	b.n	8014e00 <lfs_fs_rawtraverse+0x2b0>
            continue;
 8014df0:	46c0      	nop			; (mov r8, r8)
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8014df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8014df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d1aa      	bne.n	8014d54 <lfs_fs_rawtraverse+0x204>
            }
        }
    }
#endif

    return 0;
 8014dfe:	2300      	movs	r3, #0
}
 8014e00:	0018      	movs	r0, r3
 8014e02:	46bd      	mov	sp, r7
 8014e04:	b01c      	add	sp, #112	; 0x70
 8014e06:	bdb0      	pop	{r4, r5, r7, pc}
 8014e08:	0801c684 	.word	0x0801c684
 8014e0c:	0801c640 	.word	0x0801c640
 8014e10:	000011d1 	.word	0x000011d1
 8014e14:	0801c52c 	.word	0x0801c52c
 8014e18:	0801ca84 	.word	0x0801ca84
 8014e1c:	20000008 	.word	0x20000008
 8014e20:	700ffc00 	.word	0x700ffc00
 8014e24:	00000202 	.word	0x00000202

08014e28 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b08a      	sub	sp, #40	; 0x28
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	60b9      	str	r1, [r7, #8]
 8014e32:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2200      	movs	r2, #0
 8014e38:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	2201      	movs	r2, #1
 8014e3e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8014e40:	2314      	movs	r3, #20
 8014e42:	18fb      	adds	r3, r7, r3
 8014e44:	4a2d      	ldr	r2, [pc, #180]	; (8014efc <lfs_fs_pred+0xd4>)
 8014e46:	ca03      	ldmia	r2!, {r0, r1}
 8014e48:	c303      	stmia	r3!, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 8014e4e:	2301      	movs	r3, #1
 8014e50:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8014e52:	e041      	b.n	8014ed8 <lfs_fs_pred+0xb0>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	3318      	adds	r3, #24
 8014e58:	2214      	movs	r2, #20
 8014e5a:	18ba      	adds	r2, r7, r2
 8014e5c:	0011      	movs	r1, r2
 8014e5e:	0018      	movs	r0, r3
 8014e60:	f7f9 fe71 	bl	800eb46 <lfs_pair_issync>
 8014e64:	1e03      	subs	r3, r0, #0
 8014e66:	d008      	beq.n	8014e7a <lfs_fs_pred+0x52>
            LFS_WARN("Cycle detected in tail list");
 8014e68:	4b25      	ldr	r3, [pc, #148]	; (8014f00 <lfs_fs_pred+0xd8>)
 8014e6a:	4a26      	ldr	r2, [pc, #152]	; (8014f04 <lfs_fs_pred+0xdc>)
 8014e6c:	4926      	ldr	r1, [pc, #152]	; (8014f08 <lfs_fs_pred+0xe0>)
 8014e6e:	4827      	ldr	r0, [pc, #156]	; (8014f0c <lfs_fs_pred+0xe4>)
 8014e70:	f002 fb9c 	bl	80175ac <iprintf>
            return LFS_ERR_CORRUPT;
 8014e74:	2354      	movs	r3, #84	; 0x54
 8014e76:	425b      	negs	r3, r3
 8014e78:	e03c      	b.n	8014ef4 <lfs_fs_pred+0xcc>
        }
        if (tortoise_i == tortoise_period) {
 8014e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e7c:	6a3b      	ldr	r3, [r7, #32]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d10d      	bne.n	8014e9e <lfs_fs_pred+0x76>
            tortoise[0] = pdir->tail[0];
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	699a      	ldr	r2, [r3, #24]
 8014e86:	2114      	movs	r1, #20
 8014e88:	187b      	adds	r3, r7, r1
 8014e8a:	601a      	str	r2, [r3, #0]
            tortoise[1] = pdir->tail[1];
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	69da      	ldr	r2, [r3, #28]
 8014e90:	187b      	adds	r3, r7, r1
 8014e92:	605a      	str	r2, [r3, #4]
            tortoise_i = 0;
 8014e94:	2300      	movs	r3, #0
 8014e96:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8014e98:	6a3b      	ldr	r3, [r7, #32]
 8014e9a:	005b      	lsls	r3, r3, #1
 8014e9c:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8014e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	3318      	adds	r3, #24
 8014ea8:	68ba      	ldr	r2, [r7, #8]
 8014eaa:	0011      	movs	r1, r2
 8014eac:	0018      	movs	r0, r3
 8014eae:	f7f9 fe22 	bl	800eaf6 <lfs_pair_cmp>
 8014eb2:	1e03      	subs	r3, r0, #0
 8014eb4:	d101      	bne.n	8014eba <lfs_fs_pred+0x92>
            return 0;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	e01c      	b.n	8014ef4 <lfs_fs_pred+0xcc>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	3318      	adds	r3, #24
 8014ebe:	001a      	movs	r2, r3
 8014ec0:	6879      	ldr	r1, [r7, #4]
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	0018      	movs	r0, r3
 8014ec6:	f7fb fd7d 	bl	80109c4 <lfs_dir_fetch>
 8014eca:	0003      	movs	r3, r0
 8014ecc:	61fb      	str	r3, [r7, #28]
        if (err) {
 8014ece:	69fb      	ldr	r3, [r7, #28]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d001      	beq.n	8014ed8 <lfs_fs_pred+0xb0>
            return err;
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	e00d      	b.n	8014ef4 <lfs_fs_pred+0xcc>
    while (!lfs_pair_isnull(pdir->tail)) {
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	3318      	adds	r3, #24
 8014edc:	0018      	movs	r0, r3
 8014ede:	f7f9 fdf2 	bl	800eac6 <lfs_pair_isnull>
 8014ee2:	0003      	movs	r3, r0
 8014ee4:	001a      	movs	r2, r3
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	4053      	eors	r3, r2
 8014eea:	b2db      	uxtb	r3, r3
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d1b1      	bne.n	8014e54 <lfs_fs_pred+0x2c>
        }
    }

    return LFS_ERR_NOENT;
 8014ef0:	2302      	movs	r3, #2
 8014ef2:	425b      	negs	r3, r3
}
 8014ef4:	0018      	movs	r0, r3
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	b00a      	add	sp, #40	; 0x28
 8014efa:	bd80      	pop	{r7, pc}
 8014efc:	0801c684 	.word	0x0801c684
 8014f00:	0801c640 	.word	0x0801c640
 8014f04:	0000122f 	.word	0x0000122f
 8014f08:	0801c52c 	.word	0x0801c52c
 8014f0c:	0801ca84 	.word	0x0801ca84

08014f10 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8014f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f12:	b08f      	sub	sp, #60	; 0x3c
 8014f14:	af04      	add	r7, sp, #16
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	60b9      	str	r1, [r7, #8]
 8014f1a:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8014f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8014f2a:	6a3b      	ldr	r3, [r7, #32]
 8014f2c:	3310      	adds	r3, #16
 8014f2e:	001c      	movs	r4, r3
    int err = lfs_bd_read(lfs,
 8014f30:	6a3d      	ldr	r5, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8014f32:	6a3b      	ldr	r3, [r7, #32]
 8014f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8014f36:	69de      	ldr	r6, [r3, #28]
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	681a      	ldr	r2, [r3, #0]
 8014f3c:	69fb      	ldr	r3, [r7, #28]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	6a38      	ldr	r0, [r7, #32]
 8014f42:	2108      	movs	r1, #8
 8014f44:	9103      	str	r1, [sp, #12]
 8014f46:	2110      	movs	r1, #16
 8014f48:	1879      	adds	r1, r7, r1
 8014f4a:	9102      	str	r1, [sp, #8]
 8014f4c:	9301      	str	r3, [sp, #4]
 8014f4e:	9200      	str	r2, [sp, #0]
 8014f50:	0033      	movs	r3, r6
 8014f52:	002a      	movs	r2, r5
 8014f54:	0021      	movs	r1, r4
 8014f56:	f7f9 fa09 	bl	800e36c <lfs_bd_read>
 8014f5a:	0003      	movs	r3, r0
 8014f5c:	61bb      	str	r3, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8014f5e:	69bb      	ldr	r3, [r7, #24]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d001      	beq.n	8014f68 <lfs_fs_parent_match+0x58>
        return err;
 8014f64:	69bb      	ldr	r3, [r7, #24]
 8014f66:	e00f      	b.n	8014f88 <lfs_fs_parent_match+0x78>
    }

    lfs_pair_fromle32(child);
 8014f68:	2410      	movs	r4, #16
 8014f6a:	193b      	adds	r3, r7, r4
 8014f6c:	0018      	movs	r0, r3
 8014f6e:	f7f9 fe16 	bl	800eb9e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8014f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f74:	1d1a      	adds	r2, r3, #4
 8014f76:	193b      	adds	r3, r7, r4
 8014f78:	0011      	movs	r1, r2
 8014f7a:	0018      	movs	r0, r3
 8014f7c:	f7f9 fdbb 	bl	800eaf6 <lfs_pair_cmp>
 8014f80:	0003      	movs	r3, r0
 8014f82:	1e5a      	subs	r2, r3, #1
 8014f84:	4193      	sbcs	r3, r2
 8014f86:	b2db      	uxtb	r3, r3
}
 8014f88:	0018      	movs	r0, r3
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	b00b      	add	sp, #44	; 0x2c
 8014f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f90 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8014f90:	b5b0      	push	{r4, r5, r7, lr}
 8014f92:	b090      	sub	sp, #64	; 0x40
 8014f94:	af04      	add	r7, sp, #16
 8014f96:	60f8      	str	r0, [r7, #12]
 8014f98:	60b9      	str	r1, [r7, #8]
 8014f9a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8014fa8:	231c      	movs	r3, #28
 8014faa:	18fb      	adds	r3, r7, r3
 8014fac:	4a35      	ldr	r2, [pc, #212]	; (8015084 <lfs_fs_parent+0xf4>)
 8014fae:	ca03      	ldmia	r2!, {r0, r1}
 8014fb0:	c303      	stmia	r3!, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8014fba:	e050      	b.n	801505e <lfs_fs_parent+0xce>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	3318      	adds	r3, #24
 8014fc0:	221c      	movs	r2, #28
 8014fc2:	18ba      	adds	r2, r7, r2
 8014fc4:	0011      	movs	r1, r2
 8014fc6:	0018      	movs	r0, r3
 8014fc8:	f7f9 fdbd 	bl	800eb46 <lfs_pair_issync>
 8014fcc:	1e03      	subs	r3, r0, #0
 8014fce:	d008      	beq.n	8014fe2 <lfs_fs_parent+0x52>
            LFS_WARN("Cycle detected in tail list");
 8014fd0:	4b2d      	ldr	r3, [pc, #180]	; (8015088 <lfs_fs_parent+0xf8>)
 8014fd2:	4a2e      	ldr	r2, [pc, #184]	; (801508c <lfs_fs_parent+0xfc>)
 8014fd4:	492e      	ldr	r1, [pc, #184]	; (8015090 <lfs_fs_parent+0x100>)
 8014fd6:	482f      	ldr	r0, [pc, #188]	; (8015094 <lfs_fs_parent+0x104>)
 8014fd8:	f002 fae8 	bl	80175ac <iprintf>
            return LFS_ERR_CORRUPT;
 8014fdc:	2354      	movs	r3, #84	; 0x54
 8014fde:	425b      	negs	r3, r3
 8014fe0:	e04b      	b.n	801507a <lfs_fs_parent+0xea>
        }
        if (tortoise_i == tortoise_period) {
 8014fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d10d      	bne.n	8015006 <lfs_fs_parent+0x76>
            tortoise[0] = parent->tail[0];
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	699a      	ldr	r2, [r3, #24]
 8014fee:	211c      	movs	r1, #28
 8014ff0:	187b      	adds	r3, r7, r1
 8014ff2:	601a      	str	r2, [r3, #0]
            tortoise[1] = parent->tail[1];
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	69da      	ldr	r2, [r3, #28]
 8014ff8:	187b      	adds	r3, r7, r1
 8014ffa:	605a      	str	r2, [r3, #4]
            tortoise_i = 0;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 8015000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015002:	005b      	lsls	r3, r3, #1
 8015004:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 8015006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015008:	3301      	adds	r3, #1
 801500a:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	3318      	adds	r3, #24
 8015010:	001c      	movs	r4, r3
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8015012:	2110      	movs	r1, #16
 8015014:	187b      	adds	r3, r7, r1
 8015016:	68fa      	ldr	r2, [r7, #12]
 8015018:	601a      	str	r2, [r3, #0]
                    lfs, {pair[0], pair[1]}});
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	681a      	ldr	r2, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801501e:	187b      	adds	r3, r7, r1
 8015020:	605a      	str	r2, [r3, #4]
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	685a      	ldr	r2, [r3, #4]
 8015026:	000d      	movs	r5, r1
 8015028:	187b      	adds	r3, r7, r1
 801502a:	609a      	str	r2, [r3, #8]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801502c:	4a1a      	ldr	r2, [pc, #104]	; (8015098 <lfs_fs_parent+0x108>)
 801502e:	6879      	ldr	r1, [r7, #4]
 8015030:	68f8      	ldr	r0, [r7, #12]
 8015032:	197b      	adds	r3, r7, r5
 8015034:	9303      	str	r3, [sp, #12]
 8015036:	4b19      	ldr	r3, [pc, #100]	; (801509c <lfs_fs_parent+0x10c>)
 8015038:	9302      	str	r3, [sp, #8]
 801503a:	2300      	movs	r3, #0
 801503c:	9301      	str	r3, [sp, #4]
 801503e:	4b18      	ldr	r3, [pc, #96]	; (80150a0 <lfs_fs_parent+0x110>)
 8015040:	9300      	str	r3, [sp, #0]
 8015042:	0013      	movs	r3, r2
 8015044:	0022      	movs	r2, r4
 8015046:	f7fb f8bf 	bl	80101c8 <lfs_dir_fetchmatch>
 801504a:	0003      	movs	r3, r0
 801504c:	627b      	str	r3, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 801504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015050:	2b00      	cmp	r3, #0
 8015052:	d004      	beq.n	801505e <lfs_fs_parent+0xce>
 8015054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015056:	3302      	adds	r3, #2
 8015058:	d001      	beq.n	801505e <lfs_fs_parent+0xce>
            return tag;
 801505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505c:	e00d      	b.n	801507a <lfs_fs_parent+0xea>
    while (!lfs_pair_isnull(parent->tail)) {
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	3318      	adds	r3, #24
 8015062:	0018      	movs	r0, r3
 8015064:	f7f9 fd2f 	bl	800eac6 <lfs_pair_isnull>
 8015068:	0003      	movs	r3, r0
 801506a:	001a      	movs	r2, r3
 801506c:	2301      	movs	r3, #1
 801506e:	4053      	eors	r3, r2
 8015070:	b2db      	uxtb	r3, r3
 8015072:	2b00      	cmp	r3, #0
 8015074:	d1a2      	bne.n	8014fbc <lfs_fs_parent+0x2c>
        }
    }

    return LFS_ERR_NOENT;
 8015076:	2302      	movs	r3, #2
 8015078:	425b      	negs	r3, r3
}
 801507a:	0018      	movs	r0, r3
 801507c:	46bd      	mov	sp, r7
 801507e:	b00c      	add	sp, #48	; 0x30
 8015080:	bdb0      	pop	{r4, r5, r7, pc}
 8015082:	46c0      	nop			; (mov r8, r8)
 8015084:	0801c684 	.word	0x0801c684
 8015088:	0801c640 	.word	0x0801c640
 801508c:	00001270 	.word	0x00001270
 8015090:	0801c52c 	.word	0x0801c52c
 8015094:	0801ca84 	.word	0x0801ca84
 8015098:	7ff003ff 	.word	0x7ff003ff
 801509c:	08014f11 	.word	0x08014f11
 80150a0:	20000008 	.word	0x20000008

080150a4 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b082      	sub	sp, #8
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	000a      	movs	r2, r1
 80150ae:	1cfb      	adds	r3, r7, #3
 80150b0:	701a      	strb	r2, [r3, #0]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150b6:	4a06      	ldr	r2, [pc, #24]	; (80150d0 <lfs_fs_prepsuperblock+0x2c>)
 80150b8:	401a      	ands	r2, r3
            | (uint32_t)needssuperblock << 9;
 80150ba:	1cfb      	adds	r3, r7, #3
 80150bc:	781b      	ldrb	r3, [r3, #0]
 80150be:	025b      	lsls	r3, r3, #9
 80150c0:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80150c6:	46c0      	nop			; (mov r8, r8)
 80150c8:	46bd      	mov	sp, r7
 80150ca:	b002      	add	sp, #8
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	46c0      	nop			; (mov r8, r8)
 80150d0:	fffffdff 	.word	0xfffffdff

080150d4 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80150d4:	b590      	push	{r4, r7, lr}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	000a      	movs	r2, r1
 80150de:	1cfb      	adds	r3, r7, #3
 80150e0:	701a      	strb	r2, [r3, #0]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150e6:	0018      	movs	r0, r3
 80150e8:	f7f9 fdfb 	bl	800ece2 <lfs_tag_size>
 80150ec:	1e03      	subs	r3, r0, #0
 80150ee:	d109      	bne.n	8015104 <lfs_fs_preporphans+0x30>
 80150f0:	1cfb      	adds	r3, r7, #3
 80150f2:	781b      	ldrb	r3, [r3, #0]
 80150f4:	2b7f      	cmp	r3, #127	; 0x7f
 80150f6:	d905      	bls.n	8015104 <lfs_fs_preporphans+0x30>
 80150f8:	4b1b      	ldr	r3, [pc, #108]	; (8015168 <lfs_fs_preporphans+0x94>)
 80150fa:	4a1c      	ldr	r2, [pc, #112]	; (801516c <lfs_fs_preporphans+0x98>)
 80150fc:	491c      	ldr	r1, [pc, #112]	; (8015170 <lfs_fs_preporphans+0x9c>)
 80150fe:	481d      	ldr	r0, [pc, #116]	; (8015174 <lfs_fs_preporphans+0xa0>)
 8015100:	f001 faf8 	bl	80166f4 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015108:	0018      	movs	r0, r3
 801510a:	f7f9 fdea 	bl	800ece2 <lfs_tag_size>
 801510e:	0002      	movs	r2, r0
 8015110:	23ff      	movs	r3, #255	; 0xff
 8015112:	005b      	lsls	r3, r3, #1
 8015114:	429a      	cmp	r2, r3
 8015116:	d90a      	bls.n	801512e <lfs_fs_preporphans+0x5a>
 8015118:	1cfb      	adds	r3, r7, #3
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	b25b      	sxtb	r3, r3
 801511e:	2b00      	cmp	r3, #0
 8015120:	dd05      	ble.n	801512e <lfs_fs_preporphans+0x5a>
 8015122:	4b15      	ldr	r3, [pc, #84]	; (8015178 <lfs_fs_preporphans+0xa4>)
 8015124:	4a11      	ldr	r2, [pc, #68]	; (801516c <lfs_fs_preporphans+0x98>)
 8015126:	4915      	ldr	r1, [pc, #84]	; (801517c <lfs_fs_preporphans+0xa8>)
 8015128:	4812      	ldr	r0, [pc, #72]	; (8015174 <lfs_fs_preporphans+0xa0>)
 801512a:	f001 fae3 	bl	80166f4 <__assert_func>
    lfs->gstate.tag += orphans;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015132:	1cfb      	adds	r3, r7, #3
 8015134:	781b      	ldrb	r3, [r3, #0]
 8015136:	b25b      	sxtb	r3, r3
 8015138:	18d2      	adds	r2, r2, r3
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015142:	005b      	lsls	r3, r3, #1
 8015144:	085c      	lsrs	r4, r3, #1
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	3330      	adds	r3, #48	; 0x30
 801514a:	0018      	movs	r0, r3
 801514c:	f7f9 fe27 	bl	800ed9e <lfs_gstate_hasorphans>
 8015150:	0003      	movs	r3, r0
 8015152:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8015154:	0022      	movs	r2, r4
 8015156:	431a      	orrs	r2, r3
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 801515c:	2300      	movs	r3, #0
}
 801515e:	0018      	movs	r0, r3
 8015160:	46bd      	mov	sp, r7
 8015162:	b003      	add	sp, #12
 8015164:	bd90      	pop	{r4, r7, pc}
 8015166:	46c0      	nop			; (mov r8, r8)
 8015168:	0801cbe8 	.word	0x0801cbe8
 801516c:	0801cff0 	.word	0x0801cff0
 8015170:	00001291 	.word	0x00001291
 8015174:	0801c52c 	.word	0x0801c52c
 8015178:	0801cc20 	.word	0x0801cc20
 801517c:	00001292 	.word	0x00001292

08015180 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af00      	add	r7, sp, #0
 8015186:	60f8      	str	r0, [r7, #12]
 8015188:	607a      	str	r2, [r7, #4]
 801518a:	200a      	movs	r0, #10
 801518c:	183b      	adds	r3, r7, r0
 801518e:	1c0a      	adds	r2, r1, #0
 8015190:	801a      	strh	r2, [r3, #0]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015196:	4a17      	ldr	r2, [pc, #92]	; (80151f4 <lfs_fs_prepmove+0x74>)
 8015198:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801519a:	183b      	adds	r3, r7, r0
 801519c:	881b      	ldrh	r3, [r3, #0]
 801519e:	4916      	ldr	r1, [pc, #88]	; (80151f8 <lfs_fs_prepmove+0x78>)
 80151a0:	428b      	cmp	r3, r1
 80151a2:	d005      	beq.n	80151b0 <lfs_fs_prepmove+0x30>
 80151a4:	183b      	adds	r3, r7, r0
 80151a6:	881b      	ldrh	r3, [r3, #0]
 80151a8:	029b      	lsls	r3, r3, #10
 80151aa:	4914      	ldr	r1, [pc, #80]	; (80151fc <lfs_fs_prepmove+0x7c>)
 80151ac:	430b      	orrs	r3, r1
 80151ae:	e000      	b.n	80151b2 <lfs_fs_prepmove+0x32>
 80151b0:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80151b2:	431a      	orrs	r2, r3
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80151b8:	230a      	movs	r3, #10
 80151ba:	18fb      	adds	r3, r7, r3
 80151bc:	881b      	ldrh	r3, [r3, #0]
 80151be:	4a0e      	ldr	r2, [pc, #56]	; (80151f8 <lfs_fs_prepmove+0x78>)
 80151c0:	4293      	cmp	r3, r2
 80151c2:	d002      	beq.n	80151ca <lfs_fs_prepmove+0x4a>
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	e000      	b.n	80151cc <lfs_fs_prepmove+0x4c>
 80151ca:	2200      	movs	r2, #0
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	635a      	str	r2, [r3, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80151d0:	230a      	movs	r3, #10
 80151d2:	18fb      	adds	r3, r7, r3
 80151d4:	881b      	ldrh	r3, [r3, #0]
 80151d6:	4a08      	ldr	r2, [pc, #32]	; (80151f8 <lfs_fs_prepmove+0x78>)
 80151d8:	4293      	cmp	r3, r2
 80151da:	d003      	beq.n	80151e4 <lfs_fs_prepmove+0x64>
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	3304      	adds	r3, #4
 80151e0:	681a      	ldr	r2, [r3, #0]
 80151e2:	e000      	b.n	80151e6 <lfs_fs_prepmove+0x66>
 80151e4:	2200      	movs	r2, #0
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80151ea:	46c0      	nop			; (mov r8, r8)
 80151ec:	46bd      	mov	sp, r7
 80151ee:	b004      	add	sp, #16
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	46c0      	nop			; (mov r8, r8)
 80151f4:	800003ff 	.word	0x800003ff
 80151f8:	000003ff 	.word	0x000003ff
 80151fc:	4ff00000 	.word	0x4ff00000

08015200 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8015200:	b590      	push	{r4, r7, lr}
 8015202:	b097      	sub	sp, #92	; 0x5c
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	3330      	adds	r3, #48	; 0x30
 801520c:	0018      	movs	r0, r3
 801520e:	f7f9 fdf7 	bl	800ee00 <lfs_gstate_needssuperblock>
 8015212:	0003      	movs	r3, r0
 8015214:	001a      	movs	r2, r3
 8015216:	2301      	movs	r3, #1
 8015218:	4053      	eors	r3, r2
 801521a:	b2db      	uxtb	r3, r3
 801521c:	2b00      	cmp	r3, #0
 801521e:	d001      	beq.n	8015224 <lfs_fs_desuperblock+0x24>
        return 0;
 8015220:	2300      	movs	r3, #0
 8015222:	e04c      	b.n	80152be <lfs_fs_desuperblock+0xbe>
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	3320      	adds	r3, #32
 8015228:	001a      	movs	r2, r3
 801522a:	2334      	movs	r3, #52	; 0x34
 801522c:	18f9      	adds	r1, r7, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	0018      	movs	r0, r3
 8015232:	f7fb fbc7 	bl	80109c4 <lfs_dir_fetch>
 8015236:	0003      	movs	r3, r0
 8015238:	657b      	str	r3, [r7, #84]	; 0x54
    if (err) {
 801523a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801523c:	2b00      	cmp	r3, #0
 801523e:	d001      	beq.n	8015244 <lfs_fs_desuperblock+0x44>
        return err;
 8015240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015242:	e03c      	b.n	80152be <lfs_fs_desuperblock+0xbe>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	0018      	movs	r0, r3
 8015248:	f7f9 ff68 	bl	800f11c <lfs_fs_disk_version>
 801524c:	0002      	movs	r2, r0
    lfs_superblock_t superblock = {
 801524e:	211c      	movs	r1, #28
 8015250:	187b      	adds	r3, r7, r1
 8015252:	601a      	str	r2, [r3, #0]
        .block_size  = lfs->cfg->block_size,
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015258:	69da      	ldr	r2, [r3, #28]
    lfs_superblock_t superblock = {
 801525a:	000c      	movs	r4, r1
 801525c:	193b      	adds	r3, r7, r4
 801525e:	605a      	str	r2, [r3, #4]
        .block_count = lfs->block_count,
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8015264:	193b      	adds	r3, r7, r4
 8015266:	609a      	str	r2, [r3, #8]
        .name_max    = lfs->name_max,
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 801526c:	193b      	adds	r3, r7, r4
 801526e:	60da      	str	r2, [r3, #12]
        .file_max    = lfs->file_max,
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8015274:	193b      	adds	r3, r7, r4
 8015276:	611a      	str	r2, [r3, #16]
        .attr_max    = lfs->attr_max,
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 801527c:	193b      	adds	r3, r7, r4
 801527e:	615a      	str	r2, [r3, #20]
    };

    lfs_superblock_tole32(&superblock);
 8015280:	193b      	adds	r3, r7, r4
 8015282:	0018      	movs	r0, r3
 8015284:	f7f9 fec6 	bl	800f014 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8015288:	2114      	movs	r1, #20
 801528a:	187b      	adds	r3, r7, r1
 801528c:	4a0e      	ldr	r2, [pc, #56]	; (80152c8 <lfs_fs_desuperblock+0xc8>)
 801528e:	601a      	str	r2, [r3, #0]
 8015290:	187b      	adds	r3, r7, r1
 8015292:	193a      	adds	r2, r7, r4
 8015294:	605a      	str	r2, [r3, #4]
 8015296:	187a      	adds	r2, r7, r1
 8015298:	2334      	movs	r3, #52	; 0x34
 801529a:	18f9      	adds	r1, r7, r3
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	2301      	movs	r3, #1
 80152a0:	f7fd faac 	bl	80127fc <lfs_dir_commit>
 80152a4:	0003      	movs	r3, r0
 80152a6:	657b      	str	r3, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 80152a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d001      	beq.n	80152b2 <lfs_fs_desuperblock+0xb2>
        return err;
 80152ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152b0:	e005      	b.n	80152be <lfs_fs_desuperblock+0xbe>
    }

    lfs_fs_prepsuperblock(lfs, false);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2100      	movs	r1, #0
 80152b6:	0018      	movs	r0, r3
 80152b8:	f7ff fef4 	bl	80150a4 <lfs_fs_prepsuperblock>
    return 0;
 80152bc:	2300      	movs	r3, #0
}
 80152be:	0018      	movs	r0, r3
 80152c0:	46bd      	mov	sp, r7
 80152c2:	b017      	add	sp, #92	; 0x5c
 80152c4:	bd90      	pop	{r4, r7, pc}
 80152c6:	46c0      	nop			; (mov r8, r8)
 80152c8:	20100018 	.word	0x20100018

080152cc <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 80152cc:	b5b0      	push	{r4, r5, r7, lr}
 80152ce:	b090      	sub	sp, #64	; 0x40
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	333c      	adds	r3, #60	; 0x3c
 80152d8:	0018      	movs	r0, r3
 80152da:	f7f9 fd80 	bl	800edde <lfs_gstate_hasmove>
 80152de:	0003      	movs	r3, r0
 80152e0:	001a      	movs	r2, r3
 80152e2:	2301      	movs	r3, #1
 80152e4:	4053      	eors	r3, r2
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d001      	beq.n	80152f0 <lfs_fs_demove+0x24>
        return 0;
 80152ec:	2300      	movs	r3, #0
 80152ee:	e048      	b.n	8015382 <lfs_fs_demove+0xb6>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152f4:	0018      	movs	r0, r3
 80152f6:	f7f9 fcbf 	bl	800ec78 <lfs_tag_type3>
 80152fa:	0003      	movs	r3, r0
 80152fc:	001a      	movs	r2, r3
 80152fe:	4b23      	ldr	r3, [pc, #140]	; (801538c <lfs_fs_demove+0xc0>)
 8015300:	429a      	cmp	r2, r3
 8015302:	d005      	beq.n	8015310 <lfs_fs_demove+0x44>
 8015304:	4b22      	ldr	r3, [pc, #136]	; (8015390 <lfs_fs_demove+0xc4>)
 8015306:	4a23      	ldr	r2, [pc, #140]	; (8015394 <lfs_fs_demove+0xc8>)
 8015308:	4923      	ldr	r1, [pc, #140]	; (8015398 <lfs_fs_demove+0xcc>)
 801530a:	4824      	ldr	r0, [pc, #144]	; (801539c <lfs_fs_demove+0xd0>)
 801530c:	f001 f9f2 	bl	80166f4 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	3340      	adds	r3, #64	; 0x40
 8015314:	001a      	movs	r2, r3
 8015316:	2318      	movs	r3, #24
 8015318:	18f9      	adds	r1, r7, r3
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	0018      	movs	r0, r3
 801531e:	f7fb fb51 	bl	80109c4 <lfs_dir_fetch>
 8015322:	0003      	movs	r3, r0
 8015324:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err) {
 8015326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015328:	2b00      	cmp	r3, #0
 801532a:	d001      	beq.n	8015330 <lfs_fs_demove+0x64>
        return err;
 801532c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801532e:	e028      	b.n	8015382 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015334:	253a      	movs	r5, #58	; 0x3a
 8015336:	197c      	adds	r4, r7, r5
 8015338:	0018      	movs	r0, r3
 801533a:	f7f9 fcc4 	bl	800ecc6 <lfs_tag_id>
 801533e:	0003      	movs	r3, r0
 8015340:	8023      	strh	r3, [r4, #0]
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8015342:	4917      	ldr	r1, [pc, #92]	; (80153a0 <lfs_fs_demove+0xd4>)
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2200      	movs	r2, #0
 8015348:	0018      	movs	r0, r3
 801534a:	f7ff ff19 	bl	8015180 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801534e:	197b      	adds	r3, r7, r5
 8015350:	881b      	ldrh	r3, [r3, #0]
 8015352:	029b      	lsls	r3, r3, #10
 8015354:	4a13      	ldr	r2, [pc, #76]	; (80153a4 <lfs_fs_demove+0xd8>)
 8015356:	431a      	orrs	r2, r3
 8015358:	2110      	movs	r1, #16
 801535a:	187b      	adds	r3, r7, r1
 801535c:	601a      	str	r2, [r3, #0]
 801535e:	187b      	adds	r3, r7, r1
 8015360:	2200      	movs	r2, #0
 8015362:	605a      	str	r2, [r3, #4]
 8015364:	187a      	adds	r2, r7, r1
 8015366:	2318      	movs	r3, #24
 8015368:	18f9      	adds	r1, r7, r3
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	2301      	movs	r3, #1
 801536e:	f7fd fa45 	bl	80127fc <lfs_dir_commit>
 8015372:	0003      	movs	r3, r0
 8015374:	63fb      	str	r3, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8015376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015378:	2b00      	cmp	r3, #0
 801537a:	d001      	beq.n	8015380 <lfs_fs_demove+0xb4>
        return err;
 801537c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801537e:	e000      	b.n	8015382 <lfs_fs_demove+0xb6>
    }

    return 0;
 8015380:	2300      	movs	r3, #0
}
 8015382:	0018      	movs	r0, r3
 8015384:	46bd      	mov	sp, r7
 8015386:	b010      	add	sp, #64	; 0x40
 8015388:	bdb0      	pop	{r4, r5, r7, pc}
 801538a:	46c0      	nop			; (mov r8, r8)
 801538c:	000004ff 	.word	0x000004ff
 8015390:	0801cc58 	.word	0x0801cc58
 8015394:	0801d004 	.word	0x0801d004
 8015398:	000012da 	.word	0x000012da
 801539c:	0801c52c 	.word	0x0801c52c
 80153a0:	000003ff 	.word	0x000003ff
 80153a4:	4ff00000 	.word	0x4ff00000

080153a8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80153a8:	b5b0      	push	{r4, r5, r7, lr}
 80153aa:	b0b0      	sub	sp, #192	; 0xc0
 80153ac:	af02      	add	r7, sp, #8
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	000a      	movs	r2, r1
 80153b2:	1cfb      	adds	r3, r7, #3
 80153b4:	701a      	strb	r2, [r3, #0]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	3330      	adds	r3, #48	; 0x30
 80153ba:	0018      	movs	r0, r3
 80153bc:	f7f9 fcef 	bl	800ed9e <lfs_gstate_hasorphans>
 80153c0:	0003      	movs	r3, r0
 80153c2:	001a      	movs	r2, r3
 80153c4:	2301      	movs	r3, #1
 80153c6:	4053      	eors	r3, r2
 80153c8:	b2db      	uxtb	r3, r3
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d001      	beq.n	80153d2 <lfs_fs_deorphan+0x2a>
        return 0;
 80153ce:	2300      	movs	r3, #0
 80153d0:	e17b      	b.n	80156ca <lfs_fs_deorphan+0x322>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 80153d2:	2300      	movs	r3, #0
 80153d4:	22b4      	movs	r2, #180	; 0xb4
 80153d6:	18ba      	adds	r2, r7, r2
 80153d8:	6013      	str	r3, [r2, #0]
    while (pass < 2) {
 80153da:	e161      	b.n	80156a0 <lfs_fs_deorphan+0x2f8>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80153dc:	2408      	movs	r4, #8
 80153de:	193b      	adds	r3, r7, r4
 80153e0:	0018      	movs	r0, r3
 80153e2:	2320      	movs	r3, #32
 80153e4:	001a      	movs	r2, r3
 80153e6:	2100      	movs	r1, #0
 80153e8:	f001 fa25 	bl	8016836 <memset>
 80153ec:	0021      	movs	r1, r4
 80153ee:	187b      	adds	r3, r7, r1
 80153f0:	2201      	movs	r2, #1
 80153f2:	75da      	strb	r2, [r3, #23]
 80153f4:	187b      	adds	r3, r7, r1
 80153f6:	2201      	movs	r2, #1
 80153f8:	61da      	str	r2, [r3, #28]
        lfs_mdir_t dir;
        bool moreorphans = false;
 80153fa:	23b3      	movs	r3, #179	; 0xb3
 80153fc:	18fb      	adds	r3, r7, r3
 80153fe:	2200      	movs	r2, #0
 8015400:	701a      	strb	r2, [r3, #0]

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8015402:	e131      	b.n	8015668 <lfs_fs_deorphan+0x2c0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8015404:	2308      	movs	r3, #8
 8015406:	18fb      	adds	r3, r7, r3
 8015408:	3318      	adds	r3, #24
 801540a:	001a      	movs	r2, r3
 801540c:	2328      	movs	r3, #40	; 0x28
 801540e:	18f9      	adds	r1, r7, r3
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	0018      	movs	r0, r3
 8015414:	f7fb fad6 	bl	80109c4 <lfs_dir_fetch>
 8015418:	0003      	movs	r3, r0
 801541a:	22ac      	movs	r2, #172	; 0xac
 801541c:	18b9      	adds	r1, r7, r2
 801541e:	600b      	str	r3, [r1, #0]
            if (err) {
 8015420:	18bb      	adds	r3, r7, r2
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d002      	beq.n	801542e <lfs_fs_deorphan+0x86>
                return err;
 8015428:	18bb      	adds	r3, r7, r2
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	e14d      	b.n	80156ca <lfs_fs_deorphan+0x322>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 801542e:	2108      	movs	r1, #8
 8015430:	187b      	adds	r3, r7, r1
 8015432:	7ddb      	ldrb	r3, [r3, #23]
 8015434:	2201      	movs	r2, #1
 8015436:	4053      	eors	r3, r2
 8015438:	b2db      	uxtb	r3, r3
 801543a:	2b00      	cmp	r3, #0
 801543c:	d100      	bne.n	8015440 <lfs_fs_deorphan+0x98>
 801543e:	e109      	b.n	8015654 <lfs_fs_deorphan+0x2ac>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8015440:	2348      	movs	r3, #72	; 0x48
 8015442:	18fa      	adds	r2, r7, r3
 8015444:	187b      	adds	r3, r7, r1
 8015446:	3318      	adds	r3, #24
 8015448:	0019      	movs	r1, r3
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	0018      	movs	r0, r3
 801544e:	f7ff fd9f 	bl	8014f90 <lfs_fs_parent>
 8015452:	0003      	movs	r3, r0
 8015454:	22a8      	movs	r2, #168	; 0xa8
 8015456:	18b9      	adds	r1, r7, r2
 8015458:	600b      	str	r3, [r1, #0]
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801545a:	18bb      	adds	r3, r7, r2
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	2b00      	cmp	r3, #0
 8015460:	da06      	bge.n	8015470 <lfs_fs_deorphan+0xc8>
 8015462:	18bb      	adds	r3, r7, r2
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	3302      	adds	r3, #2
 8015468:	d002      	beq.n	8015470 <lfs_fs_deorphan+0xc8>
                    return tag;
 801546a:	18bb      	adds	r3, r7, r2
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	e12c      	b.n	80156ca <lfs_fs_deorphan+0x322>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8015470:	23b4      	movs	r3, #180	; 0xb4
 8015472:	18fb      	adds	r3, r7, r3
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d000      	beq.n	801547c <lfs_fs_deorphan+0xd4>
 801547a:	e08d      	b.n	8015598 <lfs_fs_deorphan+0x1f0>
 801547c:	22a8      	movs	r2, #168	; 0xa8
 801547e:	18bb      	adds	r3, r7, r2
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	3302      	adds	r3, #2
 8015484:	d100      	bne.n	8015488 <lfs_fs_deorphan+0xe0>
 8015486:	e087      	b.n	8015598 <lfs_fs_deorphan+0x1f0>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8015488:	18bb      	adds	r3, r7, r2
 801548a:	681a      	ldr	r2, [r3, #0]
 801548c:	4c91      	ldr	r4, [pc, #580]	; (80156d4 <lfs_fs_deorphan+0x32c>)
 801548e:	2348      	movs	r3, #72	; 0x48
 8015490:	18f9      	adds	r1, r7, r3
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	2398      	movs	r3, #152	; 0x98
 8015496:	18fb      	adds	r3, r7, r3
 8015498:	9300      	str	r3, [sp, #0]
 801549a:	0013      	movs	r3, r2
 801549c:	0022      	movs	r2, r4
 801549e:	f7fa f873 	bl	800f588 <lfs_dir_get>
 80154a2:	0003      	movs	r3, r0
 80154a4:	22a4      	movs	r2, #164	; 0xa4
 80154a6:	18b9      	adds	r1, r7, r2
 80154a8:	600b      	str	r3, [r1, #0]
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80154aa:	18bb      	adds	r3, r7, r2
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	da02      	bge.n	80154b8 <lfs_fs_deorphan+0x110>
                        return state;
 80154b2:	18bb      	adds	r3, r7, r2
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	e0ca      	b.n	801564e <lfs_fs_deorphan+0x2a6>
                    }
                    lfs_pair_fromle32(pair);
 80154b8:	2498      	movs	r4, #152	; 0x98
 80154ba:	193b      	adds	r3, r7, r4
 80154bc:	0018      	movs	r0, r3
 80154be:	f7f9 fb6e 	bl	800eb9e <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80154c2:	2508      	movs	r5, #8
 80154c4:	197b      	adds	r3, r7, r5
 80154c6:	3318      	adds	r3, #24
 80154c8:	001a      	movs	r2, r3
 80154ca:	193b      	adds	r3, r7, r4
 80154cc:	0011      	movs	r1, r2
 80154ce:	0018      	movs	r0, r3
 80154d0:	f7f9 fb39 	bl	800eb46 <lfs_pair_issync>
 80154d4:	0003      	movs	r3, r0
 80154d6:	001a      	movs	r2, r3
 80154d8:	2301      	movs	r3, #1
 80154da:	4053      	eors	r3, r2
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d05a      	beq.n	8015598 <lfs_fs_deorphan+0x1f0>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80154e2:	24b0      	movs	r4, #176	; 0xb0
 80154e4:	193b      	adds	r3, r7, r4
 80154e6:	4a7c      	ldr	r2, [pc, #496]	; (80156d8 <lfs_fs_deorphan+0x330>)
 80154e8:	801a      	strh	r2, [r3, #0]
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	3330      	adds	r3, #48	; 0x30
 80154ee:	197a      	adds	r2, r7, r5
 80154f0:	0011      	movs	r1, r2
 80154f2:	0018      	movs	r0, r3
 80154f4:	f7f9 fc96 	bl	800ee24 <lfs_gstate_hasmovehere>
 80154f8:	1e03      	subs	r3, r0, #0
 80154fa:	d00d      	beq.n	8015518 <lfs_fs_deorphan+0x170>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015500:	193c      	adds	r4, r7, r4
 8015502:	0018      	movs	r0, r3
 8015504:	f7f9 fbdf 	bl	800ecc6 <lfs_tag_id>
 8015508:	0003      	movs	r3, r0
 801550a:	8023      	strh	r3, [r4, #0]
                            LFS_DEBUG("Fixing move while fixing orphans "
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801550c:	4972      	ldr	r1, [pc, #456]	; (80156d8 <lfs_fs_deorphan+0x330>)
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2200      	movs	r2, #0
 8015512:	0018      	movs	r0, r3
 8015514:	f7ff fe34 	bl	8015180 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8015518:	2398      	movs	r3, #152	; 0x98
 801551a:	18fb      	adds	r3, r7, r3
 801551c:	0018      	movs	r0, r3
 801551e:	f7f9 fb58 	bl	800ebd2 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8015522:	21b0      	movs	r1, #176	; 0xb0
 8015524:	187b      	adds	r3, r7, r1
 8015526:	881b      	ldrh	r3, [r3, #0]
 8015528:	4a6b      	ldr	r2, [pc, #428]	; (80156d8 <lfs_fs_deorphan+0x330>)
 801552a:	4293      	cmp	r3, r2
 801552c:	d005      	beq.n	801553a <lfs_fs_deorphan+0x192>
 801552e:	187b      	adds	r3, r7, r1
 8015530:	881b      	ldrh	r3, [r3, #0]
 8015532:	029b      	lsls	r3, r3, #10
 8015534:	4a69      	ldr	r2, [pc, #420]	; (80156dc <lfs_fs_deorphan+0x334>)
 8015536:	431a      	orrs	r2, r3
 8015538:	e000      	b.n	801553c <lfs_fs_deorphan+0x194>
 801553a:	2200      	movs	r2, #0
 801553c:	2188      	movs	r1, #136	; 0x88
 801553e:	187b      	adds	r3, r7, r1
 8015540:	601a      	str	r2, [r3, #0]
 8015542:	187b      	adds	r3, r7, r1
 8015544:	2200      	movs	r2, #0
 8015546:	605a      	str	r2, [r3, #4]
 8015548:	187b      	adds	r3, r7, r1
 801554a:	4a65      	ldr	r2, [pc, #404]	; (80156e0 <lfs_fs_deorphan+0x338>)
 801554c:	609a      	str	r2, [r3, #8]
 801554e:	187b      	adds	r3, r7, r1
 8015550:	2598      	movs	r5, #152	; 0x98
 8015552:	197a      	adds	r2, r7, r5
 8015554:	60da      	str	r2, [r3, #12]
 8015556:	187a      	adds	r2, r7, r1
 8015558:	2308      	movs	r3, #8
 801555a:	18f9      	adds	r1, r7, r3
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	2302      	movs	r3, #2
 8015560:	f7fc fe3a 	bl	80121d8 <lfs_dir_orphaningcommit>
 8015564:	0003      	movs	r3, r0
 8015566:	24a4      	movs	r4, #164	; 0xa4
 8015568:	193a      	adds	r2, r7, r4
 801556a:	6013      	str	r3, [r2, #0]
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 801556c:	197b      	adds	r3, r7, r5
 801556e:	0018      	movs	r0, r3
 8015570:	f7f9 fb15 	bl	800eb9e <lfs_pair_fromle32>
                        if (state < 0) {
 8015574:	0022      	movs	r2, r4
 8015576:	18bb      	adds	r3, r7, r2
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	2b00      	cmp	r3, #0
 801557c:	da02      	bge.n	8015584 <lfs_fs_deorphan+0x1dc>
                            return state;
 801557e:	18bb      	adds	r3, r7, r2
 8015580:	681b      	ldr	r3, [r3, #0]
                        return state;
 8015582:	e064      	b.n	801564e <lfs_fs_deorphan+0x2a6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8015584:	23a4      	movs	r3, #164	; 0xa4
 8015586:	18fb      	adds	r3, r7, r3
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	2b03      	cmp	r3, #3
 801558c:	d16c      	bne.n	8015668 <lfs_fs_deorphan+0x2c0>
                            moreorphans = true;
 801558e:	23b3      	movs	r3, #179	; 0xb3
 8015590:	18fb      	adds	r3, r7, r3
 8015592:	2201      	movs	r2, #1
 8015594:	701a      	strb	r2, [r3, #0]
 8015596:	e067      	b.n	8015668 <lfs_fs_deorphan+0x2c0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8015598:	23b4      	movs	r3, #180	; 0xb4
 801559a:	18fb      	adds	r3, r7, r3
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	2b01      	cmp	r3, #1
 80155a0:	d158      	bne.n	8015654 <lfs_fs_deorphan+0x2ac>
 80155a2:	23a8      	movs	r3, #168	; 0xa8
 80155a4:	18fb      	adds	r3, r7, r3
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	3302      	adds	r3, #2
 80155aa:	d153      	bne.n	8015654 <lfs_fs_deorphan+0x2ac>
 80155ac:	1cfb      	adds	r3, r7, #3
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d04f      	beq.n	8015654 <lfs_fs_deorphan+0x2ac>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	3348      	adds	r3, #72	; 0x48
 80155b8:	001a      	movs	r2, r3
 80155ba:	2328      	movs	r3, #40	; 0x28
 80155bc:	18f9      	adds	r1, r7, r3
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	0018      	movs	r0, r3
 80155c2:	f7fb fa1b 	bl	80109fc <lfs_dir_getgstate>
 80155c6:	0003      	movs	r3, r0
 80155c8:	22ac      	movs	r2, #172	; 0xac
 80155ca:	18b9      	adds	r1, r7, r2
 80155cc:	600b      	str	r3, [r1, #0]
                    if (err) {
 80155ce:	18bb      	adds	r3, r7, r2
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d002      	beq.n	80155dc <lfs_fs_deorphan+0x234>
                        return err;
 80155d6:	18bb      	adds	r3, r7, r2
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	e038      	b.n	801564e <lfs_fs_deorphan+0x2a6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 80155dc:	2428      	movs	r4, #40	; 0x28
 80155de:	193b      	adds	r3, r7, r4
 80155e0:	3318      	adds	r3, #24
 80155e2:	0018      	movs	r0, r3
 80155e4:	f7f9 faf5 	bl	800ebd2 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80155e8:	0021      	movs	r1, r4
 80155ea:	187b      	adds	r3, r7, r1
 80155ec:	7ddb      	ldrb	r3, [r3, #23]
 80155ee:	22c0      	movs	r2, #192	; 0xc0
 80155f0:	00d2      	lsls	r2, r2, #3
 80155f2:	4694      	mov	ip, r2
 80155f4:	4463      	add	r3, ip
 80155f6:	051b      	lsls	r3, r3, #20
 80155f8:	4a3a      	ldr	r2, [pc, #232]	; (80156e4 <lfs_fs_deorphan+0x33c>)
 80155fa:	431a      	orrs	r2, r3
 80155fc:	2070      	movs	r0, #112	; 0x70
 80155fe:	183b      	adds	r3, r7, r0
 8015600:	601a      	str	r2, [r3, #0]
 8015602:	183b      	adds	r3, r7, r0
 8015604:	000c      	movs	r4, r1
 8015606:	187a      	adds	r2, r7, r1
 8015608:	3218      	adds	r2, #24
 801560a:	605a      	str	r2, [r3, #4]
 801560c:	183a      	adds	r2, r7, r0
 801560e:	2308      	movs	r3, #8
 8015610:	18f9      	adds	r1, r7, r3
 8015612:	6878      	ldr	r0, [r7, #4]
 8015614:	2301      	movs	r3, #1
 8015616:	f7fc fddf 	bl	80121d8 <lfs_dir_orphaningcommit>
 801561a:	0003      	movs	r3, r0
 801561c:	25a0      	movs	r5, #160	; 0xa0
 801561e:	197a      	adds	r2, r7, r5
 8015620:	6013      	str	r3, [r2, #0]
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8015622:	193b      	adds	r3, r7, r4
 8015624:	3318      	adds	r3, #24
 8015626:	0018      	movs	r0, r3
 8015628:	f7f9 fab9 	bl	800eb9e <lfs_pair_fromle32>
                    if (state < 0) {
 801562c:	197b      	adds	r3, r7, r5
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	2b00      	cmp	r3, #0
 8015632:	da02      	bge.n	801563a <lfs_fs_deorphan+0x292>
                        return state;
 8015634:	197b      	adds	r3, r7, r5
 8015636:	681b      	ldr	r3, [r3, #0]
                    return tag;
 8015638:	e047      	b.n	80156ca <lfs_fs_deorphan+0x322>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 801563a:	23a0      	movs	r3, #160	; 0xa0
 801563c:	18fb      	adds	r3, r7, r3
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	2b03      	cmp	r3, #3
 8015642:	d105      	bne.n	8015650 <lfs_fs_deorphan+0x2a8>
                        moreorphans = true;
 8015644:	23b3      	movs	r3, #179	; 0xb3
 8015646:	18fb      	adds	r3, r7, r3
 8015648:	2201      	movs	r2, #1
 801564a:	701a      	strb	r2, [r3, #0]
 801564c:	e00c      	b.n	8015668 <lfs_fs_deorphan+0x2c0>
                return err;
 801564e:	e03c      	b.n	80156ca <lfs_fs_deorphan+0x322>
                    }

                    // refetch tail
                    continue;
 8015650:	46c0      	nop			; (mov r8, r8)
 8015652:	e009      	b.n	8015668 <lfs_fs_deorphan+0x2c0>
                }
            }

            pdir = dir;
 8015654:	2308      	movs	r3, #8
 8015656:	18fa      	adds	r2, r7, r3
 8015658:	2328      	movs	r3, #40	; 0x28
 801565a:	18fb      	adds	r3, r7, r3
 801565c:	0010      	movs	r0, r2
 801565e:	0019      	movs	r1, r3
 8015660:	2320      	movs	r3, #32
 8015662:	001a      	movs	r2, r3
 8015664:	f001 f8de 	bl	8016824 <memcpy>
        while (!lfs_pair_isnull(pdir.tail)) {
 8015668:	2308      	movs	r3, #8
 801566a:	18fb      	adds	r3, r7, r3
 801566c:	3318      	adds	r3, #24
 801566e:	0018      	movs	r0, r3
 8015670:	f7f9 fa29 	bl	800eac6 <lfs_pair_isnull>
 8015674:	0003      	movs	r3, r0
 8015676:	001a      	movs	r2, r3
 8015678:	2301      	movs	r3, #1
 801567a:	4053      	eors	r3, r2
 801567c:	b2db      	uxtb	r3, r3
 801567e:	2b00      	cmp	r3, #0
 8015680:	d000      	beq.n	8015684 <lfs_fs_deorphan+0x2dc>
 8015682:	e6bf      	b.n	8015404 <lfs_fs_deorphan+0x5c>
        }

        pass = moreorphans ? 0 : pass+1;
 8015684:	23b3      	movs	r3, #179	; 0xb3
 8015686:	18fb      	adds	r3, r7, r3
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d001      	beq.n	8015692 <lfs_fs_deorphan+0x2ea>
 801568e:	2300      	movs	r3, #0
 8015690:	e003      	b.n	801569a <lfs_fs_deorphan+0x2f2>
 8015692:	23b4      	movs	r3, #180	; 0xb4
 8015694:	18fb      	adds	r3, r7, r3
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	3301      	adds	r3, #1
 801569a:	22b4      	movs	r2, #180	; 0xb4
 801569c:	18ba      	adds	r2, r7, r2
 801569e:	6013      	str	r3, [r2, #0]
    while (pass < 2) {
 80156a0:	23b4      	movs	r3, #180	; 0xb4
 80156a2:	18fb      	adds	r3, r7, r3
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	2b01      	cmp	r3, #1
 80156a8:	dc00      	bgt.n	80156ac <lfs_fs_deorphan+0x304>
 80156aa:	e697      	b.n	80153dc <lfs_fs_deorphan+0x34>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	3330      	adds	r3, #48	; 0x30
 80156b0:	0018      	movs	r0, r3
 80156b2:	f7f9 fb85 	bl	800edc0 <lfs_gstate_getorphans>
 80156b6:	0003      	movs	r3, r0
 80156b8:	425b      	negs	r3, r3
 80156ba:	b2db      	uxtb	r3, r3
 80156bc:	b25a      	sxtb	r2, r3
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	0011      	movs	r1, r2
 80156c2:	0018      	movs	r0, r3
 80156c4:	f7ff fd06 	bl	80150d4 <lfs_fs_preporphans>
 80156c8:	0003      	movs	r3, r0
}
 80156ca:	0018      	movs	r0, r3
 80156cc:	46bd      	mov	sp, r7
 80156ce:	b02e      	add	sp, #184	; 0xb8
 80156d0:	bdb0      	pop	{r4, r5, r7, pc}
 80156d2:	46c0      	nop			; (mov r8, r8)
 80156d4:	7ffffc00 	.word	0x7ffffc00
 80156d8:	000003ff 	.word	0x000003ff
 80156dc:	4ff00000 	.word	0x4ff00000
 80156e0:	600ffc08 	.word	0x600ffc08
 80156e4:	000ffc08 	.word	0x000ffc08

080156e8 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b084      	sub	sp, #16
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	0018      	movs	r0, r3
 80156f4:	f7ff fd84 	bl	8015200 <lfs_fs_desuperblock>
 80156f8:	0003      	movs	r3, r0
 80156fa:	60fb      	str	r3, [r7, #12]
    if (err) {
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d001      	beq.n	8015706 <lfs_fs_forceconsistency+0x1e>
        return err;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	e017      	b.n	8015736 <lfs_fs_forceconsistency+0x4e>
    }

    err = lfs_fs_demove(lfs);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	0018      	movs	r0, r3
 801570a:	f7ff fddf 	bl	80152cc <lfs_fs_demove>
 801570e:	0003      	movs	r3, r0
 8015710:	60fb      	str	r3, [r7, #12]
    if (err) {
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d001      	beq.n	801571c <lfs_fs_forceconsistency+0x34>
        return err;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	e00c      	b.n	8015736 <lfs_fs_forceconsistency+0x4e>
    }

    err = lfs_fs_deorphan(lfs, true);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	2101      	movs	r1, #1
 8015720:	0018      	movs	r0, r3
 8015722:	f7ff fe41 	bl	80153a8 <lfs_fs_deorphan>
 8015726:	0003      	movs	r3, r0
 8015728:	60fb      	str	r3, [r7, #12]
    if (err) {
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d001      	beq.n	8015734 <lfs_fs_forceconsistency+0x4c>
        return err;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	e000      	b.n	8015736 <lfs_fs_forceconsistency+0x4e>
    }

    return 0;
 8015734:	2300      	movs	r3, #0
}
 8015736:	0018      	movs	r0, r3
 8015738:	46bd      	mov	sp, r7
 801573a:	b004      	add	sp, #16
 801573c:	bd80      	pop	{r7, pc}

0801573e <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 801573e:	b580      	push	{r7, lr}
 8015740:	b084      	sub	sp, #16
 8015742:	af00      	add	r7, sp, #0
 8015744:	6078      	str	r0, [r7, #4]
 8015746:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	60fb      	str	r3, [r7, #12]
    *size += 1;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	1c5a      	adds	r2, r3, #1
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	601a      	str	r2, [r3, #0]
    return 0;
 8015756:	2300      	movs	r3, #0
}
 8015758:	0018      	movs	r0, r3
 801575a:	46bd      	mov	sp, r7
 801575c:	b004      	add	sp, #16
 801575e:	bd80      	pop	{r7, pc}

08015760 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8015768:	2300      	movs	r3, #0
 801576a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 801576c:	2308      	movs	r3, #8
 801576e:	18fa      	adds	r2, r7, r3
 8015770:	4908      	ldr	r1, [pc, #32]	; (8015794 <lfs_fs_rawsize+0x34>)
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	2300      	movs	r3, #0
 8015776:	f7ff f9eb 	bl	8014b50 <lfs_fs_rawtraverse>
 801577a:	0003      	movs	r3, r0
 801577c:	60fb      	str	r3, [r7, #12]
    if (err) {
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d001      	beq.n	8015788 <lfs_fs_rawsize+0x28>
        return err;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	e000      	b.n	801578a <lfs_fs_rawsize+0x2a>
    }

    return size;
 8015788:	68bb      	ldr	r3, [r7, #8]
}
 801578a:	0018      	movs	r0, r3
 801578c:	46bd      	mov	sp, r7
 801578e:	b004      	add	sp, #16
 8015790:	bd80      	pop	{r7, pc}
 8015792:	46c0      	nop			; (mov r8, r8)
 8015794:	0801573f 	.word	0x0801573f

08015798 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8015798:	b580      	push	{r7, lr}
 801579a:	b084      	sub	sp, #16
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80157a2:	2300      	movs	r3, #0
 80157a4:	60fb      	str	r3, [r7, #12]
    if (err) {
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d001      	beq.n	80157b0 <lfs_format+0x18>
        return err;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	e008      	b.n	80157c2 <lfs_format+0x2a>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 80157b0:	683a      	ldr	r2, [r7, #0]
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	0011      	movs	r1, r2
 80157b6:	0018      	movs	r0, r3
 80157b8:	f7fe fed8 	bl	801456c <lfs_rawformat>
 80157bc:	0003      	movs	r3, r0
 80157be:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80157c0:	68fb      	ldr	r3, [r7, #12]
}
 80157c2:	0018      	movs	r0, r3
 80157c4:	46bd      	mov	sp, r7
 80157c6:	b004      	add	sp, #16
 80157c8:	bd80      	pop	{r7, pc}

080157ca <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80157ca:	b580      	push	{r7, lr}
 80157cc:	b084      	sub	sp, #16
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	6078      	str	r0, [r7, #4]
 80157d2:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80157d4:	2300      	movs	r3, #0
 80157d6:	60fb      	str	r3, [r7, #12]
    if (err) {
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d001      	beq.n	80157e2 <lfs_mount+0x18>
        return err;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	e008      	b.n	80157f4 <lfs_mount+0x2a>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	0011      	movs	r1, r2
 80157e8:	0018      	movs	r0, r3
 80157ea:	f7fe ff85 	bl	80146f8 <lfs_rawmount>
 80157ee:	0003      	movs	r3, r0
 80157f0:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80157f2:	68fb      	ldr	r3, [r7, #12]
}
 80157f4:	0018      	movs	r0, r3
 80157f6:	46bd      	mov	sp, r7
 80157f8:	b004      	add	sp, #16
 80157fa:	bd80      	pop	{r7, pc}

080157fc <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8015806:	2300      	movs	r3, #0
 8015808:	60fb      	str	r3, [r7, #12]
    if (err) {
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d001      	beq.n	8015814 <lfs_remove+0x18>
        return err;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	e008      	b.n	8015826 <lfs_remove+0x2a>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 8015814:	683a      	ldr	r2, [r7, #0]
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	0011      	movs	r1, r2
 801581a:	0018      	movs	r0, r3
 801581c:	f7fe fbae 	bl	8013f7c <lfs_rawremove>
 8015820:	0003      	movs	r3, r0
 8015822:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8015824:	68fb      	ldr	r3, [r7, #12]
}
 8015826:	0018      	movs	r0, r3
 8015828:	46bd      	mov	sp, r7
 801582a:	b004      	add	sp, #16
 801582c:	bd80      	pop	{r7, pc}
	...

08015830 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8015830:	b580      	push	{r7, lr}
 8015832:	b086      	sub	sp, #24
 8015834:	af00      	add	r7, sp, #0
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	60b9      	str	r1, [r7, #8]
 801583a:	607a      	str	r2, [r7, #4]
 801583c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801583e:	2300      	movs	r3, #0
 8015840:	617b      	str	r3, [r7, #20]
    if (err) {
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d001      	beq.n	801584c <lfs_file_open+0x1c>
        return err;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	e01c      	b.n	8015886 <lfs_file_open+0x56>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015850:	68ba      	ldr	r2, [r7, #8]
 8015852:	0011      	movs	r1, r2
 8015854:	0018      	movs	r0, r3
 8015856:	f7f9 fc15 	bl	800f084 <lfs_mlist_isopen>
 801585a:	0003      	movs	r3, r0
 801585c:	001a      	movs	r2, r3
 801585e:	2301      	movs	r3, #1
 8015860:	4053      	eors	r3, r2
 8015862:	b2db      	uxtb	r3, r3
 8015864:	2b00      	cmp	r3, #0
 8015866:	d105      	bne.n	8015874 <lfs_file_open+0x44>
 8015868:	4b09      	ldr	r3, [pc, #36]	; (8015890 <lfs_file_open+0x60>)
 801586a:	4a0a      	ldr	r2, [pc, #40]	; (8015894 <lfs_file_open+0x64>)
 801586c:	490a      	ldr	r1, [pc, #40]	; (8015898 <lfs_file_open+0x68>)
 801586e:	480b      	ldr	r0, [pc, #44]	; (801589c <lfs_file_open+0x6c>)
 8015870:	f000 ff40 	bl	80166f4 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	687a      	ldr	r2, [r7, #4]
 8015878:	68b9      	ldr	r1, [r7, #8]
 801587a:	68f8      	ldr	r0, [r7, #12]
 801587c:	f7fd fd26 	bl	80132cc <lfs_file_rawopen>
 8015880:	0003      	movs	r3, r0
 8015882:	617b      	str	r3, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8015884:	697b      	ldr	r3, [r7, #20]
}
 8015886:	0018      	movs	r0, r3
 8015888:	46bd      	mov	sp, r7
 801588a:	b006      	add	sp, #24
 801588c:	bd80      	pop	{r7, pc}
 801588e:	46c0      	nop			; (mov r8, r8)
 8015890:	0801ccac 	.word	0x0801ccac
 8015894:	0801d014 	.word	0x0801d014
 8015898:	00001729 	.word	0x00001729
 801589c:	0801c52c 	.word	0x0801c52c

080158a0 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b084      	sub	sp, #16
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
 80158a8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80158aa:	2300      	movs	r3, #0
 80158ac:	60fb      	str	r3, [r7, #12]
    if (err) {
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d001      	beq.n	80158b8 <lfs_file_close+0x18>
        return err;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	e017      	b.n	80158e8 <lfs_file_close+0x48>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158bc:	683a      	ldr	r2, [r7, #0]
 80158be:	0011      	movs	r1, r2
 80158c0:	0018      	movs	r0, r3
 80158c2:	f7f9 fbdf 	bl	800f084 <lfs_mlist_isopen>
 80158c6:	1e03      	subs	r3, r0, #0
 80158c8:	d105      	bne.n	80158d6 <lfs_file_close+0x36>
 80158ca:	4b09      	ldr	r3, [pc, #36]	; (80158f0 <lfs_file_close+0x50>)
 80158cc:	4a09      	ldr	r2, [pc, #36]	; (80158f4 <lfs_file_close+0x54>)
 80158ce:	490a      	ldr	r1, [pc, #40]	; (80158f8 <lfs_file_close+0x58>)
 80158d0:	480a      	ldr	r0, [pc, #40]	; (80158fc <lfs_file_close+0x5c>)
 80158d2:	f000 ff0f 	bl	80166f4 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 80158d6:	683a      	ldr	r2, [r7, #0]
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	0011      	movs	r1, r2
 80158dc:	0018      	movs	r0, r3
 80158de:	f7fd fd0f 	bl	8013300 <lfs_file_rawclose>
 80158e2:	0003      	movs	r3, r0
 80158e4:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80158e6:	68fb      	ldr	r3, [r7, #12]
}
 80158e8:	0018      	movs	r0, r3
 80158ea:	46bd      	mov	sp, r7
 80158ec:	b004      	add	sp, #16
 80158ee:	bd80      	pop	{r7, pc}
 80158f0:	0801cce4 	.word	0x0801cce4
 80158f4:	0801d024 	.word	0x0801d024
 80158f8:	0000174d 	.word	0x0000174d
 80158fc:	0801c52c 	.word	0x0801c52c

08015900 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8015900:	b580      	push	{r7, lr}
 8015902:	b086      	sub	sp, #24
 8015904:	af00      	add	r7, sp, #0
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	607a      	str	r2, [r7, #4]
 801590c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801590e:	2300      	movs	r3, #0
 8015910:	617b      	str	r3, [r7, #20]
    if (err) {
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d001      	beq.n	801591c <lfs_file_read+0x1c>
        return err;
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	e017      	b.n	801594c <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015920:	68ba      	ldr	r2, [r7, #8]
 8015922:	0011      	movs	r1, r2
 8015924:	0018      	movs	r0, r3
 8015926:	f7f9 fbad 	bl	800f084 <lfs_mlist_isopen>
 801592a:	1e03      	subs	r3, r0, #0
 801592c:	d105      	bne.n	801593a <lfs_file_read+0x3a>
 801592e:	4b09      	ldr	r3, [pc, #36]	; (8015954 <lfs_file_read+0x54>)
 8015930:	4a09      	ldr	r2, [pc, #36]	; (8015958 <lfs_file_read+0x58>)
 8015932:	490a      	ldr	r1, [pc, #40]	; (801595c <lfs_file_read+0x5c>)
 8015934:	480a      	ldr	r0, [pc, #40]	; (8015960 <lfs_file_read+0x60>)
 8015936:	f000 fedd 	bl	80166f4 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	687a      	ldr	r2, [r7, #4]
 801593e:	68b9      	ldr	r1, [r7, #8]
 8015940:	68f8      	ldr	r0, [r7, #12]
 8015942:	f7fe f851 	bl	80139e8 <lfs_file_rawread>
 8015946:	0003      	movs	r3, r0
 8015948:	613b      	str	r3, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 801594a:	693b      	ldr	r3, [r7, #16]
}
 801594c:	0018      	movs	r0, r3
 801594e:	46bd      	mov	sp, r7
 8015950:	b006      	add	sp, #24
 8015952:	bd80      	pop	{r7, pc}
 8015954:	0801cce4 	.word	0x0801cce4
 8015958:	0801d034 	.word	0x0801d034
 801595c:	0000176f 	.word	0x0000176f
 8015960:	0801c52c 	.word	0x0801c52c

08015964 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8015964:	b580      	push	{r7, lr}
 8015966:	b086      	sub	sp, #24
 8015968:	af00      	add	r7, sp, #0
 801596a:	60f8      	str	r0, [r7, #12]
 801596c:	60b9      	str	r1, [r7, #8]
 801596e:	607a      	str	r2, [r7, #4]
 8015970:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8015972:	2300      	movs	r3, #0
 8015974:	617b      	str	r3, [r7, #20]
    if (err) {
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d001      	beq.n	8015980 <lfs_file_write+0x1c>
        return err;
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	e017      	b.n	80159b0 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015984:	68ba      	ldr	r2, [r7, #8]
 8015986:	0011      	movs	r1, r2
 8015988:	0018      	movs	r0, r3
 801598a:	f7f9 fb7b 	bl	800f084 <lfs_mlist_isopen>
 801598e:	1e03      	subs	r3, r0, #0
 8015990:	d105      	bne.n	801599e <lfs_file_write+0x3a>
 8015992:	4b09      	ldr	r3, [pc, #36]	; (80159b8 <lfs_file_write+0x54>)
 8015994:	4a09      	ldr	r2, [pc, #36]	; (80159bc <lfs_file_write+0x58>)
 8015996:	490a      	ldr	r1, [pc, #40]	; (80159c0 <lfs_file_write+0x5c>)
 8015998:	480a      	ldr	r0, [pc, #40]	; (80159c4 <lfs_file_write+0x60>)
 801599a:	f000 feab 	bl	80166f4 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	68b9      	ldr	r1, [r7, #8]
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	f7fe f999 	bl	8013cdc <lfs_file_rawwrite>
 80159aa:	0003      	movs	r3, r0
 80159ac:	613b      	str	r3, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80159ae:	693b      	ldr	r3, [r7, #16]
}
 80159b0:	0018      	movs	r0, r3
 80159b2:	46bd      	mov	sp, r7
 80159b4:	b006      	add	sp, #24
 80159b6:	bd80      	pop	{r7, pc}
 80159b8:	0801cce4 	.word	0x0801cce4
 80159bc:	0801d044 	.word	0x0801d044
 80159c0:	00001781 	.word	0x00001781
 80159c4:	0801c52c 	.word	0x0801c52c

080159c8 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b084      	sub	sp, #16
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
 80159d0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80159d2:	2300      	movs	r3, #0
 80159d4:	60fb      	str	r3, [r7, #12]
    if (err) {
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d001      	beq.n	80159e0 <lfs_file_rewind+0x18>
        return err;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	e008      	b.n	80159f2 <lfs_file_rewind+0x2a>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 80159e0:	683a      	ldr	r2, [r7, #0]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	0011      	movs	r1, r2
 80159e6:	0018      	movs	r0, r3
 80159e8:	f7fe fa96 	bl	8013f18 <lfs_file_rawrewind>
 80159ec:	0003      	movs	r3, r0
 80159ee:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80159f0:	68fb      	ldr	r3, [r7, #12]
}
 80159f2:	0018      	movs	r0, r3
 80159f4:	46bd      	mov	sp, r7
 80159f6:	b004      	add	sp, #16
 80159f8:	bd80      	pop	{r7, pc}
	...

080159fc <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b086      	sub	sp, #24
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	60f8      	str	r0, [r7, #12]
 8015a04:	60b9      	str	r1, [r7, #8]
 8015a06:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8015a08:	2300      	movs	r3, #0
 8015a0a:	617b      	str	r3, [r7, #20]
    if (err) {
 8015a0c:	697b      	ldr	r3, [r7, #20]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d001      	beq.n	8015a16 <lfs_dir_open+0x1a>
        return err;
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	e01c      	b.n	8015a50 <lfs_dir_open+0x54>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a1a:	68ba      	ldr	r2, [r7, #8]
 8015a1c:	0011      	movs	r1, r2
 8015a1e:	0018      	movs	r0, r3
 8015a20:	f7f9 fb30 	bl	800f084 <lfs_mlist_isopen>
 8015a24:	0003      	movs	r3, r0
 8015a26:	001a      	movs	r2, r3
 8015a28:	2301      	movs	r3, #1
 8015a2a:	4053      	eors	r3, r2
 8015a2c:	b2db      	uxtb	r3, r3
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d105      	bne.n	8015a3e <lfs_dir_open+0x42>
 8015a32:	4b09      	ldr	r3, [pc, #36]	; (8015a58 <lfs_dir_open+0x5c>)
 8015a34:	4a09      	ldr	r2, [pc, #36]	; (8015a5c <lfs_dir_open+0x60>)
 8015a36:	490a      	ldr	r1, [pc, #40]	; (8015a60 <lfs_dir_open+0x64>)
 8015a38:	480a      	ldr	r0, [pc, #40]	; (8015a64 <lfs_dir_open+0x68>)
 8015a3a:	f000 fe5b 	bl	80166f4 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	68b9      	ldr	r1, [r7, #8]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	0018      	movs	r0, r3
 8015a46:	f7fc ff01 	bl	801284c <lfs_dir_rawopen>
 8015a4a:	0003      	movs	r3, r0
 8015a4c:	617b      	str	r3, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8015a4e:	697b      	ldr	r3, [r7, #20]
}
 8015a50:	0018      	movs	r0, r3
 8015a52:	46bd      	mov	sp, r7
 8015a54:	b006      	add	sp, #24
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	0801cd1c 	.word	0x0801cd1c
 8015a5c:	0801d054 	.word	0x0801d054
 8015a60:	000017f0 	.word	0x000017f0
 8015a64:	0801c52c 	.word	0x0801c52c

08015a68 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8015a72:	2300      	movs	r3, #0
 8015a74:	60fb      	str	r3, [r7, #12]
    if (err) {
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d001      	beq.n	8015a80 <lfs_dir_close+0x18>
        return err;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	e008      	b.n	8015a92 <lfs_dir_close+0x2a>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 8015a80:	683a      	ldr	r2, [r7, #0]
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	0011      	movs	r1, r2
 8015a86:	0018      	movs	r0, r3
 8015a88:	f7fc ff66 	bl	8012958 <lfs_dir_rawclose>
 8015a8c:	0003      	movs	r3, r0
 8015a8e:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8015a90:	68fb      	ldr	r3, [r7, #12]
}
 8015a92:	0018      	movs	r0, r3
 8015a94:	46bd      	mov	sp, r7
 8015a96:	b004      	add	sp, #16
 8015a98:	bd80      	pop	{r7, pc}

08015a9a <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8015a9a:	b580      	push	{r7, lr}
 8015a9c:	b086      	sub	sp, #24
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	60f8      	str	r0, [r7, #12]
 8015aa2:	60b9      	str	r1, [r7, #8]
 8015aa4:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	617b      	str	r3, [r7, #20]
    if (err) {
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d001      	beq.n	8015ab4 <lfs_dir_read+0x1a>
        return err;
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	e008      	b.n	8015ac6 <lfs_dir_read+0x2c>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 8015ab4:	687a      	ldr	r2, [r7, #4]
 8015ab6:	68b9      	ldr	r1, [r7, #8]
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	0018      	movs	r0, r3
 8015abc:	f7fc ff5c 	bl	8012978 <lfs_dir_rawread>
 8015ac0:	0003      	movs	r3, r0
 8015ac2:	617b      	str	r3, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8015ac4:	697b      	ldr	r3, [r7, #20]
}
 8015ac6:	0018      	movs	r0, r3
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	b006      	add	sp, #24
 8015acc:	bd80      	pop	{r7, pc}

08015ace <lfs_fs_size>:
    LFS_TRACE("lfs_fs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
 8015ace:	b580      	push	{r7, lr}
 8015ad0:	b084      	sub	sp, #16
 8015ad2:	af00      	add	r7, sp, #0
 8015ad4:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	60fb      	str	r3, [r7, #12]
    if (err) {
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d001      	beq.n	8015ae4 <lfs_fs_size+0x16>
        return err;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	e006      	b.n	8015af2 <lfs_fs_size+0x24>
    }
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);

    lfs_ssize_t res = lfs_fs_rawsize(lfs);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	0018      	movs	r0, r3
 8015ae8:	f7ff fe3a 	bl	8015760 <lfs_fs_rawsize>
 8015aec:	0003      	movs	r3, r0
 8015aee:	60bb      	str	r3, [r7, #8]

    LFS_TRACE("lfs_fs_size -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8015af0:	68bb      	ldr	r3, [r7, #8]
}
 8015af2:	0018      	movs	r0, r3
 8015af4:	46bd      	mov	sp, r7
 8015af6:	b004      	add	sp, #16
 8015af8:	bd80      	pop	{r7, pc}
	...

08015afc <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b086      	sub	sp, #24
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	60f8      	str	r0, [r7, #12]
 8015b04:	60b9      	str	r1, [r7, #8]
 8015b06:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	617b      	str	r3, [r7, #20]
 8015b10:	e024      	b.n	8015b5c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	091a      	lsrs	r2, r3, #4
 8015b16:	6939      	ldr	r1, [r7, #16]
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	18cb      	adds	r3, r1, r3
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	0019      	movs	r1, r3
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	404b      	eors	r3, r1
 8015b24:	210f      	movs	r1, #15
 8015b26:	4019      	ands	r1, r3
 8015b28:	4b11      	ldr	r3, [pc, #68]	; (8015b70 <lfs_crc+0x74>)
 8015b2a:	0089      	lsls	r1, r1, #2
 8015b2c:	58cb      	ldr	r3, [r1, r3]
 8015b2e:	4053      	eors	r3, r2
 8015b30:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	091a      	lsrs	r2, r3, #4
 8015b36:	6939      	ldr	r1, [r7, #16]
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	18cb      	adds	r3, r1, r3
 8015b3c:	781b      	ldrb	r3, [r3, #0]
 8015b3e:	091b      	lsrs	r3, r3, #4
 8015b40:	b2db      	uxtb	r3, r3
 8015b42:	0019      	movs	r1, r3
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	404b      	eors	r3, r1
 8015b48:	210f      	movs	r1, #15
 8015b4a:	4019      	ands	r1, r3
 8015b4c:	4b08      	ldr	r3, [pc, #32]	; (8015b70 <lfs_crc+0x74>)
 8015b4e:	0089      	lsls	r1, r1, #2
 8015b50:	58cb      	ldr	r3, [r1, r3]
 8015b52:	4053      	eors	r3, r2
 8015b54:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	3301      	adds	r3, #1
 8015b5a:	617b      	str	r3, [r7, #20]
 8015b5c:	697a      	ldr	r2, [r7, #20]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d3d6      	bcc.n	8015b12 <lfs_crc+0x16>
    }

    return crc;
 8015b64:	68fb      	ldr	r3, [r7, #12]
}
 8015b66:	0018      	movs	r0, r3
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	b006      	add	sp, #24
 8015b6c:	bd80      	pop	{r7, pc}
 8015b6e:	46c0      	nop			; (mov r8, r8)
 8015b70:	0801d064 	.word	0x0801d064

08015b74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015b78:	4914      	ldr	r1, [pc, #80]	; (8015bcc <MX_USB_DEVICE_Init+0x58>)
 8015b7a:	4b15      	ldr	r3, [pc, #84]	; (8015bd0 <MX_USB_DEVICE_Init+0x5c>)
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	0018      	movs	r0, r3
 8015b80:	f7f7 f906 	bl	800cd90 <USBD_Init>
 8015b84:	1e03      	subs	r3, r0, #0
 8015b86:	d001      	beq.n	8015b8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015b88:	f7ee fb86 	bl	8004298 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015b8c:	4a11      	ldr	r2, [pc, #68]	; (8015bd4 <MX_USB_DEVICE_Init+0x60>)
 8015b8e:	4b10      	ldr	r3, [pc, #64]	; (8015bd0 <MX_USB_DEVICE_Init+0x5c>)
 8015b90:	0011      	movs	r1, r2
 8015b92:	0018      	movs	r0, r3
 8015b94:	f7f7 f92d 	bl	800cdf2 <USBD_RegisterClass>
 8015b98:	1e03      	subs	r3, r0, #0
 8015b9a:	d001      	beq.n	8015ba0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8015b9c:	f7ee fb7c 	bl	8004298 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015ba0:	4a0d      	ldr	r2, [pc, #52]	; (8015bd8 <MX_USB_DEVICE_Init+0x64>)
 8015ba2:	4b0b      	ldr	r3, [pc, #44]	; (8015bd0 <MX_USB_DEVICE_Init+0x5c>)
 8015ba4:	0011      	movs	r1, r2
 8015ba6:	0018      	movs	r0, r3
 8015ba8:	f7f7 f842 	bl	800cc30 <USBD_CDC_RegisterInterface>
 8015bac:	1e03      	subs	r3, r0, #0
 8015bae:	d001      	beq.n	8015bb4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8015bb0:	f7ee fb72 	bl	8004298 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015bb4:	4b06      	ldr	r3, [pc, #24]	; (8015bd0 <MX_USB_DEVICE_Init+0x5c>)
 8015bb6:	0018      	movs	r0, r3
 8015bb8:	f7f7 f93b 	bl	800ce32 <USBD_Start>
 8015bbc:	1e03      	subs	r3, r0, #0
 8015bbe:	d001      	beq.n	8015bc4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8015bc0:	f7ee fb6a 	bl	8004298 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015bc4:	46c0      	nop			; (mov r8, r8)
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}
 8015bca:	46c0      	nop			; (mov r8, r8)
 8015bcc:	20000204 	.word	0x20000204
 8015bd0:	20000e88 	.word	0x20000e88
 8015bd4:	200000f0 	.word	0x200000f0
 8015bd8:	200001f4 	.word	0x200001f4

08015bdc <usb_char_waiting>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

uint8_t usb_char_waiting(void)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	af00      	add	r7, sp, #0
	return abs(head - tail);
 8015be0:	4b06      	ldr	r3, [pc, #24]	; (8015bfc <usb_char_waiting+0x20>)
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	001a      	movs	r2, r3
 8015be6:	4b06      	ldr	r3, [pc, #24]	; (8015c00 <usb_char_waiting+0x24>)
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	1ad3      	subs	r3, r2, r3
 8015bec:	17da      	asrs	r2, r3, #31
 8015bee:	189b      	adds	r3, r3, r2
 8015bf0:	4053      	eors	r3, r2
 8015bf2:	b2db      	uxtb	r3, r3
}
 8015bf4:	0018      	movs	r0, r3
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	46c0      	nop			; (mov r8, r8)
 8015bfc:	200012d0 	.word	0x200012d0
 8015c00:	200012d1 	.word	0x200012d1

08015c04 <usb_read_char>:

uint8_t usb_read_char(void)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
	char ch =  rx_buffer[tail++];
 8015c0a:	4b0c      	ldr	r3, [pc, #48]	; (8015c3c <usb_read_char+0x38>)
 8015c0c:	781b      	ldrb	r3, [r3, #0]
 8015c0e:	1c5a      	adds	r2, r3, #1
 8015c10:	b2d1      	uxtb	r1, r2
 8015c12:	4a0a      	ldr	r2, [pc, #40]	; (8015c3c <usb_read_char+0x38>)
 8015c14:	7011      	strb	r1, [r2, #0]
 8015c16:	0019      	movs	r1, r3
 8015c18:	1dfb      	adds	r3, r7, #7
 8015c1a:	4a09      	ldr	r2, [pc, #36]	; (8015c40 <usb_read_char+0x3c>)
 8015c1c:	5c52      	ldrb	r2, [r2, r1]
 8015c1e:	701a      	strb	r2, [r3, #0]

	if(tail >= APP_RX_DATA_SIZE)
 8015c20:	4b06      	ldr	r3, [pc, #24]	; (8015c3c <usb_read_char+0x38>)
 8015c22:	781b      	ldrb	r3, [r3, #0]
 8015c24:	b25b      	sxtb	r3, r3
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	da02      	bge.n	8015c30 <usb_read_char+0x2c>
	{
		tail = 0;
 8015c2a:	4b04      	ldr	r3, [pc, #16]	; (8015c3c <usb_read_char+0x38>)
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	701a      	strb	r2, [r3, #0]
	}

	return ch;
 8015c30:	1dfb      	adds	r3, r7, #7
 8015c32:	781b      	ldrb	r3, [r3, #0]
}
 8015c34:	0018      	movs	r0, r3
 8015c36:	46bd      	mov	sp, r7
 8015c38:	b002      	add	sp, #8
 8015c3a:	bd80      	pop	{r7, pc}
 8015c3c:	200012d1 	.word	0x200012d1
 8015c40:	20001250 	.word	0x20001250

08015c44 <usb_is_configured>:

uint8_t usb_is_configured(void)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	af00      	add	r7, sp, #0
    return configured;
 8015c48:	4b02      	ldr	r3, [pc, #8]	; (8015c54 <usb_is_configured+0x10>)
 8015c4a:	781b      	ldrb	r3, [r3, #0]
}
 8015c4c:	0018      	movs	r0, r3
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	46c0      	nop			; (mov r8, r8)
 8015c54:	2000124c 	.word	0x2000124c

08015c58 <usb_write_chars>:
    configured = 0;
}

/** */
void usb_write_chars(char *buffer, uint8_t length)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b082      	sub	sp, #8
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
 8015c60:	000a      	movs	r2, r1
 8015c62:	1cfb      	adds	r3, r7, #3
 8015c64:	701a      	strb	r2, [r3, #0]
    while(CDC_Transmit_FS((uint8_t *)buffer, length));
 8015c66:	46c0      	nop			; (mov r8, r8)
 8015c68:	1cfb      	adds	r3, r7, #3
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	b29a      	uxth	r2, r3
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	0011      	movs	r1, r2
 8015c72:	0018      	movs	r0, r3
 8015c74:	f000 f882 	bl	8015d7c <CDC_Transmit_FS>
 8015c78:	1e03      	subs	r3, r0, #0
 8015c7a:	d1f5      	bne.n	8015c68 <usb_write_chars+0x10>
}
 8015c7c:	46c0      	nop			; (mov r8, r8)
 8015c7e:	46c0      	nop			; (mov r8, r8)
 8015c80:	46bd      	mov	sp, r7
 8015c82:	b002      	add	sp, #8
 8015c84:	bd80      	pop	{r7, pc}
	...

08015c88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015c8c:	4907      	ldr	r1, [pc, #28]	; (8015cac <CDC_Init_FS+0x24>)
 8015c8e:	4b08      	ldr	r3, [pc, #32]	; (8015cb0 <CDC_Init_FS+0x28>)
 8015c90:	2200      	movs	r2, #0
 8015c92:	0018      	movs	r0, r3
 8015c94:	f7f6 ffe7 	bl	800cc66 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015c98:	4a06      	ldr	r2, [pc, #24]	; (8015cb4 <CDC_Init_FS+0x2c>)
 8015c9a:	4b05      	ldr	r3, [pc, #20]	; (8015cb0 <CDC_Init_FS+0x28>)
 8015c9c:	0011      	movs	r1, r2
 8015c9e:	0018      	movs	r0, r3
 8015ca0:	f7f6 fffd 	bl	800cc9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015ca4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015ca6:	0018      	movs	r0, r3
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}
 8015cac:	200011cc 	.word	0x200011cc
 8015cb0:	20000e88 	.word	0x20000e88
 8015cb4:	2000114c 	.word	0x2000114c

08015cb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015cbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015cbe:	0018      	movs	r0, r3
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6039      	str	r1, [r7, #0]
 8015ccc:	0011      	movs	r1, r2
 8015cce:	1dfb      	adds	r3, r7, #7
 8015cd0:	1c02      	adds	r2, r0, #0
 8015cd2:	701a      	strb	r2, [r3, #0]
 8015cd4:	1d3b      	adds	r3, r7, #4
 8015cd6:	1c0a      	adds	r2, r1, #0
 8015cd8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015cda:	1dfb      	adds	r3, r7, #7
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	2b23      	cmp	r3, #35	; 0x23
 8015ce0:	d808      	bhi.n	8015cf4 <CDC_Control_FS+0x30>
 8015ce2:	009a      	lsls	r2, r3, #2
 8015ce4:	4b06      	ldr	r3, [pc, #24]	; (8015d00 <CDC_Control_FS+0x3c>)
 8015ce6:	18d3      	adds	r3, r2, r3
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	469f      	mov	pc, r3
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
        configured = 1;
 8015cec:	4b05      	ldr	r3, [pc, #20]	; (8015d04 <CDC_Control_FS+0x40>)
 8015cee:	2201      	movs	r2, #1
 8015cf0:	701a      	strb	r2, [r3, #0]
    break;
 8015cf2:	e000      	b.n	8015cf6 <CDC_Control_FS+0x32>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015cf4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8015cf6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015cf8:	0018      	movs	r0, r3
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	b002      	add	sp, #8
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	0801d0a4 	.word	0x0801d0a4
 8015d04:	2000124c 	.word	0x2000124c

08015d08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
 8015d10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015d12:	687a      	ldr	r2, [r7, #4]
 8015d14:	4b16      	ldr	r3, [pc, #88]	; (8015d70 <CDC_Receive_FS+0x68>)
 8015d16:	0011      	movs	r1, r2
 8015d18:	0018      	movs	r0, r3
 8015d1a:	f7f6 ffc0 	bl	800cc9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015d1e:	4b14      	ldr	r3, [pc, #80]	; (8015d70 <CDC_Receive_FS+0x68>)
 8015d20:	0018      	movs	r0, r3
 8015d22:	f7f7 f807 	bl	800cd34 <USBD_CDC_ReceivePacket>

  for(int index = 0; index < *Len; index++)
 8015d26:	2300      	movs	r3, #0
 8015d28:	60fb      	str	r3, [r7, #12]
 8015d2a:	e017      	b.n	8015d5c <CDC_Receive_FS+0x54>
  {
	  rx_buffer[head++] = Buf[index];
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	18d2      	adds	r2, r2, r3
 8015d32:	4b10      	ldr	r3, [pc, #64]	; (8015d74 <CDC_Receive_FS+0x6c>)
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	1c59      	adds	r1, r3, #1
 8015d38:	b2c8      	uxtb	r0, r1
 8015d3a:	490e      	ldr	r1, [pc, #56]	; (8015d74 <CDC_Receive_FS+0x6c>)
 8015d3c:	7008      	strb	r0, [r1, #0]
 8015d3e:	0019      	movs	r1, r3
 8015d40:	7812      	ldrb	r2, [r2, #0]
 8015d42:	4b0d      	ldr	r3, [pc, #52]	; (8015d78 <CDC_Receive_FS+0x70>)
 8015d44:	545a      	strb	r2, [r3, r1]
	  if(head >= APP_RX_DATA_SIZE)
 8015d46:	4b0b      	ldr	r3, [pc, #44]	; (8015d74 <CDC_Receive_FS+0x6c>)
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	b25b      	sxtb	r3, r3
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	da02      	bge.n	8015d56 <CDC_Receive_FS+0x4e>
	  {
		  head = 0;
 8015d50:	4b08      	ldr	r3, [pc, #32]	; (8015d74 <CDC_Receive_FS+0x6c>)
 8015d52:	2200      	movs	r2, #0
 8015d54:	701a      	strb	r2, [r3, #0]
  for(int index = 0; index < *Len; index++)
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	3301      	adds	r3, #1
 8015d5a:	60fb      	str	r3, [r7, #12]
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	681a      	ldr	r2, [r3, #0]
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d8e2      	bhi.n	8015d2c <CDC_Receive_FS+0x24>
	  }
  }

  return (USBD_OK);
 8015d66:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015d68:	0018      	movs	r0, r3
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	b004      	add	sp, #16
 8015d6e:	bd80      	pop	{r7, pc}
 8015d70:	20000e88 	.word	0x20000e88
 8015d74:	200012d0 	.word	0x200012d0
 8015d78:	20001250 	.word	0x20001250

08015d7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015d7c:	b5b0      	push	{r4, r5, r7, lr}
 8015d7e:	b084      	sub	sp, #16
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	000a      	movs	r2, r1
 8015d86:	1cbb      	adds	r3, r7, #2
 8015d88:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8015d8a:	230f      	movs	r3, #15
 8015d8c:	18fb      	adds	r3, r7, r3
 8015d8e:	2200      	movs	r2, #0
 8015d90:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015d92:	4a11      	ldr	r2, [pc, #68]	; (8015dd8 <CDC_Transmit_FS+0x5c>)
 8015d94:	23ae      	movs	r3, #174	; 0xae
 8015d96:	009b      	lsls	r3, r3, #2
 8015d98:	58d3      	ldr	r3, [r2, r3]
 8015d9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015d9c:	68ba      	ldr	r2, [r7, #8]
 8015d9e:	2385      	movs	r3, #133	; 0x85
 8015da0:	009b      	lsls	r3, r3, #2
 8015da2:	58d3      	ldr	r3, [r2, r3]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d001      	beq.n	8015dac <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8015da8:	2301      	movs	r3, #1
 8015daa:	e010      	b.n	8015dce <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015dac:	1cbb      	adds	r3, r7, #2
 8015dae:	881a      	ldrh	r2, [r3, #0]
 8015db0:	6879      	ldr	r1, [r7, #4]
 8015db2:	4b09      	ldr	r3, [pc, #36]	; (8015dd8 <CDC_Transmit_FS+0x5c>)
 8015db4:	0018      	movs	r0, r3
 8015db6:	f7f6 ff56 	bl	800cc66 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015dba:	250f      	movs	r5, #15
 8015dbc:	197c      	adds	r4, r7, r5
 8015dbe:	4b06      	ldr	r3, [pc, #24]	; (8015dd8 <CDC_Transmit_FS+0x5c>)
 8015dc0:	0018      	movs	r0, r3
 8015dc2:	f7f6 ff80 	bl	800ccc6 <USBD_CDC_TransmitPacket>
 8015dc6:	0003      	movs	r3, r0
 8015dc8:	7023      	strb	r3, [r4, #0]

  /* USER CODE END 7 */
  return result;
 8015dca:	197b      	adds	r3, r7, r5
 8015dcc:	781b      	ldrb	r3, [r3, #0]
}
 8015dce:	0018      	movs	r0, r3
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	b004      	add	sp, #16
 8015dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8015dd6:	46c0      	nop			; (mov r8, r8)
 8015dd8:	20000e88 	.word	0x20000e88

08015ddc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b082      	sub	sp, #8
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	0002      	movs	r2, r0
 8015de4:	6039      	str	r1, [r7, #0]
 8015de6:	1dfb      	adds	r3, r7, #7
 8015de8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	2212      	movs	r2, #18
 8015dee:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015df0:	4b02      	ldr	r3, [pc, #8]	; (8015dfc <USBD_FS_DeviceDescriptor+0x20>)
}
 8015df2:	0018      	movs	r0, r3
 8015df4:	46bd      	mov	sp, r7
 8015df6:	b002      	add	sp, #8
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	46c0      	nop			; (mov r8, r8)
 8015dfc:	20000220 	.word	0x20000220

08015e00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b082      	sub	sp, #8
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	0002      	movs	r2, r0
 8015e08:	6039      	str	r1, [r7, #0]
 8015e0a:	1dfb      	adds	r3, r7, #7
 8015e0c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	2204      	movs	r2, #4
 8015e12:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015e14:	4b02      	ldr	r3, [pc, #8]	; (8015e20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015e16:	0018      	movs	r0, r3
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	b002      	add	sp, #8
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	46c0      	nop			; (mov r8, r8)
 8015e20:	20000234 	.word	0x20000234

08015e24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	0002      	movs	r2, r0
 8015e2c:	6039      	str	r1, [r7, #0]
 8015e2e:	1dfb      	adds	r3, r7, #7
 8015e30:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015e32:	1dfb      	adds	r3, r7, #7
 8015e34:	781b      	ldrb	r3, [r3, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d106      	bne.n	8015e48 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015e3a:	683a      	ldr	r2, [r7, #0]
 8015e3c:	4908      	ldr	r1, [pc, #32]	; (8015e60 <USBD_FS_ProductStrDescriptor+0x3c>)
 8015e3e:	4b09      	ldr	r3, [pc, #36]	; (8015e64 <USBD_FS_ProductStrDescriptor+0x40>)
 8015e40:	0018      	movs	r0, r3
 8015e42:	f7f8 f8b6 	bl	800dfb2 <USBD_GetString>
 8015e46:	e005      	b.n	8015e54 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015e48:	683a      	ldr	r2, [r7, #0]
 8015e4a:	4905      	ldr	r1, [pc, #20]	; (8015e60 <USBD_FS_ProductStrDescriptor+0x3c>)
 8015e4c:	4b05      	ldr	r3, [pc, #20]	; (8015e64 <USBD_FS_ProductStrDescriptor+0x40>)
 8015e4e:	0018      	movs	r0, r3
 8015e50:	f7f8 f8af 	bl	800dfb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015e54:	4b02      	ldr	r3, [pc, #8]	; (8015e60 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8015e56:	0018      	movs	r0, r3
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	b002      	add	sp, #8
 8015e5c:	bd80      	pop	{r7, pc}
 8015e5e:	46c0      	nop			; (mov r8, r8)
 8015e60:	200012d4 	.word	0x200012d4
 8015e64:	0801cd54 	.word	0x0801cd54

08015e68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	0002      	movs	r2, r0
 8015e70:	6039      	str	r1, [r7, #0]
 8015e72:	1dfb      	adds	r3, r7, #7
 8015e74:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015e76:	683a      	ldr	r2, [r7, #0]
 8015e78:	4904      	ldr	r1, [pc, #16]	; (8015e8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015e7a:	4b05      	ldr	r3, [pc, #20]	; (8015e90 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8015e7c:	0018      	movs	r0, r3
 8015e7e:	f7f8 f898 	bl	800dfb2 <USBD_GetString>
  return USBD_StrDesc;
 8015e82:	4b02      	ldr	r3, [pc, #8]	; (8015e8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8015e84:	0018      	movs	r0, r3
 8015e86:	46bd      	mov	sp, r7
 8015e88:	b002      	add	sp, #8
 8015e8a:	bd80      	pop	{r7, pc}
 8015e8c:	200012d4 	.word	0x200012d4
 8015e90:	0801cd6c 	.word	0x0801cd6c

08015e94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b082      	sub	sp, #8
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	0002      	movs	r2, r0
 8015e9c:	6039      	str	r1, [r7, #0]
 8015e9e:	1dfb      	adds	r3, r7, #7
 8015ea0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	221a      	movs	r2, #26
 8015ea6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015ea8:	f000 f84c 	bl	8015f44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015eac:	4b02      	ldr	r3, [pc, #8]	; (8015eb8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8015eae:	0018      	movs	r0, r3
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	b002      	add	sp, #8
 8015eb4:	bd80      	pop	{r7, pc}
 8015eb6:	46c0      	nop			; (mov r8, r8)
 8015eb8:	20000238 	.word	0x20000238

08015ebc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b082      	sub	sp, #8
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	0002      	movs	r2, r0
 8015ec4:	6039      	str	r1, [r7, #0]
 8015ec6:	1dfb      	adds	r3, r7, #7
 8015ec8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8015eca:	1dfb      	adds	r3, r7, #7
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d106      	bne.n	8015ee0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ed2:	683a      	ldr	r2, [r7, #0]
 8015ed4:	4908      	ldr	r1, [pc, #32]	; (8015ef8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8015ed6:	4b09      	ldr	r3, [pc, #36]	; (8015efc <USBD_FS_ConfigStrDescriptor+0x40>)
 8015ed8:	0018      	movs	r0, r3
 8015eda:	f7f8 f86a 	bl	800dfb2 <USBD_GetString>
 8015ede:	e005      	b.n	8015eec <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ee0:	683a      	ldr	r2, [r7, #0]
 8015ee2:	4905      	ldr	r1, [pc, #20]	; (8015ef8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8015ee4:	4b05      	ldr	r3, [pc, #20]	; (8015efc <USBD_FS_ConfigStrDescriptor+0x40>)
 8015ee6:	0018      	movs	r0, r3
 8015ee8:	f7f8 f863 	bl	800dfb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015eec:	4b02      	ldr	r3, [pc, #8]	; (8015ef8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8015eee:	0018      	movs	r0, r3
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	b002      	add	sp, #8
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	46c0      	nop			; (mov r8, r8)
 8015ef8:	200012d4 	.word	0x200012d4
 8015efc:	0801cd80 	.word	0x0801cd80

08015f00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b082      	sub	sp, #8
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	0002      	movs	r2, r0
 8015f08:	6039      	str	r1, [r7, #0]
 8015f0a:	1dfb      	adds	r3, r7, #7
 8015f0c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015f0e:	1dfb      	adds	r3, r7, #7
 8015f10:	781b      	ldrb	r3, [r3, #0]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d106      	bne.n	8015f24 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015f16:	683a      	ldr	r2, [r7, #0]
 8015f18:	4908      	ldr	r1, [pc, #32]	; (8015f3c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8015f1a:	4b09      	ldr	r3, [pc, #36]	; (8015f40 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8015f1c:	0018      	movs	r0, r3
 8015f1e:	f7f8 f848 	bl	800dfb2 <USBD_GetString>
 8015f22:	e005      	b.n	8015f30 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015f24:	683a      	ldr	r2, [r7, #0]
 8015f26:	4905      	ldr	r1, [pc, #20]	; (8015f3c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8015f28:	4b05      	ldr	r3, [pc, #20]	; (8015f40 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8015f2a:	0018      	movs	r0, r3
 8015f2c:	f7f8 f841 	bl	800dfb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015f30:	4b02      	ldr	r3, [pc, #8]	; (8015f3c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8015f32:	0018      	movs	r0, r3
 8015f34:	46bd      	mov	sp, r7
 8015f36:	b002      	add	sp, #8
 8015f38:	bd80      	pop	{r7, pc}
 8015f3a:	46c0      	nop			; (mov r8, r8)
 8015f3c:	200012d4 	.word	0x200012d4
 8015f40:	0801cd8c 	.word	0x0801cd8c

08015f44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b084      	sub	sp, #16
 8015f48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015f4a:	4b10      	ldr	r3, [pc, #64]	; (8015f8c <Get_SerialNum+0x48>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015f50:	4b0f      	ldr	r3, [pc, #60]	; (8015f90 <Get_SerialNum+0x4c>)
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015f56:	4b0f      	ldr	r3, [pc, #60]	; (8015f94 <Get_SerialNum+0x50>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015f5c:	68fa      	ldr	r2, [r7, #12]
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	18d3      	adds	r3, r2, r3
 8015f62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d00b      	beq.n	8015f82 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015f6a:	490b      	ldr	r1, [pc, #44]	; (8015f98 <Get_SerialNum+0x54>)
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2208      	movs	r2, #8
 8015f70:	0018      	movs	r0, r3
 8015f72:	f000 f815 	bl	8015fa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015f76:	4909      	ldr	r1, [pc, #36]	; (8015f9c <Get_SerialNum+0x58>)
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	2204      	movs	r2, #4
 8015f7c:	0018      	movs	r0, r3
 8015f7e:	f000 f80f 	bl	8015fa0 <IntToUnicode>
  }
}
 8015f82:	46c0      	nop			; (mov r8, r8)
 8015f84:	46bd      	mov	sp, r7
 8015f86:	b004      	add	sp, #16
 8015f88:	bd80      	pop	{r7, pc}
 8015f8a:	46c0      	nop			; (mov r8, r8)
 8015f8c:	1ffff7ac 	.word	0x1ffff7ac
 8015f90:	1ffff7b0 	.word	0x1ffff7b0
 8015f94:	1ffff7b4 	.word	0x1ffff7b4
 8015f98:	2000023a 	.word	0x2000023a
 8015f9c:	2000024a 	.word	0x2000024a

08015fa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b086      	sub	sp, #24
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	60f8      	str	r0, [r7, #12]
 8015fa8:	60b9      	str	r1, [r7, #8]
 8015faa:	1dfb      	adds	r3, r7, #7
 8015fac:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8015fae:	2117      	movs	r1, #23
 8015fb0:	187b      	adds	r3, r7, r1
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8015fb6:	187b      	adds	r3, r7, r1
 8015fb8:	2200      	movs	r2, #0
 8015fba:	701a      	strb	r2, [r3, #0]
 8015fbc:	e02f      	b.n	801601e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	0f1b      	lsrs	r3, r3, #28
 8015fc2:	2b09      	cmp	r3, #9
 8015fc4:	d80d      	bhi.n	8015fe2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	0f1b      	lsrs	r3, r3, #28
 8015fca:	b2da      	uxtb	r2, r3
 8015fcc:	2317      	movs	r3, #23
 8015fce:	18fb      	adds	r3, r7, r3
 8015fd0:	781b      	ldrb	r3, [r3, #0]
 8015fd2:	005b      	lsls	r3, r3, #1
 8015fd4:	0019      	movs	r1, r3
 8015fd6:	68bb      	ldr	r3, [r7, #8]
 8015fd8:	185b      	adds	r3, r3, r1
 8015fda:	3230      	adds	r2, #48	; 0x30
 8015fdc:	b2d2      	uxtb	r2, r2
 8015fde:	701a      	strb	r2, [r3, #0]
 8015fe0:	e00c      	b.n	8015ffc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	0f1b      	lsrs	r3, r3, #28
 8015fe6:	b2da      	uxtb	r2, r3
 8015fe8:	2317      	movs	r3, #23
 8015fea:	18fb      	adds	r3, r7, r3
 8015fec:	781b      	ldrb	r3, [r3, #0]
 8015fee:	005b      	lsls	r3, r3, #1
 8015ff0:	0019      	movs	r1, r3
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	185b      	adds	r3, r3, r1
 8015ff6:	3237      	adds	r2, #55	; 0x37
 8015ff8:	b2d2      	uxtb	r2, r2
 8015ffa:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	011b      	lsls	r3, r3, #4
 8016000:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016002:	2117      	movs	r1, #23
 8016004:	187b      	adds	r3, r7, r1
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	005b      	lsls	r3, r3, #1
 801600a:	3301      	adds	r3, #1
 801600c:	68ba      	ldr	r2, [r7, #8]
 801600e:	18d3      	adds	r3, r2, r3
 8016010:	2200      	movs	r2, #0
 8016012:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016014:	187b      	adds	r3, r7, r1
 8016016:	781a      	ldrb	r2, [r3, #0]
 8016018:	187b      	adds	r3, r7, r1
 801601a:	3201      	adds	r2, #1
 801601c:	701a      	strb	r2, [r3, #0]
 801601e:	2317      	movs	r3, #23
 8016020:	18fa      	adds	r2, r7, r3
 8016022:	1dfb      	adds	r3, r7, #7
 8016024:	7812      	ldrb	r2, [r2, #0]
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	429a      	cmp	r2, r3
 801602a:	d3c8      	bcc.n	8015fbe <IntToUnicode+0x1e>
  }
}
 801602c:	46c0      	nop			; (mov r8, r8)
 801602e:	46c0      	nop			; (mov r8, r8)
 8016030:	46bd      	mov	sp, r7
 8016032:	b006      	add	sp, #24
 8016034:	bd80      	pop	{r7, pc}
	...

08016038 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b084      	sub	sp, #16
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	4a0e      	ldr	r2, [pc, #56]	; (8016080 <HAL_PCD_MspInit+0x48>)
 8016046:	4293      	cmp	r3, r2
 8016048:	d115      	bne.n	8016076 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801604a:	4b0e      	ldr	r3, [pc, #56]	; (8016084 <HAL_PCD_MspInit+0x4c>)
 801604c:	69da      	ldr	r2, [r3, #28]
 801604e:	4b0d      	ldr	r3, [pc, #52]	; (8016084 <HAL_PCD_MspInit+0x4c>)
 8016050:	2180      	movs	r1, #128	; 0x80
 8016052:	0409      	lsls	r1, r1, #16
 8016054:	430a      	orrs	r2, r1
 8016056:	61da      	str	r2, [r3, #28]
 8016058:	4b0a      	ldr	r3, [pc, #40]	; (8016084 <HAL_PCD_MspInit+0x4c>)
 801605a:	69da      	ldr	r2, [r3, #28]
 801605c:	2380      	movs	r3, #128	; 0x80
 801605e:	041b      	lsls	r3, r3, #16
 8016060:	4013      	ands	r3, r2
 8016062:	60fb      	str	r3, [r7, #12]
 8016064:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8016066:	2200      	movs	r2, #0
 8016068:	2100      	movs	r1, #0
 801606a:	201f      	movs	r0, #31
 801606c:	f7ee fd08 	bl	8004a80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8016070:	201f      	movs	r0, #31
 8016072:	f7ee fd1a 	bl	8004aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016076:	46c0      	nop			; (mov r8, r8)
 8016078:	46bd      	mov	sp, r7
 801607a:	b004      	add	sp, #16
 801607c:	bd80      	pop	{r7, pc}
 801607e:	46c0      	nop			; (mov r8, r8)
 8016080:	40005c00 	.word	0x40005c00
 8016084:	40021000 	.word	0x40021000

08016088 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016090:	687a      	ldr	r2, [r7, #4]
 8016092:	23bc      	movs	r3, #188	; 0xbc
 8016094:	009b      	lsls	r3, r3, #2
 8016096:	58d2      	ldr	r2, [r2, r3]
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	21ac      	movs	r1, #172	; 0xac
 801609c:	0089      	lsls	r1, r1, #2
 801609e:	468c      	mov	ip, r1
 80160a0:	4463      	add	r3, ip
 80160a2:	0019      	movs	r1, r3
 80160a4:	0010      	movs	r0, r2
 80160a6:	f7f6 ff17 	bl	800ced8 <USBD_LL_SetupStage>
}
 80160aa:	46c0      	nop			; (mov r8, r8)
 80160ac:	46bd      	mov	sp, r7
 80160ae:	b002      	add	sp, #8
 80160b0:	bd80      	pop	{r7, pc}

080160b2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160b2:	b590      	push	{r4, r7, lr}
 80160b4:	b083      	sub	sp, #12
 80160b6:	af00      	add	r7, sp, #0
 80160b8:	6078      	str	r0, [r7, #4]
 80160ba:	000a      	movs	r2, r1
 80160bc:	1cfb      	adds	r3, r7, #3
 80160be:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	23bc      	movs	r3, #188	; 0xbc
 80160c4:	009b      	lsls	r3, r3, #2
 80160c6:	58d4      	ldr	r4, [r2, r3]
 80160c8:	1cfb      	adds	r3, r7, #3
 80160ca:	781a      	ldrb	r2, [r3, #0]
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	23be      	movs	r3, #190	; 0xbe
 80160d0:	0059      	lsls	r1, r3, #1
 80160d2:	0013      	movs	r3, r2
 80160d4:	009b      	lsls	r3, r3, #2
 80160d6:	189b      	adds	r3, r3, r2
 80160d8:	00db      	lsls	r3, r3, #3
 80160da:	18c3      	adds	r3, r0, r3
 80160dc:	185b      	adds	r3, r3, r1
 80160de:	681a      	ldr	r2, [r3, #0]
 80160e0:	1cfb      	adds	r3, r7, #3
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	0019      	movs	r1, r3
 80160e6:	0020      	movs	r0, r4
 80160e8:	f7f6 ff54 	bl	800cf94 <USBD_LL_DataOutStage>
}
 80160ec:	46c0      	nop			; (mov r8, r8)
 80160ee:	46bd      	mov	sp, r7
 80160f0:	b003      	add	sp, #12
 80160f2:	bd90      	pop	{r4, r7, pc}

080160f4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b082      	sub	sp, #8
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
 80160fc:	000a      	movs	r2, r1
 80160fe:	1cfb      	adds	r3, r7, #3
 8016100:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016102:	687a      	ldr	r2, [r7, #4]
 8016104:	23bc      	movs	r3, #188	; 0xbc
 8016106:	009b      	lsls	r3, r3, #2
 8016108:	58d0      	ldr	r0, [r2, r3]
 801610a:	1cfb      	adds	r3, r7, #3
 801610c:	781a      	ldrb	r2, [r3, #0]
 801610e:	6879      	ldr	r1, [r7, #4]
 8016110:	0013      	movs	r3, r2
 8016112:	009b      	lsls	r3, r3, #2
 8016114:	189b      	adds	r3, r3, r2
 8016116:	00db      	lsls	r3, r3, #3
 8016118:	18cb      	adds	r3, r1, r3
 801611a:	333c      	adds	r3, #60	; 0x3c
 801611c:	681a      	ldr	r2, [r3, #0]
 801611e:	1cfb      	adds	r3, r7, #3
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	0019      	movs	r1, r3
 8016124:	f7f6 ffb8 	bl	800d098 <USBD_LL_DataInStage>
}
 8016128:	46c0      	nop			; (mov r8, r8)
 801612a:	46bd      	mov	sp, r7
 801612c:	b002      	add	sp, #8
 801612e:	bd80      	pop	{r7, pc}

08016130 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b082      	sub	sp, #8
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	23bc      	movs	r3, #188	; 0xbc
 801613c:	009b      	lsls	r3, r3, #2
 801613e:	58d3      	ldr	r3, [r2, r3]
 8016140:	0018      	movs	r0, r3
 8016142:	f7f7 f8ef 	bl	800d324 <USBD_LL_SOF>
}
 8016146:	46c0      	nop			; (mov r8, r8)
 8016148:	46bd      	mov	sp, r7
 801614a:	b002      	add	sp, #8
 801614c:	bd80      	pop	{r7, pc}

0801614e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801614e:	b580      	push	{r7, lr}
 8016150:	b084      	sub	sp, #16
 8016152:	af00      	add	r7, sp, #0
 8016154:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016156:	230f      	movs	r3, #15
 8016158:	18fb      	adds	r3, r7, r3
 801615a:	2201      	movs	r2, #1
 801615c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	689b      	ldr	r3, [r3, #8]
 8016162:	2b02      	cmp	r3, #2
 8016164:	d001      	beq.n	801616a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8016166:	f7ee f897 	bl	8004298 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	23bc      	movs	r3, #188	; 0xbc
 801616e:	009b      	lsls	r3, r3, #2
 8016170:	58d2      	ldr	r2, [r2, r3]
 8016172:	230f      	movs	r3, #15
 8016174:	18fb      	adds	r3, r7, r3
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	0019      	movs	r1, r3
 801617a:	0010      	movs	r0, r2
 801617c:	f7f7 f891 	bl	800d2a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	23bc      	movs	r3, #188	; 0xbc
 8016184:	009b      	lsls	r3, r3, #2
 8016186:	58d3      	ldr	r3, [r2, r3]
 8016188:	0018      	movs	r0, r3
 801618a:	f7f7 f842 	bl	800d212 <USBD_LL_Reset>
}
 801618e:	46c0      	nop			; (mov r8, r8)
 8016190:	46bd      	mov	sp, r7
 8016192:	b004      	add	sp, #16
 8016194:	bd80      	pop	{r7, pc}
	...

08016198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b082      	sub	sp, #8
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80161a0:	687a      	ldr	r2, [r7, #4]
 80161a2:	23bc      	movs	r3, #188	; 0xbc
 80161a4:	009b      	lsls	r3, r3, #2
 80161a6:	58d3      	ldr	r3, [r2, r3]
 80161a8:	0018      	movs	r0, r3
 80161aa:	f7f7 f88b 	bl	800d2c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	699b      	ldr	r3, [r3, #24]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d005      	beq.n	80161c2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80161b6:	4b05      	ldr	r3, [pc, #20]	; (80161cc <HAL_PCD_SuspendCallback+0x34>)
 80161b8:	691a      	ldr	r2, [r3, #16]
 80161ba:	4b04      	ldr	r3, [pc, #16]	; (80161cc <HAL_PCD_SuspendCallback+0x34>)
 80161bc:	2106      	movs	r1, #6
 80161be:	430a      	orrs	r2, r1
 80161c0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80161c2:	46c0      	nop			; (mov r8, r8)
 80161c4:	46bd      	mov	sp, r7
 80161c6:	b002      	add	sp, #8
 80161c8:	bd80      	pop	{r7, pc}
 80161ca:	46c0      	nop			; (mov r8, r8)
 80161cc:	e000ed00 	.word	0xe000ed00

080161d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b082      	sub	sp, #8
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	699b      	ldr	r3, [r3, #24]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d007      	beq.n	80161f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80161e0:	4b09      	ldr	r3, [pc, #36]	; (8016208 <HAL_PCD_ResumeCallback+0x38>)
 80161e2:	691a      	ldr	r2, [r3, #16]
 80161e4:	4b08      	ldr	r3, [pc, #32]	; (8016208 <HAL_PCD_ResumeCallback+0x38>)
 80161e6:	2106      	movs	r1, #6
 80161e8:	438a      	bics	r2, r1
 80161ea:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80161ec:	f000 fa44 	bl	8016678 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80161f0:	687a      	ldr	r2, [r7, #4]
 80161f2:	23bc      	movs	r3, #188	; 0xbc
 80161f4:	009b      	lsls	r3, r3, #2
 80161f6:	58d3      	ldr	r3, [r2, r3]
 80161f8:	0018      	movs	r0, r3
 80161fa:	f7f7 f87b 	bl	800d2f4 <USBD_LL_Resume>
}
 80161fe:	46c0      	nop			; (mov r8, r8)
 8016200:	46bd      	mov	sp, r7
 8016202:	b002      	add	sp, #8
 8016204:	bd80      	pop	{r7, pc}
 8016206:	46c0      	nop			; (mov r8, r8)
 8016208:	e000ed00 	.word	0xe000ed00

0801620c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8016214:	4a2d      	ldr	r2, [pc, #180]	; (80162cc <USBD_LL_Init+0xc0>)
 8016216:	23bc      	movs	r3, #188	; 0xbc
 8016218:	009b      	lsls	r3, r3, #2
 801621a:	6879      	ldr	r1, [r7, #4]
 801621c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801621e:	687a      	ldr	r2, [r7, #4]
 8016220:	23b0      	movs	r3, #176	; 0xb0
 8016222:	009b      	lsls	r3, r3, #2
 8016224:	4929      	ldr	r1, [pc, #164]	; (80162cc <USBD_LL_Init+0xc0>)
 8016226:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8016228:	4b28      	ldr	r3, [pc, #160]	; (80162cc <USBD_LL_Init+0xc0>)
 801622a:	4a29      	ldr	r2, [pc, #164]	; (80162d0 <USBD_LL_Init+0xc4>)
 801622c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801622e:	4b27      	ldr	r3, [pc, #156]	; (80162cc <USBD_LL_Init+0xc0>)
 8016230:	2208      	movs	r2, #8
 8016232:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016234:	4b25      	ldr	r3, [pc, #148]	; (80162cc <USBD_LL_Init+0xc0>)
 8016236:	2202      	movs	r2, #2
 8016238:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801623a:	4b24      	ldr	r3, [pc, #144]	; (80162cc <USBD_LL_Init+0xc0>)
 801623c:	2202      	movs	r2, #2
 801623e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016240:	4b22      	ldr	r3, [pc, #136]	; (80162cc <USBD_LL_Init+0xc0>)
 8016242:	2200      	movs	r2, #0
 8016244:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016246:	4b21      	ldr	r3, [pc, #132]	; (80162cc <USBD_LL_Init+0xc0>)
 8016248:	2200      	movs	r2, #0
 801624a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801624c:	4b1f      	ldr	r3, [pc, #124]	; (80162cc <USBD_LL_Init+0xc0>)
 801624e:	2200      	movs	r2, #0
 8016250:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016252:	4b1e      	ldr	r3, [pc, #120]	; (80162cc <USBD_LL_Init+0xc0>)
 8016254:	0018      	movs	r0, r3
 8016256:	f7ee fe91 	bl	8004f7c <HAL_PCD_Init>
 801625a:	1e03      	subs	r3, r0, #0
 801625c:	d001      	beq.n	8016262 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801625e:	f7ee f81b 	bl	8004298 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	23b0      	movs	r3, #176	; 0xb0
 8016266:	009b      	lsls	r3, r3, #2
 8016268:	58d0      	ldr	r0, [r2, r3]
 801626a:	2318      	movs	r3, #24
 801626c:	2200      	movs	r2, #0
 801626e:	2100      	movs	r1, #0
 8016270:	f7f0 fc52 	bl	8006b18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016274:	687a      	ldr	r2, [r7, #4]
 8016276:	23b0      	movs	r3, #176	; 0xb0
 8016278:	009b      	lsls	r3, r3, #2
 801627a:	58d0      	ldr	r0, [r2, r3]
 801627c:	2358      	movs	r3, #88	; 0x58
 801627e:	2200      	movs	r2, #0
 8016280:	2180      	movs	r1, #128	; 0x80
 8016282:	f7f0 fc49 	bl	8006b18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016286:	687a      	ldr	r2, [r7, #4]
 8016288:	23b0      	movs	r3, #176	; 0xb0
 801628a:	009b      	lsls	r3, r3, #2
 801628c:	58d0      	ldr	r0, [r2, r3]
 801628e:	23c0      	movs	r3, #192	; 0xc0
 8016290:	2200      	movs	r2, #0
 8016292:	2181      	movs	r1, #129	; 0x81
 8016294:	f7f0 fc40 	bl	8006b18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	23b0      	movs	r3, #176	; 0xb0
 801629c:	009b      	lsls	r3, r3, #2
 801629e:	58d0      	ldr	r0, [r2, r3]
 80162a0:	2388      	movs	r3, #136	; 0x88
 80162a2:	005b      	lsls	r3, r3, #1
 80162a4:	2200      	movs	r2, #0
 80162a6:	2101      	movs	r1, #1
 80162a8:	f7f0 fc36 	bl	8006b18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80162ac:	687a      	ldr	r2, [r7, #4]
 80162ae:	23b0      	movs	r3, #176	; 0xb0
 80162b0:	009b      	lsls	r3, r3, #2
 80162b2:	58d0      	ldr	r0, [r2, r3]
 80162b4:	2380      	movs	r3, #128	; 0x80
 80162b6:	005b      	lsls	r3, r3, #1
 80162b8:	2200      	movs	r2, #0
 80162ba:	2182      	movs	r1, #130	; 0x82
 80162bc:	f7f0 fc2c 	bl	8006b18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80162c0:	2300      	movs	r3, #0
}
 80162c2:	0018      	movs	r0, r3
 80162c4:	46bd      	mov	sp, r7
 80162c6:	b002      	add	sp, #8
 80162c8:	bd80      	pop	{r7, pc}
 80162ca:	46c0      	nop			; (mov r8, r8)
 80162cc:	200014d4 	.word	0x200014d4
 80162d0:	40005c00 	.word	0x40005c00

080162d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80162d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162d6:	b085      	sub	sp, #20
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162dc:	210f      	movs	r1, #15
 80162de:	187b      	adds	r3, r7, r1
 80162e0:	2200      	movs	r2, #0
 80162e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162e4:	260e      	movs	r6, #14
 80162e6:	19bb      	adds	r3, r7, r6
 80162e8:	2200      	movs	r2, #0
 80162ea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80162ec:	687a      	ldr	r2, [r7, #4]
 80162ee:	23b0      	movs	r3, #176	; 0xb0
 80162f0:	009b      	lsls	r3, r3, #2
 80162f2:	58d3      	ldr	r3, [r2, r3]
 80162f4:	000d      	movs	r5, r1
 80162f6:	187c      	adds	r4, r7, r1
 80162f8:	0018      	movs	r0, r3
 80162fa:	f7ee ff3f 	bl	800517c <HAL_PCD_Start>
 80162fe:	0003      	movs	r3, r0
 8016300:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016302:	19bc      	adds	r4, r7, r6
 8016304:	197b      	adds	r3, r7, r5
 8016306:	781b      	ldrb	r3, [r3, #0]
 8016308:	0018      	movs	r0, r3
 801630a:	f000 f9bc 	bl	8016686 <USBD_Get_USB_Status>
 801630e:	0003      	movs	r3, r0
 8016310:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016312:	19bb      	adds	r3, r7, r6
 8016314:	781b      	ldrb	r3, [r3, #0]
}
 8016316:	0018      	movs	r0, r3
 8016318:	46bd      	mov	sp, r7
 801631a:	b005      	add	sp, #20
 801631c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801631e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801631e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016320:	b085      	sub	sp, #20
 8016322:	af00      	add	r7, sp, #0
 8016324:	6078      	str	r0, [r7, #4]
 8016326:	000c      	movs	r4, r1
 8016328:	0010      	movs	r0, r2
 801632a:	0019      	movs	r1, r3
 801632c:	1cfb      	adds	r3, r7, #3
 801632e:	1c22      	adds	r2, r4, #0
 8016330:	701a      	strb	r2, [r3, #0]
 8016332:	1cbb      	adds	r3, r7, #2
 8016334:	1c02      	adds	r2, r0, #0
 8016336:	701a      	strb	r2, [r3, #0]
 8016338:	003b      	movs	r3, r7
 801633a:	1c0a      	adds	r2, r1, #0
 801633c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801633e:	260f      	movs	r6, #15
 8016340:	19bb      	adds	r3, r7, r6
 8016342:	2200      	movs	r2, #0
 8016344:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016346:	250e      	movs	r5, #14
 8016348:	197b      	adds	r3, r7, r5
 801634a:	2200      	movs	r2, #0
 801634c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	23b0      	movs	r3, #176	; 0xb0
 8016352:	009b      	lsls	r3, r3, #2
 8016354:	58d0      	ldr	r0, [r2, r3]
 8016356:	19bc      	adds	r4, r7, r6
 8016358:	1cbb      	adds	r3, r7, #2
 801635a:	781d      	ldrb	r5, [r3, #0]
 801635c:	003b      	movs	r3, r7
 801635e:	881a      	ldrh	r2, [r3, #0]
 8016360:	1cfb      	adds	r3, r7, #3
 8016362:	7819      	ldrb	r1, [r3, #0]
 8016364:	002b      	movs	r3, r5
 8016366:	f7ef f89e 	bl	80054a6 <HAL_PCD_EP_Open>
 801636a:	0003      	movs	r3, r0
 801636c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801636e:	250e      	movs	r5, #14
 8016370:	197c      	adds	r4, r7, r5
 8016372:	19bb      	adds	r3, r7, r6
 8016374:	781b      	ldrb	r3, [r3, #0]
 8016376:	0018      	movs	r0, r3
 8016378:	f000 f985 	bl	8016686 <USBD_Get_USB_Status>
 801637c:	0003      	movs	r3, r0
 801637e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016380:	197b      	adds	r3, r7, r5
 8016382:	781b      	ldrb	r3, [r3, #0]
}
 8016384:	0018      	movs	r0, r3
 8016386:	46bd      	mov	sp, r7
 8016388:	b005      	add	sp, #20
 801638a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801638c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801638c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801638e:	b085      	sub	sp, #20
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
 8016394:	000a      	movs	r2, r1
 8016396:	1cfb      	adds	r3, r7, #3
 8016398:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801639a:	210f      	movs	r1, #15
 801639c:	187b      	adds	r3, r7, r1
 801639e:	2200      	movs	r2, #0
 80163a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163a2:	260e      	movs	r6, #14
 80163a4:	19bb      	adds	r3, r7, r6
 80163a6:	2200      	movs	r2, #0
 80163a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80163aa:	687a      	ldr	r2, [r7, #4]
 80163ac:	23b0      	movs	r3, #176	; 0xb0
 80163ae:	009b      	lsls	r3, r3, #2
 80163b0:	58d2      	ldr	r2, [r2, r3]
 80163b2:	000d      	movs	r5, r1
 80163b4:	187c      	adds	r4, r7, r1
 80163b6:	1cfb      	adds	r3, r7, #3
 80163b8:	781b      	ldrb	r3, [r3, #0]
 80163ba:	0019      	movs	r1, r3
 80163bc:	0010      	movs	r0, r2
 80163be:	f7ef f8e1 	bl	8005584 <HAL_PCD_EP_Close>
 80163c2:	0003      	movs	r3, r0
 80163c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80163c6:	19bc      	adds	r4, r7, r6
 80163c8:	197b      	adds	r3, r7, r5
 80163ca:	781b      	ldrb	r3, [r3, #0]
 80163cc:	0018      	movs	r0, r3
 80163ce:	f000 f95a 	bl	8016686 <USBD_Get_USB_Status>
 80163d2:	0003      	movs	r3, r0
 80163d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80163d6:	19bb      	adds	r3, r7, r6
 80163d8:	781b      	ldrb	r3, [r3, #0]
}
 80163da:	0018      	movs	r0, r3
 80163dc:	46bd      	mov	sp, r7
 80163de:	b005      	add	sp, #20
 80163e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080163e2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80163e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163e4:	b085      	sub	sp, #20
 80163e6:	af00      	add	r7, sp, #0
 80163e8:	6078      	str	r0, [r7, #4]
 80163ea:	000a      	movs	r2, r1
 80163ec:	1cfb      	adds	r3, r7, #3
 80163ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163f0:	210f      	movs	r1, #15
 80163f2:	187b      	adds	r3, r7, r1
 80163f4:	2200      	movs	r2, #0
 80163f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163f8:	260e      	movs	r6, #14
 80163fa:	19bb      	adds	r3, r7, r6
 80163fc:	2200      	movs	r2, #0
 80163fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016400:	687a      	ldr	r2, [r7, #4]
 8016402:	23b0      	movs	r3, #176	; 0xb0
 8016404:	009b      	lsls	r3, r3, #2
 8016406:	58d2      	ldr	r2, [r2, r3]
 8016408:	000d      	movs	r5, r1
 801640a:	187c      	adds	r4, r7, r1
 801640c:	1cfb      	adds	r3, r7, #3
 801640e:	781b      	ldrb	r3, [r3, #0]
 8016410:	0019      	movs	r1, r3
 8016412:	0010      	movs	r0, r2
 8016414:	f7ef f993 	bl	800573e <HAL_PCD_EP_SetStall>
 8016418:	0003      	movs	r3, r0
 801641a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801641c:	19bc      	adds	r4, r7, r6
 801641e:	197b      	adds	r3, r7, r5
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	0018      	movs	r0, r3
 8016424:	f000 f92f 	bl	8016686 <USBD_Get_USB_Status>
 8016428:	0003      	movs	r3, r0
 801642a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801642c:	19bb      	adds	r3, r7, r6
 801642e:	781b      	ldrb	r3, [r3, #0]
}
 8016430:	0018      	movs	r0, r3
 8016432:	46bd      	mov	sp, r7
 8016434:	b005      	add	sp, #20
 8016436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016438 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801643a:	b085      	sub	sp, #20
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	000a      	movs	r2, r1
 8016442:	1cfb      	adds	r3, r7, #3
 8016444:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016446:	210f      	movs	r1, #15
 8016448:	187b      	adds	r3, r7, r1
 801644a:	2200      	movs	r2, #0
 801644c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801644e:	260e      	movs	r6, #14
 8016450:	19bb      	adds	r3, r7, r6
 8016452:	2200      	movs	r2, #0
 8016454:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016456:	687a      	ldr	r2, [r7, #4]
 8016458:	23b0      	movs	r3, #176	; 0xb0
 801645a:	009b      	lsls	r3, r3, #2
 801645c:	58d2      	ldr	r2, [r2, r3]
 801645e:	000d      	movs	r5, r1
 8016460:	187c      	adds	r4, r7, r1
 8016462:	1cfb      	adds	r3, r7, #3
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	0019      	movs	r1, r3
 8016468:	0010      	movs	r0, r2
 801646a:	f7ef f9c4 	bl	80057f6 <HAL_PCD_EP_ClrStall>
 801646e:	0003      	movs	r3, r0
 8016470:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016472:	19bc      	adds	r4, r7, r6
 8016474:	197b      	adds	r3, r7, r5
 8016476:	781b      	ldrb	r3, [r3, #0]
 8016478:	0018      	movs	r0, r3
 801647a:	f000 f904 	bl	8016686 <USBD_Get_USB_Status>
 801647e:	0003      	movs	r3, r0
 8016480:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016482:	19bb      	adds	r3, r7, r6
 8016484:	781b      	ldrb	r3, [r3, #0]
}
 8016486:	0018      	movs	r0, r3
 8016488:	46bd      	mov	sp, r7
 801648a:	b005      	add	sp, #20
 801648c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801648e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801648e:	b580      	push	{r7, lr}
 8016490:	b084      	sub	sp, #16
 8016492:	af00      	add	r7, sp, #0
 8016494:	6078      	str	r0, [r7, #4]
 8016496:	000a      	movs	r2, r1
 8016498:	1cfb      	adds	r3, r7, #3
 801649a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801649c:	687a      	ldr	r2, [r7, #4]
 801649e:	23b0      	movs	r3, #176	; 0xb0
 80164a0:	009b      	lsls	r3, r3, #2
 80164a2:	58d3      	ldr	r3, [r2, r3]
 80164a4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80164a6:	1cfb      	adds	r3, r7, #3
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	b25b      	sxtb	r3, r3
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	da0d      	bge.n	80164cc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80164b0:	1cfb      	adds	r3, r7, #3
 80164b2:	781b      	ldrb	r3, [r3, #0]
 80164b4:	227f      	movs	r2, #127	; 0x7f
 80164b6:	4013      	ands	r3, r2
 80164b8:	68f9      	ldr	r1, [r7, #12]
 80164ba:	1c5a      	adds	r2, r3, #1
 80164bc:	0013      	movs	r3, r2
 80164be:	009b      	lsls	r3, r3, #2
 80164c0:	189b      	adds	r3, r3, r2
 80164c2:	00db      	lsls	r3, r3, #3
 80164c4:	18cb      	adds	r3, r1, r3
 80164c6:	3302      	adds	r3, #2
 80164c8:	781b      	ldrb	r3, [r3, #0]
 80164ca:	e00d      	b.n	80164e8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80164cc:	1cfb      	adds	r3, r7, #3
 80164ce:	781b      	ldrb	r3, [r3, #0]
 80164d0:	227f      	movs	r2, #127	; 0x7f
 80164d2:	401a      	ands	r2, r3
 80164d4:	68f8      	ldr	r0, [r7, #12]
 80164d6:	23b5      	movs	r3, #181	; 0xb5
 80164d8:	0059      	lsls	r1, r3, #1
 80164da:	0013      	movs	r3, r2
 80164dc:	009b      	lsls	r3, r3, #2
 80164de:	189b      	adds	r3, r3, r2
 80164e0:	00db      	lsls	r3, r3, #3
 80164e2:	18c3      	adds	r3, r0, r3
 80164e4:	185b      	adds	r3, r3, r1
 80164e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80164e8:	0018      	movs	r0, r3
 80164ea:	46bd      	mov	sp, r7
 80164ec:	b004      	add	sp, #16
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80164f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164f2:	b085      	sub	sp, #20
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
 80164f8:	000a      	movs	r2, r1
 80164fa:	1cfb      	adds	r3, r7, #3
 80164fc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164fe:	210f      	movs	r1, #15
 8016500:	187b      	adds	r3, r7, r1
 8016502:	2200      	movs	r2, #0
 8016504:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016506:	260e      	movs	r6, #14
 8016508:	19bb      	adds	r3, r7, r6
 801650a:	2200      	movs	r2, #0
 801650c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	23b0      	movs	r3, #176	; 0xb0
 8016512:	009b      	lsls	r3, r3, #2
 8016514:	58d2      	ldr	r2, [r2, r3]
 8016516:	000d      	movs	r5, r1
 8016518:	187c      	adds	r4, r7, r1
 801651a:	1cfb      	adds	r3, r7, #3
 801651c:	781b      	ldrb	r3, [r3, #0]
 801651e:	0019      	movs	r1, r3
 8016520:	0010      	movs	r0, r2
 8016522:	f7ee ff95 	bl	8005450 <HAL_PCD_SetAddress>
 8016526:	0003      	movs	r3, r0
 8016528:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801652a:	19bc      	adds	r4, r7, r6
 801652c:	197b      	adds	r3, r7, r5
 801652e:	781b      	ldrb	r3, [r3, #0]
 8016530:	0018      	movs	r0, r3
 8016532:	f000 f8a8 	bl	8016686 <USBD_Get_USB_Status>
 8016536:	0003      	movs	r3, r0
 8016538:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801653a:	19bb      	adds	r3, r7, r6
 801653c:	781b      	ldrb	r3, [r3, #0]
}
 801653e:	0018      	movs	r0, r3
 8016540:	46bd      	mov	sp, r7
 8016542:	b005      	add	sp, #20
 8016544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016546 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016548:	b087      	sub	sp, #28
 801654a:	af00      	add	r7, sp, #0
 801654c:	60f8      	str	r0, [r7, #12]
 801654e:	0008      	movs	r0, r1
 8016550:	607a      	str	r2, [r7, #4]
 8016552:	0019      	movs	r1, r3
 8016554:	230b      	movs	r3, #11
 8016556:	18fb      	adds	r3, r7, r3
 8016558:	1c02      	adds	r2, r0, #0
 801655a:	701a      	strb	r2, [r3, #0]
 801655c:	2408      	movs	r4, #8
 801655e:	193b      	adds	r3, r7, r4
 8016560:	1c0a      	adds	r2, r1, #0
 8016562:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016564:	2117      	movs	r1, #23
 8016566:	187b      	adds	r3, r7, r1
 8016568:	2200      	movs	r2, #0
 801656a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801656c:	2516      	movs	r5, #22
 801656e:	197b      	adds	r3, r7, r5
 8016570:	2200      	movs	r2, #0
 8016572:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016574:	68fa      	ldr	r2, [r7, #12]
 8016576:	23b0      	movs	r3, #176	; 0xb0
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	58d0      	ldr	r0, [r2, r3]
 801657c:	193b      	adds	r3, r7, r4
 801657e:	881d      	ldrh	r5, [r3, #0]
 8016580:	000e      	movs	r6, r1
 8016582:	187c      	adds	r4, r7, r1
 8016584:	687a      	ldr	r2, [r7, #4]
 8016586:	230b      	movs	r3, #11
 8016588:	18fb      	adds	r3, r7, r3
 801658a:	7819      	ldrb	r1, [r3, #0]
 801658c:	002b      	movs	r3, r5
 801658e:	f7ef f89a 	bl	80056c6 <HAL_PCD_EP_Transmit>
 8016592:	0003      	movs	r3, r0
 8016594:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016596:	2516      	movs	r5, #22
 8016598:	197c      	adds	r4, r7, r5
 801659a:	19bb      	adds	r3, r7, r6
 801659c:	781b      	ldrb	r3, [r3, #0]
 801659e:	0018      	movs	r0, r3
 80165a0:	f000 f871 	bl	8016686 <USBD_Get_USB_Status>
 80165a4:	0003      	movs	r3, r0
 80165a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80165a8:	197b      	adds	r3, r7, r5
 80165aa:	781b      	ldrb	r3, [r3, #0]
}
 80165ac:	0018      	movs	r0, r3
 80165ae:	46bd      	mov	sp, r7
 80165b0:	b007      	add	sp, #28
 80165b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80165b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165b6:	b087      	sub	sp, #28
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	60f8      	str	r0, [r7, #12]
 80165bc:	0008      	movs	r0, r1
 80165be:	607a      	str	r2, [r7, #4]
 80165c0:	0019      	movs	r1, r3
 80165c2:	230b      	movs	r3, #11
 80165c4:	18fb      	adds	r3, r7, r3
 80165c6:	1c02      	adds	r2, r0, #0
 80165c8:	701a      	strb	r2, [r3, #0]
 80165ca:	2408      	movs	r4, #8
 80165cc:	193b      	adds	r3, r7, r4
 80165ce:	1c0a      	adds	r2, r1, #0
 80165d0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165d2:	2117      	movs	r1, #23
 80165d4:	187b      	adds	r3, r7, r1
 80165d6:	2200      	movs	r2, #0
 80165d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165da:	2516      	movs	r5, #22
 80165dc:	197b      	adds	r3, r7, r5
 80165de:	2200      	movs	r2, #0
 80165e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80165e2:	68fa      	ldr	r2, [r7, #12]
 80165e4:	23b0      	movs	r3, #176	; 0xb0
 80165e6:	009b      	lsls	r3, r3, #2
 80165e8:	58d0      	ldr	r0, [r2, r3]
 80165ea:	193b      	adds	r3, r7, r4
 80165ec:	881d      	ldrh	r5, [r3, #0]
 80165ee:	000e      	movs	r6, r1
 80165f0:	187c      	adds	r4, r7, r1
 80165f2:	687a      	ldr	r2, [r7, #4]
 80165f4:	230b      	movs	r3, #11
 80165f6:	18fb      	adds	r3, r7, r3
 80165f8:	7819      	ldrb	r1, [r3, #0]
 80165fa:	002b      	movs	r3, r5
 80165fc:	f7ef f813 	bl	8005626 <HAL_PCD_EP_Receive>
 8016600:	0003      	movs	r3, r0
 8016602:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016604:	2516      	movs	r5, #22
 8016606:	197c      	adds	r4, r7, r5
 8016608:	19bb      	adds	r3, r7, r6
 801660a:	781b      	ldrb	r3, [r3, #0]
 801660c:	0018      	movs	r0, r3
 801660e:	f000 f83a 	bl	8016686 <USBD_Get_USB_Status>
 8016612:	0003      	movs	r3, r0
 8016614:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016616:	197b      	adds	r3, r7, r5
 8016618:	781b      	ldrb	r3, [r3, #0]
}
 801661a:	0018      	movs	r0, r3
 801661c:	46bd      	mov	sp, r7
 801661e:	b007      	add	sp, #28
 8016620:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016622 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016622:	b580      	push	{r7, lr}
 8016624:	b082      	sub	sp, #8
 8016626:	af00      	add	r7, sp, #0
 8016628:	6078      	str	r0, [r7, #4]
 801662a:	000a      	movs	r2, r1
 801662c:	1cfb      	adds	r3, r7, #3
 801662e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016630:	687a      	ldr	r2, [r7, #4]
 8016632:	23b0      	movs	r3, #176	; 0xb0
 8016634:	009b      	lsls	r3, r3, #2
 8016636:	58d2      	ldr	r2, [r2, r3]
 8016638:	1cfb      	adds	r3, r7, #3
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	0019      	movs	r1, r3
 801663e:	0010      	movs	r0, r2
 8016640:	f7ef f828 	bl	8005694 <HAL_PCD_EP_GetRxCount>
 8016644:	0003      	movs	r3, r0
}
 8016646:	0018      	movs	r0, r3
 8016648:	46bd      	mov	sp, r7
 801664a:	b002      	add	sp, #8
 801664c:	bd80      	pop	{r7, pc}
	...

08016650 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b082      	sub	sp, #8
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016658:	4b02      	ldr	r3, [pc, #8]	; (8016664 <USBD_static_malloc+0x14>)
}
 801665a:	0018      	movs	r0, r3
 801665c:	46bd      	mov	sp, r7
 801665e:	b002      	add	sp, #8
 8016660:	bd80      	pop	{r7, pc}
 8016662:	46c0      	nop			; (mov r8, r8)
 8016664:	200017c8 	.word	0x200017c8

08016668 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]

}
 8016670:	46c0      	nop			; (mov r8, r8)
 8016672:	46bd      	mov	sp, r7
 8016674:	b002      	add	sp, #8
 8016676:	bd80      	pop	{r7, pc}

08016678 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801667c:	f7ed fc82 	bl	8003f84 <SystemClock_Config>
}
 8016680:	46c0      	nop			; (mov r8, r8)
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}

08016686 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016686:	b580      	push	{r7, lr}
 8016688:	b084      	sub	sp, #16
 801668a:	af00      	add	r7, sp, #0
 801668c:	0002      	movs	r2, r0
 801668e:	1dfb      	adds	r3, r7, #7
 8016690:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016692:	230f      	movs	r3, #15
 8016694:	18fb      	adds	r3, r7, r3
 8016696:	2200      	movs	r2, #0
 8016698:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801669a:	1dfb      	adds	r3, r7, #7
 801669c:	781b      	ldrb	r3, [r3, #0]
 801669e:	2b03      	cmp	r3, #3
 80166a0:	d017      	beq.n	80166d2 <USBD_Get_USB_Status+0x4c>
 80166a2:	dc1b      	bgt.n	80166dc <USBD_Get_USB_Status+0x56>
 80166a4:	2b02      	cmp	r3, #2
 80166a6:	d00f      	beq.n	80166c8 <USBD_Get_USB_Status+0x42>
 80166a8:	dc18      	bgt.n	80166dc <USBD_Get_USB_Status+0x56>
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d002      	beq.n	80166b4 <USBD_Get_USB_Status+0x2e>
 80166ae:	2b01      	cmp	r3, #1
 80166b0:	d005      	beq.n	80166be <USBD_Get_USB_Status+0x38>
 80166b2:	e013      	b.n	80166dc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80166b4:	230f      	movs	r3, #15
 80166b6:	18fb      	adds	r3, r7, r3
 80166b8:	2200      	movs	r2, #0
 80166ba:	701a      	strb	r2, [r3, #0]
    break;
 80166bc:	e013      	b.n	80166e6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80166be:	230f      	movs	r3, #15
 80166c0:	18fb      	adds	r3, r7, r3
 80166c2:	2202      	movs	r2, #2
 80166c4:	701a      	strb	r2, [r3, #0]
    break;
 80166c6:	e00e      	b.n	80166e6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80166c8:	230f      	movs	r3, #15
 80166ca:	18fb      	adds	r3, r7, r3
 80166cc:	2201      	movs	r2, #1
 80166ce:	701a      	strb	r2, [r3, #0]
    break;
 80166d0:	e009      	b.n	80166e6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80166d2:	230f      	movs	r3, #15
 80166d4:	18fb      	adds	r3, r7, r3
 80166d6:	2202      	movs	r2, #2
 80166d8:	701a      	strb	r2, [r3, #0]
    break;
 80166da:	e004      	b.n	80166e6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80166dc:	230f      	movs	r3, #15
 80166de:	18fb      	adds	r3, r7, r3
 80166e0:	2202      	movs	r2, #2
 80166e2:	701a      	strb	r2, [r3, #0]
    break;
 80166e4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80166e6:	230f      	movs	r3, #15
 80166e8:	18fb      	adds	r3, r7, r3
 80166ea:	781b      	ldrb	r3, [r3, #0]
}
 80166ec:	0018      	movs	r0, r3
 80166ee:	46bd      	mov	sp, r7
 80166f0:	b004      	add	sp, #16
 80166f2:	bd80      	pop	{r7, pc}

080166f4 <__assert_func>:
 80166f4:	b530      	push	{r4, r5, lr}
 80166f6:	0014      	movs	r4, r2
 80166f8:	001a      	movs	r2, r3
 80166fa:	4b09      	ldr	r3, [pc, #36]	; (8016720 <__assert_func+0x2c>)
 80166fc:	0005      	movs	r5, r0
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	b085      	sub	sp, #20
 8016702:	68d8      	ldr	r0, [r3, #12]
 8016704:	4b07      	ldr	r3, [pc, #28]	; (8016724 <__assert_func+0x30>)
 8016706:	2c00      	cmp	r4, #0
 8016708:	d101      	bne.n	801670e <__assert_func+0x1a>
 801670a:	4b07      	ldr	r3, [pc, #28]	; (8016728 <__assert_func+0x34>)
 801670c:	001c      	movs	r4, r3
 801670e:	9301      	str	r3, [sp, #4]
 8016710:	9100      	str	r1, [sp, #0]
 8016712:	002b      	movs	r3, r5
 8016714:	4905      	ldr	r1, [pc, #20]	; (801672c <__assert_func+0x38>)
 8016716:	9402      	str	r4, [sp, #8]
 8016718:	f000 f81c 	bl	8016754 <fiprintf>
 801671c:	f002 fa46 	bl	8018bac <abort>
 8016720:	20000254 	.word	0x20000254
 8016724:	0801d134 	.word	0x0801d134
 8016728:	0801d16f 	.word	0x0801d16f
 801672c:	0801d141 	.word	0x0801d141

08016730 <atof>:
 8016730:	b510      	push	{r4, lr}
 8016732:	2100      	movs	r1, #0
 8016734:	f002 f812 	bl	801875c <strtod>
 8016738:	bd10      	pop	{r4, pc}

0801673a <atoi>:
 801673a:	b510      	push	{r4, lr}
 801673c:	220a      	movs	r2, #10
 801673e:	2100      	movs	r1, #0
 8016740:	f002 f8ac 	bl	801889c <strtol>
 8016744:	bd10      	pop	{r4, pc}
	...

08016748 <__errno>:
 8016748:	4b01      	ldr	r3, [pc, #4]	; (8016750 <__errno+0x8>)
 801674a:	6818      	ldr	r0, [r3, #0]
 801674c:	4770      	bx	lr
 801674e:	46c0      	nop			; (mov r8, r8)
 8016750:	20000254 	.word	0x20000254

08016754 <fiprintf>:
 8016754:	b40e      	push	{r1, r2, r3}
 8016756:	b503      	push	{r0, r1, lr}
 8016758:	0001      	movs	r1, r0
 801675a:	ab03      	add	r3, sp, #12
 801675c:	4804      	ldr	r0, [pc, #16]	; (8016770 <fiprintf+0x1c>)
 801675e:	cb04      	ldmia	r3!, {r2}
 8016760:	6800      	ldr	r0, [r0, #0]
 8016762:	9301      	str	r3, [sp, #4]
 8016764:	f000 f97a 	bl	8016a5c <_vfiprintf_r>
 8016768:	b002      	add	sp, #8
 801676a:	bc08      	pop	{r3}
 801676c:	b003      	add	sp, #12
 801676e:	4718      	bx	r3
 8016770:	20000254 	.word	0x20000254

08016774 <getchar>:
 8016774:	4b07      	ldr	r3, [pc, #28]	; (8016794 <getchar+0x20>)
 8016776:	b510      	push	{r4, lr}
 8016778:	681c      	ldr	r4, [r3, #0]
 801677a:	2c00      	cmp	r4, #0
 801677c:	d005      	beq.n	801678a <getchar+0x16>
 801677e:	69a3      	ldr	r3, [r4, #24]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d102      	bne.n	801678a <getchar+0x16>
 8016784:	0020      	movs	r0, r4
 8016786:	f003 fa15 	bl	8019bb4 <__sinit>
 801678a:	0020      	movs	r0, r4
 801678c:	6861      	ldr	r1, [r4, #4]
 801678e:	f003 fe3f 	bl	801a410 <_getc_r>
 8016792:	bd10      	pop	{r4, pc}
 8016794:	20000254 	.word	0x20000254

08016798 <__libc_init_array>:
 8016798:	b570      	push	{r4, r5, r6, lr}
 801679a:	2600      	movs	r6, #0
 801679c:	4d0c      	ldr	r5, [pc, #48]	; (80167d0 <__libc_init_array+0x38>)
 801679e:	4c0d      	ldr	r4, [pc, #52]	; (80167d4 <__libc_init_array+0x3c>)
 80167a0:	1b64      	subs	r4, r4, r5
 80167a2:	10a4      	asrs	r4, r4, #2
 80167a4:	42a6      	cmp	r6, r4
 80167a6:	d109      	bne.n	80167bc <__libc_init_array+0x24>
 80167a8:	2600      	movs	r6, #0
 80167aa:	f005 fb2b 	bl	801be04 <_init>
 80167ae:	4d0a      	ldr	r5, [pc, #40]	; (80167d8 <__libc_init_array+0x40>)
 80167b0:	4c0a      	ldr	r4, [pc, #40]	; (80167dc <__libc_init_array+0x44>)
 80167b2:	1b64      	subs	r4, r4, r5
 80167b4:	10a4      	asrs	r4, r4, #2
 80167b6:	42a6      	cmp	r6, r4
 80167b8:	d105      	bne.n	80167c6 <__libc_init_array+0x2e>
 80167ba:	bd70      	pop	{r4, r5, r6, pc}
 80167bc:	00b3      	lsls	r3, r6, #2
 80167be:	58eb      	ldr	r3, [r5, r3]
 80167c0:	4798      	blx	r3
 80167c2:	3601      	adds	r6, #1
 80167c4:	e7ee      	b.n	80167a4 <__libc_init_array+0xc>
 80167c6:	00b3      	lsls	r3, r6, #2
 80167c8:	58eb      	ldr	r3, [r5, r3]
 80167ca:	4798      	blx	r3
 80167cc:	3601      	adds	r6, #1
 80167ce:	e7f2      	b.n	80167b6 <__libc_init_array+0x1e>
 80167d0:	0801d5f0 	.word	0x0801d5f0
 80167d4:	0801d5f0 	.word	0x0801d5f0
 80167d8:	0801d5f0 	.word	0x0801d5f0
 80167dc:	0801d5f4 	.word	0x0801d5f4

080167e0 <malloc>:
 80167e0:	b510      	push	{r4, lr}
 80167e2:	4b03      	ldr	r3, [pc, #12]	; (80167f0 <malloc+0x10>)
 80167e4:	0001      	movs	r1, r0
 80167e6:	6818      	ldr	r0, [r3, #0]
 80167e8:	f000 f89a 	bl	8016920 <_malloc_r>
 80167ec:	bd10      	pop	{r4, pc}
 80167ee:	46c0      	nop			; (mov r8, r8)
 80167f0:	20000254 	.word	0x20000254

080167f4 <free>:
 80167f4:	b510      	push	{r4, lr}
 80167f6:	4b03      	ldr	r3, [pc, #12]	; (8016804 <free+0x10>)
 80167f8:	0001      	movs	r1, r0
 80167fa:	6818      	ldr	r0, [r3, #0]
 80167fc:	f000 f824 	bl	8016848 <_free_r>
 8016800:	bd10      	pop	{r4, pc}
 8016802:	46c0      	nop			; (mov r8, r8)
 8016804:	20000254 	.word	0x20000254

08016808 <memcmp>:
 8016808:	b530      	push	{r4, r5, lr}
 801680a:	2400      	movs	r4, #0
 801680c:	3901      	subs	r1, #1
 801680e:	42a2      	cmp	r2, r4
 8016810:	d101      	bne.n	8016816 <memcmp+0xe>
 8016812:	2000      	movs	r0, #0
 8016814:	e005      	b.n	8016822 <memcmp+0x1a>
 8016816:	5d03      	ldrb	r3, [r0, r4]
 8016818:	3401      	adds	r4, #1
 801681a:	5d0d      	ldrb	r5, [r1, r4]
 801681c:	42ab      	cmp	r3, r5
 801681e:	d0f6      	beq.n	801680e <memcmp+0x6>
 8016820:	1b58      	subs	r0, r3, r5
 8016822:	bd30      	pop	{r4, r5, pc}

08016824 <memcpy>:
 8016824:	2300      	movs	r3, #0
 8016826:	b510      	push	{r4, lr}
 8016828:	429a      	cmp	r2, r3
 801682a:	d100      	bne.n	801682e <memcpy+0xa>
 801682c:	bd10      	pop	{r4, pc}
 801682e:	5ccc      	ldrb	r4, [r1, r3]
 8016830:	54c4      	strb	r4, [r0, r3]
 8016832:	3301      	adds	r3, #1
 8016834:	e7f8      	b.n	8016828 <memcpy+0x4>

08016836 <memset>:
 8016836:	0003      	movs	r3, r0
 8016838:	1882      	adds	r2, r0, r2
 801683a:	4293      	cmp	r3, r2
 801683c:	d100      	bne.n	8016840 <memset+0xa>
 801683e:	4770      	bx	lr
 8016840:	7019      	strb	r1, [r3, #0]
 8016842:	3301      	adds	r3, #1
 8016844:	e7f9      	b.n	801683a <memset+0x4>
	...

08016848 <_free_r>:
 8016848:	b570      	push	{r4, r5, r6, lr}
 801684a:	0005      	movs	r5, r0
 801684c:	2900      	cmp	r1, #0
 801684e:	d010      	beq.n	8016872 <_free_r+0x2a>
 8016850:	1f0c      	subs	r4, r1, #4
 8016852:	6823      	ldr	r3, [r4, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	da00      	bge.n	801685a <_free_r+0x12>
 8016858:	18e4      	adds	r4, r4, r3
 801685a:	0028      	movs	r0, r5
 801685c:	f003 fed2 	bl	801a604 <__malloc_lock>
 8016860:	4a1d      	ldr	r2, [pc, #116]	; (80168d8 <_free_r+0x90>)
 8016862:	6813      	ldr	r3, [r2, #0]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d105      	bne.n	8016874 <_free_r+0x2c>
 8016868:	6063      	str	r3, [r4, #4]
 801686a:	6014      	str	r4, [r2, #0]
 801686c:	0028      	movs	r0, r5
 801686e:	f003 fed1 	bl	801a614 <__malloc_unlock>
 8016872:	bd70      	pop	{r4, r5, r6, pc}
 8016874:	42a3      	cmp	r3, r4
 8016876:	d908      	bls.n	801688a <_free_r+0x42>
 8016878:	6821      	ldr	r1, [r4, #0]
 801687a:	1860      	adds	r0, r4, r1
 801687c:	4283      	cmp	r3, r0
 801687e:	d1f3      	bne.n	8016868 <_free_r+0x20>
 8016880:	6818      	ldr	r0, [r3, #0]
 8016882:	685b      	ldr	r3, [r3, #4]
 8016884:	1841      	adds	r1, r0, r1
 8016886:	6021      	str	r1, [r4, #0]
 8016888:	e7ee      	b.n	8016868 <_free_r+0x20>
 801688a:	001a      	movs	r2, r3
 801688c:	685b      	ldr	r3, [r3, #4]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d001      	beq.n	8016896 <_free_r+0x4e>
 8016892:	42a3      	cmp	r3, r4
 8016894:	d9f9      	bls.n	801688a <_free_r+0x42>
 8016896:	6811      	ldr	r1, [r2, #0]
 8016898:	1850      	adds	r0, r2, r1
 801689a:	42a0      	cmp	r0, r4
 801689c:	d10b      	bne.n	80168b6 <_free_r+0x6e>
 801689e:	6820      	ldr	r0, [r4, #0]
 80168a0:	1809      	adds	r1, r1, r0
 80168a2:	1850      	adds	r0, r2, r1
 80168a4:	6011      	str	r1, [r2, #0]
 80168a6:	4283      	cmp	r3, r0
 80168a8:	d1e0      	bne.n	801686c <_free_r+0x24>
 80168aa:	6818      	ldr	r0, [r3, #0]
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	1841      	adds	r1, r0, r1
 80168b0:	6011      	str	r1, [r2, #0]
 80168b2:	6053      	str	r3, [r2, #4]
 80168b4:	e7da      	b.n	801686c <_free_r+0x24>
 80168b6:	42a0      	cmp	r0, r4
 80168b8:	d902      	bls.n	80168c0 <_free_r+0x78>
 80168ba:	230c      	movs	r3, #12
 80168bc:	602b      	str	r3, [r5, #0]
 80168be:	e7d5      	b.n	801686c <_free_r+0x24>
 80168c0:	6821      	ldr	r1, [r4, #0]
 80168c2:	1860      	adds	r0, r4, r1
 80168c4:	4283      	cmp	r3, r0
 80168c6:	d103      	bne.n	80168d0 <_free_r+0x88>
 80168c8:	6818      	ldr	r0, [r3, #0]
 80168ca:	685b      	ldr	r3, [r3, #4]
 80168cc:	1841      	adds	r1, r0, r1
 80168ce:	6021      	str	r1, [r4, #0]
 80168d0:	6063      	str	r3, [r4, #4]
 80168d2:	6054      	str	r4, [r2, #4]
 80168d4:	e7ca      	b.n	801686c <_free_r+0x24>
 80168d6:	46c0      	nop			; (mov r8, r8)
 80168d8:	200019e8 	.word	0x200019e8

080168dc <sbrk_aligned>:
 80168dc:	b570      	push	{r4, r5, r6, lr}
 80168de:	4e0f      	ldr	r6, [pc, #60]	; (801691c <sbrk_aligned+0x40>)
 80168e0:	000d      	movs	r5, r1
 80168e2:	6831      	ldr	r1, [r6, #0]
 80168e4:	0004      	movs	r4, r0
 80168e6:	2900      	cmp	r1, #0
 80168e8:	d102      	bne.n	80168f0 <sbrk_aligned+0x14>
 80168ea:	f000 ff09 	bl	8017700 <_sbrk_r>
 80168ee:	6030      	str	r0, [r6, #0]
 80168f0:	0029      	movs	r1, r5
 80168f2:	0020      	movs	r0, r4
 80168f4:	f000 ff04 	bl	8017700 <_sbrk_r>
 80168f8:	1c43      	adds	r3, r0, #1
 80168fa:	d00a      	beq.n	8016912 <sbrk_aligned+0x36>
 80168fc:	2303      	movs	r3, #3
 80168fe:	1cc5      	adds	r5, r0, #3
 8016900:	439d      	bics	r5, r3
 8016902:	42a8      	cmp	r0, r5
 8016904:	d007      	beq.n	8016916 <sbrk_aligned+0x3a>
 8016906:	1a29      	subs	r1, r5, r0
 8016908:	0020      	movs	r0, r4
 801690a:	f000 fef9 	bl	8017700 <_sbrk_r>
 801690e:	1c43      	adds	r3, r0, #1
 8016910:	d101      	bne.n	8016916 <sbrk_aligned+0x3a>
 8016912:	2501      	movs	r5, #1
 8016914:	426d      	negs	r5, r5
 8016916:	0028      	movs	r0, r5
 8016918:	bd70      	pop	{r4, r5, r6, pc}
 801691a:	46c0      	nop			; (mov r8, r8)
 801691c:	200019ec 	.word	0x200019ec

08016920 <_malloc_r>:
 8016920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016922:	2203      	movs	r2, #3
 8016924:	1ccb      	adds	r3, r1, #3
 8016926:	4393      	bics	r3, r2
 8016928:	3308      	adds	r3, #8
 801692a:	0006      	movs	r6, r0
 801692c:	001f      	movs	r7, r3
 801692e:	2b0c      	cmp	r3, #12
 8016930:	d232      	bcs.n	8016998 <_malloc_r+0x78>
 8016932:	270c      	movs	r7, #12
 8016934:	42b9      	cmp	r1, r7
 8016936:	d831      	bhi.n	801699c <_malloc_r+0x7c>
 8016938:	0030      	movs	r0, r6
 801693a:	f003 fe63 	bl	801a604 <__malloc_lock>
 801693e:	4d32      	ldr	r5, [pc, #200]	; (8016a08 <_malloc_r+0xe8>)
 8016940:	682b      	ldr	r3, [r5, #0]
 8016942:	001c      	movs	r4, r3
 8016944:	2c00      	cmp	r4, #0
 8016946:	d12e      	bne.n	80169a6 <_malloc_r+0x86>
 8016948:	0039      	movs	r1, r7
 801694a:	0030      	movs	r0, r6
 801694c:	f7ff ffc6 	bl	80168dc <sbrk_aligned>
 8016950:	0004      	movs	r4, r0
 8016952:	1c43      	adds	r3, r0, #1
 8016954:	d11e      	bne.n	8016994 <_malloc_r+0x74>
 8016956:	682c      	ldr	r4, [r5, #0]
 8016958:	0025      	movs	r5, r4
 801695a:	2d00      	cmp	r5, #0
 801695c:	d14a      	bne.n	80169f4 <_malloc_r+0xd4>
 801695e:	6823      	ldr	r3, [r4, #0]
 8016960:	0029      	movs	r1, r5
 8016962:	18e3      	adds	r3, r4, r3
 8016964:	0030      	movs	r0, r6
 8016966:	9301      	str	r3, [sp, #4]
 8016968:	f000 feca 	bl	8017700 <_sbrk_r>
 801696c:	9b01      	ldr	r3, [sp, #4]
 801696e:	4283      	cmp	r3, r0
 8016970:	d143      	bne.n	80169fa <_malloc_r+0xda>
 8016972:	6823      	ldr	r3, [r4, #0]
 8016974:	3703      	adds	r7, #3
 8016976:	1aff      	subs	r7, r7, r3
 8016978:	2303      	movs	r3, #3
 801697a:	439f      	bics	r7, r3
 801697c:	3708      	adds	r7, #8
 801697e:	2f0c      	cmp	r7, #12
 8016980:	d200      	bcs.n	8016984 <_malloc_r+0x64>
 8016982:	270c      	movs	r7, #12
 8016984:	0039      	movs	r1, r7
 8016986:	0030      	movs	r0, r6
 8016988:	f7ff ffa8 	bl	80168dc <sbrk_aligned>
 801698c:	1c43      	adds	r3, r0, #1
 801698e:	d034      	beq.n	80169fa <_malloc_r+0xda>
 8016990:	6823      	ldr	r3, [r4, #0]
 8016992:	19df      	adds	r7, r3, r7
 8016994:	6027      	str	r7, [r4, #0]
 8016996:	e013      	b.n	80169c0 <_malloc_r+0xa0>
 8016998:	2b00      	cmp	r3, #0
 801699a:	dacb      	bge.n	8016934 <_malloc_r+0x14>
 801699c:	230c      	movs	r3, #12
 801699e:	2500      	movs	r5, #0
 80169a0:	6033      	str	r3, [r6, #0]
 80169a2:	0028      	movs	r0, r5
 80169a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80169a6:	6822      	ldr	r2, [r4, #0]
 80169a8:	1bd1      	subs	r1, r2, r7
 80169aa:	d420      	bmi.n	80169ee <_malloc_r+0xce>
 80169ac:	290b      	cmp	r1, #11
 80169ae:	d917      	bls.n	80169e0 <_malloc_r+0xc0>
 80169b0:	19e2      	adds	r2, r4, r7
 80169b2:	6027      	str	r7, [r4, #0]
 80169b4:	42a3      	cmp	r3, r4
 80169b6:	d111      	bne.n	80169dc <_malloc_r+0xbc>
 80169b8:	602a      	str	r2, [r5, #0]
 80169ba:	6863      	ldr	r3, [r4, #4]
 80169bc:	6011      	str	r1, [r2, #0]
 80169be:	6053      	str	r3, [r2, #4]
 80169c0:	0030      	movs	r0, r6
 80169c2:	0025      	movs	r5, r4
 80169c4:	f003 fe26 	bl	801a614 <__malloc_unlock>
 80169c8:	2207      	movs	r2, #7
 80169ca:	350b      	adds	r5, #11
 80169cc:	1d23      	adds	r3, r4, #4
 80169ce:	4395      	bics	r5, r2
 80169d0:	1aea      	subs	r2, r5, r3
 80169d2:	429d      	cmp	r5, r3
 80169d4:	d0e5      	beq.n	80169a2 <_malloc_r+0x82>
 80169d6:	1b5b      	subs	r3, r3, r5
 80169d8:	50a3      	str	r3, [r4, r2]
 80169da:	e7e2      	b.n	80169a2 <_malloc_r+0x82>
 80169dc:	605a      	str	r2, [r3, #4]
 80169de:	e7ec      	b.n	80169ba <_malloc_r+0x9a>
 80169e0:	6862      	ldr	r2, [r4, #4]
 80169e2:	42a3      	cmp	r3, r4
 80169e4:	d101      	bne.n	80169ea <_malloc_r+0xca>
 80169e6:	602a      	str	r2, [r5, #0]
 80169e8:	e7ea      	b.n	80169c0 <_malloc_r+0xa0>
 80169ea:	605a      	str	r2, [r3, #4]
 80169ec:	e7e8      	b.n	80169c0 <_malloc_r+0xa0>
 80169ee:	0023      	movs	r3, r4
 80169f0:	6864      	ldr	r4, [r4, #4]
 80169f2:	e7a7      	b.n	8016944 <_malloc_r+0x24>
 80169f4:	002c      	movs	r4, r5
 80169f6:	686d      	ldr	r5, [r5, #4]
 80169f8:	e7af      	b.n	801695a <_malloc_r+0x3a>
 80169fa:	230c      	movs	r3, #12
 80169fc:	0030      	movs	r0, r6
 80169fe:	6033      	str	r3, [r6, #0]
 8016a00:	f003 fe08 	bl	801a614 <__malloc_unlock>
 8016a04:	e7cd      	b.n	80169a2 <_malloc_r+0x82>
 8016a06:	46c0      	nop			; (mov r8, r8)
 8016a08:	200019e8 	.word	0x200019e8

08016a0c <__sfputc_r>:
 8016a0c:	6893      	ldr	r3, [r2, #8]
 8016a0e:	b510      	push	{r4, lr}
 8016a10:	3b01      	subs	r3, #1
 8016a12:	6093      	str	r3, [r2, #8]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	da04      	bge.n	8016a22 <__sfputc_r+0x16>
 8016a18:	6994      	ldr	r4, [r2, #24]
 8016a1a:	42a3      	cmp	r3, r4
 8016a1c:	db07      	blt.n	8016a2e <__sfputc_r+0x22>
 8016a1e:	290a      	cmp	r1, #10
 8016a20:	d005      	beq.n	8016a2e <__sfputc_r+0x22>
 8016a22:	6813      	ldr	r3, [r2, #0]
 8016a24:	1c58      	adds	r0, r3, #1
 8016a26:	6010      	str	r0, [r2, #0]
 8016a28:	7019      	strb	r1, [r3, #0]
 8016a2a:	0008      	movs	r0, r1
 8016a2c:	bd10      	pop	{r4, pc}
 8016a2e:	f001 ffdb 	bl	80189e8 <__swbuf_r>
 8016a32:	0001      	movs	r1, r0
 8016a34:	e7f9      	b.n	8016a2a <__sfputc_r+0x1e>

08016a36 <__sfputs_r>:
 8016a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a38:	0006      	movs	r6, r0
 8016a3a:	000f      	movs	r7, r1
 8016a3c:	0014      	movs	r4, r2
 8016a3e:	18d5      	adds	r5, r2, r3
 8016a40:	42ac      	cmp	r4, r5
 8016a42:	d101      	bne.n	8016a48 <__sfputs_r+0x12>
 8016a44:	2000      	movs	r0, #0
 8016a46:	e007      	b.n	8016a58 <__sfputs_r+0x22>
 8016a48:	7821      	ldrb	r1, [r4, #0]
 8016a4a:	003a      	movs	r2, r7
 8016a4c:	0030      	movs	r0, r6
 8016a4e:	f7ff ffdd 	bl	8016a0c <__sfputc_r>
 8016a52:	3401      	adds	r4, #1
 8016a54:	1c43      	adds	r3, r0, #1
 8016a56:	d1f3      	bne.n	8016a40 <__sfputs_r+0xa>
 8016a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016a5c <_vfiprintf_r>:
 8016a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a5e:	b0a1      	sub	sp, #132	; 0x84
 8016a60:	0006      	movs	r6, r0
 8016a62:	000c      	movs	r4, r1
 8016a64:	001f      	movs	r7, r3
 8016a66:	9203      	str	r2, [sp, #12]
 8016a68:	2800      	cmp	r0, #0
 8016a6a:	d004      	beq.n	8016a76 <_vfiprintf_r+0x1a>
 8016a6c:	6983      	ldr	r3, [r0, #24]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d101      	bne.n	8016a76 <_vfiprintf_r+0x1a>
 8016a72:	f003 f89f 	bl	8019bb4 <__sinit>
 8016a76:	4b8e      	ldr	r3, [pc, #568]	; (8016cb0 <_vfiprintf_r+0x254>)
 8016a78:	429c      	cmp	r4, r3
 8016a7a:	d11c      	bne.n	8016ab6 <_vfiprintf_r+0x5a>
 8016a7c:	6874      	ldr	r4, [r6, #4]
 8016a7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a80:	07db      	lsls	r3, r3, #31
 8016a82:	d405      	bmi.n	8016a90 <_vfiprintf_r+0x34>
 8016a84:	89a3      	ldrh	r3, [r4, #12]
 8016a86:	059b      	lsls	r3, r3, #22
 8016a88:	d402      	bmi.n	8016a90 <_vfiprintf_r+0x34>
 8016a8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a8c:	f003 fd07 	bl	801a49e <__retarget_lock_acquire_recursive>
 8016a90:	89a3      	ldrh	r3, [r4, #12]
 8016a92:	071b      	lsls	r3, r3, #28
 8016a94:	d502      	bpl.n	8016a9c <_vfiprintf_r+0x40>
 8016a96:	6923      	ldr	r3, [r4, #16]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d11d      	bne.n	8016ad8 <_vfiprintf_r+0x7c>
 8016a9c:	0021      	movs	r1, r4
 8016a9e:	0030      	movs	r0, r6
 8016aa0:	f002 f80c 	bl	8018abc <__swsetup_r>
 8016aa4:	2800      	cmp	r0, #0
 8016aa6:	d017      	beq.n	8016ad8 <_vfiprintf_r+0x7c>
 8016aa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016aaa:	07db      	lsls	r3, r3, #31
 8016aac:	d50d      	bpl.n	8016aca <_vfiprintf_r+0x6e>
 8016aae:	2001      	movs	r0, #1
 8016ab0:	4240      	negs	r0, r0
 8016ab2:	b021      	add	sp, #132	; 0x84
 8016ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ab6:	4b7f      	ldr	r3, [pc, #508]	; (8016cb4 <_vfiprintf_r+0x258>)
 8016ab8:	429c      	cmp	r4, r3
 8016aba:	d101      	bne.n	8016ac0 <_vfiprintf_r+0x64>
 8016abc:	68b4      	ldr	r4, [r6, #8]
 8016abe:	e7de      	b.n	8016a7e <_vfiprintf_r+0x22>
 8016ac0:	4b7d      	ldr	r3, [pc, #500]	; (8016cb8 <_vfiprintf_r+0x25c>)
 8016ac2:	429c      	cmp	r4, r3
 8016ac4:	d1db      	bne.n	8016a7e <_vfiprintf_r+0x22>
 8016ac6:	68f4      	ldr	r4, [r6, #12]
 8016ac8:	e7d9      	b.n	8016a7e <_vfiprintf_r+0x22>
 8016aca:	89a3      	ldrh	r3, [r4, #12]
 8016acc:	059b      	lsls	r3, r3, #22
 8016ace:	d4ee      	bmi.n	8016aae <_vfiprintf_r+0x52>
 8016ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ad2:	f003 fce5 	bl	801a4a0 <__retarget_lock_release_recursive>
 8016ad6:	e7ea      	b.n	8016aae <_vfiprintf_r+0x52>
 8016ad8:	2300      	movs	r3, #0
 8016ada:	ad08      	add	r5, sp, #32
 8016adc:	616b      	str	r3, [r5, #20]
 8016ade:	3320      	adds	r3, #32
 8016ae0:	766b      	strb	r3, [r5, #25]
 8016ae2:	3310      	adds	r3, #16
 8016ae4:	76ab      	strb	r3, [r5, #26]
 8016ae6:	9707      	str	r7, [sp, #28]
 8016ae8:	9f03      	ldr	r7, [sp, #12]
 8016aea:	783b      	ldrb	r3, [r7, #0]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d001      	beq.n	8016af4 <_vfiprintf_r+0x98>
 8016af0:	2b25      	cmp	r3, #37	; 0x25
 8016af2:	d14e      	bne.n	8016b92 <_vfiprintf_r+0x136>
 8016af4:	9b03      	ldr	r3, [sp, #12]
 8016af6:	1afb      	subs	r3, r7, r3
 8016af8:	9305      	str	r3, [sp, #20]
 8016afa:	9b03      	ldr	r3, [sp, #12]
 8016afc:	429f      	cmp	r7, r3
 8016afe:	d00d      	beq.n	8016b1c <_vfiprintf_r+0xc0>
 8016b00:	9b05      	ldr	r3, [sp, #20]
 8016b02:	0021      	movs	r1, r4
 8016b04:	0030      	movs	r0, r6
 8016b06:	9a03      	ldr	r2, [sp, #12]
 8016b08:	f7ff ff95 	bl	8016a36 <__sfputs_r>
 8016b0c:	1c43      	adds	r3, r0, #1
 8016b0e:	d100      	bne.n	8016b12 <_vfiprintf_r+0xb6>
 8016b10:	e0b5      	b.n	8016c7e <_vfiprintf_r+0x222>
 8016b12:	696a      	ldr	r2, [r5, #20]
 8016b14:	9b05      	ldr	r3, [sp, #20]
 8016b16:	4694      	mov	ip, r2
 8016b18:	4463      	add	r3, ip
 8016b1a:	616b      	str	r3, [r5, #20]
 8016b1c:	783b      	ldrb	r3, [r7, #0]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d100      	bne.n	8016b24 <_vfiprintf_r+0xc8>
 8016b22:	e0ac      	b.n	8016c7e <_vfiprintf_r+0x222>
 8016b24:	2201      	movs	r2, #1
 8016b26:	1c7b      	adds	r3, r7, #1
 8016b28:	9303      	str	r3, [sp, #12]
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	4252      	negs	r2, r2
 8016b2e:	606a      	str	r2, [r5, #4]
 8016b30:	a904      	add	r1, sp, #16
 8016b32:	3254      	adds	r2, #84	; 0x54
 8016b34:	1852      	adds	r2, r2, r1
 8016b36:	602b      	str	r3, [r5, #0]
 8016b38:	60eb      	str	r3, [r5, #12]
 8016b3a:	60ab      	str	r3, [r5, #8]
 8016b3c:	7013      	strb	r3, [r2, #0]
 8016b3e:	65ab      	str	r3, [r5, #88]	; 0x58
 8016b40:	9b03      	ldr	r3, [sp, #12]
 8016b42:	2205      	movs	r2, #5
 8016b44:	7819      	ldrb	r1, [r3, #0]
 8016b46:	485d      	ldr	r0, [pc, #372]	; (8016cbc <_vfiprintf_r+0x260>)
 8016b48:	f003 fd3e 	bl	801a5c8 <memchr>
 8016b4c:	9b03      	ldr	r3, [sp, #12]
 8016b4e:	1c5f      	adds	r7, r3, #1
 8016b50:	2800      	cmp	r0, #0
 8016b52:	d120      	bne.n	8016b96 <_vfiprintf_r+0x13a>
 8016b54:	682a      	ldr	r2, [r5, #0]
 8016b56:	06d3      	lsls	r3, r2, #27
 8016b58:	d504      	bpl.n	8016b64 <_vfiprintf_r+0x108>
 8016b5a:	2353      	movs	r3, #83	; 0x53
 8016b5c:	a904      	add	r1, sp, #16
 8016b5e:	185b      	adds	r3, r3, r1
 8016b60:	2120      	movs	r1, #32
 8016b62:	7019      	strb	r1, [r3, #0]
 8016b64:	0713      	lsls	r3, r2, #28
 8016b66:	d504      	bpl.n	8016b72 <_vfiprintf_r+0x116>
 8016b68:	2353      	movs	r3, #83	; 0x53
 8016b6a:	a904      	add	r1, sp, #16
 8016b6c:	185b      	adds	r3, r3, r1
 8016b6e:	212b      	movs	r1, #43	; 0x2b
 8016b70:	7019      	strb	r1, [r3, #0]
 8016b72:	9b03      	ldr	r3, [sp, #12]
 8016b74:	781b      	ldrb	r3, [r3, #0]
 8016b76:	2b2a      	cmp	r3, #42	; 0x2a
 8016b78:	d016      	beq.n	8016ba8 <_vfiprintf_r+0x14c>
 8016b7a:	2100      	movs	r1, #0
 8016b7c:	68eb      	ldr	r3, [r5, #12]
 8016b7e:	9f03      	ldr	r7, [sp, #12]
 8016b80:	783a      	ldrb	r2, [r7, #0]
 8016b82:	1c78      	adds	r0, r7, #1
 8016b84:	3a30      	subs	r2, #48	; 0x30
 8016b86:	4684      	mov	ip, r0
 8016b88:	2a09      	cmp	r2, #9
 8016b8a:	d94f      	bls.n	8016c2c <_vfiprintf_r+0x1d0>
 8016b8c:	2900      	cmp	r1, #0
 8016b8e:	d111      	bne.n	8016bb4 <_vfiprintf_r+0x158>
 8016b90:	e017      	b.n	8016bc2 <_vfiprintf_r+0x166>
 8016b92:	3701      	adds	r7, #1
 8016b94:	e7a9      	b.n	8016aea <_vfiprintf_r+0x8e>
 8016b96:	4b49      	ldr	r3, [pc, #292]	; (8016cbc <_vfiprintf_r+0x260>)
 8016b98:	682a      	ldr	r2, [r5, #0]
 8016b9a:	1ac0      	subs	r0, r0, r3
 8016b9c:	2301      	movs	r3, #1
 8016b9e:	4083      	lsls	r3, r0
 8016ba0:	4313      	orrs	r3, r2
 8016ba2:	602b      	str	r3, [r5, #0]
 8016ba4:	9703      	str	r7, [sp, #12]
 8016ba6:	e7cb      	b.n	8016b40 <_vfiprintf_r+0xe4>
 8016ba8:	9b07      	ldr	r3, [sp, #28]
 8016baa:	1d19      	adds	r1, r3, #4
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	9107      	str	r1, [sp, #28]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	db01      	blt.n	8016bb8 <_vfiprintf_r+0x15c>
 8016bb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016bb6:	e004      	b.n	8016bc2 <_vfiprintf_r+0x166>
 8016bb8:	425b      	negs	r3, r3
 8016bba:	60eb      	str	r3, [r5, #12]
 8016bbc:	2302      	movs	r3, #2
 8016bbe:	4313      	orrs	r3, r2
 8016bc0:	602b      	str	r3, [r5, #0]
 8016bc2:	783b      	ldrb	r3, [r7, #0]
 8016bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8016bc6:	d10a      	bne.n	8016bde <_vfiprintf_r+0x182>
 8016bc8:	787b      	ldrb	r3, [r7, #1]
 8016bca:	2b2a      	cmp	r3, #42	; 0x2a
 8016bcc:	d137      	bne.n	8016c3e <_vfiprintf_r+0x1e2>
 8016bce:	9b07      	ldr	r3, [sp, #28]
 8016bd0:	3702      	adds	r7, #2
 8016bd2:	1d1a      	adds	r2, r3, #4
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	9207      	str	r2, [sp, #28]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	db2d      	blt.n	8016c38 <_vfiprintf_r+0x1dc>
 8016bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8016bde:	2203      	movs	r2, #3
 8016be0:	7839      	ldrb	r1, [r7, #0]
 8016be2:	4837      	ldr	r0, [pc, #220]	; (8016cc0 <_vfiprintf_r+0x264>)
 8016be4:	f003 fcf0 	bl	801a5c8 <memchr>
 8016be8:	2800      	cmp	r0, #0
 8016bea:	d007      	beq.n	8016bfc <_vfiprintf_r+0x1a0>
 8016bec:	4b34      	ldr	r3, [pc, #208]	; (8016cc0 <_vfiprintf_r+0x264>)
 8016bee:	682a      	ldr	r2, [r5, #0]
 8016bf0:	1ac0      	subs	r0, r0, r3
 8016bf2:	2340      	movs	r3, #64	; 0x40
 8016bf4:	4083      	lsls	r3, r0
 8016bf6:	4313      	orrs	r3, r2
 8016bf8:	3701      	adds	r7, #1
 8016bfa:	602b      	str	r3, [r5, #0]
 8016bfc:	7839      	ldrb	r1, [r7, #0]
 8016bfe:	1c7b      	adds	r3, r7, #1
 8016c00:	2206      	movs	r2, #6
 8016c02:	4830      	ldr	r0, [pc, #192]	; (8016cc4 <_vfiprintf_r+0x268>)
 8016c04:	9303      	str	r3, [sp, #12]
 8016c06:	7629      	strb	r1, [r5, #24]
 8016c08:	f003 fcde 	bl	801a5c8 <memchr>
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	d045      	beq.n	8016c9c <_vfiprintf_r+0x240>
 8016c10:	4b2d      	ldr	r3, [pc, #180]	; (8016cc8 <_vfiprintf_r+0x26c>)
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d127      	bne.n	8016c66 <_vfiprintf_r+0x20a>
 8016c16:	2207      	movs	r2, #7
 8016c18:	9b07      	ldr	r3, [sp, #28]
 8016c1a:	3307      	adds	r3, #7
 8016c1c:	4393      	bics	r3, r2
 8016c1e:	3308      	adds	r3, #8
 8016c20:	9307      	str	r3, [sp, #28]
 8016c22:	696b      	ldr	r3, [r5, #20]
 8016c24:	9a04      	ldr	r2, [sp, #16]
 8016c26:	189b      	adds	r3, r3, r2
 8016c28:	616b      	str	r3, [r5, #20]
 8016c2a:	e75d      	b.n	8016ae8 <_vfiprintf_r+0x8c>
 8016c2c:	210a      	movs	r1, #10
 8016c2e:	434b      	muls	r3, r1
 8016c30:	4667      	mov	r7, ip
 8016c32:	189b      	adds	r3, r3, r2
 8016c34:	3909      	subs	r1, #9
 8016c36:	e7a3      	b.n	8016b80 <_vfiprintf_r+0x124>
 8016c38:	2301      	movs	r3, #1
 8016c3a:	425b      	negs	r3, r3
 8016c3c:	e7ce      	b.n	8016bdc <_vfiprintf_r+0x180>
 8016c3e:	2300      	movs	r3, #0
 8016c40:	001a      	movs	r2, r3
 8016c42:	3701      	adds	r7, #1
 8016c44:	606b      	str	r3, [r5, #4]
 8016c46:	7839      	ldrb	r1, [r7, #0]
 8016c48:	1c78      	adds	r0, r7, #1
 8016c4a:	3930      	subs	r1, #48	; 0x30
 8016c4c:	4684      	mov	ip, r0
 8016c4e:	2909      	cmp	r1, #9
 8016c50:	d903      	bls.n	8016c5a <_vfiprintf_r+0x1fe>
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d0c3      	beq.n	8016bde <_vfiprintf_r+0x182>
 8016c56:	9209      	str	r2, [sp, #36]	; 0x24
 8016c58:	e7c1      	b.n	8016bde <_vfiprintf_r+0x182>
 8016c5a:	230a      	movs	r3, #10
 8016c5c:	435a      	muls	r2, r3
 8016c5e:	4667      	mov	r7, ip
 8016c60:	1852      	adds	r2, r2, r1
 8016c62:	3b09      	subs	r3, #9
 8016c64:	e7ef      	b.n	8016c46 <_vfiprintf_r+0x1ea>
 8016c66:	ab07      	add	r3, sp, #28
 8016c68:	9300      	str	r3, [sp, #0]
 8016c6a:	0022      	movs	r2, r4
 8016c6c:	0029      	movs	r1, r5
 8016c6e:	0030      	movs	r0, r6
 8016c70:	4b16      	ldr	r3, [pc, #88]	; (8016ccc <_vfiprintf_r+0x270>)
 8016c72:	f000 f8d7 	bl	8016e24 <_printf_float>
 8016c76:	9004      	str	r0, [sp, #16]
 8016c78:	9b04      	ldr	r3, [sp, #16]
 8016c7a:	3301      	adds	r3, #1
 8016c7c:	d1d1      	bne.n	8016c22 <_vfiprintf_r+0x1c6>
 8016c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c80:	07db      	lsls	r3, r3, #31
 8016c82:	d405      	bmi.n	8016c90 <_vfiprintf_r+0x234>
 8016c84:	89a3      	ldrh	r3, [r4, #12]
 8016c86:	059b      	lsls	r3, r3, #22
 8016c88:	d402      	bmi.n	8016c90 <_vfiprintf_r+0x234>
 8016c8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c8c:	f003 fc08 	bl	801a4a0 <__retarget_lock_release_recursive>
 8016c90:	89a3      	ldrh	r3, [r4, #12]
 8016c92:	065b      	lsls	r3, r3, #25
 8016c94:	d500      	bpl.n	8016c98 <_vfiprintf_r+0x23c>
 8016c96:	e70a      	b.n	8016aae <_vfiprintf_r+0x52>
 8016c98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016c9a:	e70a      	b.n	8016ab2 <_vfiprintf_r+0x56>
 8016c9c:	ab07      	add	r3, sp, #28
 8016c9e:	9300      	str	r3, [sp, #0]
 8016ca0:	0022      	movs	r2, r4
 8016ca2:	0029      	movs	r1, r5
 8016ca4:	0030      	movs	r0, r6
 8016ca6:	4b09      	ldr	r3, [pc, #36]	; (8016ccc <_vfiprintf_r+0x270>)
 8016ca8:	f000 fb6e 	bl	8017388 <_printf_i>
 8016cac:	e7e3      	b.n	8016c76 <_vfiprintf_r+0x21a>
 8016cae:	46c0      	nop			; (mov r8, r8)
 8016cb0:	0801d3bc 	.word	0x0801d3bc
 8016cb4:	0801d3dc 	.word	0x0801d3dc
 8016cb8:	0801d39c 	.word	0x0801d39c
 8016cbc:	0801d174 	.word	0x0801d174
 8016cc0:	0801d17a 	.word	0x0801d17a
 8016cc4:	0801d17e 	.word	0x0801d17e
 8016cc8:	08016e25 	.word	0x08016e25
 8016ccc:	08016a37 	.word	0x08016a37

08016cd0 <__cvt>:
 8016cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cd2:	001e      	movs	r6, r3
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	0014      	movs	r4, r2
 8016cd8:	b08b      	sub	sp, #44	; 0x2c
 8016cda:	429e      	cmp	r6, r3
 8016cdc:	da04      	bge.n	8016ce8 <__cvt+0x18>
 8016cde:	2180      	movs	r1, #128	; 0x80
 8016ce0:	0609      	lsls	r1, r1, #24
 8016ce2:	1873      	adds	r3, r6, r1
 8016ce4:	001e      	movs	r6, r3
 8016ce6:	232d      	movs	r3, #45	; 0x2d
 8016ce8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016cea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8016cec:	7013      	strb	r3, [r2, #0]
 8016cee:	2320      	movs	r3, #32
 8016cf0:	2203      	movs	r2, #3
 8016cf2:	439f      	bics	r7, r3
 8016cf4:	2f46      	cmp	r7, #70	; 0x46
 8016cf6:	d007      	beq.n	8016d08 <__cvt+0x38>
 8016cf8:	003b      	movs	r3, r7
 8016cfa:	3b45      	subs	r3, #69	; 0x45
 8016cfc:	4259      	negs	r1, r3
 8016cfe:	414b      	adcs	r3, r1
 8016d00:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016d02:	3a01      	subs	r2, #1
 8016d04:	18cb      	adds	r3, r1, r3
 8016d06:	9310      	str	r3, [sp, #64]	; 0x40
 8016d08:	ab09      	add	r3, sp, #36	; 0x24
 8016d0a:	9304      	str	r3, [sp, #16]
 8016d0c:	ab08      	add	r3, sp, #32
 8016d0e:	9303      	str	r3, [sp, #12]
 8016d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d12:	9200      	str	r2, [sp, #0]
 8016d14:	9302      	str	r3, [sp, #8]
 8016d16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d18:	0022      	movs	r2, r4
 8016d1a:	9301      	str	r3, [sp, #4]
 8016d1c:	0033      	movs	r3, r6
 8016d1e:	f001 ffeb 	bl	8018cf8 <_dtoa_r>
 8016d22:	0005      	movs	r5, r0
 8016d24:	2f47      	cmp	r7, #71	; 0x47
 8016d26:	d102      	bne.n	8016d2e <__cvt+0x5e>
 8016d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d2a:	07db      	lsls	r3, r3, #31
 8016d2c:	d528      	bpl.n	8016d80 <__cvt+0xb0>
 8016d2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d30:	18eb      	adds	r3, r5, r3
 8016d32:	9307      	str	r3, [sp, #28]
 8016d34:	2f46      	cmp	r7, #70	; 0x46
 8016d36:	d114      	bne.n	8016d62 <__cvt+0x92>
 8016d38:	782b      	ldrb	r3, [r5, #0]
 8016d3a:	2b30      	cmp	r3, #48	; 0x30
 8016d3c:	d10c      	bne.n	8016d58 <__cvt+0x88>
 8016d3e:	2200      	movs	r2, #0
 8016d40:	2300      	movs	r3, #0
 8016d42:	0020      	movs	r0, r4
 8016d44:	0031      	movs	r1, r6
 8016d46:	f7e9 fb8b 	bl	8000460 <__aeabi_dcmpeq>
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	d104      	bne.n	8016d58 <__cvt+0x88>
 8016d4e:	2301      	movs	r3, #1
 8016d50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d52:	1a9b      	subs	r3, r3, r2
 8016d54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016d56:	6013      	str	r3, [r2, #0]
 8016d58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d5a:	9a07      	ldr	r2, [sp, #28]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	18d3      	adds	r3, r2, r3
 8016d60:	9307      	str	r3, [sp, #28]
 8016d62:	2200      	movs	r2, #0
 8016d64:	2300      	movs	r3, #0
 8016d66:	0020      	movs	r0, r4
 8016d68:	0031      	movs	r1, r6
 8016d6a:	f7e9 fb79 	bl	8000460 <__aeabi_dcmpeq>
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	d001      	beq.n	8016d76 <__cvt+0xa6>
 8016d72:	9b07      	ldr	r3, [sp, #28]
 8016d74:	9309      	str	r3, [sp, #36]	; 0x24
 8016d76:	2230      	movs	r2, #48	; 0x30
 8016d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d7a:	9907      	ldr	r1, [sp, #28]
 8016d7c:	428b      	cmp	r3, r1
 8016d7e:	d306      	bcc.n	8016d8e <__cvt+0xbe>
 8016d80:	0028      	movs	r0, r5
 8016d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016d86:	1b5b      	subs	r3, r3, r5
 8016d88:	6013      	str	r3, [r2, #0]
 8016d8a:	b00b      	add	sp, #44	; 0x2c
 8016d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d8e:	1c59      	adds	r1, r3, #1
 8016d90:	9109      	str	r1, [sp, #36]	; 0x24
 8016d92:	701a      	strb	r2, [r3, #0]
 8016d94:	e7f0      	b.n	8016d78 <__cvt+0xa8>

08016d96 <__exponent>:
 8016d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d98:	1c83      	adds	r3, r0, #2
 8016d9a:	b087      	sub	sp, #28
 8016d9c:	9303      	str	r3, [sp, #12]
 8016d9e:	0005      	movs	r5, r0
 8016da0:	000c      	movs	r4, r1
 8016da2:	232b      	movs	r3, #43	; 0x2b
 8016da4:	7002      	strb	r2, [r0, #0]
 8016da6:	2900      	cmp	r1, #0
 8016da8:	da01      	bge.n	8016dae <__exponent+0x18>
 8016daa:	424c      	negs	r4, r1
 8016dac:	3302      	adds	r3, #2
 8016dae:	706b      	strb	r3, [r5, #1]
 8016db0:	2c09      	cmp	r4, #9
 8016db2:	dd31      	ble.n	8016e18 <__exponent+0x82>
 8016db4:	270a      	movs	r7, #10
 8016db6:	ab04      	add	r3, sp, #16
 8016db8:	1dde      	adds	r6, r3, #7
 8016dba:	0020      	movs	r0, r4
 8016dbc:	0039      	movs	r1, r7
 8016dbe:	9601      	str	r6, [sp, #4]
 8016dc0:	f7e9 fb38 	bl	8000434 <__aeabi_idivmod>
 8016dc4:	3e01      	subs	r6, #1
 8016dc6:	3130      	adds	r1, #48	; 0x30
 8016dc8:	0020      	movs	r0, r4
 8016dca:	7031      	strb	r1, [r6, #0]
 8016dcc:	0039      	movs	r1, r7
 8016dce:	9402      	str	r4, [sp, #8]
 8016dd0:	f7e9 fa4a 	bl	8000268 <__divsi3>
 8016dd4:	9b02      	ldr	r3, [sp, #8]
 8016dd6:	0004      	movs	r4, r0
 8016dd8:	2b63      	cmp	r3, #99	; 0x63
 8016dda:	dcee      	bgt.n	8016dba <__exponent+0x24>
 8016ddc:	9b01      	ldr	r3, [sp, #4]
 8016dde:	3430      	adds	r4, #48	; 0x30
 8016de0:	1e9a      	subs	r2, r3, #2
 8016de2:	0013      	movs	r3, r2
 8016de4:	9903      	ldr	r1, [sp, #12]
 8016de6:	7014      	strb	r4, [r2, #0]
 8016de8:	a804      	add	r0, sp, #16
 8016dea:	3007      	adds	r0, #7
 8016dec:	4298      	cmp	r0, r3
 8016dee:	d80e      	bhi.n	8016e0e <__exponent+0x78>
 8016df0:	ab04      	add	r3, sp, #16
 8016df2:	3307      	adds	r3, #7
 8016df4:	2000      	movs	r0, #0
 8016df6:	429a      	cmp	r2, r3
 8016df8:	d804      	bhi.n	8016e04 <__exponent+0x6e>
 8016dfa:	ab04      	add	r3, sp, #16
 8016dfc:	3009      	adds	r0, #9
 8016dfe:	18c0      	adds	r0, r0, r3
 8016e00:	9b01      	ldr	r3, [sp, #4]
 8016e02:	1ac0      	subs	r0, r0, r3
 8016e04:	9b03      	ldr	r3, [sp, #12]
 8016e06:	1818      	adds	r0, r3, r0
 8016e08:	1b40      	subs	r0, r0, r5
 8016e0a:	b007      	add	sp, #28
 8016e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e0e:	7818      	ldrb	r0, [r3, #0]
 8016e10:	3301      	adds	r3, #1
 8016e12:	7008      	strb	r0, [r1, #0]
 8016e14:	3101      	adds	r1, #1
 8016e16:	e7e7      	b.n	8016de8 <__exponent+0x52>
 8016e18:	2330      	movs	r3, #48	; 0x30
 8016e1a:	18e4      	adds	r4, r4, r3
 8016e1c:	70ab      	strb	r3, [r5, #2]
 8016e1e:	1d28      	adds	r0, r5, #4
 8016e20:	70ec      	strb	r4, [r5, #3]
 8016e22:	e7f1      	b.n	8016e08 <__exponent+0x72>

08016e24 <_printf_float>:
 8016e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e26:	b095      	sub	sp, #84	; 0x54
 8016e28:	000c      	movs	r4, r1
 8016e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8016e2c:	001e      	movs	r6, r3
 8016e2e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016e30:	0007      	movs	r7, r0
 8016e32:	f003 fb2f 	bl	801a494 <_localeconv_r>
 8016e36:	6803      	ldr	r3, [r0, #0]
 8016e38:	0018      	movs	r0, r3
 8016e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8016e3c:	f7e9 f96e 	bl	800011c <strlen>
 8016e40:	2300      	movs	r3, #0
 8016e42:	9312      	str	r3, [sp, #72]	; 0x48
 8016e44:	7e23      	ldrb	r3, [r4, #24]
 8016e46:	2207      	movs	r2, #7
 8016e48:	930a      	str	r3, [sp, #40]	; 0x28
 8016e4a:	6823      	ldr	r3, [r4, #0]
 8016e4c:	900e      	str	r0, [sp, #56]	; 0x38
 8016e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8016e50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016e52:	682b      	ldr	r3, [r5, #0]
 8016e54:	05c9      	lsls	r1, r1, #23
 8016e56:	d547      	bpl.n	8016ee8 <_printf_float+0xc4>
 8016e58:	189b      	adds	r3, r3, r2
 8016e5a:	4393      	bics	r3, r2
 8016e5c:	001a      	movs	r2, r3
 8016e5e:	3208      	adds	r2, #8
 8016e60:	602a      	str	r2, [r5, #0]
 8016e62:	681a      	ldr	r2, [r3, #0]
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	64a2      	str	r2, [r4, #72]	; 0x48
 8016e68:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016e6a:	2201      	movs	r2, #1
 8016e6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8016e6e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8016e70:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e72:	006b      	lsls	r3, r5, #1
 8016e74:	085b      	lsrs	r3, r3, #1
 8016e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016e7a:	4ba7      	ldr	r3, [pc, #668]	; (8017118 <_printf_float+0x2f4>)
 8016e7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016e7e:	4252      	negs	r2, r2
 8016e80:	f7eb f920 	bl	80020c4 <__aeabi_dcmpun>
 8016e84:	2800      	cmp	r0, #0
 8016e86:	d131      	bne.n	8016eec <_printf_float+0xc8>
 8016e88:	2201      	movs	r2, #1
 8016e8a:	4ba3      	ldr	r3, [pc, #652]	; (8017118 <_printf_float+0x2f4>)
 8016e8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016e8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016e90:	4252      	negs	r2, r2
 8016e92:	f7e9 faf5 	bl	8000480 <__aeabi_dcmple>
 8016e96:	2800      	cmp	r0, #0
 8016e98:	d128      	bne.n	8016eec <_printf_float+0xc8>
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	0029      	movs	r1, r5
 8016ea0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016ea2:	f7e9 fae3 	bl	800046c <__aeabi_dcmplt>
 8016ea6:	2800      	cmp	r0, #0
 8016ea8:	d003      	beq.n	8016eb2 <_printf_float+0x8e>
 8016eaa:	0023      	movs	r3, r4
 8016eac:	222d      	movs	r2, #45	; 0x2d
 8016eae:	3343      	adds	r3, #67	; 0x43
 8016eb0:	701a      	strb	r2, [r3, #0]
 8016eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016eb4:	4d99      	ldr	r5, [pc, #612]	; (801711c <_printf_float+0x2f8>)
 8016eb6:	2b47      	cmp	r3, #71	; 0x47
 8016eb8:	d900      	bls.n	8016ebc <_printf_float+0x98>
 8016eba:	4d99      	ldr	r5, [pc, #612]	; (8017120 <_printf_float+0x2fc>)
 8016ebc:	2303      	movs	r3, #3
 8016ebe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ec0:	6123      	str	r3, [r4, #16]
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	439a      	bics	r2, r3
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	6022      	str	r2, [r4, #0]
 8016eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ece:	0021      	movs	r1, r4
 8016ed0:	0038      	movs	r0, r7
 8016ed2:	9600      	str	r6, [sp, #0]
 8016ed4:	aa13      	add	r2, sp, #76	; 0x4c
 8016ed6:	f000 f9e7 	bl	80172a8 <_printf_common>
 8016eda:	1c43      	adds	r3, r0, #1
 8016edc:	d000      	beq.n	8016ee0 <_printf_float+0xbc>
 8016ede:	e0a2      	b.n	8017026 <_printf_float+0x202>
 8016ee0:	2001      	movs	r0, #1
 8016ee2:	4240      	negs	r0, r0
 8016ee4:	b015      	add	sp, #84	; 0x54
 8016ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ee8:	3307      	adds	r3, #7
 8016eea:	e7b6      	b.n	8016e5a <_printf_float+0x36>
 8016eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016eee:	002b      	movs	r3, r5
 8016ef0:	0010      	movs	r0, r2
 8016ef2:	0029      	movs	r1, r5
 8016ef4:	f7eb f8e6 	bl	80020c4 <__aeabi_dcmpun>
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	d00b      	beq.n	8016f14 <_printf_float+0xf0>
 8016efc:	2d00      	cmp	r5, #0
 8016efe:	da03      	bge.n	8016f08 <_printf_float+0xe4>
 8016f00:	0023      	movs	r3, r4
 8016f02:	222d      	movs	r2, #45	; 0x2d
 8016f04:	3343      	adds	r3, #67	; 0x43
 8016f06:	701a      	strb	r2, [r3, #0]
 8016f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f0a:	4d86      	ldr	r5, [pc, #536]	; (8017124 <_printf_float+0x300>)
 8016f0c:	2b47      	cmp	r3, #71	; 0x47
 8016f0e:	d9d5      	bls.n	8016ebc <_printf_float+0x98>
 8016f10:	4d85      	ldr	r5, [pc, #532]	; (8017128 <_printf_float+0x304>)
 8016f12:	e7d3      	b.n	8016ebc <_printf_float+0x98>
 8016f14:	2220      	movs	r2, #32
 8016f16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016f18:	6863      	ldr	r3, [r4, #4]
 8016f1a:	4391      	bics	r1, r2
 8016f1c:	910f      	str	r1, [sp, #60]	; 0x3c
 8016f1e:	1c5a      	adds	r2, r3, #1
 8016f20:	d149      	bne.n	8016fb6 <_printf_float+0x192>
 8016f22:	3307      	adds	r3, #7
 8016f24:	6063      	str	r3, [r4, #4]
 8016f26:	2380      	movs	r3, #128	; 0x80
 8016f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f2a:	00db      	lsls	r3, r3, #3
 8016f2c:	4313      	orrs	r3, r2
 8016f2e:	2200      	movs	r2, #0
 8016f30:	9206      	str	r2, [sp, #24]
 8016f32:	aa12      	add	r2, sp, #72	; 0x48
 8016f34:	9205      	str	r2, [sp, #20]
 8016f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f38:	a908      	add	r1, sp, #32
 8016f3a:	9204      	str	r2, [sp, #16]
 8016f3c:	aa11      	add	r2, sp, #68	; 0x44
 8016f3e:	9203      	str	r2, [sp, #12]
 8016f40:	2223      	movs	r2, #35	; 0x23
 8016f42:	6023      	str	r3, [r4, #0]
 8016f44:	9301      	str	r3, [sp, #4]
 8016f46:	6863      	ldr	r3, [r4, #4]
 8016f48:	1852      	adds	r2, r2, r1
 8016f4a:	9202      	str	r2, [sp, #8]
 8016f4c:	9300      	str	r3, [sp, #0]
 8016f4e:	0038      	movs	r0, r7
 8016f50:	002b      	movs	r3, r5
 8016f52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016f54:	f7ff febc 	bl	8016cd0 <__cvt>
 8016f58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f5a:	0005      	movs	r5, r0
 8016f5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016f5e:	2b47      	cmp	r3, #71	; 0x47
 8016f60:	d108      	bne.n	8016f74 <_printf_float+0x150>
 8016f62:	1ccb      	adds	r3, r1, #3
 8016f64:	db02      	blt.n	8016f6c <_printf_float+0x148>
 8016f66:	6863      	ldr	r3, [r4, #4]
 8016f68:	4299      	cmp	r1, r3
 8016f6a:	dd48      	ble.n	8016ffe <_printf_float+0x1da>
 8016f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f6e:	3b02      	subs	r3, #2
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	930a      	str	r3, [sp, #40]	; 0x28
 8016f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f76:	2b65      	cmp	r3, #101	; 0x65
 8016f78:	d824      	bhi.n	8016fc4 <_printf_float+0x1a0>
 8016f7a:	0020      	movs	r0, r4
 8016f7c:	001a      	movs	r2, r3
 8016f7e:	3901      	subs	r1, #1
 8016f80:	3050      	adds	r0, #80	; 0x50
 8016f82:	9111      	str	r1, [sp, #68]	; 0x44
 8016f84:	f7ff ff07 	bl	8016d96 <__exponent>
 8016f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8016f8c:	1813      	adds	r3, r2, r0
 8016f8e:	6123      	str	r3, [r4, #16]
 8016f90:	2a01      	cmp	r2, #1
 8016f92:	dc02      	bgt.n	8016f9a <_printf_float+0x176>
 8016f94:	6822      	ldr	r2, [r4, #0]
 8016f96:	07d2      	lsls	r2, r2, #31
 8016f98:	d501      	bpl.n	8016f9e <_printf_float+0x17a>
 8016f9a:	3301      	adds	r3, #1
 8016f9c:	6123      	str	r3, [r4, #16]
 8016f9e:	2323      	movs	r3, #35	; 0x23
 8016fa0:	aa08      	add	r2, sp, #32
 8016fa2:	189b      	adds	r3, r3, r2
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d100      	bne.n	8016fac <_printf_float+0x188>
 8016faa:	e78f      	b.n	8016ecc <_printf_float+0xa8>
 8016fac:	0023      	movs	r3, r4
 8016fae:	222d      	movs	r2, #45	; 0x2d
 8016fb0:	3343      	adds	r3, #67	; 0x43
 8016fb2:	701a      	strb	r2, [r3, #0]
 8016fb4:	e78a      	b.n	8016ecc <_printf_float+0xa8>
 8016fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fb8:	2a47      	cmp	r2, #71	; 0x47
 8016fba:	d1b4      	bne.n	8016f26 <_printf_float+0x102>
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d1b2      	bne.n	8016f26 <_printf_float+0x102>
 8016fc0:	3301      	adds	r3, #1
 8016fc2:	e7af      	b.n	8016f24 <_printf_float+0x100>
 8016fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fc6:	2b66      	cmp	r3, #102	; 0x66
 8016fc8:	d11b      	bne.n	8017002 <_printf_float+0x1de>
 8016fca:	6863      	ldr	r3, [r4, #4]
 8016fcc:	2900      	cmp	r1, #0
 8016fce:	dd0d      	ble.n	8016fec <_printf_float+0x1c8>
 8016fd0:	6121      	str	r1, [r4, #16]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d102      	bne.n	8016fdc <_printf_float+0x1b8>
 8016fd6:	6822      	ldr	r2, [r4, #0]
 8016fd8:	07d2      	lsls	r2, r2, #31
 8016fda:	d502      	bpl.n	8016fe2 <_printf_float+0x1be>
 8016fdc:	3301      	adds	r3, #1
 8016fde:	1859      	adds	r1, r3, r1
 8016fe0:	6121      	str	r1, [r4, #16]
 8016fe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fe4:	65a3      	str	r3, [r4, #88]	; 0x58
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fea:	e7d8      	b.n	8016f9e <_printf_float+0x17a>
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d103      	bne.n	8016ff8 <_printf_float+0x1d4>
 8016ff0:	2201      	movs	r2, #1
 8016ff2:	6821      	ldr	r1, [r4, #0]
 8016ff4:	4211      	tst	r1, r2
 8016ff6:	d000      	beq.n	8016ffa <_printf_float+0x1d6>
 8016ff8:	1c9a      	adds	r2, r3, #2
 8016ffa:	6122      	str	r2, [r4, #16]
 8016ffc:	e7f1      	b.n	8016fe2 <_printf_float+0x1be>
 8016ffe:	2367      	movs	r3, #103	; 0x67
 8017000:	930a      	str	r3, [sp, #40]	; 0x28
 8017002:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017006:	4293      	cmp	r3, r2
 8017008:	db06      	blt.n	8017018 <_printf_float+0x1f4>
 801700a:	6822      	ldr	r2, [r4, #0]
 801700c:	6123      	str	r3, [r4, #16]
 801700e:	07d2      	lsls	r2, r2, #31
 8017010:	d5e7      	bpl.n	8016fe2 <_printf_float+0x1be>
 8017012:	3301      	adds	r3, #1
 8017014:	6123      	str	r3, [r4, #16]
 8017016:	e7e4      	b.n	8016fe2 <_printf_float+0x1be>
 8017018:	2101      	movs	r1, #1
 801701a:	2b00      	cmp	r3, #0
 801701c:	dc01      	bgt.n	8017022 <_printf_float+0x1fe>
 801701e:	1849      	adds	r1, r1, r1
 8017020:	1ac9      	subs	r1, r1, r3
 8017022:	1852      	adds	r2, r2, r1
 8017024:	e7e9      	b.n	8016ffa <_printf_float+0x1d6>
 8017026:	6822      	ldr	r2, [r4, #0]
 8017028:	0553      	lsls	r3, r2, #21
 801702a:	d407      	bmi.n	801703c <_printf_float+0x218>
 801702c:	6923      	ldr	r3, [r4, #16]
 801702e:	002a      	movs	r2, r5
 8017030:	0038      	movs	r0, r7
 8017032:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017034:	47b0      	blx	r6
 8017036:	1c43      	adds	r3, r0, #1
 8017038:	d128      	bne.n	801708c <_printf_float+0x268>
 801703a:	e751      	b.n	8016ee0 <_printf_float+0xbc>
 801703c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801703e:	2b65      	cmp	r3, #101	; 0x65
 8017040:	d800      	bhi.n	8017044 <_printf_float+0x220>
 8017042:	e0e1      	b.n	8017208 <_printf_float+0x3e4>
 8017044:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8017046:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8017048:	2200      	movs	r2, #0
 801704a:	2300      	movs	r3, #0
 801704c:	f7e9 fa08 	bl	8000460 <__aeabi_dcmpeq>
 8017050:	2800      	cmp	r0, #0
 8017052:	d031      	beq.n	80170b8 <_printf_float+0x294>
 8017054:	2301      	movs	r3, #1
 8017056:	0038      	movs	r0, r7
 8017058:	4a34      	ldr	r2, [pc, #208]	; (801712c <_printf_float+0x308>)
 801705a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801705c:	47b0      	blx	r6
 801705e:	1c43      	adds	r3, r0, #1
 8017060:	d100      	bne.n	8017064 <_printf_float+0x240>
 8017062:	e73d      	b.n	8016ee0 <_printf_float+0xbc>
 8017064:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017066:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017068:	4293      	cmp	r3, r2
 801706a:	db02      	blt.n	8017072 <_printf_float+0x24e>
 801706c:	6823      	ldr	r3, [r4, #0]
 801706e:	07db      	lsls	r3, r3, #31
 8017070:	d50c      	bpl.n	801708c <_printf_float+0x268>
 8017072:	0038      	movs	r0, r7
 8017074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017078:	9909      	ldr	r1, [sp, #36]	; 0x24
 801707a:	47b0      	blx	r6
 801707c:	2500      	movs	r5, #0
 801707e:	1c43      	adds	r3, r0, #1
 8017080:	d100      	bne.n	8017084 <_printf_float+0x260>
 8017082:	e72d      	b.n	8016ee0 <_printf_float+0xbc>
 8017084:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017086:	3b01      	subs	r3, #1
 8017088:	42ab      	cmp	r3, r5
 801708a:	dc0a      	bgt.n	80170a2 <_printf_float+0x27e>
 801708c:	6823      	ldr	r3, [r4, #0]
 801708e:	079b      	lsls	r3, r3, #30
 8017090:	d500      	bpl.n	8017094 <_printf_float+0x270>
 8017092:	e106      	b.n	80172a2 <_printf_float+0x47e>
 8017094:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017096:	68e0      	ldr	r0, [r4, #12]
 8017098:	4298      	cmp	r0, r3
 801709a:	db00      	blt.n	801709e <_printf_float+0x27a>
 801709c:	e722      	b.n	8016ee4 <_printf_float+0xc0>
 801709e:	0018      	movs	r0, r3
 80170a0:	e720      	b.n	8016ee4 <_printf_float+0xc0>
 80170a2:	0022      	movs	r2, r4
 80170a4:	2301      	movs	r3, #1
 80170a6:	0038      	movs	r0, r7
 80170a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170aa:	321a      	adds	r2, #26
 80170ac:	47b0      	blx	r6
 80170ae:	1c43      	adds	r3, r0, #1
 80170b0:	d100      	bne.n	80170b4 <_printf_float+0x290>
 80170b2:	e715      	b.n	8016ee0 <_printf_float+0xbc>
 80170b4:	3501      	adds	r5, #1
 80170b6:	e7e5      	b.n	8017084 <_printf_float+0x260>
 80170b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	dc38      	bgt.n	8017130 <_printf_float+0x30c>
 80170be:	2301      	movs	r3, #1
 80170c0:	0038      	movs	r0, r7
 80170c2:	4a1a      	ldr	r2, [pc, #104]	; (801712c <_printf_float+0x308>)
 80170c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170c6:	47b0      	blx	r6
 80170c8:	1c43      	adds	r3, r0, #1
 80170ca:	d100      	bne.n	80170ce <_printf_float+0x2aa>
 80170cc:	e708      	b.n	8016ee0 <_printf_float+0xbc>
 80170ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80170d2:	4313      	orrs	r3, r2
 80170d4:	d102      	bne.n	80170dc <_printf_float+0x2b8>
 80170d6:	6823      	ldr	r3, [r4, #0]
 80170d8:	07db      	lsls	r3, r3, #31
 80170da:	d5d7      	bpl.n	801708c <_printf_float+0x268>
 80170dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170de:	0038      	movs	r0, r7
 80170e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80170e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170e4:	47b0      	blx	r6
 80170e6:	1c43      	adds	r3, r0, #1
 80170e8:	d100      	bne.n	80170ec <_printf_float+0x2c8>
 80170ea:	e6f9      	b.n	8016ee0 <_printf_float+0xbc>
 80170ec:	2300      	movs	r3, #0
 80170ee:	930a      	str	r3, [sp, #40]	; 0x28
 80170f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170f4:	425b      	negs	r3, r3
 80170f6:	4293      	cmp	r3, r2
 80170f8:	dc01      	bgt.n	80170fe <_printf_float+0x2da>
 80170fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80170fc:	e797      	b.n	801702e <_printf_float+0x20a>
 80170fe:	0022      	movs	r2, r4
 8017100:	2301      	movs	r3, #1
 8017102:	0038      	movs	r0, r7
 8017104:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017106:	321a      	adds	r2, #26
 8017108:	47b0      	blx	r6
 801710a:	1c43      	adds	r3, r0, #1
 801710c:	d100      	bne.n	8017110 <_printf_float+0x2ec>
 801710e:	e6e7      	b.n	8016ee0 <_printf_float+0xbc>
 8017110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017112:	3301      	adds	r3, #1
 8017114:	e7eb      	b.n	80170ee <_printf_float+0x2ca>
 8017116:	46c0      	nop			; (mov r8, r8)
 8017118:	7fefffff 	.word	0x7fefffff
 801711c:	0801d185 	.word	0x0801d185
 8017120:	0801d189 	.word	0x0801d189
 8017124:	0801d18d 	.word	0x0801d18d
 8017128:	0801d191 	.word	0x0801d191
 801712c:	0801d5d8 	.word	0x0801d5d8
 8017130:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017134:	920a      	str	r2, [sp, #40]	; 0x28
 8017136:	429a      	cmp	r2, r3
 8017138:	dd00      	ble.n	801713c <_printf_float+0x318>
 801713a:	930a      	str	r3, [sp, #40]	; 0x28
 801713c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801713e:	2b00      	cmp	r3, #0
 8017140:	dc3c      	bgt.n	80171bc <_printf_float+0x398>
 8017142:	2300      	movs	r3, #0
 8017144:	930d      	str	r3, [sp, #52]	; 0x34
 8017146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017148:	43db      	mvns	r3, r3
 801714a:	17db      	asrs	r3, r3, #31
 801714c:	930f      	str	r3, [sp, #60]	; 0x3c
 801714e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017152:	930b      	str	r3, [sp, #44]	; 0x2c
 8017154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017156:	4013      	ands	r3, r2
 8017158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801715a:	1ad3      	subs	r3, r2, r3
 801715c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801715e:	4293      	cmp	r3, r2
 8017160:	dc34      	bgt.n	80171cc <_printf_float+0x3a8>
 8017162:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017166:	4293      	cmp	r3, r2
 8017168:	db3d      	blt.n	80171e6 <_printf_float+0x3c2>
 801716a:	6823      	ldr	r3, [r4, #0]
 801716c:	07db      	lsls	r3, r3, #31
 801716e:	d43a      	bmi.n	80171e6 <_printf_float+0x3c2>
 8017170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017174:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017176:	1ad3      	subs	r3, r2, r3
 8017178:	1a52      	subs	r2, r2, r1
 801717a:	920a      	str	r2, [sp, #40]	; 0x28
 801717c:	429a      	cmp	r2, r3
 801717e:	dd00      	ble.n	8017182 <_printf_float+0x35e>
 8017180:	930a      	str	r3, [sp, #40]	; 0x28
 8017182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017184:	2b00      	cmp	r3, #0
 8017186:	dc36      	bgt.n	80171f6 <_printf_float+0x3d2>
 8017188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801718a:	2500      	movs	r5, #0
 801718c:	43db      	mvns	r3, r3
 801718e:	17db      	asrs	r3, r3, #31
 8017190:	930b      	str	r3, [sp, #44]	; 0x2c
 8017192:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017194:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017196:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017198:	1a9b      	subs	r3, r3, r2
 801719a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801719c:	400a      	ands	r2, r1
 801719e:	1a9b      	subs	r3, r3, r2
 80171a0:	42ab      	cmp	r3, r5
 80171a2:	dc00      	bgt.n	80171a6 <_printf_float+0x382>
 80171a4:	e772      	b.n	801708c <_printf_float+0x268>
 80171a6:	0022      	movs	r2, r4
 80171a8:	2301      	movs	r3, #1
 80171aa:	0038      	movs	r0, r7
 80171ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80171ae:	321a      	adds	r2, #26
 80171b0:	47b0      	blx	r6
 80171b2:	1c43      	adds	r3, r0, #1
 80171b4:	d100      	bne.n	80171b8 <_printf_float+0x394>
 80171b6:	e693      	b.n	8016ee0 <_printf_float+0xbc>
 80171b8:	3501      	adds	r5, #1
 80171ba:	e7ea      	b.n	8017192 <_printf_float+0x36e>
 80171bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171be:	002a      	movs	r2, r5
 80171c0:	0038      	movs	r0, r7
 80171c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80171c4:	47b0      	blx	r6
 80171c6:	1c43      	adds	r3, r0, #1
 80171c8:	d1bb      	bne.n	8017142 <_printf_float+0x31e>
 80171ca:	e689      	b.n	8016ee0 <_printf_float+0xbc>
 80171cc:	0022      	movs	r2, r4
 80171ce:	2301      	movs	r3, #1
 80171d0:	0038      	movs	r0, r7
 80171d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80171d4:	321a      	adds	r2, #26
 80171d6:	47b0      	blx	r6
 80171d8:	1c43      	adds	r3, r0, #1
 80171da:	d100      	bne.n	80171de <_printf_float+0x3ba>
 80171dc:	e680      	b.n	8016ee0 <_printf_float+0xbc>
 80171de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171e0:	3301      	adds	r3, #1
 80171e2:	930d      	str	r3, [sp, #52]	; 0x34
 80171e4:	e7b3      	b.n	801714e <_printf_float+0x32a>
 80171e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171e8:	0038      	movs	r0, r7
 80171ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80171ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80171ee:	47b0      	blx	r6
 80171f0:	1c43      	adds	r3, r0, #1
 80171f2:	d1bd      	bne.n	8017170 <_printf_float+0x34c>
 80171f4:	e674      	b.n	8016ee0 <_printf_float+0xbc>
 80171f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171f8:	0038      	movs	r0, r7
 80171fa:	18ea      	adds	r2, r5, r3
 80171fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80171fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017200:	47b0      	blx	r6
 8017202:	1c43      	adds	r3, r0, #1
 8017204:	d1c0      	bne.n	8017188 <_printf_float+0x364>
 8017206:	e66b      	b.n	8016ee0 <_printf_float+0xbc>
 8017208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801720a:	2b01      	cmp	r3, #1
 801720c:	dc02      	bgt.n	8017214 <_printf_float+0x3f0>
 801720e:	2301      	movs	r3, #1
 8017210:	421a      	tst	r2, r3
 8017212:	d034      	beq.n	801727e <_printf_float+0x45a>
 8017214:	2301      	movs	r3, #1
 8017216:	002a      	movs	r2, r5
 8017218:	0038      	movs	r0, r7
 801721a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801721c:	47b0      	blx	r6
 801721e:	1c43      	adds	r3, r0, #1
 8017220:	d100      	bne.n	8017224 <_printf_float+0x400>
 8017222:	e65d      	b.n	8016ee0 <_printf_float+0xbc>
 8017224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017226:	0038      	movs	r0, r7
 8017228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801722a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801722c:	47b0      	blx	r6
 801722e:	1c43      	adds	r3, r0, #1
 8017230:	d100      	bne.n	8017234 <_printf_float+0x410>
 8017232:	e655      	b.n	8016ee0 <_printf_float+0xbc>
 8017234:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8017236:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8017238:	2200      	movs	r2, #0
 801723a:	2300      	movs	r3, #0
 801723c:	f7e9 f910 	bl	8000460 <__aeabi_dcmpeq>
 8017240:	2800      	cmp	r0, #0
 8017242:	d11a      	bne.n	801727a <_printf_float+0x456>
 8017244:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017246:	1c6a      	adds	r2, r5, #1
 8017248:	3b01      	subs	r3, #1
 801724a:	0038      	movs	r0, r7
 801724c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801724e:	47b0      	blx	r6
 8017250:	1c43      	adds	r3, r0, #1
 8017252:	d10e      	bne.n	8017272 <_printf_float+0x44e>
 8017254:	e644      	b.n	8016ee0 <_printf_float+0xbc>
 8017256:	0022      	movs	r2, r4
 8017258:	2301      	movs	r3, #1
 801725a:	0038      	movs	r0, r7
 801725c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801725e:	321a      	adds	r2, #26
 8017260:	47b0      	blx	r6
 8017262:	1c43      	adds	r3, r0, #1
 8017264:	d100      	bne.n	8017268 <_printf_float+0x444>
 8017266:	e63b      	b.n	8016ee0 <_printf_float+0xbc>
 8017268:	3501      	adds	r5, #1
 801726a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801726c:	3b01      	subs	r3, #1
 801726e:	42ab      	cmp	r3, r5
 8017270:	dcf1      	bgt.n	8017256 <_printf_float+0x432>
 8017272:	0022      	movs	r2, r4
 8017274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017276:	3250      	adds	r2, #80	; 0x50
 8017278:	e6da      	b.n	8017030 <_printf_float+0x20c>
 801727a:	2500      	movs	r5, #0
 801727c:	e7f5      	b.n	801726a <_printf_float+0x446>
 801727e:	002a      	movs	r2, r5
 8017280:	e7e3      	b.n	801724a <_printf_float+0x426>
 8017282:	0022      	movs	r2, r4
 8017284:	2301      	movs	r3, #1
 8017286:	0038      	movs	r0, r7
 8017288:	9909      	ldr	r1, [sp, #36]	; 0x24
 801728a:	3219      	adds	r2, #25
 801728c:	47b0      	blx	r6
 801728e:	1c43      	adds	r3, r0, #1
 8017290:	d100      	bne.n	8017294 <_printf_float+0x470>
 8017292:	e625      	b.n	8016ee0 <_printf_float+0xbc>
 8017294:	3501      	adds	r5, #1
 8017296:	68e3      	ldr	r3, [r4, #12]
 8017298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801729a:	1a9b      	subs	r3, r3, r2
 801729c:	42ab      	cmp	r3, r5
 801729e:	dcf0      	bgt.n	8017282 <_printf_float+0x45e>
 80172a0:	e6f8      	b.n	8017094 <_printf_float+0x270>
 80172a2:	2500      	movs	r5, #0
 80172a4:	e7f7      	b.n	8017296 <_printf_float+0x472>
 80172a6:	46c0      	nop			; (mov r8, r8)

080172a8 <_printf_common>:
 80172a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172aa:	0015      	movs	r5, r2
 80172ac:	9301      	str	r3, [sp, #4]
 80172ae:	688a      	ldr	r2, [r1, #8]
 80172b0:	690b      	ldr	r3, [r1, #16]
 80172b2:	000c      	movs	r4, r1
 80172b4:	9000      	str	r0, [sp, #0]
 80172b6:	4293      	cmp	r3, r2
 80172b8:	da00      	bge.n	80172bc <_printf_common+0x14>
 80172ba:	0013      	movs	r3, r2
 80172bc:	0022      	movs	r2, r4
 80172be:	602b      	str	r3, [r5, #0]
 80172c0:	3243      	adds	r2, #67	; 0x43
 80172c2:	7812      	ldrb	r2, [r2, #0]
 80172c4:	2a00      	cmp	r2, #0
 80172c6:	d001      	beq.n	80172cc <_printf_common+0x24>
 80172c8:	3301      	adds	r3, #1
 80172ca:	602b      	str	r3, [r5, #0]
 80172cc:	6823      	ldr	r3, [r4, #0]
 80172ce:	069b      	lsls	r3, r3, #26
 80172d0:	d502      	bpl.n	80172d8 <_printf_common+0x30>
 80172d2:	682b      	ldr	r3, [r5, #0]
 80172d4:	3302      	adds	r3, #2
 80172d6:	602b      	str	r3, [r5, #0]
 80172d8:	6822      	ldr	r2, [r4, #0]
 80172da:	2306      	movs	r3, #6
 80172dc:	0017      	movs	r7, r2
 80172de:	401f      	ands	r7, r3
 80172e0:	421a      	tst	r2, r3
 80172e2:	d027      	beq.n	8017334 <_printf_common+0x8c>
 80172e4:	0023      	movs	r3, r4
 80172e6:	3343      	adds	r3, #67	; 0x43
 80172e8:	781b      	ldrb	r3, [r3, #0]
 80172ea:	1e5a      	subs	r2, r3, #1
 80172ec:	4193      	sbcs	r3, r2
 80172ee:	6822      	ldr	r2, [r4, #0]
 80172f0:	0692      	lsls	r2, r2, #26
 80172f2:	d430      	bmi.n	8017356 <_printf_common+0xae>
 80172f4:	0022      	movs	r2, r4
 80172f6:	9901      	ldr	r1, [sp, #4]
 80172f8:	9800      	ldr	r0, [sp, #0]
 80172fa:	9e08      	ldr	r6, [sp, #32]
 80172fc:	3243      	adds	r2, #67	; 0x43
 80172fe:	47b0      	blx	r6
 8017300:	1c43      	adds	r3, r0, #1
 8017302:	d025      	beq.n	8017350 <_printf_common+0xa8>
 8017304:	2306      	movs	r3, #6
 8017306:	6820      	ldr	r0, [r4, #0]
 8017308:	682a      	ldr	r2, [r5, #0]
 801730a:	68e1      	ldr	r1, [r4, #12]
 801730c:	2500      	movs	r5, #0
 801730e:	4003      	ands	r3, r0
 8017310:	2b04      	cmp	r3, #4
 8017312:	d103      	bne.n	801731c <_printf_common+0x74>
 8017314:	1a8d      	subs	r5, r1, r2
 8017316:	43eb      	mvns	r3, r5
 8017318:	17db      	asrs	r3, r3, #31
 801731a:	401d      	ands	r5, r3
 801731c:	68a3      	ldr	r3, [r4, #8]
 801731e:	6922      	ldr	r2, [r4, #16]
 8017320:	4293      	cmp	r3, r2
 8017322:	dd01      	ble.n	8017328 <_printf_common+0x80>
 8017324:	1a9b      	subs	r3, r3, r2
 8017326:	18ed      	adds	r5, r5, r3
 8017328:	2700      	movs	r7, #0
 801732a:	42bd      	cmp	r5, r7
 801732c:	d120      	bne.n	8017370 <_printf_common+0xc8>
 801732e:	2000      	movs	r0, #0
 8017330:	e010      	b.n	8017354 <_printf_common+0xac>
 8017332:	3701      	adds	r7, #1
 8017334:	68e3      	ldr	r3, [r4, #12]
 8017336:	682a      	ldr	r2, [r5, #0]
 8017338:	1a9b      	subs	r3, r3, r2
 801733a:	42bb      	cmp	r3, r7
 801733c:	ddd2      	ble.n	80172e4 <_printf_common+0x3c>
 801733e:	0022      	movs	r2, r4
 8017340:	2301      	movs	r3, #1
 8017342:	9901      	ldr	r1, [sp, #4]
 8017344:	9800      	ldr	r0, [sp, #0]
 8017346:	9e08      	ldr	r6, [sp, #32]
 8017348:	3219      	adds	r2, #25
 801734a:	47b0      	blx	r6
 801734c:	1c43      	adds	r3, r0, #1
 801734e:	d1f0      	bne.n	8017332 <_printf_common+0x8a>
 8017350:	2001      	movs	r0, #1
 8017352:	4240      	negs	r0, r0
 8017354:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017356:	2030      	movs	r0, #48	; 0x30
 8017358:	18e1      	adds	r1, r4, r3
 801735a:	3143      	adds	r1, #67	; 0x43
 801735c:	7008      	strb	r0, [r1, #0]
 801735e:	0021      	movs	r1, r4
 8017360:	1c5a      	adds	r2, r3, #1
 8017362:	3145      	adds	r1, #69	; 0x45
 8017364:	7809      	ldrb	r1, [r1, #0]
 8017366:	18a2      	adds	r2, r4, r2
 8017368:	3243      	adds	r2, #67	; 0x43
 801736a:	3302      	adds	r3, #2
 801736c:	7011      	strb	r1, [r2, #0]
 801736e:	e7c1      	b.n	80172f4 <_printf_common+0x4c>
 8017370:	0022      	movs	r2, r4
 8017372:	2301      	movs	r3, #1
 8017374:	9901      	ldr	r1, [sp, #4]
 8017376:	9800      	ldr	r0, [sp, #0]
 8017378:	9e08      	ldr	r6, [sp, #32]
 801737a:	321a      	adds	r2, #26
 801737c:	47b0      	blx	r6
 801737e:	1c43      	adds	r3, r0, #1
 8017380:	d0e6      	beq.n	8017350 <_printf_common+0xa8>
 8017382:	3701      	adds	r7, #1
 8017384:	e7d1      	b.n	801732a <_printf_common+0x82>
	...

08017388 <_printf_i>:
 8017388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801738a:	b08b      	sub	sp, #44	; 0x2c
 801738c:	9206      	str	r2, [sp, #24]
 801738e:	000a      	movs	r2, r1
 8017390:	3243      	adds	r2, #67	; 0x43
 8017392:	9307      	str	r3, [sp, #28]
 8017394:	9005      	str	r0, [sp, #20]
 8017396:	9204      	str	r2, [sp, #16]
 8017398:	7e0a      	ldrb	r2, [r1, #24]
 801739a:	000c      	movs	r4, r1
 801739c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801739e:	2a78      	cmp	r2, #120	; 0x78
 80173a0:	d807      	bhi.n	80173b2 <_printf_i+0x2a>
 80173a2:	2a62      	cmp	r2, #98	; 0x62
 80173a4:	d809      	bhi.n	80173ba <_printf_i+0x32>
 80173a6:	2a00      	cmp	r2, #0
 80173a8:	d100      	bne.n	80173ac <_printf_i+0x24>
 80173aa:	e0c1      	b.n	8017530 <_printf_i+0x1a8>
 80173ac:	2a58      	cmp	r2, #88	; 0x58
 80173ae:	d100      	bne.n	80173b2 <_printf_i+0x2a>
 80173b0:	e08c      	b.n	80174cc <_printf_i+0x144>
 80173b2:	0026      	movs	r6, r4
 80173b4:	3642      	adds	r6, #66	; 0x42
 80173b6:	7032      	strb	r2, [r6, #0]
 80173b8:	e022      	b.n	8017400 <_printf_i+0x78>
 80173ba:	0010      	movs	r0, r2
 80173bc:	3863      	subs	r0, #99	; 0x63
 80173be:	2815      	cmp	r0, #21
 80173c0:	d8f7      	bhi.n	80173b2 <_printf_i+0x2a>
 80173c2:	f7e8 febd 	bl	8000140 <__gnu_thumb1_case_shi>
 80173c6:	0016      	.short	0x0016
 80173c8:	fff6001f 	.word	0xfff6001f
 80173cc:	fff6fff6 	.word	0xfff6fff6
 80173d0:	001ffff6 	.word	0x001ffff6
 80173d4:	fff6fff6 	.word	0xfff6fff6
 80173d8:	fff6fff6 	.word	0xfff6fff6
 80173dc:	003600a8 	.word	0x003600a8
 80173e0:	fff6009a 	.word	0xfff6009a
 80173e4:	00b9fff6 	.word	0x00b9fff6
 80173e8:	0036fff6 	.word	0x0036fff6
 80173ec:	fff6fff6 	.word	0xfff6fff6
 80173f0:	009e      	.short	0x009e
 80173f2:	0026      	movs	r6, r4
 80173f4:	681a      	ldr	r2, [r3, #0]
 80173f6:	3642      	adds	r6, #66	; 0x42
 80173f8:	1d11      	adds	r1, r2, #4
 80173fa:	6019      	str	r1, [r3, #0]
 80173fc:	6813      	ldr	r3, [r2, #0]
 80173fe:	7033      	strb	r3, [r6, #0]
 8017400:	2301      	movs	r3, #1
 8017402:	e0a7      	b.n	8017554 <_printf_i+0x1cc>
 8017404:	6808      	ldr	r0, [r1, #0]
 8017406:	6819      	ldr	r1, [r3, #0]
 8017408:	1d0a      	adds	r2, r1, #4
 801740a:	0605      	lsls	r5, r0, #24
 801740c:	d50b      	bpl.n	8017426 <_printf_i+0x9e>
 801740e:	680d      	ldr	r5, [r1, #0]
 8017410:	601a      	str	r2, [r3, #0]
 8017412:	2d00      	cmp	r5, #0
 8017414:	da03      	bge.n	801741e <_printf_i+0x96>
 8017416:	232d      	movs	r3, #45	; 0x2d
 8017418:	9a04      	ldr	r2, [sp, #16]
 801741a:	426d      	negs	r5, r5
 801741c:	7013      	strb	r3, [r2, #0]
 801741e:	4b61      	ldr	r3, [pc, #388]	; (80175a4 <_printf_i+0x21c>)
 8017420:	270a      	movs	r7, #10
 8017422:	9303      	str	r3, [sp, #12]
 8017424:	e01b      	b.n	801745e <_printf_i+0xd6>
 8017426:	680d      	ldr	r5, [r1, #0]
 8017428:	601a      	str	r2, [r3, #0]
 801742a:	0641      	lsls	r1, r0, #25
 801742c:	d5f1      	bpl.n	8017412 <_printf_i+0x8a>
 801742e:	b22d      	sxth	r5, r5
 8017430:	e7ef      	b.n	8017412 <_printf_i+0x8a>
 8017432:	680d      	ldr	r5, [r1, #0]
 8017434:	6819      	ldr	r1, [r3, #0]
 8017436:	1d08      	adds	r0, r1, #4
 8017438:	6018      	str	r0, [r3, #0]
 801743a:	062e      	lsls	r6, r5, #24
 801743c:	d501      	bpl.n	8017442 <_printf_i+0xba>
 801743e:	680d      	ldr	r5, [r1, #0]
 8017440:	e003      	b.n	801744a <_printf_i+0xc2>
 8017442:	066d      	lsls	r5, r5, #25
 8017444:	d5fb      	bpl.n	801743e <_printf_i+0xb6>
 8017446:	680d      	ldr	r5, [r1, #0]
 8017448:	b2ad      	uxth	r5, r5
 801744a:	4b56      	ldr	r3, [pc, #344]	; (80175a4 <_printf_i+0x21c>)
 801744c:	2708      	movs	r7, #8
 801744e:	9303      	str	r3, [sp, #12]
 8017450:	2a6f      	cmp	r2, #111	; 0x6f
 8017452:	d000      	beq.n	8017456 <_printf_i+0xce>
 8017454:	3702      	adds	r7, #2
 8017456:	0023      	movs	r3, r4
 8017458:	2200      	movs	r2, #0
 801745a:	3343      	adds	r3, #67	; 0x43
 801745c:	701a      	strb	r2, [r3, #0]
 801745e:	6863      	ldr	r3, [r4, #4]
 8017460:	60a3      	str	r3, [r4, #8]
 8017462:	2b00      	cmp	r3, #0
 8017464:	db03      	blt.n	801746e <_printf_i+0xe6>
 8017466:	2204      	movs	r2, #4
 8017468:	6821      	ldr	r1, [r4, #0]
 801746a:	4391      	bics	r1, r2
 801746c:	6021      	str	r1, [r4, #0]
 801746e:	2d00      	cmp	r5, #0
 8017470:	d102      	bne.n	8017478 <_printf_i+0xf0>
 8017472:	9e04      	ldr	r6, [sp, #16]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d00c      	beq.n	8017492 <_printf_i+0x10a>
 8017478:	9e04      	ldr	r6, [sp, #16]
 801747a:	0028      	movs	r0, r5
 801747c:	0039      	movs	r1, r7
 801747e:	f7e8 feef 	bl	8000260 <__aeabi_uidivmod>
 8017482:	9b03      	ldr	r3, [sp, #12]
 8017484:	3e01      	subs	r6, #1
 8017486:	5c5b      	ldrb	r3, [r3, r1]
 8017488:	7033      	strb	r3, [r6, #0]
 801748a:	002b      	movs	r3, r5
 801748c:	0005      	movs	r5, r0
 801748e:	429f      	cmp	r7, r3
 8017490:	d9f3      	bls.n	801747a <_printf_i+0xf2>
 8017492:	2f08      	cmp	r7, #8
 8017494:	d109      	bne.n	80174aa <_printf_i+0x122>
 8017496:	6823      	ldr	r3, [r4, #0]
 8017498:	07db      	lsls	r3, r3, #31
 801749a:	d506      	bpl.n	80174aa <_printf_i+0x122>
 801749c:	6863      	ldr	r3, [r4, #4]
 801749e:	6922      	ldr	r2, [r4, #16]
 80174a0:	4293      	cmp	r3, r2
 80174a2:	dc02      	bgt.n	80174aa <_printf_i+0x122>
 80174a4:	2330      	movs	r3, #48	; 0x30
 80174a6:	3e01      	subs	r6, #1
 80174a8:	7033      	strb	r3, [r6, #0]
 80174aa:	9b04      	ldr	r3, [sp, #16]
 80174ac:	1b9b      	subs	r3, r3, r6
 80174ae:	6123      	str	r3, [r4, #16]
 80174b0:	9b07      	ldr	r3, [sp, #28]
 80174b2:	0021      	movs	r1, r4
 80174b4:	9300      	str	r3, [sp, #0]
 80174b6:	9805      	ldr	r0, [sp, #20]
 80174b8:	9b06      	ldr	r3, [sp, #24]
 80174ba:	aa09      	add	r2, sp, #36	; 0x24
 80174bc:	f7ff fef4 	bl	80172a8 <_printf_common>
 80174c0:	1c43      	adds	r3, r0, #1
 80174c2:	d14c      	bne.n	801755e <_printf_i+0x1d6>
 80174c4:	2001      	movs	r0, #1
 80174c6:	4240      	negs	r0, r0
 80174c8:	b00b      	add	sp, #44	; 0x2c
 80174ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174cc:	3145      	adds	r1, #69	; 0x45
 80174ce:	700a      	strb	r2, [r1, #0]
 80174d0:	4a34      	ldr	r2, [pc, #208]	; (80175a4 <_printf_i+0x21c>)
 80174d2:	9203      	str	r2, [sp, #12]
 80174d4:	681a      	ldr	r2, [r3, #0]
 80174d6:	6821      	ldr	r1, [r4, #0]
 80174d8:	ca20      	ldmia	r2!, {r5}
 80174da:	601a      	str	r2, [r3, #0]
 80174dc:	0608      	lsls	r0, r1, #24
 80174de:	d516      	bpl.n	801750e <_printf_i+0x186>
 80174e0:	07cb      	lsls	r3, r1, #31
 80174e2:	d502      	bpl.n	80174ea <_printf_i+0x162>
 80174e4:	2320      	movs	r3, #32
 80174e6:	4319      	orrs	r1, r3
 80174e8:	6021      	str	r1, [r4, #0]
 80174ea:	2710      	movs	r7, #16
 80174ec:	2d00      	cmp	r5, #0
 80174ee:	d1b2      	bne.n	8017456 <_printf_i+0xce>
 80174f0:	2320      	movs	r3, #32
 80174f2:	6822      	ldr	r2, [r4, #0]
 80174f4:	439a      	bics	r2, r3
 80174f6:	6022      	str	r2, [r4, #0]
 80174f8:	e7ad      	b.n	8017456 <_printf_i+0xce>
 80174fa:	2220      	movs	r2, #32
 80174fc:	6809      	ldr	r1, [r1, #0]
 80174fe:	430a      	orrs	r2, r1
 8017500:	6022      	str	r2, [r4, #0]
 8017502:	0022      	movs	r2, r4
 8017504:	2178      	movs	r1, #120	; 0x78
 8017506:	3245      	adds	r2, #69	; 0x45
 8017508:	7011      	strb	r1, [r2, #0]
 801750a:	4a27      	ldr	r2, [pc, #156]	; (80175a8 <_printf_i+0x220>)
 801750c:	e7e1      	b.n	80174d2 <_printf_i+0x14a>
 801750e:	0648      	lsls	r0, r1, #25
 8017510:	d5e6      	bpl.n	80174e0 <_printf_i+0x158>
 8017512:	b2ad      	uxth	r5, r5
 8017514:	e7e4      	b.n	80174e0 <_printf_i+0x158>
 8017516:	681a      	ldr	r2, [r3, #0]
 8017518:	680d      	ldr	r5, [r1, #0]
 801751a:	1d10      	adds	r0, r2, #4
 801751c:	6949      	ldr	r1, [r1, #20]
 801751e:	6018      	str	r0, [r3, #0]
 8017520:	6813      	ldr	r3, [r2, #0]
 8017522:	062e      	lsls	r6, r5, #24
 8017524:	d501      	bpl.n	801752a <_printf_i+0x1a2>
 8017526:	6019      	str	r1, [r3, #0]
 8017528:	e002      	b.n	8017530 <_printf_i+0x1a8>
 801752a:	066d      	lsls	r5, r5, #25
 801752c:	d5fb      	bpl.n	8017526 <_printf_i+0x19e>
 801752e:	8019      	strh	r1, [r3, #0]
 8017530:	2300      	movs	r3, #0
 8017532:	9e04      	ldr	r6, [sp, #16]
 8017534:	6123      	str	r3, [r4, #16]
 8017536:	e7bb      	b.n	80174b0 <_printf_i+0x128>
 8017538:	681a      	ldr	r2, [r3, #0]
 801753a:	1d11      	adds	r1, r2, #4
 801753c:	6019      	str	r1, [r3, #0]
 801753e:	6816      	ldr	r6, [r2, #0]
 8017540:	2100      	movs	r1, #0
 8017542:	0030      	movs	r0, r6
 8017544:	6862      	ldr	r2, [r4, #4]
 8017546:	f003 f83f 	bl	801a5c8 <memchr>
 801754a:	2800      	cmp	r0, #0
 801754c:	d001      	beq.n	8017552 <_printf_i+0x1ca>
 801754e:	1b80      	subs	r0, r0, r6
 8017550:	6060      	str	r0, [r4, #4]
 8017552:	6863      	ldr	r3, [r4, #4]
 8017554:	6123      	str	r3, [r4, #16]
 8017556:	2300      	movs	r3, #0
 8017558:	9a04      	ldr	r2, [sp, #16]
 801755a:	7013      	strb	r3, [r2, #0]
 801755c:	e7a8      	b.n	80174b0 <_printf_i+0x128>
 801755e:	6923      	ldr	r3, [r4, #16]
 8017560:	0032      	movs	r2, r6
 8017562:	9906      	ldr	r1, [sp, #24]
 8017564:	9805      	ldr	r0, [sp, #20]
 8017566:	9d07      	ldr	r5, [sp, #28]
 8017568:	47a8      	blx	r5
 801756a:	1c43      	adds	r3, r0, #1
 801756c:	d0aa      	beq.n	80174c4 <_printf_i+0x13c>
 801756e:	6823      	ldr	r3, [r4, #0]
 8017570:	079b      	lsls	r3, r3, #30
 8017572:	d415      	bmi.n	80175a0 <_printf_i+0x218>
 8017574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017576:	68e0      	ldr	r0, [r4, #12]
 8017578:	4298      	cmp	r0, r3
 801757a:	daa5      	bge.n	80174c8 <_printf_i+0x140>
 801757c:	0018      	movs	r0, r3
 801757e:	e7a3      	b.n	80174c8 <_printf_i+0x140>
 8017580:	0022      	movs	r2, r4
 8017582:	2301      	movs	r3, #1
 8017584:	9906      	ldr	r1, [sp, #24]
 8017586:	9805      	ldr	r0, [sp, #20]
 8017588:	9e07      	ldr	r6, [sp, #28]
 801758a:	3219      	adds	r2, #25
 801758c:	47b0      	blx	r6
 801758e:	1c43      	adds	r3, r0, #1
 8017590:	d098      	beq.n	80174c4 <_printf_i+0x13c>
 8017592:	3501      	adds	r5, #1
 8017594:	68e3      	ldr	r3, [r4, #12]
 8017596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017598:	1a9b      	subs	r3, r3, r2
 801759a:	42ab      	cmp	r3, r5
 801759c:	dcf0      	bgt.n	8017580 <_printf_i+0x1f8>
 801759e:	e7e9      	b.n	8017574 <_printf_i+0x1ec>
 80175a0:	2500      	movs	r5, #0
 80175a2:	e7f7      	b.n	8017594 <_printf_i+0x20c>
 80175a4:	0801d195 	.word	0x0801d195
 80175a8:	0801d1a6 	.word	0x0801d1a6

080175ac <iprintf>:
 80175ac:	b40f      	push	{r0, r1, r2, r3}
 80175ae:	4b0b      	ldr	r3, [pc, #44]	; (80175dc <iprintf+0x30>)
 80175b0:	b513      	push	{r0, r1, r4, lr}
 80175b2:	681c      	ldr	r4, [r3, #0]
 80175b4:	2c00      	cmp	r4, #0
 80175b6:	d005      	beq.n	80175c4 <iprintf+0x18>
 80175b8:	69a3      	ldr	r3, [r4, #24]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d102      	bne.n	80175c4 <iprintf+0x18>
 80175be:	0020      	movs	r0, r4
 80175c0:	f002 faf8 	bl	8019bb4 <__sinit>
 80175c4:	ab05      	add	r3, sp, #20
 80175c6:	0020      	movs	r0, r4
 80175c8:	9a04      	ldr	r2, [sp, #16]
 80175ca:	68a1      	ldr	r1, [r4, #8]
 80175cc:	9301      	str	r3, [sp, #4]
 80175ce:	f7ff fa45 	bl	8016a5c <_vfiprintf_r>
 80175d2:	bc16      	pop	{r1, r2, r4}
 80175d4:	bc08      	pop	{r3}
 80175d6:	b004      	add	sp, #16
 80175d8:	4718      	bx	r3
 80175da:	46c0      	nop			; (mov r8, r8)
 80175dc:	20000254 	.word	0x20000254

080175e0 <putchar>:
 80175e0:	4b08      	ldr	r3, [pc, #32]	; (8017604 <putchar+0x24>)
 80175e2:	b570      	push	{r4, r5, r6, lr}
 80175e4:	681c      	ldr	r4, [r3, #0]
 80175e6:	0005      	movs	r5, r0
 80175e8:	2c00      	cmp	r4, #0
 80175ea:	d005      	beq.n	80175f8 <putchar+0x18>
 80175ec:	69a3      	ldr	r3, [r4, #24]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d102      	bne.n	80175f8 <putchar+0x18>
 80175f2:	0020      	movs	r0, r4
 80175f4:	f002 fade 	bl	8019bb4 <__sinit>
 80175f8:	0029      	movs	r1, r5
 80175fa:	0020      	movs	r0, r4
 80175fc:	68a2      	ldr	r2, [r4, #8]
 80175fe:	f004 f9d3 	bl	801b9a8 <_putc_r>
 8017602:	bd70      	pop	{r4, r5, r6, pc}
 8017604:	20000254 	.word	0x20000254

08017608 <_puts_r>:
 8017608:	b570      	push	{r4, r5, r6, lr}
 801760a:	0005      	movs	r5, r0
 801760c:	000e      	movs	r6, r1
 801760e:	2800      	cmp	r0, #0
 8017610:	d004      	beq.n	801761c <_puts_r+0x14>
 8017612:	6983      	ldr	r3, [r0, #24]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d101      	bne.n	801761c <_puts_r+0x14>
 8017618:	f002 facc 	bl	8019bb4 <__sinit>
 801761c:	69ab      	ldr	r3, [r5, #24]
 801761e:	68ac      	ldr	r4, [r5, #8]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d102      	bne.n	801762a <_puts_r+0x22>
 8017624:	0028      	movs	r0, r5
 8017626:	f002 fac5 	bl	8019bb4 <__sinit>
 801762a:	4b2d      	ldr	r3, [pc, #180]	; (80176e0 <_puts_r+0xd8>)
 801762c:	429c      	cmp	r4, r3
 801762e:	d122      	bne.n	8017676 <_puts_r+0x6e>
 8017630:	686c      	ldr	r4, [r5, #4]
 8017632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017634:	07db      	lsls	r3, r3, #31
 8017636:	d405      	bmi.n	8017644 <_puts_r+0x3c>
 8017638:	89a3      	ldrh	r3, [r4, #12]
 801763a:	059b      	lsls	r3, r3, #22
 801763c:	d402      	bmi.n	8017644 <_puts_r+0x3c>
 801763e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017640:	f002 ff2d 	bl	801a49e <__retarget_lock_acquire_recursive>
 8017644:	89a3      	ldrh	r3, [r4, #12]
 8017646:	071b      	lsls	r3, r3, #28
 8017648:	d502      	bpl.n	8017650 <_puts_r+0x48>
 801764a:	6923      	ldr	r3, [r4, #16]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d129      	bne.n	80176a4 <_puts_r+0x9c>
 8017650:	0021      	movs	r1, r4
 8017652:	0028      	movs	r0, r5
 8017654:	f001 fa32 	bl	8018abc <__swsetup_r>
 8017658:	2800      	cmp	r0, #0
 801765a:	d023      	beq.n	80176a4 <_puts_r+0x9c>
 801765c:	2501      	movs	r5, #1
 801765e:	426d      	negs	r5, r5
 8017660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017662:	07db      	lsls	r3, r3, #31
 8017664:	d405      	bmi.n	8017672 <_puts_r+0x6a>
 8017666:	89a3      	ldrh	r3, [r4, #12]
 8017668:	059b      	lsls	r3, r3, #22
 801766a:	d402      	bmi.n	8017672 <_puts_r+0x6a>
 801766c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801766e:	f002 ff17 	bl	801a4a0 <__retarget_lock_release_recursive>
 8017672:	0028      	movs	r0, r5
 8017674:	bd70      	pop	{r4, r5, r6, pc}
 8017676:	4b1b      	ldr	r3, [pc, #108]	; (80176e4 <_puts_r+0xdc>)
 8017678:	429c      	cmp	r4, r3
 801767a:	d101      	bne.n	8017680 <_puts_r+0x78>
 801767c:	68ac      	ldr	r4, [r5, #8]
 801767e:	e7d8      	b.n	8017632 <_puts_r+0x2a>
 8017680:	4b19      	ldr	r3, [pc, #100]	; (80176e8 <_puts_r+0xe0>)
 8017682:	429c      	cmp	r4, r3
 8017684:	d1d5      	bne.n	8017632 <_puts_r+0x2a>
 8017686:	68ec      	ldr	r4, [r5, #12]
 8017688:	e7d3      	b.n	8017632 <_puts_r+0x2a>
 801768a:	3601      	adds	r6, #1
 801768c:	60a3      	str	r3, [r4, #8]
 801768e:	2b00      	cmp	r3, #0
 8017690:	da04      	bge.n	801769c <_puts_r+0x94>
 8017692:	69a2      	ldr	r2, [r4, #24]
 8017694:	429a      	cmp	r2, r3
 8017696:	dc16      	bgt.n	80176c6 <_puts_r+0xbe>
 8017698:	290a      	cmp	r1, #10
 801769a:	d014      	beq.n	80176c6 <_puts_r+0xbe>
 801769c:	6823      	ldr	r3, [r4, #0]
 801769e:	1c5a      	adds	r2, r3, #1
 80176a0:	6022      	str	r2, [r4, #0]
 80176a2:	7019      	strb	r1, [r3, #0]
 80176a4:	68a3      	ldr	r3, [r4, #8]
 80176a6:	7831      	ldrb	r1, [r6, #0]
 80176a8:	3b01      	subs	r3, #1
 80176aa:	2900      	cmp	r1, #0
 80176ac:	d1ed      	bne.n	801768a <_puts_r+0x82>
 80176ae:	60a3      	str	r3, [r4, #8]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	da0f      	bge.n	80176d4 <_puts_r+0xcc>
 80176b4:	0028      	movs	r0, r5
 80176b6:	0022      	movs	r2, r4
 80176b8:	310a      	adds	r1, #10
 80176ba:	f001 f995 	bl	80189e8 <__swbuf_r>
 80176be:	250a      	movs	r5, #10
 80176c0:	1c43      	adds	r3, r0, #1
 80176c2:	d1cd      	bne.n	8017660 <_puts_r+0x58>
 80176c4:	e7ca      	b.n	801765c <_puts_r+0x54>
 80176c6:	0022      	movs	r2, r4
 80176c8:	0028      	movs	r0, r5
 80176ca:	f001 f98d 	bl	80189e8 <__swbuf_r>
 80176ce:	1c43      	adds	r3, r0, #1
 80176d0:	d1e8      	bne.n	80176a4 <_puts_r+0x9c>
 80176d2:	e7c3      	b.n	801765c <_puts_r+0x54>
 80176d4:	250a      	movs	r5, #10
 80176d6:	6823      	ldr	r3, [r4, #0]
 80176d8:	1c5a      	adds	r2, r3, #1
 80176da:	6022      	str	r2, [r4, #0]
 80176dc:	701d      	strb	r5, [r3, #0]
 80176de:	e7bf      	b.n	8017660 <_puts_r+0x58>
 80176e0:	0801d3bc 	.word	0x0801d3bc
 80176e4:	0801d3dc 	.word	0x0801d3dc
 80176e8:	0801d39c 	.word	0x0801d39c

080176ec <puts>:
 80176ec:	b510      	push	{r4, lr}
 80176ee:	4b03      	ldr	r3, [pc, #12]	; (80176fc <puts+0x10>)
 80176f0:	0001      	movs	r1, r0
 80176f2:	6818      	ldr	r0, [r3, #0]
 80176f4:	f7ff ff88 	bl	8017608 <_puts_r>
 80176f8:	bd10      	pop	{r4, pc}
 80176fa:	46c0      	nop			; (mov r8, r8)
 80176fc:	20000254 	.word	0x20000254

08017700 <_sbrk_r>:
 8017700:	2300      	movs	r3, #0
 8017702:	b570      	push	{r4, r5, r6, lr}
 8017704:	4d06      	ldr	r5, [pc, #24]	; (8017720 <_sbrk_r+0x20>)
 8017706:	0004      	movs	r4, r0
 8017708:	0008      	movs	r0, r1
 801770a:	602b      	str	r3, [r5, #0]
 801770c:	f7ed f81e 	bl	800474c <_sbrk>
 8017710:	1c43      	adds	r3, r0, #1
 8017712:	d103      	bne.n	801771c <_sbrk_r+0x1c>
 8017714:	682b      	ldr	r3, [r5, #0]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d000      	beq.n	801771c <_sbrk_r+0x1c>
 801771a:	6023      	str	r3, [r4, #0]
 801771c:	bd70      	pop	{r4, r5, r6, pc}
 801771e:	46c0      	nop			; (mov r8, r8)
 8017720:	200019f4 	.word	0x200019f4

08017724 <setvbuf>:
 8017724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017726:	001d      	movs	r5, r3
 8017728:	4b5d      	ldr	r3, [pc, #372]	; (80178a0 <setvbuf+0x17c>)
 801772a:	b085      	sub	sp, #20
 801772c:	681e      	ldr	r6, [r3, #0]
 801772e:	0004      	movs	r4, r0
 8017730:	000f      	movs	r7, r1
 8017732:	9200      	str	r2, [sp, #0]
 8017734:	2e00      	cmp	r6, #0
 8017736:	d005      	beq.n	8017744 <setvbuf+0x20>
 8017738:	69b3      	ldr	r3, [r6, #24]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d102      	bne.n	8017744 <setvbuf+0x20>
 801773e:	0030      	movs	r0, r6
 8017740:	f002 fa38 	bl	8019bb4 <__sinit>
 8017744:	4b57      	ldr	r3, [pc, #348]	; (80178a4 <setvbuf+0x180>)
 8017746:	429c      	cmp	r4, r3
 8017748:	d161      	bne.n	801780e <setvbuf+0xea>
 801774a:	6874      	ldr	r4, [r6, #4]
 801774c:	9b00      	ldr	r3, [sp, #0]
 801774e:	2b02      	cmp	r3, #2
 8017750:	d005      	beq.n	801775e <setvbuf+0x3a>
 8017752:	2b01      	cmp	r3, #1
 8017754:	d900      	bls.n	8017758 <setvbuf+0x34>
 8017756:	e09d      	b.n	8017894 <setvbuf+0x170>
 8017758:	2d00      	cmp	r5, #0
 801775a:	da00      	bge.n	801775e <setvbuf+0x3a>
 801775c:	e09a      	b.n	8017894 <setvbuf+0x170>
 801775e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017760:	07db      	lsls	r3, r3, #31
 8017762:	d405      	bmi.n	8017770 <setvbuf+0x4c>
 8017764:	89a3      	ldrh	r3, [r4, #12]
 8017766:	059b      	lsls	r3, r3, #22
 8017768:	d402      	bmi.n	8017770 <setvbuf+0x4c>
 801776a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801776c:	f002 fe97 	bl	801a49e <__retarget_lock_acquire_recursive>
 8017770:	0021      	movs	r1, r4
 8017772:	0030      	movs	r0, r6
 8017774:	f002 f966 	bl	8019a44 <_fflush_r>
 8017778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801777a:	2900      	cmp	r1, #0
 801777c:	d008      	beq.n	8017790 <setvbuf+0x6c>
 801777e:	0023      	movs	r3, r4
 8017780:	3344      	adds	r3, #68	; 0x44
 8017782:	4299      	cmp	r1, r3
 8017784:	d002      	beq.n	801778c <setvbuf+0x68>
 8017786:	0030      	movs	r0, r6
 8017788:	f7ff f85e 	bl	8016848 <_free_r>
 801778c:	2300      	movs	r3, #0
 801778e:	6363      	str	r3, [r4, #52]	; 0x34
 8017790:	2300      	movs	r3, #0
 8017792:	61a3      	str	r3, [r4, #24]
 8017794:	6063      	str	r3, [r4, #4]
 8017796:	89a3      	ldrh	r3, [r4, #12]
 8017798:	061b      	lsls	r3, r3, #24
 801779a:	d503      	bpl.n	80177a4 <setvbuf+0x80>
 801779c:	0030      	movs	r0, r6
 801779e:	6921      	ldr	r1, [r4, #16]
 80177a0:	f7ff f852 	bl	8016848 <_free_r>
 80177a4:	89a3      	ldrh	r3, [r4, #12]
 80177a6:	4a40      	ldr	r2, [pc, #256]	; (80178a8 <setvbuf+0x184>)
 80177a8:	4013      	ands	r3, r2
 80177aa:	81a3      	strh	r3, [r4, #12]
 80177ac:	9b00      	ldr	r3, [sp, #0]
 80177ae:	2b02      	cmp	r3, #2
 80177b0:	d100      	bne.n	80177b4 <setvbuf+0x90>
 80177b2:	e069      	b.n	8017888 <setvbuf+0x164>
 80177b4:	ab03      	add	r3, sp, #12
 80177b6:	0021      	movs	r1, r4
 80177b8:	0030      	movs	r0, r6
 80177ba:	aa02      	add	r2, sp, #8
 80177bc:	f002 fe86 	bl	801a4cc <__swhatbuf_r>
 80177c0:	89a3      	ldrh	r3, [r4, #12]
 80177c2:	4303      	orrs	r3, r0
 80177c4:	81a3      	strh	r3, [r4, #12]
 80177c6:	2d00      	cmp	r5, #0
 80177c8:	d12b      	bne.n	8017822 <setvbuf+0xfe>
 80177ca:	9d02      	ldr	r5, [sp, #8]
 80177cc:	0028      	movs	r0, r5
 80177ce:	f7ff f807 	bl	80167e0 <malloc>
 80177d2:	1e07      	subs	r7, r0, #0
 80177d4:	d153      	bne.n	801787e <setvbuf+0x15a>
 80177d6:	9b02      	ldr	r3, [sp, #8]
 80177d8:	9301      	str	r3, [sp, #4]
 80177da:	42ab      	cmp	r3, r5
 80177dc:	d149      	bne.n	8017872 <setvbuf+0x14e>
 80177de:	2501      	movs	r5, #1
 80177e0:	426d      	negs	r5, r5
 80177e2:	2302      	movs	r3, #2
 80177e4:	89a2      	ldrh	r2, [r4, #12]
 80177e6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80177e8:	4313      	orrs	r3, r2
 80177ea:	2200      	movs	r2, #0
 80177ec:	60a2      	str	r2, [r4, #8]
 80177ee:	0022      	movs	r2, r4
 80177f0:	3247      	adds	r2, #71	; 0x47
 80177f2:	6022      	str	r2, [r4, #0]
 80177f4:	6122      	str	r2, [r4, #16]
 80177f6:	2201      	movs	r2, #1
 80177f8:	b21b      	sxth	r3, r3
 80177fa:	81a3      	strh	r3, [r4, #12]
 80177fc:	6162      	str	r2, [r4, #20]
 80177fe:	4211      	tst	r1, r2
 8017800:	d134      	bne.n	801786c <setvbuf+0x148>
 8017802:	059b      	lsls	r3, r3, #22
 8017804:	d432      	bmi.n	801786c <setvbuf+0x148>
 8017806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017808:	f002 fe4a 	bl	801a4a0 <__retarget_lock_release_recursive>
 801780c:	e02e      	b.n	801786c <setvbuf+0x148>
 801780e:	4b27      	ldr	r3, [pc, #156]	; (80178ac <setvbuf+0x188>)
 8017810:	429c      	cmp	r4, r3
 8017812:	d101      	bne.n	8017818 <setvbuf+0xf4>
 8017814:	68b4      	ldr	r4, [r6, #8]
 8017816:	e799      	b.n	801774c <setvbuf+0x28>
 8017818:	4b25      	ldr	r3, [pc, #148]	; (80178b0 <setvbuf+0x18c>)
 801781a:	429c      	cmp	r4, r3
 801781c:	d196      	bne.n	801774c <setvbuf+0x28>
 801781e:	68f4      	ldr	r4, [r6, #12]
 8017820:	e794      	b.n	801774c <setvbuf+0x28>
 8017822:	2f00      	cmp	r7, #0
 8017824:	d0d2      	beq.n	80177cc <setvbuf+0xa8>
 8017826:	69b3      	ldr	r3, [r6, #24]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d102      	bne.n	8017832 <setvbuf+0x10e>
 801782c:	0030      	movs	r0, r6
 801782e:	f002 f9c1 	bl	8019bb4 <__sinit>
 8017832:	9b00      	ldr	r3, [sp, #0]
 8017834:	2b01      	cmp	r3, #1
 8017836:	d102      	bne.n	801783e <setvbuf+0x11a>
 8017838:	89a2      	ldrh	r2, [r4, #12]
 801783a:	4313      	orrs	r3, r2
 801783c:	81a3      	strh	r3, [r4, #12]
 801783e:	89a2      	ldrh	r2, [r4, #12]
 8017840:	2308      	movs	r3, #8
 8017842:	0011      	movs	r1, r2
 8017844:	6027      	str	r7, [r4, #0]
 8017846:	6127      	str	r7, [r4, #16]
 8017848:	6165      	str	r5, [r4, #20]
 801784a:	4019      	ands	r1, r3
 801784c:	421a      	tst	r2, r3
 801784e:	d01f      	beq.n	8017890 <setvbuf+0x16c>
 8017850:	07d3      	lsls	r3, r2, #31
 8017852:	d51b      	bpl.n	801788c <setvbuf+0x168>
 8017854:	2300      	movs	r3, #0
 8017856:	426d      	negs	r5, r5
 8017858:	60a3      	str	r3, [r4, #8]
 801785a:	61a5      	str	r5, [r4, #24]
 801785c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801785e:	2301      	movs	r3, #1
 8017860:	000d      	movs	r5, r1
 8017862:	401d      	ands	r5, r3
 8017864:	4219      	tst	r1, r3
 8017866:	d118      	bne.n	801789a <setvbuf+0x176>
 8017868:	0593      	lsls	r3, r2, #22
 801786a:	d5cc      	bpl.n	8017806 <setvbuf+0xe2>
 801786c:	0028      	movs	r0, r5
 801786e:	b005      	add	sp, #20
 8017870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017872:	9801      	ldr	r0, [sp, #4]
 8017874:	f7fe ffb4 	bl	80167e0 <malloc>
 8017878:	9d01      	ldr	r5, [sp, #4]
 801787a:	1e07      	subs	r7, r0, #0
 801787c:	d0af      	beq.n	80177de <setvbuf+0xba>
 801787e:	2380      	movs	r3, #128	; 0x80
 8017880:	89a2      	ldrh	r2, [r4, #12]
 8017882:	4313      	orrs	r3, r2
 8017884:	81a3      	strh	r3, [r4, #12]
 8017886:	e7ce      	b.n	8017826 <setvbuf+0x102>
 8017888:	2500      	movs	r5, #0
 801788a:	e7aa      	b.n	80177e2 <setvbuf+0xbe>
 801788c:	60a5      	str	r5, [r4, #8]
 801788e:	e7e5      	b.n	801785c <setvbuf+0x138>
 8017890:	60a1      	str	r1, [r4, #8]
 8017892:	e7e3      	b.n	801785c <setvbuf+0x138>
 8017894:	2501      	movs	r5, #1
 8017896:	426d      	negs	r5, r5
 8017898:	e7e8      	b.n	801786c <setvbuf+0x148>
 801789a:	2500      	movs	r5, #0
 801789c:	e7e6      	b.n	801786c <setvbuf+0x148>
 801789e:	46c0      	nop			; (mov r8, r8)
 80178a0:	20000254 	.word	0x20000254
 80178a4:	0801d3bc 	.word	0x0801d3bc
 80178a8:	fffff35c 	.word	0xfffff35c
 80178ac:	0801d3dc 	.word	0x0801d3dc
 80178b0:	0801d39c 	.word	0x0801d39c

080178b4 <sniprintf>:
 80178b4:	b40c      	push	{r2, r3}
 80178b6:	b530      	push	{r4, r5, lr}
 80178b8:	4b17      	ldr	r3, [pc, #92]	; (8017918 <sniprintf+0x64>)
 80178ba:	000c      	movs	r4, r1
 80178bc:	681d      	ldr	r5, [r3, #0]
 80178be:	b09d      	sub	sp, #116	; 0x74
 80178c0:	2900      	cmp	r1, #0
 80178c2:	da08      	bge.n	80178d6 <sniprintf+0x22>
 80178c4:	238b      	movs	r3, #139	; 0x8b
 80178c6:	2001      	movs	r0, #1
 80178c8:	602b      	str	r3, [r5, #0]
 80178ca:	4240      	negs	r0, r0
 80178cc:	b01d      	add	sp, #116	; 0x74
 80178ce:	bc30      	pop	{r4, r5}
 80178d0:	bc08      	pop	{r3}
 80178d2:	b002      	add	sp, #8
 80178d4:	4718      	bx	r3
 80178d6:	2382      	movs	r3, #130	; 0x82
 80178d8:	466a      	mov	r2, sp
 80178da:	009b      	lsls	r3, r3, #2
 80178dc:	8293      	strh	r3, [r2, #20]
 80178de:	2300      	movs	r3, #0
 80178e0:	9002      	str	r0, [sp, #8]
 80178e2:	9006      	str	r0, [sp, #24]
 80178e4:	4299      	cmp	r1, r3
 80178e6:	d000      	beq.n	80178ea <sniprintf+0x36>
 80178e8:	1e4b      	subs	r3, r1, #1
 80178ea:	9304      	str	r3, [sp, #16]
 80178ec:	9307      	str	r3, [sp, #28]
 80178ee:	2301      	movs	r3, #1
 80178f0:	466a      	mov	r2, sp
 80178f2:	425b      	negs	r3, r3
 80178f4:	82d3      	strh	r3, [r2, #22]
 80178f6:	0028      	movs	r0, r5
 80178f8:	ab21      	add	r3, sp, #132	; 0x84
 80178fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80178fc:	a902      	add	r1, sp, #8
 80178fe:	9301      	str	r3, [sp, #4]
 8017900:	f003 fc16 	bl	801b130 <_svfiprintf_r>
 8017904:	1c43      	adds	r3, r0, #1
 8017906:	da01      	bge.n	801790c <sniprintf+0x58>
 8017908:	238b      	movs	r3, #139	; 0x8b
 801790a:	602b      	str	r3, [r5, #0]
 801790c:	2c00      	cmp	r4, #0
 801790e:	d0dd      	beq.n	80178cc <sniprintf+0x18>
 8017910:	2300      	movs	r3, #0
 8017912:	9a02      	ldr	r2, [sp, #8]
 8017914:	7013      	strb	r3, [r2, #0]
 8017916:	e7d9      	b.n	80178cc <sniprintf+0x18>
 8017918:	20000254 	.word	0x20000254

0801791c <siprintf>:
 801791c:	b40e      	push	{r1, r2, r3}
 801791e:	b500      	push	{lr}
 8017920:	490b      	ldr	r1, [pc, #44]	; (8017950 <siprintf+0x34>)
 8017922:	b09c      	sub	sp, #112	; 0x70
 8017924:	ab1d      	add	r3, sp, #116	; 0x74
 8017926:	9002      	str	r0, [sp, #8]
 8017928:	9006      	str	r0, [sp, #24]
 801792a:	9107      	str	r1, [sp, #28]
 801792c:	9104      	str	r1, [sp, #16]
 801792e:	4809      	ldr	r0, [pc, #36]	; (8017954 <siprintf+0x38>)
 8017930:	4909      	ldr	r1, [pc, #36]	; (8017958 <siprintf+0x3c>)
 8017932:	cb04      	ldmia	r3!, {r2}
 8017934:	9105      	str	r1, [sp, #20]
 8017936:	6800      	ldr	r0, [r0, #0]
 8017938:	a902      	add	r1, sp, #8
 801793a:	9301      	str	r3, [sp, #4]
 801793c:	f003 fbf8 	bl	801b130 <_svfiprintf_r>
 8017940:	2300      	movs	r3, #0
 8017942:	9a02      	ldr	r2, [sp, #8]
 8017944:	7013      	strb	r3, [r2, #0]
 8017946:	b01c      	add	sp, #112	; 0x70
 8017948:	bc08      	pop	{r3}
 801794a:	b003      	add	sp, #12
 801794c:	4718      	bx	r3
 801794e:	46c0      	nop			; (mov r8, r8)
 8017950:	7fffffff 	.word	0x7fffffff
 8017954:	20000254 	.word	0x20000254
 8017958:	ffff0208 	.word	0xffff0208

0801795c <siscanf>:
 801795c:	b40e      	push	{r1, r2, r3}
 801795e:	b530      	push	{r4, r5, lr}
 8017960:	2381      	movs	r3, #129	; 0x81
 8017962:	b09c      	sub	sp, #112	; 0x70
 8017964:	466a      	mov	r2, sp
 8017966:	ac1f      	add	r4, sp, #124	; 0x7c
 8017968:	009b      	lsls	r3, r3, #2
 801796a:	cc20      	ldmia	r4!, {r5}
 801796c:	8293      	strh	r3, [r2, #20]
 801796e:	9002      	str	r0, [sp, #8]
 8017970:	9006      	str	r0, [sp, #24]
 8017972:	f7e8 fbd3 	bl	800011c <strlen>
 8017976:	4b0b      	ldr	r3, [pc, #44]	; (80179a4 <siscanf+0x48>)
 8017978:	466a      	mov	r2, sp
 801797a:	930b      	str	r3, [sp, #44]	; 0x2c
 801797c:	2300      	movs	r3, #0
 801797e:	9003      	str	r0, [sp, #12]
 8017980:	9007      	str	r0, [sp, #28]
 8017982:	4809      	ldr	r0, [pc, #36]	; (80179a8 <siscanf+0x4c>)
 8017984:	930f      	str	r3, [sp, #60]	; 0x3c
 8017986:	9314      	str	r3, [sp, #80]	; 0x50
 8017988:	3b01      	subs	r3, #1
 801798a:	82d3      	strh	r3, [r2, #22]
 801798c:	a902      	add	r1, sp, #8
 801798e:	0023      	movs	r3, r4
 8017990:	002a      	movs	r2, r5
 8017992:	6800      	ldr	r0, [r0, #0]
 8017994:	9401      	str	r4, [sp, #4]
 8017996:	f003 fd27 	bl	801b3e8 <__ssvfiscanf_r>
 801799a:	b01c      	add	sp, #112	; 0x70
 801799c:	bc30      	pop	{r4, r5}
 801799e:	bc08      	pop	{r3}
 80179a0:	b003      	add	sp, #12
 80179a2:	4718      	bx	r3
 80179a4:	080179d5 	.word	0x080179d5
 80179a8:	20000254 	.word	0x20000254

080179ac <__sread>:
 80179ac:	b570      	push	{r4, r5, r6, lr}
 80179ae:	000c      	movs	r4, r1
 80179b0:	250e      	movs	r5, #14
 80179b2:	5f49      	ldrsh	r1, [r1, r5]
 80179b4:	f004 f842 	bl	801ba3c <_read_r>
 80179b8:	2800      	cmp	r0, #0
 80179ba:	db03      	blt.n	80179c4 <__sread+0x18>
 80179bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80179be:	181b      	adds	r3, r3, r0
 80179c0:	6563      	str	r3, [r4, #84]	; 0x54
 80179c2:	bd70      	pop	{r4, r5, r6, pc}
 80179c4:	89a3      	ldrh	r3, [r4, #12]
 80179c6:	4a02      	ldr	r2, [pc, #8]	; (80179d0 <__sread+0x24>)
 80179c8:	4013      	ands	r3, r2
 80179ca:	81a3      	strh	r3, [r4, #12]
 80179cc:	e7f9      	b.n	80179c2 <__sread+0x16>
 80179ce:	46c0      	nop			; (mov r8, r8)
 80179d0:	ffffefff 	.word	0xffffefff

080179d4 <__seofread>:
 80179d4:	2000      	movs	r0, #0
 80179d6:	4770      	bx	lr

080179d8 <__swrite>:
 80179d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179da:	001f      	movs	r7, r3
 80179dc:	898b      	ldrh	r3, [r1, #12]
 80179de:	0005      	movs	r5, r0
 80179e0:	000c      	movs	r4, r1
 80179e2:	0016      	movs	r6, r2
 80179e4:	05db      	lsls	r3, r3, #23
 80179e6:	d505      	bpl.n	80179f4 <__swrite+0x1c>
 80179e8:	230e      	movs	r3, #14
 80179ea:	5ec9      	ldrsh	r1, [r1, r3]
 80179ec:	2200      	movs	r2, #0
 80179ee:	2302      	movs	r3, #2
 80179f0:	f002 fd58 	bl	801a4a4 <_lseek_r>
 80179f4:	89a3      	ldrh	r3, [r4, #12]
 80179f6:	4a05      	ldr	r2, [pc, #20]	; (8017a0c <__swrite+0x34>)
 80179f8:	0028      	movs	r0, r5
 80179fa:	4013      	ands	r3, r2
 80179fc:	81a3      	strh	r3, [r4, #12]
 80179fe:	0032      	movs	r2, r6
 8017a00:	230e      	movs	r3, #14
 8017a02:	5ee1      	ldrsh	r1, [r4, r3]
 8017a04:	003b      	movs	r3, r7
 8017a06:	f001 f845 	bl	8018a94 <_write_r>
 8017a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a0c:	ffffefff 	.word	0xffffefff

08017a10 <__sseek>:
 8017a10:	b570      	push	{r4, r5, r6, lr}
 8017a12:	000c      	movs	r4, r1
 8017a14:	250e      	movs	r5, #14
 8017a16:	5f49      	ldrsh	r1, [r1, r5]
 8017a18:	f002 fd44 	bl	801a4a4 <_lseek_r>
 8017a1c:	89a3      	ldrh	r3, [r4, #12]
 8017a1e:	1c42      	adds	r2, r0, #1
 8017a20:	d103      	bne.n	8017a2a <__sseek+0x1a>
 8017a22:	4a05      	ldr	r2, [pc, #20]	; (8017a38 <__sseek+0x28>)
 8017a24:	4013      	ands	r3, r2
 8017a26:	81a3      	strh	r3, [r4, #12]
 8017a28:	bd70      	pop	{r4, r5, r6, pc}
 8017a2a:	2280      	movs	r2, #128	; 0x80
 8017a2c:	0152      	lsls	r2, r2, #5
 8017a2e:	4313      	orrs	r3, r2
 8017a30:	81a3      	strh	r3, [r4, #12]
 8017a32:	6560      	str	r0, [r4, #84]	; 0x54
 8017a34:	e7f8      	b.n	8017a28 <__sseek+0x18>
 8017a36:	46c0      	nop			; (mov r8, r8)
 8017a38:	ffffefff 	.word	0xffffefff

08017a3c <__sclose>:
 8017a3c:	b510      	push	{r4, lr}
 8017a3e:	230e      	movs	r3, #14
 8017a40:	5ec9      	ldrsh	r1, [r1, r3]
 8017a42:	f001 f8bb 	bl	8018bbc <_close_r>
 8017a46:	bd10      	pop	{r4, pc}

08017a48 <strchr>:
 8017a48:	b2c9      	uxtb	r1, r1
 8017a4a:	7803      	ldrb	r3, [r0, #0]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d004      	beq.n	8017a5a <strchr+0x12>
 8017a50:	428b      	cmp	r3, r1
 8017a52:	d100      	bne.n	8017a56 <strchr+0xe>
 8017a54:	4770      	bx	lr
 8017a56:	3001      	adds	r0, #1
 8017a58:	e7f7      	b.n	8017a4a <strchr+0x2>
 8017a5a:	424b      	negs	r3, r1
 8017a5c:	4159      	adcs	r1, r3
 8017a5e:	4249      	negs	r1, r1
 8017a60:	4008      	ands	r0, r1
 8017a62:	e7f7      	b.n	8017a54 <strchr+0xc>

08017a64 <strcpy>:
 8017a64:	0003      	movs	r3, r0
 8017a66:	780a      	ldrb	r2, [r1, #0]
 8017a68:	3101      	adds	r1, #1
 8017a6a:	701a      	strb	r2, [r3, #0]
 8017a6c:	3301      	adds	r3, #1
 8017a6e:	2a00      	cmp	r2, #0
 8017a70:	d1f9      	bne.n	8017a66 <strcpy+0x2>
 8017a72:	4770      	bx	lr

08017a74 <strcspn>:
 8017a74:	0003      	movs	r3, r0
 8017a76:	b530      	push	{r4, r5, lr}
 8017a78:	781c      	ldrb	r4, [r3, #0]
 8017a7a:	2c00      	cmp	r4, #0
 8017a7c:	d109      	bne.n	8017a92 <strcspn+0x1e>
 8017a7e:	1a18      	subs	r0, r3, r0
 8017a80:	bd30      	pop	{r4, r5, pc}
 8017a82:	42a5      	cmp	r5, r4
 8017a84:	d0fb      	beq.n	8017a7e <strcspn+0xa>
 8017a86:	3201      	adds	r2, #1
 8017a88:	7815      	ldrb	r5, [r2, #0]
 8017a8a:	2d00      	cmp	r5, #0
 8017a8c:	d1f9      	bne.n	8017a82 <strcspn+0xe>
 8017a8e:	3301      	adds	r3, #1
 8017a90:	e7f2      	b.n	8017a78 <strcspn+0x4>
 8017a92:	000a      	movs	r2, r1
 8017a94:	e7f8      	b.n	8017a88 <strcspn+0x14>

08017a96 <strncmp>:
 8017a96:	b530      	push	{r4, r5, lr}
 8017a98:	0005      	movs	r5, r0
 8017a9a:	1e10      	subs	r0, r2, #0
 8017a9c:	d008      	beq.n	8017ab0 <strncmp+0x1a>
 8017a9e:	2400      	movs	r4, #0
 8017aa0:	3a01      	subs	r2, #1
 8017aa2:	5d2b      	ldrb	r3, [r5, r4]
 8017aa4:	5d08      	ldrb	r0, [r1, r4]
 8017aa6:	4283      	cmp	r3, r0
 8017aa8:	d101      	bne.n	8017aae <strncmp+0x18>
 8017aaa:	4294      	cmp	r4, r2
 8017aac:	d101      	bne.n	8017ab2 <strncmp+0x1c>
 8017aae:	1a18      	subs	r0, r3, r0
 8017ab0:	bd30      	pop	{r4, r5, pc}
 8017ab2:	3401      	adds	r4, #1
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d1f4      	bne.n	8017aa2 <strncmp+0xc>
 8017ab8:	e7f9      	b.n	8017aae <strncmp+0x18>

08017aba <strncpy>:
 8017aba:	0003      	movs	r3, r0
 8017abc:	b530      	push	{r4, r5, lr}
 8017abe:	001d      	movs	r5, r3
 8017ac0:	2a00      	cmp	r2, #0
 8017ac2:	d006      	beq.n	8017ad2 <strncpy+0x18>
 8017ac4:	780c      	ldrb	r4, [r1, #0]
 8017ac6:	3a01      	subs	r2, #1
 8017ac8:	3301      	adds	r3, #1
 8017aca:	702c      	strb	r4, [r5, #0]
 8017acc:	3101      	adds	r1, #1
 8017ace:	2c00      	cmp	r4, #0
 8017ad0:	d1f5      	bne.n	8017abe <strncpy+0x4>
 8017ad2:	2100      	movs	r1, #0
 8017ad4:	189a      	adds	r2, r3, r2
 8017ad6:	4293      	cmp	r3, r2
 8017ad8:	d100      	bne.n	8017adc <strncpy+0x22>
 8017ada:	bd30      	pop	{r4, r5, pc}
 8017adc:	7019      	strb	r1, [r3, #0]
 8017ade:	3301      	adds	r3, #1
 8017ae0:	e7f9      	b.n	8017ad6 <strncpy+0x1c>

08017ae2 <strspn>:
 8017ae2:	0003      	movs	r3, r0
 8017ae4:	b530      	push	{r4, r5, lr}
 8017ae6:	781c      	ldrb	r4, [r3, #0]
 8017ae8:	2c00      	cmp	r4, #0
 8017aea:	d007      	beq.n	8017afc <strspn+0x1a>
 8017aec:	000a      	movs	r2, r1
 8017aee:	e002      	b.n	8017af6 <strspn+0x14>
 8017af0:	42a5      	cmp	r5, r4
 8017af2:	d005      	beq.n	8017b00 <strspn+0x1e>
 8017af4:	3201      	adds	r2, #1
 8017af6:	7815      	ldrb	r5, [r2, #0]
 8017af8:	2d00      	cmp	r5, #0
 8017afa:	d1f9      	bne.n	8017af0 <strspn+0xe>
 8017afc:	1a18      	subs	r0, r3, r0
 8017afe:	bd30      	pop	{r4, r5, pc}
 8017b00:	3301      	adds	r3, #1
 8017b02:	e7f0      	b.n	8017ae6 <strspn+0x4>

08017b04 <sulp>:
 8017b04:	b570      	push	{r4, r5, r6, lr}
 8017b06:	0016      	movs	r6, r2
 8017b08:	000d      	movs	r5, r1
 8017b0a:	f003 f90f 	bl	801ad2c <__ulp>
 8017b0e:	2e00      	cmp	r6, #0
 8017b10:	d00d      	beq.n	8017b2e <sulp+0x2a>
 8017b12:	236b      	movs	r3, #107	; 0x6b
 8017b14:	006a      	lsls	r2, r5, #1
 8017b16:	0d52      	lsrs	r2, r2, #21
 8017b18:	1a9b      	subs	r3, r3, r2
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	dd07      	ble.n	8017b2e <sulp+0x2a>
 8017b1e:	2400      	movs	r4, #0
 8017b20:	4a03      	ldr	r2, [pc, #12]	; (8017b30 <sulp+0x2c>)
 8017b22:	051b      	lsls	r3, r3, #20
 8017b24:	189d      	adds	r5, r3, r2
 8017b26:	002b      	movs	r3, r5
 8017b28:	0022      	movs	r2, r4
 8017b2a:	f7e9 fccd 	bl	80014c8 <__aeabi_dmul>
 8017b2e:	bd70      	pop	{r4, r5, r6, pc}
 8017b30:	3ff00000 	.word	0x3ff00000

08017b34 <_strtod_l>:
 8017b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b36:	001d      	movs	r5, r3
 8017b38:	2300      	movs	r3, #0
 8017b3a:	b0a5      	sub	sp, #148	; 0x94
 8017b3c:	9320      	str	r3, [sp, #128]	; 0x80
 8017b3e:	4bac      	ldr	r3, [pc, #688]	; (8017df0 <_strtod_l+0x2bc>)
 8017b40:	9005      	str	r0, [sp, #20]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	9108      	str	r1, [sp, #32]
 8017b46:	0018      	movs	r0, r3
 8017b48:	9307      	str	r3, [sp, #28]
 8017b4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8017b4c:	f7e8 fae6 	bl	800011c <strlen>
 8017b50:	2600      	movs	r6, #0
 8017b52:	0004      	movs	r4, r0
 8017b54:	2700      	movs	r7, #0
 8017b56:	9b08      	ldr	r3, [sp, #32]
 8017b58:	931f      	str	r3, [sp, #124]	; 0x7c
 8017b5a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017b5c:	7813      	ldrb	r3, [r2, #0]
 8017b5e:	2b2b      	cmp	r3, #43	; 0x2b
 8017b60:	d058      	beq.n	8017c14 <_strtod_l+0xe0>
 8017b62:	d844      	bhi.n	8017bee <_strtod_l+0xba>
 8017b64:	2b0d      	cmp	r3, #13
 8017b66:	d83d      	bhi.n	8017be4 <_strtod_l+0xb0>
 8017b68:	2b08      	cmp	r3, #8
 8017b6a:	d83d      	bhi.n	8017be8 <_strtod_l+0xb4>
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d047      	beq.n	8017c00 <_strtod_l+0xcc>
 8017b70:	2300      	movs	r3, #0
 8017b72:	930e      	str	r3, [sp, #56]	; 0x38
 8017b74:	2200      	movs	r2, #0
 8017b76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017b78:	920a      	str	r2, [sp, #40]	; 0x28
 8017b7a:	9306      	str	r3, [sp, #24]
 8017b7c:	781b      	ldrb	r3, [r3, #0]
 8017b7e:	2b30      	cmp	r3, #48	; 0x30
 8017b80:	d000      	beq.n	8017b84 <_strtod_l+0x50>
 8017b82:	e07f      	b.n	8017c84 <_strtod_l+0x150>
 8017b84:	9b06      	ldr	r3, [sp, #24]
 8017b86:	3220      	adds	r2, #32
 8017b88:	785b      	ldrb	r3, [r3, #1]
 8017b8a:	4393      	bics	r3, r2
 8017b8c:	2b58      	cmp	r3, #88	; 0x58
 8017b8e:	d000      	beq.n	8017b92 <_strtod_l+0x5e>
 8017b90:	e06e      	b.n	8017c70 <_strtod_l+0x13c>
 8017b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b94:	9502      	str	r5, [sp, #8]
 8017b96:	9301      	str	r3, [sp, #4]
 8017b98:	ab20      	add	r3, sp, #128	; 0x80
 8017b9a:	9300      	str	r3, [sp, #0]
 8017b9c:	4a95      	ldr	r2, [pc, #596]	; (8017df4 <_strtod_l+0x2c0>)
 8017b9e:	ab21      	add	r3, sp, #132	; 0x84
 8017ba0:	9805      	ldr	r0, [sp, #20]
 8017ba2:	a91f      	add	r1, sp, #124	; 0x7c
 8017ba4:	f002 f92a 	bl	8019dfc <__gethex>
 8017ba8:	2307      	movs	r3, #7
 8017baa:	0005      	movs	r5, r0
 8017bac:	0004      	movs	r4, r0
 8017bae:	401d      	ands	r5, r3
 8017bb0:	4218      	tst	r0, r3
 8017bb2:	d006      	beq.n	8017bc2 <_strtod_l+0x8e>
 8017bb4:	2d06      	cmp	r5, #6
 8017bb6:	d12f      	bne.n	8017c18 <_strtod_l+0xe4>
 8017bb8:	9b06      	ldr	r3, [sp, #24]
 8017bba:	3301      	adds	r3, #1
 8017bbc:	931f      	str	r3, [sp, #124]	; 0x7c
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	930e      	str	r3, [sp, #56]	; 0x38
 8017bc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d002      	beq.n	8017bce <_strtod_l+0x9a>
 8017bc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017bca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017bcc:	601a      	str	r2, [r3, #0]
 8017bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d01c      	beq.n	8017c0e <_strtod_l+0xda>
 8017bd4:	2380      	movs	r3, #128	; 0x80
 8017bd6:	0032      	movs	r2, r6
 8017bd8:	061b      	lsls	r3, r3, #24
 8017bda:	18fb      	adds	r3, r7, r3
 8017bdc:	0010      	movs	r0, r2
 8017bde:	0019      	movs	r1, r3
 8017be0:	b025      	add	sp, #148	; 0x94
 8017be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017be4:	2b20      	cmp	r3, #32
 8017be6:	d1c3      	bne.n	8017b70 <_strtod_l+0x3c>
 8017be8:	3201      	adds	r2, #1
 8017bea:	921f      	str	r2, [sp, #124]	; 0x7c
 8017bec:	e7b5      	b.n	8017b5a <_strtod_l+0x26>
 8017bee:	2b2d      	cmp	r3, #45	; 0x2d
 8017bf0:	d1be      	bne.n	8017b70 <_strtod_l+0x3c>
 8017bf2:	3b2c      	subs	r3, #44	; 0x2c
 8017bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8017bf6:	1c53      	adds	r3, r2, #1
 8017bf8:	931f      	str	r3, [sp, #124]	; 0x7c
 8017bfa:	7853      	ldrb	r3, [r2, #1]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d1b9      	bne.n	8017b74 <_strtod_l+0x40>
 8017c00:	9b08      	ldr	r3, [sp, #32]
 8017c02:	931f      	str	r3, [sp, #124]	; 0x7c
 8017c04:	2300      	movs	r3, #0
 8017c06:	930e      	str	r3, [sp, #56]	; 0x38
 8017c08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d1dc      	bne.n	8017bc8 <_strtod_l+0x94>
 8017c0e:	0032      	movs	r2, r6
 8017c10:	003b      	movs	r3, r7
 8017c12:	e7e3      	b.n	8017bdc <_strtod_l+0xa8>
 8017c14:	2300      	movs	r3, #0
 8017c16:	e7ed      	b.n	8017bf4 <_strtod_l+0xc0>
 8017c18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017c1a:	2a00      	cmp	r2, #0
 8017c1c:	d007      	beq.n	8017c2e <_strtod_l+0xfa>
 8017c1e:	2135      	movs	r1, #53	; 0x35
 8017c20:	a822      	add	r0, sp, #136	; 0x88
 8017c22:	f003 f984 	bl	801af2e <__copybits>
 8017c26:	9920      	ldr	r1, [sp, #128]	; 0x80
 8017c28:	9805      	ldr	r0, [sp, #20]
 8017c2a:	f002 fd3f 	bl	801a6ac <_Bfree>
 8017c2e:	1e68      	subs	r0, r5, #1
 8017c30:	2804      	cmp	r0, #4
 8017c32:	d806      	bhi.n	8017c42 <_strtod_l+0x10e>
 8017c34:	f7e8 fa7a 	bl	800012c <__gnu_thumb1_case_uqi>
 8017c38:	1816030b 	.word	0x1816030b
 8017c3c:	0b          	.byte	0x0b
 8017c3d:	00          	.byte	0x00
 8017c3e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8017c40:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8017c42:	0723      	lsls	r3, r4, #28
 8017c44:	d5bd      	bpl.n	8017bc2 <_strtod_l+0x8e>
 8017c46:	2380      	movs	r3, #128	; 0x80
 8017c48:	061b      	lsls	r3, r3, #24
 8017c4a:	431f      	orrs	r7, r3
 8017c4c:	e7b9      	b.n	8017bc2 <_strtod_l+0x8e>
 8017c4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017c50:	4a69      	ldr	r2, [pc, #420]	; (8017df8 <_strtod_l+0x2c4>)
 8017c52:	496a      	ldr	r1, [pc, #424]	; (8017dfc <_strtod_l+0x2c8>)
 8017c54:	401a      	ands	r2, r3
 8017c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c58:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8017c5a:	185b      	adds	r3, r3, r1
 8017c5c:	051b      	lsls	r3, r3, #20
 8017c5e:	431a      	orrs	r2, r3
 8017c60:	0017      	movs	r7, r2
 8017c62:	e7ee      	b.n	8017c42 <_strtod_l+0x10e>
 8017c64:	4f66      	ldr	r7, [pc, #408]	; (8017e00 <_strtod_l+0x2cc>)
 8017c66:	e7ec      	b.n	8017c42 <_strtod_l+0x10e>
 8017c68:	2601      	movs	r6, #1
 8017c6a:	4f66      	ldr	r7, [pc, #408]	; (8017e04 <_strtod_l+0x2d0>)
 8017c6c:	4276      	negs	r6, r6
 8017c6e:	e7e8      	b.n	8017c42 <_strtod_l+0x10e>
 8017c70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017c72:	1c5a      	adds	r2, r3, #1
 8017c74:	921f      	str	r2, [sp, #124]	; 0x7c
 8017c76:	785b      	ldrb	r3, [r3, #1]
 8017c78:	2b30      	cmp	r3, #48	; 0x30
 8017c7a:	d0f9      	beq.n	8017c70 <_strtod_l+0x13c>
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d0a0      	beq.n	8017bc2 <_strtod_l+0x8e>
 8017c80:	2301      	movs	r3, #1
 8017c82:	930a      	str	r3, [sp, #40]	; 0x28
 8017c84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017c86:	220a      	movs	r2, #10
 8017c88:	9310      	str	r3, [sp, #64]	; 0x40
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c90:	9309      	str	r3, [sp, #36]	; 0x24
 8017c92:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8017c94:	7805      	ldrb	r5, [r0, #0]
 8017c96:	002b      	movs	r3, r5
 8017c98:	3b30      	subs	r3, #48	; 0x30
 8017c9a:	b2d9      	uxtb	r1, r3
 8017c9c:	2909      	cmp	r1, #9
 8017c9e:	d927      	bls.n	8017cf0 <_strtod_l+0x1bc>
 8017ca0:	0022      	movs	r2, r4
 8017ca2:	9907      	ldr	r1, [sp, #28]
 8017ca4:	f7ff fef7 	bl	8017a96 <strncmp>
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	d033      	beq.n	8017d14 <_strtod_l+0x1e0>
 8017cac:	2000      	movs	r0, #0
 8017cae:	002b      	movs	r3, r5
 8017cb0:	4684      	mov	ip, r0
 8017cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017cb4:	900c      	str	r0, [sp, #48]	; 0x30
 8017cb6:	9206      	str	r2, [sp, #24]
 8017cb8:	2220      	movs	r2, #32
 8017cba:	0019      	movs	r1, r3
 8017cbc:	4391      	bics	r1, r2
 8017cbe:	000a      	movs	r2, r1
 8017cc0:	2100      	movs	r1, #0
 8017cc2:	9107      	str	r1, [sp, #28]
 8017cc4:	2a45      	cmp	r2, #69	; 0x45
 8017cc6:	d000      	beq.n	8017cca <_strtod_l+0x196>
 8017cc8:	e0c5      	b.n	8017e56 <_strtod_l+0x322>
 8017cca:	9b06      	ldr	r3, [sp, #24]
 8017ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cce:	4303      	orrs	r3, r0
 8017cd0:	4313      	orrs	r3, r2
 8017cd2:	428b      	cmp	r3, r1
 8017cd4:	d094      	beq.n	8017c00 <_strtod_l+0xcc>
 8017cd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017cd8:	9308      	str	r3, [sp, #32]
 8017cda:	3301      	adds	r3, #1
 8017cdc:	931f      	str	r3, [sp, #124]	; 0x7c
 8017cde:	9b08      	ldr	r3, [sp, #32]
 8017ce0:	785b      	ldrb	r3, [r3, #1]
 8017ce2:	2b2b      	cmp	r3, #43	; 0x2b
 8017ce4:	d076      	beq.n	8017dd4 <_strtod_l+0x2a0>
 8017ce6:	000c      	movs	r4, r1
 8017ce8:	2b2d      	cmp	r3, #45	; 0x2d
 8017cea:	d179      	bne.n	8017de0 <_strtod_l+0x2ac>
 8017cec:	2401      	movs	r4, #1
 8017cee:	e072      	b.n	8017dd6 <_strtod_l+0x2a2>
 8017cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017cf2:	2908      	cmp	r1, #8
 8017cf4:	dc09      	bgt.n	8017d0a <_strtod_l+0x1d6>
 8017cf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017cf8:	4351      	muls	r1, r2
 8017cfa:	185b      	adds	r3, r3, r1
 8017cfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8017cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d00:	3001      	adds	r0, #1
 8017d02:	3301      	adds	r3, #1
 8017d04:	9309      	str	r3, [sp, #36]	; 0x24
 8017d06:	901f      	str	r0, [sp, #124]	; 0x7c
 8017d08:	e7c3      	b.n	8017c92 <_strtod_l+0x15e>
 8017d0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017d0c:	4351      	muls	r1, r2
 8017d0e:	185b      	adds	r3, r3, r1
 8017d10:	930f      	str	r3, [sp, #60]	; 0x3c
 8017d12:	e7f4      	b.n	8017cfe <_strtod_l+0x1ca>
 8017d14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d18:	191c      	adds	r4, r3, r4
 8017d1a:	941f      	str	r4, [sp, #124]	; 0x7c
 8017d1c:	7823      	ldrb	r3, [r4, #0]
 8017d1e:	2a00      	cmp	r2, #0
 8017d20:	d039      	beq.n	8017d96 <_strtod_l+0x262>
 8017d22:	900c      	str	r0, [sp, #48]	; 0x30
 8017d24:	9206      	str	r2, [sp, #24]
 8017d26:	001a      	movs	r2, r3
 8017d28:	3a30      	subs	r2, #48	; 0x30
 8017d2a:	2a09      	cmp	r2, #9
 8017d2c:	d912      	bls.n	8017d54 <_strtod_l+0x220>
 8017d2e:	2201      	movs	r2, #1
 8017d30:	4694      	mov	ip, r2
 8017d32:	e7c1      	b.n	8017cb8 <_strtod_l+0x184>
 8017d34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017d36:	3001      	adds	r0, #1
 8017d38:	1c5a      	adds	r2, r3, #1
 8017d3a:	921f      	str	r2, [sp, #124]	; 0x7c
 8017d3c:	785b      	ldrb	r3, [r3, #1]
 8017d3e:	2b30      	cmp	r3, #48	; 0x30
 8017d40:	d0f8      	beq.n	8017d34 <_strtod_l+0x200>
 8017d42:	001a      	movs	r2, r3
 8017d44:	3a31      	subs	r2, #49	; 0x31
 8017d46:	2a08      	cmp	r2, #8
 8017d48:	d83f      	bhi.n	8017dca <_strtod_l+0x296>
 8017d4a:	900c      	str	r0, [sp, #48]	; 0x30
 8017d4c:	2000      	movs	r0, #0
 8017d4e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017d50:	9006      	str	r0, [sp, #24]
 8017d52:	9210      	str	r2, [sp, #64]	; 0x40
 8017d54:	001a      	movs	r2, r3
 8017d56:	1c41      	adds	r1, r0, #1
 8017d58:	3a30      	subs	r2, #48	; 0x30
 8017d5a:	2b30      	cmp	r3, #48	; 0x30
 8017d5c:	d015      	beq.n	8017d8a <_strtod_l+0x256>
 8017d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d60:	185b      	adds	r3, r3, r1
 8017d62:	210a      	movs	r1, #10
 8017d64:	930c      	str	r3, [sp, #48]	; 0x30
 8017d66:	9b06      	ldr	r3, [sp, #24]
 8017d68:	18c4      	adds	r4, r0, r3
 8017d6a:	42a3      	cmp	r3, r4
 8017d6c:	d115      	bne.n	8017d9a <_strtod_l+0x266>
 8017d6e:	9906      	ldr	r1, [sp, #24]
 8017d70:	9b06      	ldr	r3, [sp, #24]
 8017d72:	3101      	adds	r1, #1
 8017d74:	1809      	adds	r1, r1, r0
 8017d76:	181b      	adds	r3, r3, r0
 8017d78:	9106      	str	r1, [sp, #24]
 8017d7a:	2b08      	cmp	r3, #8
 8017d7c:	dc1b      	bgt.n	8017db6 <_strtod_l+0x282>
 8017d7e:	230a      	movs	r3, #10
 8017d80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d82:	434b      	muls	r3, r1
 8017d84:	2100      	movs	r1, #0
 8017d86:	18d3      	adds	r3, r2, r3
 8017d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017d8c:	0008      	movs	r0, r1
 8017d8e:	1c5a      	adds	r2, r3, #1
 8017d90:	921f      	str	r2, [sp, #124]	; 0x7c
 8017d92:	785b      	ldrb	r3, [r3, #1]
 8017d94:	e7c7      	b.n	8017d26 <_strtod_l+0x1f2>
 8017d96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d98:	e7d1      	b.n	8017d3e <_strtod_l+0x20a>
 8017d9a:	2b08      	cmp	r3, #8
 8017d9c:	dc04      	bgt.n	8017da8 <_strtod_l+0x274>
 8017d9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017da0:	434d      	muls	r5, r1
 8017da2:	950b      	str	r5, [sp, #44]	; 0x2c
 8017da4:	3301      	adds	r3, #1
 8017da6:	e7e0      	b.n	8017d6a <_strtod_l+0x236>
 8017da8:	1c5d      	adds	r5, r3, #1
 8017daa:	2d10      	cmp	r5, #16
 8017dac:	dcfa      	bgt.n	8017da4 <_strtod_l+0x270>
 8017dae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017db0:	434d      	muls	r5, r1
 8017db2:	950f      	str	r5, [sp, #60]	; 0x3c
 8017db4:	e7f6      	b.n	8017da4 <_strtod_l+0x270>
 8017db6:	9b06      	ldr	r3, [sp, #24]
 8017db8:	2100      	movs	r1, #0
 8017dba:	2b10      	cmp	r3, #16
 8017dbc:	dce5      	bgt.n	8017d8a <_strtod_l+0x256>
 8017dbe:	230a      	movs	r3, #10
 8017dc0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017dc2:	4343      	muls	r3, r0
 8017dc4:	18d3      	adds	r3, r2, r3
 8017dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8017dc8:	e7df      	b.n	8017d8a <_strtod_l+0x256>
 8017dca:	2200      	movs	r2, #0
 8017dcc:	920c      	str	r2, [sp, #48]	; 0x30
 8017dce:	9206      	str	r2, [sp, #24]
 8017dd0:	3201      	adds	r2, #1
 8017dd2:	e7ad      	b.n	8017d30 <_strtod_l+0x1fc>
 8017dd4:	2400      	movs	r4, #0
 8017dd6:	9b08      	ldr	r3, [sp, #32]
 8017dd8:	3302      	adds	r3, #2
 8017dda:	931f      	str	r3, [sp, #124]	; 0x7c
 8017ddc:	9b08      	ldr	r3, [sp, #32]
 8017dde:	789b      	ldrb	r3, [r3, #2]
 8017de0:	001a      	movs	r2, r3
 8017de2:	3a30      	subs	r2, #48	; 0x30
 8017de4:	2a09      	cmp	r2, #9
 8017de6:	d913      	bls.n	8017e10 <_strtod_l+0x2dc>
 8017de8:	9a08      	ldr	r2, [sp, #32]
 8017dea:	921f      	str	r2, [sp, #124]	; 0x7c
 8017dec:	2200      	movs	r2, #0
 8017dee:	e031      	b.n	8017e54 <_strtod_l+0x320>
 8017df0:	0801d464 	.word	0x0801d464
 8017df4:	0801d1b8 	.word	0x0801d1b8
 8017df8:	ffefffff 	.word	0xffefffff
 8017dfc:	00000433 	.word	0x00000433
 8017e00:	7ff00000 	.word	0x7ff00000
 8017e04:	7fffffff 	.word	0x7fffffff
 8017e08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017e0a:	1c5a      	adds	r2, r3, #1
 8017e0c:	921f      	str	r2, [sp, #124]	; 0x7c
 8017e0e:	785b      	ldrb	r3, [r3, #1]
 8017e10:	2b30      	cmp	r3, #48	; 0x30
 8017e12:	d0f9      	beq.n	8017e08 <_strtod_l+0x2d4>
 8017e14:	2200      	movs	r2, #0
 8017e16:	9207      	str	r2, [sp, #28]
 8017e18:	001a      	movs	r2, r3
 8017e1a:	3a31      	subs	r2, #49	; 0x31
 8017e1c:	2a08      	cmp	r2, #8
 8017e1e:	d81a      	bhi.n	8017e56 <_strtod_l+0x322>
 8017e20:	3b30      	subs	r3, #48	; 0x30
 8017e22:	001a      	movs	r2, r3
 8017e24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017e26:	9307      	str	r3, [sp, #28]
 8017e28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017e2a:	1c59      	adds	r1, r3, #1
 8017e2c:	911f      	str	r1, [sp, #124]	; 0x7c
 8017e2e:	785b      	ldrb	r3, [r3, #1]
 8017e30:	001d      	movs	r5, r3
 8017e32:	3d30      	subs	r5, #48	; 0x30
 8017e34:	2d09      	cmp	r5, #9
 8017e36:	d939      	bls.n	8017eac <_strtod_l+0x378>
 8017e38:	9d07      	ldr	r5, [sp, #28]
 8017e3a:	1b49      	subs	r1, r1, r5
 8017e3c:	4db0      	ldr	r5, [pc, #704]	; (8018100 <_strtod_l+0x5cc>)
 8017e3e:	9507      	str	r5, [sp, #28]
 8017e40:	2908      	cmp	r1, #8
 8017e42:	dc03      	bgt.n	8017e4c <_strtod_l+0x318>
 8017e44:	9207      	str	r2, [sp, #28]
 8017e46:	42aa      	cmp	r2, r5
 8017e48:	dd00      	ble.n	8017e4c <_strtod_l+0x318>
 8017e4a:	9507      	str	r5, [sp, #28]
 8017e4c:	2c00      	cmp	r4, #0
 8017e4e:	d002      	beq.n	8017e56 <_strtod_l+0x322>
 8017e50:	9a07      	ldr	r2, [sp, #28]
 8017e52:	4252      	negs	r2, r2
 8017e54:	9207      	str	r2, [sp, #28]
 8017e56:	9a06      	ldr	r2, [sp, #24]
 8017e58:	2a00      	cmp	r2, #0
 8017e5a:	d14b      	bne.n	8017ef4 <_strtod_l+0x3c0>
 8017e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e5e:	4310      	orrs	r0, r2
 8017e60:	d000      	beq.n	8017e64 <_strtod_l+0x330>
 8017e62:	e6ae      	b.n	8017bc2 <_strtod_l+0x8e>
 8017e64:	4662      	mov	r2, ip
 8017e66:	2a00      	cmp	r2, #0
 8017e68:	d000      	beq.n	8017e6c <_strtod_l+0x338>
 8017e6a:	e6c9      	b.n	8017c00 <_strtod_l+0xcc>
 8017e6c:	2b69      	cmp	r3, #105	; 0x69
 8017e6e:	d025      	beq.n	8017ebc <_strtod_l+0x388>
 8017e70:	dc21      	bgt.n	8017eb6 <_strtod_l+0x382>
 8017e72:	2b49      	cmp	r3, #73	; 0x49
 8017e74:	d022      	beq.n	8017ebc <_strtod_l+0x388>
 8017e76:	2b4e      	cmp	r3, #78	; 0x4e
 8017e78:	d000      	beq.n	8017e7c <_strtod_l+0x348>
 8017e7a:	e6c1      	b.n	8017c00 <_strtod_l+0xcc>
 8017e7c:	49a1      	ldr	r1, [pc, #644]	; (8018104 <_strtod_l+0x5d0>)
 8017e7e:	a81f      	add	r0, sp, #124	; 0x7c
 8017e80:	f002 fa0a 	bl	801a298 <__match>
 8017e84:	2800      	cmp	r0, #0
 8017e86:	d100      	bne.n	8017e8a <_strtod_l+0x356>
 8017e88:	e6ba      	b.n	8017c00 <_strtod_l+0xcc>
 8017e8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017e8c:	781b      	ldrb	r3, [r3, #0]
 8017e8e:	2b28      	cmp	r3, #40	; 0x28
 8017e90:	d12a      	bne.n	8017ee8 <_strtod_l+0x3b4>
 8017e92:	499d      	ldr	r1, [pc, #628]	; (8018108 <_strtod_l+0x5d4>)
 8017e94:	aa22      	add	r2, sp, #136	; 0x88
 8017e96:	a81f      	add	r0, sp, #124	; 0x7c
 8017e98:	f002 fa12 	bl	801a2c0 <__hexnan>
 8017e9c:	2805      	cmp	r0, #5
 8017e9e:	d123      	bne.n	8017ee8 <_strtod_l+0x3b4>
 8017ea0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017ea2:	4a9a      	ldr	r2, [pc, #616]	; (801810c <_strtod_l+0x5d8>)
 8017ea4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8017ea6:	431a      	orrs	r2, r3
 8017ea8:	0017      	movs	r7, r2
 8017eaa:	e68a      	b.n	8017bc2 <_strtod_l+0x8e>
 8017eac:	210a      	movs	r1, #10
 8017eae:	434a      	muls	r2, r1
 8017eb0:	18d2      	adds	r2, r2, r3
 8017eb2:	3a30      	subs	r2, #48	; 0x30
 8017eb4:	e7b8      	b.n	8017e28 <_strtod_l+0x2f4>
 8017eb6:	2b6e      	cmp	r3, #110	; 0x6e
 8017eb8:	d0e0      	beq.n	8017e7c <_strtod_l+0x348>
 8017eba:	e6a1      	b.n	8017c00 <_strtod_l+0xcc>
 8017ebc:	4994      	ldr	r1, [pc, #592]	; (8018110 <_strtod_l+0x5dc>)
 8017ebe:	a81f      	add	r0, sp, #124	; 0x7c
 8017ec0:	f002 f9ea 	bl	801a298 <__match>
 8017ec4:	2800      	cmp	r0, #0
 8017ec6:	d100      	bne.n	8017eca <_strtod_l+0x396>
 8017ec8:	e69a      	b.n	8017c00 <_strtod_l+0xcc>
 8017eca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017ecc:	4991      	ldr	r1, [pc, #580]	; (8018114 <_strtod_l+0x5e0>)
 8017ece:	3b01      	subs	r3, #1
 8017ed0:	a81f      	add	r0, sp, #124	; 0x7c
 8017ed2:	931f      	str	r3, [sp, #124]	; 0x7c
 8017ed4:	f002 f9e0 	bl	801a298 <__match>
 8017ed8:	2800      	cmp	r0, #0
 8017eda:	d102      	bne.n	8017ee2 <_strtod_l+0x3ae>
 8017edc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017ede:	3301      	adds	r3, #1
 8017ee0:	931f      	str	r3, [sp, #124]	; 0x7c
 8017ee2:	2600      	movs	r6, #0
 8017ee4:	4f89      	ldr	r7, [pc, #548]	; (801810c <_strtod_l+0x5d8>)
 8017ee6:	e66c      	b.n	8017bc2 <_strtod_l+0x8e>
 8017ee8:	488b      	ldr	r0, [pc, #556]	; (8018118 <_strtod_l+0x5e4>)
 8017eea:	f003 fdeb 	bl	801bac4 <nan>
 8017eee:	0006      	movs	r6, r0
 8017ef0:	000f      	movs	r7, r1
 8017ef2:	e666      	b.n	8017bc2 <_strtod_l+0x8e>
 8017ef4:	9b07      	ldr	r3, [sp, #28]
 8017ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ef8:	1a9b      	subs	r3, r3, r2
 8017efa:	930a      	str	r3, [sp, #40]	; 0x28
 8017efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d101      	bne.n	8017f06 <_strtod_l+0x3d2>
 8017f02:	9b06      	ldr	r3, [sp, #24]
 8017f04:	9309      	str	r3, [sp, #36]	; 0x24
 8017f06:	9c06      	ldr	r4, [sp, #24]
 8017f08:	2c10      	cmp	r4, #16
 8017f0a:	dd00      	ble.n	8017f0e <_strtod_l+0x3da>
 8017f0c:	2410      	movs	r4, #16
 8017f0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017f10:	f7ea f95c 	bl	80021cc <__aeabi_ui2d>
 8017f14:	9b06      	ldr	r3, [sp, #24]
 8017f16:	0006      	movs	r6, r0
 8017f18:	000f      	movs	r7, r1
 8017f1a:	2b09      	cmp	r3, #9
 8017f1c:	dd15      	ble.n	8017f4a <_strtod_l+0x416>
 8017f1e:	0022      	movs	r2, r4
 8017f20:	4b7e      	ldr	r3, [pc, #504]	; (801811c <_strtod_l+0x5e8>)
 8017f22:	3a09      	subs	r2, #9
 8017f24:	00d2      	lsls	r2, r2, #3
 8017f26:	189b      	adds	r3, r3, r2
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	f7e9 facc 	bl	80014c8 <__aeabi_dmul>
 8017f30:	0006      	movs	r6, r0
 8017f32:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017f34:	000f      	movs	r7, r1
 8017f36:	f7ea f949 	bl	80021cc <__aeabi_ui2d>
 8017f3a:	0002      	movs	r2, r0
 8017f3c:	000b      	movs	r3, r1
 8017f3e:	0030      	movs	r0, r6
 8017f40:	0039      	movs	r1, r7
 8017f42:	f7e8 fb83 	bl	800064c <__aeabi_dadd>
 8017f46:	0006      	movs	r6, r0
 8017f48:	000f      	movs	r7, r1
 8017f4a:	9b06      	ldr	r3, [sp, #24]
 8017f4c:	2b0f      	cmp	r3, #15
 8017f4e:	dc39      	bgt.n	8017fc4 <_strtod_l+0x490>
 8017f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d100      	bne.n	8017f58 <_strtod_l+0x424>
 8017f56:	e634      	b.n	8017bc2 <_strtod_l+0x8e>
 8017f58:	dd24      	ble.n	8017fa4 <_strtod_l+0x470>
 8017f5a:	2b16      	cmp	r3, #22
 8017f5c:	dc09      	bgt.n	8017f72 <_strtod_l+0x43e>
 8017f5e:	496f      	ldr	r1, [pc, #444]	; (801811c <_strtod_l+0x5e8>)
 8017f60:	00db      	lsls	r3, r3, #3
 8017f62:	18c9      	adds	r1, r1, r3
 8017f64:	0032      	movs	r2, r6
 8017f66:	6808      	ldr	r0, [r1, #0]
 8017f68:	6849      	ldr	r1, [r1, #4]
 8017f6a:	003b      	movs	r3, r7
 8017f6c:	f7e9 faac 	bl	80014c8 <__aeabi_dmul>
 8017f70:	e7bd      	b.n	8017eee <_strtod_l+0x3ba>
 8017f72:	2325      	movs	r3, #37	; 0x25
 8017f74:	9a06      	ldr	r2, [sp, #24]
 8017f76:	1a9b      	subs	r3, r3, r2
 8017f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f7a:	4293      	cmp	r3, r2
 8017f7c:	db22      	blt.n	8017fc4 <_strtod_l+0x490>
 8017f7e:	240f      	movs	r4, #15
 8017f80:	9b06      	ldr	r3, [sp, #24]
 8017f82:	4d66      	ldr	r5, [pc, #408]	; (801811c <_strtod_l+0x5e8>)
 8017f84:	1ae4      	subs	r4, r4, r3
 8017f86:	00e1      	lsls	r1, r4, #3
 8017f88:	1869      	adds	r1, r5, r1
 8017f8a:	0032      	movs	r2, r6
 8017f8c:	6808      	ldr	r0, [r1, #0]
 8017f8e:	6849      	ldr	r1, [r1, #4]
 8017f90:	003b      	movs	r3, r7
 8017f92:	f7e9 fa99 	bl	80014c8 <__aeabi_dmul>
 8017f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f98:	1b1c      	subs	r4, r3, r4
 8017f9a:	00e4      	lsls	r4, r4, #3
 8017f9c:	192c      	adds	r4, r5, r4
 8017f9e:	6822      	ldr	r2, [r4, #0]
 8017fa0:	6863      	ldr	r3, [r4, #4]
 8017fa2:	e7e3      	b.n	8017f6c <_strtod_l+0x438>
 8017fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fa6:	3316      	adds	r3, #22
 8017fa8:	db0c      	blt.n	8017fc4 <_strtod_l+0x490>
 8017faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017fac:	9a07      	ldr	r2, [sp, #28]
 8017fae:	0030      	movs	r0, r6
 8017fb0:	1a9a      	subs	r2, r3, r2
 8017fb2:	4b5a      	ldr	r3, [pc, #360]	; (801811c <_strtod_l+0x5e8>)
 8017fb4:	00d2      	lsls	r2, r2, #3
 8017fb6:	189b      	adds	r3, r3, r2
 8017fb8:	0039      	movs	r1, r7
 8017fba:	681a      	ldr	r2, [r3, #0]
 8017fbc:	685b      	ldr	r3, [r3, #4]
 8017fbe:	f7e8 fe81 	bl	8000cc4 <__aeabi_ddiv>
 8017fc2:	e794      	b.n	8017eee <_strtod_l+0x3ba>
 8017fc4:	9b06      	ldr	r3, [sp, #24]
 8017fc6:	1b1c      	subs	r4, r3, r4
 8017fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fca:	18e4      	adds	r4, r4, r3
 8017fcc:	2c00      	cmp	r4, #0
 8017fce:	dd72      	ble.n	80180b6 <_strtod_l+0x582>
 8017fd0:	230f      	movs	r3, #15
 8017fd2:	0021      	movs	r1, r4
 8017fd4:	4019      	ands	r1, r3
 8017fd6:	421c      	tst	r4, r3
 8017fd8:	d00a      	beq.n	8017ff0 <_strtod_l+0x4bc>
 8017fda:	00cb      	lsls	r3, r1, #3
 8017fdc:	494f      	ldr	r1, [pc, #316]	; (801811c <_strtod_l+0x5e8>)
 8017fde:	0032      	movs	r2, r6
 8017fe0:	18c9      	adds	r1, r1, r3
 8017fe2:	6808      	ldr	r0, [r1, #0]
 8017fe4:	6849      	ldr	r1, [r1, #4]
 8017fe6:	003b      	movs	r3, r7
 8017fe8:	f7e9 fa6e 	bl	80014c8 <__aeabi_dmul>
 8017fec:	0006      	movs	r6, r0
 8017fee:	000f      	movs	r7, r1
 8017ff0:	230f      	movs	r3, #15
 8017ff2:	439c      	bics	r4, r3
 8017ff4:	d04a      	beq.n	801808c <_strtod_l+0x558>
 8017ff6:	3326      	adds	r3, #38	; 0x26
 8017ff8:	33ff      	adds	r3, #255	; 0xff
 8017ffa:	429c      	cmp	r4, r3
 8017ffc:	dd22      	ble.n	8018044 <_strtod_l+0x510>
 8017ffe:	2300      	movs	r3, #0
 8018000:	9306      	str	r3, [sp, #24]
 8018002:	9307      	str	r3, [sp, #28]
 8018004:	930b      	str	r3, [sp, #44]	; 0x2c
 8018006:	9309      	str	r3, [sp, #36]	; 0x24
 8018008:	2322      	movs	r3, #34	; 0x22
 801800a:	2600      	movs	r6, #0
 801800c:	9a05      	ldr	r2, [sp, #20]
 801800e:	4f3f      	ldr	r7, [pc, #252]	; (801810c <_strtod_l+0x5d8>)
 8018010:	6013      	str	r3, [r2, #0]
 8018012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018014:	42b3      	cmp	r3, r6
 8018016:	d100      	bne.n	801801a <_strtod_l+0x4e6>
 8018018:	e5d3      	b.n	8017bc2 <_strtod_l+0x8e>
 801801a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801801c:	9805      	ldr	r0, [sp, #20]
 801801e:	f002 fb45 	bl	801a6ac <_Bfree>
 8018022:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018024:	9805      	ldr	r0, [sp, #20]
 8018026:	f002 fb41 	bl	801a6ac <_Bfree>
 801802a:	9907      	ldr	r1, [sp, #28]
 801802c:	9805      	ldr	r0, [sp, #20]
 801802e:	f002 fb3d 	bl	801a6ac <_Bfree>
 8018032:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018034:	9805      	ldr	r0, [sp, #20]
 8018036:	f002 fb39 	bl	801a6ac <_Bfree>
 801803a:	9906      	ldr	r1, [sp, #24]
 801803c:	9805      	ldr	r0, [sp, #20]
 801803e:	f002 fb35 	bl	801a6ac <_Bfree>
 8018042:	e5be      	b.n	8017bc2 <_strtod_l+0x8e>
 8018044:	2300      	movs	r3, #0
 8018046:	0030      	movs	r0, r6
 8018048:	0039      	movs	r1, r7
 801804a:	4d35      	ldr	r5, [pc, #212]	; (8018120 <_strtod_l+0x5ec>)
 801804c:	1124      	asrs	r4, r4, #4
 801804e:	9308      	str	r3, [sp, #32]
 8018050:	2c01      	cmp	r4, #1
 8018052:	dc1e      	bgt.n	8018092 <_strtod_l+0x55e>
 8018054:	2b00      	cmp	r3, #0
 8018056:	d001      	beq.n	801805c <_strtod_l+0x528>
 8018058:	0006      	movs	r6, r0
 801805a:	000f      	movs	r7, r1
 801805c:	4b31      	ldr	r3, [pc, #196]	; (8018124 <_strtod_l+0x5f0>)
 801805e:	0032      	movs	r2, r6
 8018060:	18ff      	adds	r7, r7, r3
 8018062:	9b08      	ldr	r3, [sp, #32]
 8018064:	00dd      	lsls	r5, r3, #3
 8018066:	4b2e      	ldr	r3, [pc, #184]	; (8018120 <_strtod_l+0x5ec>)
 8018068:	195d      	adds	r5, r3, r5
 801806a:	6828      	ldr	r0, [r5, #0]
 801806c:	6869      	ldr	r1, [r5, #4]
 801806e:	003b      	movs	r3, r7
 8018070:	f7e9 fa2a 	bl	80014c8 <__aeabi_dmul>
 8018074:	4b25      	ldr	r3, [pc, #148]	; (801810c <_strtod_l+0x5d8>)
 8018076:	4a2c      	ldr	r2, [pc, #176]	; (8018128 <_strtod_l+0x5f4>)
 8018078:	0006      	movs	r6, r0
 801807a:	400b      	ands	r3, r1
 801807c:	4293      	cmp	r3, r2
 801807e:	d8be      	bhi.n	8017ffe <_strtod_l+0x4ca>
 8018080:	4a2a      	ldr	r2, [pc, #168]	; (801812c <_strtod_l+0x5f8>)
 8018082:	4293      	cmp	r3, r2
 8018084:	d913      	bls.n	80180ae <_strtod_l+0x57a>
 8018086:	2601      	movs	r6, #1
 8018088:	4f29      	ldr	r7, [pc, #164]	; (8018130 <_strtod_l+0x5fc>)
 801808a:	4276      	negs	r6, r6
 801808c:	2300      	movs	r3, #0
 801808e:	9308      	str	r3, [sp, #32]
 8018090:	e087      	b.n	80181a2 <_strtod_l+0x66e>
 8018092:	2201      	movs	r2, #1
 8018094:	4214      	tst	r4, r2
 8018096:	d004      	beq.n	80180a2 <_strtod_l+0x56e>
 8018098:	682a      	ldr	r2, [r5, #0]
 801809a:	686b      	ldr	r3, [r5, #4]
 801809c:	f7e9 fa14 	bl	80014c8 <__aeabi_dmul>
 80180a0:	2301      	movs	r3, #1
 80180a2:	9a08      	ldr	r2, [sp, #32]
 80180a4:	1064      	asrs	r4, r4, #1
 80180a6:	3201      	adds	r2, #1
 80180a8:	9208      	str	r2, [sp, #32]
 80180aa:	3508      	adds	r5, #8
 80180ac:	e7d0      	b.n	8018050 <_strtod_l+0x51c>
 80180ae:	23d4      	movs	r3, #212	; 0xd4
 80180b0:	049b      	lsls	r3, r3, #18
 80180b2:	18cf      	adds	r7, r1, r3
 80180b4:	e7ea      	b.n	801808c <_strtod_l+0x558>
 80180b6:	2c00      	cmp	r4, #0
 80180b8:	d0e8      	beq.n	801808c <_strtod_l+0x558>
 80180ba:	4264      	negs	r4, r4
 80180bc:	220f      	movs	r2, #15
 80180be:	0023      	movs	r3, r4
 80180c0:	4013      	ands	r3, r2
 80180c2:	4214      	tst	r4, r2
 80180c4:	d00a      	beq.n	80180dc <_strtod_l+0x5a8>
 80180c6:	00da      	lsls	r2, r3, #3
 80180c8:	4b14      	ldr	r3, [pc, #80]	; (801811c <_strtod_l+0x5e8>)
 80180ca:	0030      	movs	r0, r6
 80180cc:	189b      	adds	r3, r3, r2
 80180ce:	0039      	movs	r1, r7
 80180d0:	681a      	ldr	r2, [r3, #0]
 80180d2:	685b      	ldr	r3, [r3, #4]
 80180d4:	f7e8 fdf6 	bl	8000cc4 <__aeabi_ddiv>
 80180d8:	0006      	movs	r6, r0
 80180da:	000f      	movs	r7, r1
 80180dc:	1124      	asrs	r4, r4, #4
 80180de:	d0d5      	beq.n	801808c <_strtod_l+0x558>
 80180e0:	2c1f      	cmp	r4, #31
 80180e2:	dd27      	ble.n	8018134 <_strtod_l+0x600>
 80180e4:	2300      	movs	r3, #0
 80180e6:	9306      	str	r3, [sp, #24]
 80180e8:	9307      	str	r3, [sp, #28]
 80180ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80180ec:	9309      	str	r3, [sp, #36]	; 0x24
 80180ee:	2322      	movs	r3, #34	; 0x22
 80180f0:	9a05      	ldr	r2, [sp, #20]
 80180f2:	2600      	movs	r6, #0
 80180f4:	6013      	str	r3, [r2, #0]
 80180f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180f8:	2700      	movs	r7, #0
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d18d      	bne.n	801801a <_strtod_l+0x4e6>
 80180fe:	e560      	b.n	8017bc2 <_strtod_l+0x8e>
 8018100:	00004e1f 	.word	0x00004e1f
 8018104:	0801d192 	.word	0x0801d192
 8018108:	0801d1cc 	.word	0x0801d1cc
 801810c:	7ff00000 	.word	0x7ff00000
 8018110:	0801d18a 	.word	0x0801d18a
 8018114:	0801d30c 	.word	0x0801d30c
 8018118:	0801d16f 	.word	0x0801d16f
 801811c:	0801d500 	.word	0x0801d500
 8018120:	0801d4d8 	.word	0x0801d4d8
 8018124:	fcb00000 	.word	0xfcb00000
 8018128:	7ca00000 	.word	0x7ca00000
 801812c:	7c900000 	.word	0x7c900000
 8018130:	7fefffff 	.word	0x7fefffff
 8018134:	2310      	movs	r3, #16
 8018136:	0022      	movs	r2, r4
 8018138:	401a      	ands	r2, r3
 801813a:	9208      	str	r2, [sp, #32]
 801813c:	421c      	tst	r4, r3
 801813e:	d001      	beq.n	8018144 <_strtod_l+0x610>
 8018140:	335a      	adds	r3, #90	; 0x5a
 8018142:	9308      	str	r3, [sp, #32]
 8018144:	0030      	movs	r0, r6
 8018146:	0039      	movs	r1, r7
 8018148:	2300      	movs	r3, #0
 801814a:	4dc5      	ldr	r5, [pc, #788]	; (8018460 <_strtod_l+0x92c>)
 801814c:	2201      	movs	r2, #1
 801814e:	4214      	tst	r4, r2
 8018150:	d004      	beq.n	801815c <_strtod_l+0x628>
 8018152:	682a      	ldr	r2, [r5, #0]
 8018154:	686b      	ldr	r3, [r5, #4]
 8018156:	f7e9 f9b7 	bl	80014c8 <__aeabi_dmul>
 801815a:	2301      	movs	r3, #1
 801815c:	1064      	asrs	r4, r4, #1
 801815e:	3508      	adds	r5, #8
 8018160:	2c00      	cmp	r4, #0
 8018162:	d1f3      	bne.n	801814c <_strtod_l+0x618>
 8018164:	2b00      	cmp	r3, #0
 8018166:	d001      	beq.n	801816c <_strtod_l+0x638>
 8018168:	0006      	movs	r6, r0
 801816a:	000f      	movs	r7, r1
 801816c:	9b08      	ldr	r3, [sp, #32]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d00f      	beq.n	8018192 <_strtod_l+0x65e>
 8018172:	236b      	movs	r3, #107	; 0x6b
 8018174:	007a      	lsls	r2, r7, #1
 8018176:	0d52      	lsrs	r2, r2, #21
 8018178:	0039      	movs	r1, r7
 801817a:	1a9b      	subs	r3, r3, r2
 801817c:	2b00      	cmp	r3, #0
 801817e:	dd08      	ble.n	8018192 <_strtod_l+0x65e>
 8018180:	2b1f      	cmp	r3, #31
 8018182:	dc00      	bgt.n	8018186 <_strtod_l+0x652>
 8018184:	e124      	b.n	80183d0 <_strtod_l+0x89c>
 8018186:	2600      	movs	r6, #0
 8018188:	2b34      	cmp	r3, #52	; 0x34
 801818a:	dc00      	bgt.n	801818e <_strtod_l+0x65a>
 801818c:	e119      	b.n	80183c2 <_strtod_l+0x88e>
 801818e:	27dc      	movs	r7, #220	; 0xdc
 8018190:	04bf      	lsls	r7, r7, #18
 8018192:	2200      	movs	r2, #0
 8018194:	2300      	movs	r3, #0
 8018196:	0030      	movs	r0, r6
 8018198:	0039      	movs	r1, r7
 801819a:	f7e8 f961 	bl	8000460 <__aeabi_dcmpeq>
 801819e:	2800      	cmp	r0, #0
 80181a0:	d1a0      	bne.n	80180e4 <_strtod_l+0x5b0>
 80181a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181a6:	9300      	str	r3, [sp, #0]
 80181a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80181aa:	9b06      	ldr	r3, [sp, #24]
 80181ac:	9805      	ldr	r0, [sp, #20]
 80181ae:	f002 fae5 	bl	801a77c <__s2b>
 80181b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80181b4:	2800      	cmp	r0, #0
 80181b6:	d100      	bne.n	80181ba <_strtod_l+0x686>
 80181b8:	e721      	b.n	8017ffe <_strtod_l+0x4ca>
 80181ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181bc:	9907      	ldr	r1, [sp, #28]
 80181be:	17da      	asrs	r2, r3, #31
 80181c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80181c2:	1a5b      	subs	r3, r3, r1
 80181c4:	401a      	ands	r2, r3
 80181c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181c8:	9215      	str	r2, [sp, #84]	; 0x54
 80181ca:	43db      	mvns	r3, r3
 80181cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80181ce:	17db      	asrs	r3, r3, #31
 80181d0:	401a      	ands	r2, r3
 80181d2:	2300      	movs	r3, #0
 80181d4:	921a      	str	r2, [sp, #104]	; 0x68
 80181d6:	9306      	str	r3, [sp, #24]
 80181d8:	9307      	str	r3, [sp, #28]
 80181da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181dc:	9805      	ldr	r0, [sp, #20]
 80181de:	6859      	ldr	r1, [r3, #4]
 80181e0:	f002 fa20 	bl	801a624 <_Balloc>
 80181e4:	9009      	str	r0, [sp, #36]	; 0x24
 80181e6:	2800      	cmp	r0, #0
 80181e8:	d100      	bne.n	80181ec <_strtod_l+0x6b8>
 80181ea:	e70d      	b.n	8018008 <_strtod_l+0x4d4>
 80181ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80181f0:	691b      	ldr	r3, [r3, #16]
 80181f2:	310c      	adds	r1, #12
 80181f4:	1c9a      	adds	r2, r3, #2
 80181f6:	0092      	lsls	r2, r2, #2
 80181f8:	300c      	adds	r0, #12
 80181fa:	930c      	str	r3, [sp, #48]	; 0x30
 80181fc:	f7fe fb12 	bl	8016824 <memcpy>
 8018200:	ab22      	add	r3, sp, #136	; 0x88
 8018202:	9301      	str	r3, [sp, #4]
 8018204:	ab21      	add	r3, sp, #132	; 0x84
 8018206:	9300      	str	r3, [sp, #0]
 8018208:	0032      	movs	r2, r6
 801820a:	003b      	movs	r3, r7
 801820c:	9805      	ldr	r0, [sp, #20]
 801820e:	9612      	str	r6, [sp, #72]	; 0x48
 8018210:	9713      	str	r7, [sp, #76]	; 0x4c
 8018212:	f002 fdff 	bl	801ae14 <__d2b>
 8018216:	9020      	str	r0, [sp, #128]	; 0x80
 8018218:	2800      	cmp	r0, #0
 801821a:	d100      	bne.n	801821e <_strtod_l+0x6ea>
 801821c:	e6f4      	b.n	8018008 <_strtod_l+0x4d4>
 801821e:	2101      	movs	r1, #1
 8018220:	9805      	ldr	r0, [sp, #20]
 8018222:	f002 fb3f 	bl	801a8a4 <__i2b>
 8018226:	9007      	str	r0, [sp, #28]
 8018228:	2800      	cmp	r0, #0
 801822a:	d100      	bne.n	801822e <_strtod_l+0x6fa>
 801822c:	e6ec      	b.n	8018008 <_strtod_l+0x4d4>
 801822e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018230:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018232:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018234:	1ad4      	subs	r4, r2, r3
 8018236:	2b00      	cmp	r3, #0
 8018238:	db01      	blt.n	801823e <_strtod_l+0x70a>
 801823a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801823c:	195d      	adds	r5, r3, r5
 801823e:	9908      	ldr	r1, [sp, #32]
 8018240:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018242:	1a5b      	subs	r3, r3, r1
 8018244:	2136      	movs	r1, #54	; 0x36
 8018246:	189b      	adds	r3, r3, r2
 8018248:	1a8a      	subs	r2, r1, r2
 801824a:	4986      	ldr	r1, [pc, #536]	; (8018464 <_strtod_l+0x930>)
 801824c:	2001      	movs	r0, #1
 801824e:	468c      	mov	ip, r1
 8018250:	2100      	movs	r1, #0
 8018252:	3b01      	subs	r3, #1
 8018254:	9110      	str	r1, [sp, #64]	; 0x40
 8018256:	9014      	str	r0, [sp, #80]	; 0x50
 8018258:	4563      	cmp	r3, ip
 801825a:	da07      	bge.n	801826c <_strtod_l+0x738>
 801825c:	4661      	mov	r1, ip
 801825e:	1ac9      	subs	r1, r1, r3
 8018260:	1a52      	subs	r2, r2, r1
 8018262:	291f      	cmp	r1, #31
 8018264:	dd00      	ble.n	8018268 <_strtod_l+0x734>
 8018266:	e0b8      	b.n	80183da <_strtod_l+0x8a6>
 8018268:	4088      	lsls	r0, r1
 801826a:	9014      	str	r0, [sp, #80]	; 0x50
 801826c:	18ab      	adds	r3, r5, r2
 801826e:	930c      	str	r3, [sp, #48]	; 0x30
 8018270:	18a4      	adds	r4, r4, r2
 8018272:	9b08      	ldr	r3, [sp, #32]
 8018274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018276:	191c      	adds	r4, r3, r4
 8018278:	002b      	movs	r3, r5
 801827a:	4295      	cmp	r5, r2
 801827c:	dd00      	ble.n	8018280 <_strtod_l+0x74c>
 801827e:	0013      	movs	r3, r2
 8018280:	42a3      	cmp	r3, r4
 8018282:	dd00      	ble.n	8018286 <_strtod_l+0x752>
 8018284:	0023      	movs	r3, r4
 8018286:	2b00      	cmp	r3, #0
 8018288:	dd04      	ble.n	8018294 <_strtod_l+0x760>
 801828a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801828c:	1ae4      	subs	r4, r4, r3
 801828e:	1ad2      	subs	r2, r2, r3
 8018290:	920c      	str	r2, [sp, #48]	; 0x30
 8018292:	1aed      	subs	r5, r5, r3
 8018294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018296:	2b00      	cmp	r3, #0
 8018298:	dd17      	ble.n	80182ca <_strtod_l+0x796>
 801829a:	001a      	movs	r2, r3
 801829c:	9907      	ldr	r1, [sp, #28]
 801829e:	9805      	ldr	r0, [sp, #20]
 80182a0:	f002 fbc6 	bl	801aa30 <__pow5mult>
 80182a4:	9007      	str	r0, [sp, #28]
 80182a6:	2800      	cmp	r0, #0
 80182a8:	d100      	bne.n	80182ac <_strtod_l+0x778>
 80182aa:	e6ad      	b.n	8018008 <_strtod_l+0x4d4>
 80182ac:	0001      	movs	r1, r0
 80182ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80182b0:	9805      	ldr	r0, [sp, #20]
 80182b2:	f002 fb0d 	bl	801a8d0 <__multiply>
 80182b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80182b8:	2800      	cmp	r0, #0
 80182ba:	d100      	bne.n	80182be <_strtod_l+0x78a>
 80182bc:	e6a4      	b.n	8018008 <_strtod_l+0x4d4>
 80182be:	9920      	ldr	r1, [sp, #128]	; 0x80
 80182c0:	9805      	ldr	r0, [sp, #20]
 80182c2:	f002 f9f3 	bl	801a6ac <_Bfree>
 80182c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80182c8:	9320      	str	r3, [sp, #128]	; 0x80
 80182ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	dd00      	ble.n	80182d2 <_strtod_l+0x79e>
 80182d0:	e089      	b.n	80183e6 <_strtod_l+0x8b2>
 80182d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	dd08      	ble.n	80182ea <_strtod_l+0x7b6>
 80182d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80182da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80182dc:	9805      	ldr	r0, [sp, #20]
 80182de:	f002 fba7 	bl	801aa30 <__pow5mult>
 80182e2:	9009      	str	r0, [sp, #36]	; 0x24
 80182e4:	2800      	cmp	r0, #0
 80182e6:	d100      	bne.n	80182ea <_strtod_l+0x7b6>
 80182e8:	e68e      	b.n	8018008 <_strtod_l+0x4d4>
 80182ea:	2c00      	cmp	r4, #0
 80182ec:	dd08      	ble.n	8018300 <_strtod_l+0x7cc>
 80182ee:	0022      	movs	r2, r4
 80182f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80182f2:	9805      	ldr	r0, [sp, #20]
 80182f4:	f002 fbf8 	bl	801aae8 <__lshift>
 80182f8:	9009      	str	r0, [sp, #36]	; 0x24
 80182fa:	2800      	cmp	r0, #0
 80182fc:	d100      	bne.n	8018300 <_strtod_l+0x7cc>
 80182fe:	e683      	b.n	8018008 <_strtod_l+0x4d4>
 8018300:	2d00      	cmp	r5, #0
 8018302:	dd08      	ble.n	8018316 <_strtod_l+0x7e2>
 8018304:	002a      	movs	r2, r5
 8018306:	9907      	ldr	r1, [sp, #28]
 8018308:	9805      	ldr	r0, [sp, #20]
 801830a:	f002 fbed 	bl	801aae8 <__lshift>
 801830e:	9007      	str	r0, [sp, #28]
 8018310:	2800      	cmp	r0, #0
 8018312:	d100      	bne.n	8018316 <_strtod_l+0x7e2>
 8018314:	e678      	b.n	8018008 <_strtod_l+0x4d4>
 8018316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018318:	9920      	ldr	r1, [sp, #128]	; 0x80
 801831a:	9805      	ldr	r0, [sp, #20]
 801831c:	f002 fc6e 	bl	801abfc <__mdiff>
 8018320:	9006      	str	r0, [sp, #24]
 8018322:	2800      	cmp	r0, #0
 8018324:	d100      	bne.n	8018328 <_strtod_l+0x7f4>
 8018326:	e66f      	b.n	8018008 <_strtod_l+0x4d4>
 8018328:	2200      	movs	r2, #0
 801832a:	68c3      	ldr	r3, [r0, #12]
 801832c:	9907      	ldr	r1, [sp, #28]
 801832e:	60c2      	str	r2, [r0, #12]
 8018330:	930f      	str	r3, [sp, #60]	; 0x3c
 8018332:	f002 fc47 	bl	801abc4 <__mcmp>
 8018336:	2800      	cmp	r0, #0
 8018338:	da5f      	bge.n	80183fa <_strtod_l+0x8c6>
 801833a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801833c:	4333      	orrs	r3, r6
 801833e:	d000      	beq.n	8018342 <_strtod_l+0x80e>
 8018340:	e08a      	b.n	8018458 <_strtod_l+0x924>
 8018342:	033b      	lsls	r3, r7, #12
 8018344:	d000      	beq.n	8018348 <_strtod_l+0x814>
 8018346:	e087      	b.n	8018458 <_strtod_l+0x924>
 8018348:	22d6      	movs	r2, #214	; 0xd6
 801834a:	4b47      	ldr	r3, [pc, #284]	; (8018468 <_strtod_l+0x934>)
 801834c:	04d2      	lsls	r2, r2, #19
 801834e:	403b      	ands	r3, r7
 8018350:	4293      	cmp	r3, r2
 8018352:	d800      	bhi.n	8018356 <_strtod_l+0x822>
 8018354:	e080      	b.n	8018458 <_strtod_l+0x924>
 8018356:	9b06      	ldr	r3, [sp, #24]
 8018358:	695b      	ldr	r3, [r3, #20]
 801835a:	930a      	str	r3, [sp, #40]	; 0x28
 801835c:	2b00      	cmp	r3, #0
 801835e:	d104      	bne.n	801836a <_strtod_l+0x836>
 8018360:	9b06      	ldr	r3, [sp, #24]
 8018362:	691b      	ldr	r3, [r3, #16]
 8018364:	930a      	str	r3, [sp, #40]	; 0x28
 8018366:	2b01      	cmp	r3, #1
 8018368:	dd76      	ble.n	8018458 <_strtod_l+0x924>
 801836a:	9906      	ldr	r1, [sp, #24]
 801836c:	2201      	movs	r2, #1
 801836e:	9805      	ldr	r0, [sp, #20]
 8018370:	f002 fbba 	bl	801aae8 <__lshift>
 8018374:	9907      	ldr	r1, [sp, #28]
 8018376:	9006      	str	r0, [sp, #24]
 8018378:	f002 fc24 	bl	801abc4 <__mcmp>
 801837c:	2800      	cmp	r0, #0
 801837e:	dd6b      	ble.n	8018458 <_strtod_l+0x924>
 8018380:	9908      	ldr	r1, [sp, #32]
 8018382:	003b      	movs	r3, r7
 8018384:	4a38      	ldr	r2, [pc, #224]	; (8018468 <_strtod_l+0x934>)
 8018386:	2900      	cmp	r1, #0
 8018388:	d100      	bne.n	801838c <_strtod_l+0x858>
 801838a:	e092      	b.n	80184b2 <_strtod_l+0x97e>
 801838c:	0011      	movs	r1, r2
 801838e:	20d6      	movs	r0, #214	; 0xd6
 8018390:	4039      	ands	r1, r7
 8018392:	04c0      	lsls	r0, r0, #19
 8018394:	4281      	cmp	r1, r0
 8018396:	dd00      	ble.n	801839a <_strtod_l+0x866>
 8018398:	e08b      	b.n	80184b2 <_strtod_l+0x97e>
 801839a:	23dc      	movs	r3, #220	; 0xdc
 801839c:	049b      	lsls	r3, r3, #18
 801839e:	4299      	cmp	r1, r3
 80183a0:	dc00      	bgt.n	80183a4 <_strtod_l+0x870>
 80183a2:	e6a4      	b.n	80180ee <_strtod_l+0x5ba>
 80183a4:	0030      	movs	r0, r6
 80183a6:	0039      	movs	r1, r7
 80183a8:	2200      	movs	r2, #0
 80183aa:	4b30      	ldr	r3, [pc, #192]	; (801846c <_strtod_l+0x938>)
 80183ac:	f7e9 f88c 	bl	80014c8 <__aeabi_dmul>
 80183b0:	0006      	movs	r6, r0
 80183b2:	000f      	movs	r7, r1
 80183b4:	4308      	orrs	r0, r1
 80183b6:	d000      	beq.n	80183ba <_strtod_l+0x886>
 80183b8:	e62f      	b.n	801801a <_strtod_l+0x4e6>
 80183ba:	2322      	movs	r3, #34	; 0x22
 80183bc:	9a05      	ldr	r2, [sp, #20]
 80183be:	6013      	str	r3, [r2, #0]
 80183c0:	e62b      	b.n	801801a <_strtod_l+0x4e6>
 80183c2:	234b      	movs	r3, #75	; 0x4b
 80183c4:	1a9a      	subs	r2, r3, r2
 80183c6:	3b4c      	subs	r3, #76	; 0x4c
 80183c8:	4093      	lsls	r3, r2
 80183ca:	4019      	ands	r1, r3
 80183cc:	000f      	movs	r7, r1
 80183ce:	e6e0      	b.n	8018192 <_strtod_l+0x65e>
 80183d0:	2201      	movs	r2, #1
 80183d2:	4252      	negs	r2, r2
 80183d4:	409a      	lsls	r2, r3
 80183d6:	4016      	ands	r6, r2
 80183d8:	e6db      	b.n	8018192 <_strtod_l+0x65e>
 80183da:	4925      	ldr	r1, [pc, #148]	; (8018470 <_strtod_l+0x93c>)
 80183dc:	1acb      	subs	r3, r1, r3
 80183de:	0001      	movs	r1, r0
 80183e0:	4099      	lsls	r1, r3
 80183e2:	9110      	str	r1, [sp, #64]	; 0x40
 80183e4:	e741      	b.n	801826a <_strtod_l+0x736>
 80183e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80183e8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80183ea:	9805      	ldr	r0, [sp, #20]
 80183ec:	f002 fb7c 	bl	801aae8 <__lshift>
 80183f0:	9020      	str	r0, [sp, #128]	; 0x80
 80183f2:	2800      	cmp	r0, #0
 80183f4:	d000      	beq.n	80183f8 <_strtod_l+0x8c4>
 80183f6:	e76c      	b.n	80182d2 <_strtod_l+0x79e>
 80183f8:	e606      	b.n	8018008 <_strtod_l+0x4d4>
 80183fa:	970c      	str	r7, [sp, #48]	; 0x30
 80183fc:	2800      	cmp	r0, #0
 80183fe:	d176      	bne.n	80184ee <_strtod_l+0x9ba>
 8018400:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018402:	033b      	lsls	r3, r7, #12
 8018404:	0b1b      	lsrs	r3, r3, #12
 8018406:	2a00      	cmp	r2, #0
 8018408:	d038      	beq.n	801847c <_strtod_l+0x948>
 801840a:	4a1a      	ldr	r2, [pc, #104]	; (8018474 <_strtod_l+0x940>)
 801840c:	4293      	cmp	r3, r2
 801840e:	d138      	bne.n	8018482 <_strtod_l+0x94e>
 8018410:	2201      	movs	r2, #1
 8018412:	9b08      	ldr	r3, [sp, #32]
 8018414:	4252      	negs	r2, r2
 8018416:	0031      	movs	r1, r6
 8018418:	0010      	movs	r0, r2
 801841a:	2b00      	cmp	r3, #0
 801841c:	d00b      	beq.n	8018436 <_strtod_l+0x902>
 801841e:	24d4      	movs	r4, #212	; 0xd4
 8018420:	4b11      	ldr	r3, [pc, #68]	; (8018468 <_strtod_l+0x934>)
 8018422:	0010      	movs	r0, r2
 8018424:	403b      	ands	r3, r7
 8018426:	04e4      	lsls	r4, r4, #19
 8018428:	42a3      	cmp	r3, r4
 801842a:	d804      	bhi.n	8018436 <_strtod_l+0x902>
 801842c:	306c      	adds	r0, #108	; 0x6c
 801842e:	0d1b      	lsrs	r3, r3, #20
 8018430:	1ac3      	subs	r3, r0, r3
 8018432:	409a      	lsls	r2, r3
 8018434:	0010      	movs	r0, r2
 8018436:	4281      	cmp	r1, r0
 8018438:	d123      	bne.n	8018482 <_strtod_l+0x94e>
 801843a:	4b0f      	ldr	r3, [pc, #60]	; (8018478 <_strtod_l+0x944>)
 801843c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801843e:	429a      	cmp	r2, r3
 8018440:	d102      	bne.n	8018448 <_strtod_l+0x914>
 8018442:	1c4b      	adds	r3, r1, #1
 8018444:	d100      	bne.n	8018448 <_strtod_l+0x914>
 8018446:	e5df      	b.n	8018008 <_strtod_l+0x4d4>
 8018448:	4b07      	ldr	r3, [pc, #28]	; (8018468 <_strtod_l+0x934>)
 801844a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801844c:	2600      	movs	r6, #0
 801844e:	401a      	ands	r2, r3
 8018450:	0013      	movs	r3, r2
 8018452:	2280      	movs	r2, #128	; 0x80
 8018454:	0352      	lsls	r2, r2, #13
 8018456:	189f      	adds	r7, r3, r2
 8018458:	9b08      	ldr	r3, [sp, #32]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d1a2      	bne.n	80183a4 <_strtod_l+0x870>
 801845e:	e5dc      	b.n	801801a <_strtod_l+0x4e6>
 8018460:	0801d1e0 	.word	0x0801d1e0
 8018464:	fffffc02 	.word	0xfffffc02
 8018468:	7ff00000 	.word	0x7ff00000
 801846c:	39500000 	.word	0x39500000
 8018470:	fffffbe2 	.word	0xfffffbe2
 8018474:	000fffff 	.word	0x000fffff
 8018478:	7fefffff 	.word	0x7fefffff
 801847c:	4333      	orrs	r3, r6
 801847e:	d100      	bne.n	8018482 <_strtod_l+0x94e>
 8018480:	e77e      	b.n	8018380 <_strtod_l+0x84c>
 8018482:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018484:	2b00      	cmp	r3, #0
 8018486:	d01d      	beq.n	80184c4 <_strtod_l+0x990>
 8018488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801848a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801848c:	4213      	tst	r3, r2
 801848e:	d0e3      	beq.n	8018458 <_strtod_l+0x924>
 8018490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018492:	0030      	movs	r0, r6
 8018494:	0039      	movs	r1, r7
 8018496:	9a08      	ldr	r2, [sp, #32]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d017      	beq.n	80184cc <_strtod_l+0x998>
 801849c:	f7ff fb32 	bl	8017b04 <sulp>
 80184a0:	0002      	movs	r2, r0
 80184a2:	000b      	movs	r3, r1
 80184a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80184a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80184a8:	f7e8 f8d0 	bl	800064c <__aeabi_dadd>
 80184ac:	0006      	movs	r6, r0
 80184ae:	000f      	movs	r7, r1
 80184b0:	e7d2      	b.n	8018458 <_strtod_l+0x924>
 80184b2:	2601      	movs	r6, #1
 80184b4:	4013      	ands	r3, r2
 80184b6:	4a99      	ldr	r2, [pc, #612]	; (801871c <_strtod_l+0xbe8>)
 80184b8:	4276      	negs	r6, r6
 80184ba:	189b      	adds	r3, r3, r2
 80184bc:	4a98      	ldr	r2, [pc, #608]	; (8018720 <_strtod_l+0xbec>)
 80184be:	431a      	orrs	r2, r3
 80184c0:	0017      	movs	r7, r2
 80184c2:	e7c9      	b.n	8018458 <_strtod_l+0x924>
 80184c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80184c6:	4233      	tst	r3, r6
 80184c8:	d0c6      	beq.n	8018458 <_strtod_l+0x924>
 80184ca:	e7e1      	b.n	8018490 <_strtod_l+0x95c>
 80184cc:	f7ff fb1a 	bl	8017b04 <sulp>
 80184d0:	0002      	movs	r2, r0
 80184d2:	000b      	movs	r3, r1
 80184d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80184d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80184d8:	f7e9 fa62 	bl	80019a0 <__aeabi_dsub>
 80184dc:	2200      	movs	r2, #0
 80184de:	2300      	movs	r3, #0
 80184e0:	0006      	movs	r6, r0
 80184e2:	000f      	movs	r7, r1
 80184e4:	f7e7 ffbc 	bl	8000460 <__aeabi_dcmpeq>
 80184e8:	2800      	cmp	r0, #0
 80184ea:	d0b5      	beq.n	8018458 <_strtod_l+0x924>
 80184ec:	e5ff      	b.n	80180ee <_strtod_l+0x5ba>
 80184ee:	9907      	ldr	r1, [sp, #28]
 80184f0:	9806      	ldr	r0, [sp, #24]
 80184f2:	f002 fcf3 	bl	801aedc <__ratio>
 80184f6:	2380      	movs	r3, #128	; 0x80
 80184f8:	2200      	movs	r2, #0
 80184fa:	05db      	lsls	r3, r3, #23
 80184fc:	0004      	movs	r4, r0
 80184fe:	000d      	movs	r5, r1
 8018500:	f7e7 ffbe 	bl	8000480 <__aeabi_dcmple>
 8018504:	2800      	cmp	r0, #0
 8018506:	d075      	beq.n	80185f4 <_strtod_l+0xac0>
 8018508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801850a:	2b00      	cmp	r3, #0
 801850c:	d047      	beq.n	801859e <_strtod_l+0xa6a>
 801850e:	2300      	movs	r3, #0
 8018510:	4c84      	ldr	r4, [pc, #528]	; (8018724 <_strtod_l+0xbf0>)
 8018512:	2500      	movs	r5, #0
 8018514:	9310      	str	r3, [sp, #64]	; 0x40
 8018516:	9411      	str	r4, [sp, #68]	; 0x44
 8018518:	4c82      	ldr	r4, [pc, #520]	; (8018724 <_strtod_l+0xbf0>)
 801851a:	4a83      	ldr	r2, [pc, #524]	; (8018728 <_strtod_l+0xbf4>)
 801851c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801851e:	4013      	ands	r3, r2
 8018520:	9314      	str	r3, [sp, #80]	; 0x50
 8018522:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018524:	4b81      	ldr	r3, [pc, #516]	; (801872c <_strtod_l+0xbf8>)
 8018526:	429a      	cmp	r2, r3
 8018528:	d000      	beq.n	801852c <_strtod_l+0x9f8>
 801852a:	e0ac      	b.n	8018686 <_strtod_l+0xb52>
 801852c:	4a80      	ldr	r2, [pc, #512]	; (8018730 <_strtod_l+0xbfc>)
 801852e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018530:	4694      	mov	ip, r2
 8018532:	4463      	add	r3, ip
 8018534:	001f      	movs	r7, r3
 8018536:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801853a:	0030      	movs	r0, r6
 801853c:	0039      	movs	r1, r7
 801853e:	920c      	str	r2, [sp, #48]	; 0x30
 8018540:	930d      	str	r3, [sp, #52]	; 0x34
 8018542:	f002 fbf3 	bl	801ad2c <__ulp>
 8018546:	0002      	movs	r2, r0
 8018548:	000b      	movs	r3, r1
 801854a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801854c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801854e:	f7e8 ffbb 	bl	80014c8 <__aeabi_dmul>
 8018552:	0032      	movs	r2, r6
 8018554:	003b      	movs	r3, r7
 8018556:	f7e8 f879 	bl	800064c <__aeabi_dadd>
 801855a:	4a73      	ldr	r2, [pc, #460]	; (8018728 <_strtod_l+0xbf4>)
 801855c:	4b75      	ldr	r3, [pc, #468]	; (8018734 <_strtod_l+0xc00>)
 801855e:	0006      	movs	r6, r0
 8018560:	400a      	ands	r2, r1
 8018562:	429a      	cmp	r2, r3
 8018564:	d95e      	bls.n	8018624 <_strtod_l+0xaf0>
 8018566:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018568:	4b73      	ldr	r3, [pc, #460]	; (8018738 <_strtod_l+0xc04>)
 801856a:	429a      	cmp	r2, r3
 801856c:	d103      	bne.n	8018576 <_strtod_l+0xa42>
 801856e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018570:	3301      	adds	r3, #1
 8018572:	d100      	bne.n	8018576 <_strtod_l+0xa42>
 8018574:	e548      	b.n	8018008 <_strtod_l+0x4d4>
 8018576:	2601      	movs	r6, #1
 8018578:	4f6f      	ldr	r7, [pc, #444]	; (8018738 <_strtod_l+0xc04>)
 801857a:	4276      	negs	r6, r6
 801857c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801857e:	9805      	ldr	r0, [sp, #20]
 8018580:	f002 f894 	bl	801a6ac <_Bfree>
 8018584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018586:	9805      	ldr	r0, [sp, #20]
 8018588:	f002 f890 	bl	801a6ac <_Bfree>
 801858c:	9907      	ldr	r1, [sp, #28]
 801858e:	9805      	ldr	r0, [sp, #20]
 8018590:	f002 f88c 	bl	801a6ac <_Bfree>
 8018594:	9906      	ldr	r1, [sp, #24]
 8018596:	9805      	ldr	r0, [sp, #20]
 8018598:	f002 f888 	bl	801a6ac <_Bfree>
 801859c:	e61d      	b.n	80181da <_strtod_l+0x6a6>
 801859e:	2e00      	cmp	r6, #0
 80185a0:	d11c      	bne.n	80185dc <_strtod_l+0xaa8>
 80185a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185a4:	031b      	lsls	r3, r3, #12
 80185a6:	d11f      	bne.n	80185e8 <_strtod_l+0xab4>
 80185a8:	2200      	movs	r2, #0
 80185aa:	0020      	movs	r0, r4
 80185ac:	0029      	movs	r1, r5
 80185ae:	4b5d      	ldr	r3, [pc, #372]	; (8018724 <_strtod_l+0xbf0>)
 80185b0:	f7e7 ff5c 	bl	800046c <__aeabi_dcmplt>
 80185b4:	2800      	cmp	r0, #0
 80185b6:	d11a      	bne.n	80185ee <_strtod_l+0xaba>
 80185b8:	0020      	movs	r0, r4
 80185ba:	0029      	movs	r1, r5
 80185bc:	2200      	movs	r2, #0
 80185be:	4b5f      	ldr	r3, [pc, #380]	; (801873c <_strtod_l+0xc08>)
 80185c0:	f7e8 ff82 	bl	80014c8 <__aeabi_dmul>
 80185c4:	0005      	movs	r5, r0
 80185c6:	000c      	movs	r4, r1
 80185c8:	2380      	movs	r3, #128	; 0x80
 80185ca:	061b      	lsls	r3, r3, #24
 80185cc:	18e3      	adds	r3, r4, r3
 80185ce:	951c      	str	r5, [sp, #112]	; 0x70
 80185d0:	931d      	str	r3, [sp, #116]	; 0x74
 80185d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80185d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80185d6:	9210      	str	r2, [sp, #64]	; 0x40
 80185d8:	9311      	str	r3, [sp, #68]	; 0x44
 80185da:	e79e      	b.n	801851a <_strtod_l+0x9e6>
 80185dc:	2e01      	cmp	r6, #1
 80185de:	d103      	bne.n	80185e8 <_strtod_l+0xab4>
 80185e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d100      	bne.n	80185e8 <_strtod_l+0xab4>
 80185e6:	e582      	b.n	80180ee <_strtod_l+0x5ba>
 80185e8:	2300      	movs	r3, #0
 80185ea:	4c55      	ldr	r4, [pc, #340]	; (8018740 <_strtod_l+0xc0c>)
 80185ec:	e791      	b.n	8018512 <_strtod_l+0x9de>
 80185ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80185f0:	4c52      	ldr	r4, [pc, #328]	; (801873c <_strtod_l+0xc08>)
 80185f2:	e7e9      	b.n	80185c8 <_strtod_l+0xa94>
 80185f4:	2200      	movs	r2, #0
 80185f6:	0020      	movs	r0, r4
 80185f8:	0029      	movs	r1, r5
 80185fa:	4b50      	ldr	r3, [pc, #320]	; (801873c <_strtod_l+0xc08>)
 80185fc:	f7e8 ff64 	bl	80014c8 <__aeabi_dmul>
 8018600:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018602:	0005      	movs	r5, r0
 8018604:	000b      	movs	r3, r1
 8018606:	000c      	movs	r4, r1
 8018608:	2a00      	cmp	r2, #0
 801860a:	d107      	bne.n	801861c <_strtod_l+0xae8>
 801860c:	2280      	movs	r2, #128	; 0x80
 801860e:	0612      	lsls	r2, r2, #24
 8018610:	188b      	adds	r3, r1, r2
 8018612:	9016      	str	r0, [sp, #88]	; 0x58
 8018614:	9317      	str	r3, [sp, #92]	; 0x5c
 8018616:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801861a:	e7dc      	b.n	80185d6 <_strtod_l+0xaa2>
 801861c:	0002      	movs	r2, r0
 801861e:	9216      	str	r2, [sp, #88]	; 0x58
 8018620:	9317      	str	r3, [sp, #92]	; 0x5c
 8018622:	e7f8      	b.n	8018616 <_strtod_l+0xae2>
 8018624:	23d4      	movs	r3, #212	; 0xd4
 8018626:	049b      	lsls	r3, r3, #18
 8018628:	18cf      	adds	r7, r1, r3
 801862a:	9b08      	ldr	r3, [sp, #32]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d1a5      	bne.n	801857c <_strtod_l+0xa48>
 8018630:	4b3d      	ldr	r3, [pc, #244]	; (8018728 <_strtod_l+0xbf4>)
 8018632:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018634:	403b      	ands	r3, r7
 8018636:	429a      	cmp	r2, r3
 8018638:	d1a0      	bne.n	801857c <_strtod_l+0xa48>
 801863a:	0028      	movs	r0, r5
 801863c:	0021      	movs	r1, r4
 801863e:	f7e7 ffb3 	bl	80005a8 <__aeabi_d2lz>
 8018642:	f7e7 ffed 	bl	8000620 <__aeabi_l2d>
 8018646:	0002      	movs	r2, r0
 8018648:	000b      	movs	r3, r1
 801864a:	0028      	movs	r0, r5
 801864c:	0021      	movs	r1, r4
 801864e:	f7e9 f9a7 	bl	80019a0 <__aeabi_dsub>
 8018652:	033b      	lsls	r3, r7, #12
 8018654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018656:	0b1b      	lsrs	r3, r3, #12
 8018658:	4333      	orrs	r3, r6
 801865a:	4313      	orrs	r3, r2
 801865c:	0004      	movs	r4, r0
 801865e:	000d      	movs	r5, r1
 8018660:	4a38      	ldr	r2, [pc, #224]	; (8018744 <_strtod_l+0xc10>)
 8018662:	2b00      	cmp	r3, #0
 8018664:	d055      	beq.n	8018712 <_strtod_l+0xbde>
 8018666:	4b38      	ldr	r3, [pc, #224]	; (8018748 <_strtod_l+0xc14>)
 8018668:	f7e7 ff00 	bl	800046c <__aeabi_dcmplt>
 801866c:	2800      	cmp	r0, #0
 801866e:	d000      	beq.n	8018672 <_strtod_l+0xb3e>
 8018670:	e4d3      	b.n	801801a <_strtod_l+0x4e6>
 8018672:	0020      	movs	r0, r4
 8018674:	0029      	movs	r1, r5
 8018676:	4a35      	ldr	r2, [pc, #212]	; (801874c <_strtod_l+0xc18>)
 8018678:	4b30      	ldr	r3, [pc, #192]	; (801873c <_strtod_l+0xc08>)
 801867a:	f7e7 ff0b 	bl	8000494 <__aeabi_dcmpgt>
 801867e:	2800      	cmp	r0, #0
 8018680:	d100      	bne.n	8018684 <_strtod_l+0xb50>
 8018682:	e77b      	b.n	801857c <_strtod_l+0xa48>
 8018684:	e4c9      	b.n	801801a <_strtod_l+0x4e6>
 8018686:	9b08      	ldr	r3, [sp, #32]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d02b      	beq.n	80186e4 <_strtod_l+0xbb0>
 801868c:	23d4      	movs	r3, #212	; 0xd4
 801868e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018690:	04db      	lsls	r3, r3, #19
 8018692:	429a      	cmp	r2, r3
 8018694:	d826      	bhi.n	80186e4 <_strtod_l+0xbb0>
 8018696:	0028      	movs	r0, r5
 8018698:	0021      	movs	r1, r4
 801869a:	4a2d      	ldr	r2, [pc, #180]	; (8018750 <_strtod_l+0xc1c>)
 801869c:	4b2d      	ldr	r3, [pc, #180]	; (8018754 <_strtod_l+0xc20>)
 801869e:	f7e7 feef 	bl	8000480 <__aeabi_dcmple>
 80186a2:	2800      	cmp	r0, #0
 80186a4:	d017      	beq.n	80186d6 <_strtod_l+0xba2>
 80186a6:	0028      	movs	r0, r5
 80186a8:	0021      	movs	r1, r4
 80186aa:	f7e7 ff5f 	bl	800056c <__aeabi_d2uiz>
 80186ae:	2800      	cmp	r0, #0
 80186b0:	d100      	bne.n	80186b4 <_strtod_l+0xb80>
 80186b2:	3001      	adds	r0, #1
 80186b4:	f7e9 fd8a 	bl	80021cc <__aeabi_ui2d>
 80186b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80186ba:	0005      	movs	r5, r0
 80186bc:	000b      	movs	r3, r1
 80186be:	000c      	movs	r4, r1
 80186c0:	2a00      	cmp	r2, #0
 80186c2:	d122      	bne.n	801870a <_strtod_l+0xbd6>
 80186c4:	2280      	movs	r2, #128	; 0x80
 80186c6:	0612      	lsls	r2, r2, #24
 80186c8:	188b      	adds	r3, r1, r2
 80186ca:	9018      	str	r0, [sp, #96]	; 0x60
 80186cc:	9319      	str	r3, [sp, #100]	; 0x64
 80186ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80186d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80186d2:	9210      	str	r2, [sp, #64]	; 0x40
 80186d4:	9311      	str	r3, [sp, #68]	; 0x44
 80186d6:	22d6      	movs	r2, #214	; 0xd6
 80186d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80186da:	04d2      	lsls	r2, r2, #19
 80186dc:	189b      	adds	r3, r3, r2
 80186de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80186e0:	1a9b      	subs	r3, r3, r2
 80186e2:	9311      	str	r3, [sp, #68]	; 0x44
 80186e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80186e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80186e8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80186ea:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80186ec:	f002 fb1e 	bl	801ad2c <__ulp>
 80186f0:	0002      	movs	r2, r0
 80186f2:	000b      	movs	r3, r1
 80186f4:	0030      	movs	r0, r6
 80186f6:	0039      	movs	r1, r7
 80186f8:	f7e8 fee6 	bl	80014c8 <__aeabi_dmul>
 80186fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80186fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018700:	f7e7 ffa4 	bl	800064c <__aeabi_dadd>
 8018704:	0006      	movs	r6, r0
 8018706:	000f      	movs	r7, r1
 8018708:	e78f      	b.n	801862a <_strtod_l+0xaf6>
 801870a:	0002      	movs	r2, r0
 801870c:	9218      	str	r2, [sp, #96]	; 0x60
 801870e:	9319      	str	r3, [sp, #100]	; 0x64
 8018710:	e7dd      	b.n	80186ce <_strtod_l+0xb9a>
 8018712:	4b11      	ldr	r3, [pc, #68]	; (8018758 <_strtod_l+0xc24>)
 8018714:	f7e7 feaa 	bl	800046c <__aeabi_dcmplt>
 8018718:	e7b1      	b.n	801867e <_strtod_l+0xb4a>
 801871a:	46c0      	nop			; (mov r8, r8)
 801871c:	fff00000 	.word	0xfff00000
 8018720:	000fffff 	.word	0x000fffff
 8018724:	3ff00000 	.word	0x3ff00000
 8018728:	7ff00000 	.word	0x7ff00000
 801872c:	7fe00000 	.word	0x7fe00000
 8018730:	fcb00000 	.word	0xfcb00000
 8018734:	7c9fffff 	.word	0x7c9fffff
 8018738:	7fefffff 	.word	0x7fefffff
 801873c:	3fe00000 	.word	0x3fe00000
 8018740:	bff00000 	.word	0xbff00000
 8018744:	94a03595 	.word	0x94a03595
 8018748:	3fdfffff 	.word	0x3fdfffff
 801874c:	35afe535 	.word	0x35afe535
 8018750:	ffc00000 	.word	0xffc00000
 8018754:	41dfffff 	.word	0x41dfffff
 8018758:	3fcfffff 	.word	0x3fcfffff

0801875c <strtod>:
 801875c:	b510      	push	{r4, lr}
 801875e:	000a      	movs	r2, r1
 8018760:	0001      	movs	r1, r0
 8018762:	4803      	ldr	r0, [pc, #12]	; (8018770 <strtod+0x14>)
 8018764:	4b03      	ldr	r3, [pc, #12]	; (8018774 <strtod+0x18>)
 8018766:	6800      	ldr	r0, [r0, #0]
 8018768:	f7ff f9e4 	bl	8017b34 <_strtod_l>
 801876c:	bd10      	pop	{r4, pc}
 801876e:	46c0      	nop			; (mov r8, r8)
 8018770:	20000254 	.word	0x20000254
 8018774:	200002bc 	.word	0x200002bc

08018778 <_strtol_l.constprop.0>:
 8018778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801877a:	b087      	sub	sp, #28
 801877c:	001e      	movs	r6, r3
 801877e:	9005      	str	r0, [sp, #20]
 8018780:	9101      	str	r1, [sp, #4]
 8018782:	9202      	str	r2, [sp, #8]
 8018784:	2b01      	cmp	r3, #1
 8018786:	d045      	beq.n	8018814 <_strtol_l.constprop.0+0x9c>
 8018788:	000b      	movs	r3, r1
 801878a:	2e24      	cmp	r6, #36	; 0x24
 801878c:	d842      	bhi.n	8018814 <_strtol_l.constprop.0+0x9c>
 801878e:	4a3f      	ldr	r2, [pc, #252]	; (801888c <_strtol_l.constprop.0+0x114>)
 8018790:	2108      	movs	r1, #8
 8018792:	4694      	mov	ip, r2
 8018794:	001a      	movs	r2, r3
 8018796:	4660      	mov	r0, ip
 8018798:	7814      	ldrb	r4, [r2, #0]
 801879a:	3301      	adds	r3, #1
 801879c:	5d00      	ldrb	r0, [r0, r4]
 801879e:	001d      	movs	r5, r3
 80187a0:	0007      	movs	r7, r0
 80187a2:	400f      	ands	r7, r1
 80187a4:	4208      	tst	r0, r1
 80187a6:	d1f5      	bne.n	8018794 <_strtol_l.constprop.0+0x1c>
 80187a8:	2c2d      	cmp	r4, #45	; 0x2d
 80187aa:	d13a      	bne.n	8018822 <_strtol_l.constprop.0+0xaa>
 80187ac:	2701      	movs	r7, #1
 80187ae:	781c      	ldrb	r4, [r3, #0]
 80187b0:	1c95      	adds	r5, r2, #2
 80187b2:	2e00      	cmp	r6, #0
 80187b4:	d065      	beq.n	8018882 <_strtol_l.constprop.0+0x10a>
 80187b6:	2e10      	cmp	r6, #16
 80187b8:	d109      	bne.n	80187ce <_strtol_l.constprop.0+0x56>
 80187ba:	2c30      	cmp	r4, #48	; 0x30
 80187bc:	d107      	bne.n	80187ce <_strtol_l.constprop.0+0x56>
 80187be:	2220      	movs	r2, #32
 80187c0:	782b      	ldrb	r3, [r5, #0]
 80187c2:	4393      	bics	r3, r2
 80187c4:	2b58      	cmp	r3, #88	; 0x58
 80187c6:	d157      	bne.n	8018878 <_strtol_l.constprop.0+0x100>
 80187c8:	2610      	movs	r6, #16
 80187ca:	786c      	ldrb	r4, [r5, #1]
 80187cc:	3502      	adds	r5, #2
 80187ce:	4b30      	ldr	r3, [pc, #192]	; (8018890 <_strtol_l.constprop.0+0x118>)
 80187d0:	0031      	movs	r1, r6
 80187d2:	18fb      	adds	r3, r7, r3
 80187d4:	0018      	movs	r0, r3
 80187d6:	9303      	str	r3, [sp, #12]
 80187d8:	f7e7 fd42 	bl	8000260 <__aeabi_uidivmod>
 80187dc:	2300      	movs	r3, #0
 80187de:	2201      	movs	r2, #1
 80187e0:	4684      	mov	ip, r0
 80187e2:	0018      	movs	r0, r3
 80187e4:	9104      	str	r1, [sp, #16]
 80187e6:	4252      	negs	r2, r2
 80187e8:	0021      	movs	r1, r4
 80187ea:	3930      	subs	r1, #48	; 0x30
 80187ec:	2909      	cmp	r1, #9
 80187ee:	d81d      	bhi.n	801882c <_strtol_l.constprop.0+0xb4>
 80187f0:	000c      	movs	r4, r1
 80187f2:	42a6      	cmp	r6, r4
 80187f4:	dd28      	ble.n	8018848 <_strtol_l.constprop.0+0xd0>
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	db24      	blt.n	8018844 <_strtol_l.constprop.0+0xcc>
 80187fa:	0013      	movs	r3, r2
 80187fc:	4584      	cmp	ip, r0
 80187fe:	d306      	bcc.n	801880e <_strtol_l.constprop.0+0x96>
 8018800:	d102      	bne.n	8018808 <_strtol_l.constprop.0+0x90>
 8018802:	9904      	ldr	r1, [sp, #16]
 8018804:	42a1      	cmp	r1, r4
 8018806:	db02      	blt.n	801880e <_strtol_l.constprop.0+0x96>
 8018808:	2301      	movs	r3, #1
 801880a:	4370      	muls	r0, r6
 801880c:	1820      	adds	r0, r4, r0
 801880e:	782c      	ldrb	r4, [r5, #0]
 8018810:	3501      	adds	r5, #1
 8018812:	e7e9      	b.n	80187e8 <_strtol_l.constprop.0+0x70>
 8018814:	f7fd ff98 	bl	8016748 <__errno>
 8018818:	2316      	movs	r3, #22
 801881a:	6003      	str	r3, [r0, #0]
 801881c:	2000      	movs	r0, #0
 801881e:	b007      	add	sp, #28
 8018820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018822:	2c2b      	cmp	r4, #43	; 0x2b
 8018824:	d1c5      	bne.n	80187b2 <_strtol_l.constprop.0+0x3a>
 8018826:	781c      	ldrb	r4, [r3, #0]
 8018828:	1c95      	adds	r5, r2, #2
 801882a:	e7c2      	b.n	80187b2 <_strtol_l.constprop.0+0x3a>
 801882c:	0021      	movs	r1, r4
 801882e:	3941      	subs	r1, #65	; 0x41
 8018830:	2919      	cmp	r1, #25
 8018832:	d801      	bhi.n	8018838 <_strtol_l.constprop.0+0xc0>
 8018834:	3c37      	subs	r4, #55	; 0x37
 8018836:	e7dc      	b.n	80187f2 <_strtol_l.constprop.0+0x7a>
 8018838:	0021      	movs	r1, r4
 801883a:	3961      	subs	r1, #97	; 0x61
 801883c:	2919      	cmp	r1, #25
 801883e:	d803      	bhi.n	8018848 <_strtol_l.constprop.0+0xd0>
 8018840:	3c57      	subs	r4, #87	; 0x57
 8018842:	e7d6      	b.n	80187f2 <_strtol_l.constprop.0+0x7a>
 8018844:	0013      	movs	r3, r2
 8018846:	e7e2      	b.n	801880e <_strtol_l.constprop.0+0x96>
 8018848:	2b00      	cmp	r3, #0
 801884a:	da09      	bge.n	8018860 <_strtol_l.constprop.0+0xe8>
 801884c:	2322      	movs	r3, #34	; 0x22
 801884e:	9a05      	ldr	r2, [sp, #20]
 8018850:	9803      	ldr	r0, [sp, #12]
 8018852:	6013      	str	r3, [r2, #0]
 8018854:	9b02      	ldr	r3, [sp, #8]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d0e1      	beq.n	801881e <_strtol_l.constprop.0+0xa6>
 801885a:	1e6b      	subs	r3, r5, #1
 801885c:	9301      	str	r3, [sp, #4]
 801885e:	e007      	b.n	8018870 <_strtol_l.constprop.0+0xf8>
 8018860:	2f00      	cmp	r7, #0
 8018862:	d000      	beq.n	8018866 <_strtol_l.constprop.0+0xee>
 8018864:	4240      	negs	r0, r0
 8018866:	9a02      	ldr	r2, [sp, #8]
 8018868:	2a00      	cmp	r2, #0
 801886a:	d0d8      	beq.n	801881e <_strtol_l.constprop.0+0xa6>
 801886c:	2b00      	cmp	r3, #0
 801886e:	d1f4      	bne.n	801885a <_strtol_l.constprop.0+0xe2>
 8018870:	9b02      	ldr	r3, [sp, #8]
 8018872:	9a01      	ldr	r2, [sp, #4]
 8018874:	601a      	str	r2, [r3, #0]
 8018876:	e7d2      	b.n	801881e <_strtol_l.constprop.0+0xa6>
 8018878:	2430      	movs	r4, #48	; 0x30
 801887a:	2e00      	cmp	r6, #0
 801887c:	d1a7      	bne.n	80187ce <_strtol_l.constprop.0+0x56>
 801887e:	3608      	adds	r6, #8
 8018880:	e7a5      	b.n	80187ce <_strtol_l.constprop.0+0x56>
 8018882:	2c30      	cmp	r4, #48	; 0x30
 8018884:	d09b      	beq.n	80187be <_strtol_l.constprop.0+0x46>
 8018886:	260a      	movs	r6, #10
 8018888:	e7a1      	b.n	80187ce <_strtol_l.constprop.0+0x56>
 801888a:	46c0      	nop			; (mov r8, r8)
 801888c:	0801d209 	.word	0x0801d209
 8018890:	7fffffff 	.word	0x7fffffff

08018894 <_strtol_r>:
 8018894:	b510      	push	{r4, lr}
 8018896:	f7ff ff6f 	bl	8018778 <_strtol_l.constprop.0>
 801889a:	bd10      	pop	{r4, pc}

0801889c <strtol>:
 801889c:	b510      	push	{r4, lr}
 801889e:	0013      	movs	r3, r2
 80188a0:	000a      	movs	r2, r1
 80188a2:	0001      	movs	r1, r0
 80188a4:	4802      	ldr	r0, [pc, #8]	; (80188b0 <strtol+0x14>)
 80188a6:	6800      	ldr	r0, [r0, #0]
 80188a8:	f7ff ff66 	bl	8018778 <_strtol_l.constprop.0>
 80188ac:	bd10      	pop	{r4, pc}
 80188ae:	46c0      	nop			; (mov r8, r8)
 80188b0:	20000254 	.word	0x20000254

080188b4 <_strtoul_l.constprop.0>:
 80188b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188b6:	b087      	sub	sp, #28
 80188b8:	9202      	str	r2, [sp, #8]
 80188ba:	4a42      	ldr	r2, [pc, #264]	; (80189c4 <_strtoul_l.constprop.0+0x110>)
 80188bc:	001e      	movs	r6, r3
 80188be:	9101      	str	r1, [sp, #4]
 80188c0:	000b      	movs	r3, r1
 80188c2:	4694      	mov	ip, r2
 80188c4:	2108      	movs	r1, #8
 80188c6:	9005      	str	r0, [sp, #20]
 80188c8:	001a      	movs	r2, r3
 80188ca:	4660      	mov	r0, ip
 80188cc:	7814      	ldrb	r4, [r2, #0]
 80188ce:	3301      	adds	r3, #1
 80188d0:	5d00      	ldrb	r0, [r0, r4]
 80188d2:	001d      	movs	r5, r3
 80188d4:	0007      	movs	r7, r0
 80188d6:	400f      	ands	r7, r1
 80188d8:	4208      	tst	r0, r1
 80188da:	d1f5      	bne.n	80188c8 <_strtoul_l.constprop.0+0x14>
 80188dc:	2c2d      	cmp	r4, #45	; 0x2d
 80188de:	d13a      	bne.n	8018956 <_strtoul_l.constprop.0+0xa2>
 80188e0:	2701      	movs	r7, #1
 80188e2:	781c      	ldrb	r4, [r3, #0]
 80188e4:	1c95      	adds	r5, r2, #2
 80188e6:	2e00      	cmp	r6, #0
 80188e8:	d067      	beq.n	80189ba <_strtoul_l.constprop.0+0x106>
 80188ea:	2e10      	cmp	r6, #16
 80188ec:	d109      	bne.n	8018902 <_strtoul_l.constprop.0+0x4e>
 80188ee:	2c30      	cmp	r4, #48	; 0x30
 80188f0:	d107      	bne.n	8018902 <_strtoul_l.constprop.0+0x4e>
 80188f2:	2220      	movs	r2, #32
 80188f4:	782b      	ldrb	r3, [r5, #0]
 80188f6:	4393      	bics	r3, r2
 80188f8:	2b58      	cmp	r3, #88	; 0x58
 80188fa:	d159      	bne.n	80189b0 <_strtoul_l.constprop.0+0xfc>
 80188fc:	2610      	movs	r6, #16
 80188fe:	786c      	ldrb	r4, [r5, #1]
 8018900:	3502      	adds	r5, #2
 8018902:	2001      	movs	r0, #1
 8018904:	0031      	movs	r1, r6
 8018906:	4240      	negs	r0, r0
 8018908:	f7e7 fc24 	bl	8000154 <__udivsi3>
 801890c:	9003      	str	r0, [sp, #12]
 801890e:	2001      	movs	r0, #1
 8018910:	0031      	movs	r1, r6
 8018912:	4240      	negs	r0, r0
 8018914:	f7e7 fca4 	bl	8000260 <__aeabi_uidivmod>
 8018918:	2300      	movs	r3, #0
 801891a:	9104      	str	r1, [sp, #16]
 801891c:	2101      	movs	r1, #1
 801891e:	2201      	movs	r2, #1
 8018920:	0018      	movs	r0, r3
 8018922:	468c      	mov	ip, r1
 8018924:	4252      	negs	r2, r2
 8018926:	0021      	movs	r1, r4
 8018928:	3930      	subs	r1, #48	; 0x30
 801892a:	2909      	cmp	r1, #9
 801892c:	d818      	bhi.n	8018960 <_strtoul_l.constprop.0+0xac>
 801892e:	000c      	movs	r4, r1
 8018930:	42a6      	cmp	r6, r4
 8018932:	dd23      	ble.n	801897c <_strtoul_l.constprop.0+0xc8>
 8018934:	2b00      	cmp	r3, #0
 8018936:	db1f      	blt.n	8018978 <_strtoul_l.constprop.0+0xc4>
 8018938:	9903      	ldr	r1, [sp, #12]
 801893a:	0013      	movs	r3, r2
 801893c:	4281      	cmp	r1, r0
 801893e:	d307      	bcc.n	8018950 <_strtoul_l.constprop.0+0x9c>
 8018940:	d103      	bne.n	801894a <_strtoul_l.constprop.0+0x96>
 8018942:	9904      	ldr	r1, [sp, #16]
 8018944:	0013      	movs	r3, r2
 8018946:	42a1      	cmp	r1, r4
 8018948:	db02      	blt.n	8018950 <_strtoul_l.constprop.0+0x9c>
 801894a:	4663      	mov	r3, ip
 801894c:	4370      	muls	r0, r6
 801894e:	1820      	adds	r0, r4, r0
 8018950:	782c      	ldrb	r4, [r5, #0]
 8018952:	3501      	adds	r5, #1
 8018954:	e7e7      	b.n	8018926 <_strtoul_l.constprop.0+0x72>
 8018956:	2c2b      	cmp	r4, #43	; 0x2b
 8018958:	d1c5      	bne.n	80188e6 <_strtoul_l.constprop.0+0x32>
 801895a:	781c      	ldrb	r4, [r3, #0]
 801895c:	1c95      	adds	r5, r2, #2
 801895e:	e7c2      	b.n	80188e6 <_strtoul_l.constprop.0+0x32>
 8018960:	0021      	movs	r1, r4
 8018962:	3941      	subs	r1, #65	; 0x41
 8018964:	2919      	cmp	r1, #25
 8018966:	d801      	bhi.n	801896c <_strtoul_l.constprop.0+0xb8>
 8018968:	3c37      	subs	r4, #55	; 0x37
 801896a:	e7e1      	b.n	8018930 <_strtoul_l.constprop.0+0x7c>
 801896c:	0021      	movs	r1, r4
 801896e:	3961      	subs	r1, #97	; 0x61
 8018970:	2919      	cmp	r1, #25
 8018972:	d803      	bhi.n	801897c <_strtoul_l.constprop.0+0xc8>
 8018974:	3c57      	subs	r4, #87	; 0x57
 8018976:	e7db      	b.n	8018930 <_strtoul_l.constprop.0+0x7c>
 8018978:	0013      	movs	r3, r2
 801897a:	e7e9      	b.n	8018950 <_strtoul_l.constprop.0+0x9c>
 801897c:	2b00      	cmp	r3, #0
 801897e:	da09      	bge.n	8018994 <_strtoul_l.constprop.0+0xe0>
 8018980:	2322      	movs	r3, #34	; 0x22
 8018982:	2001      	movs	r0, #1
 8018984:	9a05      	ldr	r2, [sp, #20]
 8018986:	4240      	negs	r0, r0
 8018988:	6013      	str	r3, [r2, #0]
 801898a:	9b02      	ldr	r3, [sp, #8]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d109      	bne.n	80189a4 <_strtoul_l.constprop.0+0xf0>
 8018990:	b007      	add	sp, #28
 8018992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018994:	2f00      	cmp	r7, #0
 8018996:	d000      	beq.n	801899a <_strtoul_l.constprop.0+0xe6>
 8018998:	4240      	negs	r0, r0
 801899a:	9a02      	ldr	r2, [sp, #8]
 801899c:	2a00      	cmp	r2, #0
 801899e:	d0f7      	beq.n	8018990 <_strtoul_l.constprop.0+0xdc>
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d001      	beq.n	80189a8 <_strtoul_l.constprop.0+0xf4>
 80189a4:	1e6b      	subs	r3, r5, #1
 80189a6:	9301      	str	r3, [sp, #4]
 80189a8:	9b02      	ldr	r3, [sp, #8]
 80189aa:	9a01      	ldr	r2, [sp, #4]
 80189ac:	601a      	str	r2, [r3, #0]
 80189ae:	e7ef      	b.n	8018990 <_strtoul_l.constprop.0+0xdc>
 80189b0:	2430      	movs	r4, #48	; 0x30
 80189b2:	2e00      	cmp	r6, #0
 80189b4:	d1a5      	bne.n	8018902 <_strtoul_l.constprop.0+0x4e>
 80189b6:	3608      	adds	r6, #8
 80189b8:	e7a3      	b.n	8018902 <_strtoul_l.constprop.0+0x4e>
 80189ba:	2c30      	cmp	r4, #48	; 0x30
 80189bc:	d099      	beq.n	80188f2 <_strtoul_l.constprop.0+0x3e>
 80189be:	260a      	movs	r6, #10
 80189c0:	e79f      	b.n	8018902 <_strtoul_l.constprop.0+0x4e>
 80189c2:	46c0      	nop			; (mov r8, r8)
 80189c4:	0801d209 	.word	0x0801d209

080189c8 <_strtoul_r>:
 80189c8:	b510      	push	{r4, lr}
 80189ca:	f7ff ff73 	bl	80188b4 <_strtoul_l.constprop.0>
 80189ce:	bd10      	pop	{r4, pc}

080189d0 <strtoul>:
 80189d0:	b510      	push	{r4, lr}
 80189d2:	0013      	movs	r3, r2
 80189d4:	000a      	movs	r2, r1
 80189d6:	0001      	movs	r1, r0
 80189d8:	4802      	ldr	r0, [pc, #8]	; (80189e4 <strtoul+0x14>)
 80189da:	6800      	ldr	r0, [r0, #0]
 80189dc:	f7ff ff6a 	bl	80188b4 <_strtoul_l.constprop.0>
 80189e0:	bd10      	pop	{r4, pc}
 80189e2:	46c0      	nop			; (mov r8, r8)
 80189e4:	20000254 	.word	0x20000254

080189e8 <__swbuf_r>:
 80189e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ea:	0005      	movs	r5, r0
 80189ec:	000e      	movs	r6, r1
 80189ee:	0014      	movs	r4, r2
 80189f0:	2800      	cmp	r0, #0
 80189f2:	d004      	beq.n	80189fe <__swbuf_r+0x16>
 80189f4:	6983      	ldr	r3, [r0, #24]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d101      	bne.n	80189fe <__swbuf_r+0x16>
 80189fa:	f001 f8db 	bl	8019bb4 <__sinit>
 80189fe:	4b22      	ldr	r3, [pc, #136]	; (8018a88 <__swbuf_r+0xa0>)
 8018a00:	429c      	cmp	r4, r3
 8018a02:	d12e      	bne.n	8018a62 <__swbuf_r+0x7a>
 8018a04:	686c      	ldr	r4, [r5, #4]
 8018a06:	69a3      	ldr	r3, [r4, #24]
 8018a08:	60a3      	str	r3, [r4, #8]
 8018a0a:	89a3      	ldrh	r3, [r4, #12]
 8018a0c:	071b      	lsls	r3, r3, #28
 8018a0e:	d532      	bpl.n	8018a76 <__swbuf_r+0x8e>
 8018a10:	6923      	ldr	r3, [r4, #16]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d02f      	beq.n	8018a76 <__swbuf_r+0x8e>
 8018a16:	6823      	ldr	r3, [r4, #0]
 8018a18:	6922      	ldr	r2, [r4, #16]
 8018a1a:	b2f7      	uxtb	r7, r6
 8018a1c:	1a98      	subs	r0, r3, r2
 8018a1e:	6963      	ldr	r3, [r4, #20]
 8018a20:	b2f6      	uxtb	r6, r6
 8018a22:	4283      	cmp	r3, r0
 8018a24:	dc05      	bgt.n	8018a32 <__swbuf_r+0x4a>
 8018a26:	0021      	movs	r1, r4
 8018a28:	0028      	movs	r0, r5
 8018a2a:	f001 f80b 	bl	8019a44 <_fflush_r>
 8018a2e:	2800      	cmp	r0, #0
 8018a30:	d127      	bne.n	8018a82 <__swbuf_r+0x9a>
 8018a32:	68a3      	ldr	r3, [r4, #8]
 8018a34:	3001      	adds	r0, #1
 8018a36:	3b01      	subs	r3, #1
 8018a38:	60a3      	str	r3, [r4, #8]
 8018a3a:	6823      	ldr	r3, [r4, #0]
 8018a3c:	1c5a      	adds	r2, r3, #1
 8018a3e:	6022      	str	r2, [r4, #0]
 8018a40:	701f      	strb	r7, [r3, #0]
 8018a42:	6963      	ldr	r3, [r4, #20]
 8018a44:	4283      	cmp	r3, r0
 8018a46:	d004      	beq.n	8018a52 <__swbuf_r+0x6a>
 8018a48:	89a3      	ldrh	r3, [r4, #12]
 8018a4a:	07db      	lsls	r3, r3, #31
 8018a4c:	d507      	bpl.n	8018a5e <__swbuf_r+0x76>
 8018a4e:	2e0a      	cmp	r6, #10
 8018a50:	d105      	bne.n	8018a5e <__swbuf_r+0x76>
 8018a52:	0021      	movs	r1, r4
 8018a54:	0028      	movs	r0, r5
 8018a56:	f000 fff5 	bl	8019a44 <_fflush_r>
 8018a5a:	2800      	cmp	r0, #0
 8018a5c:	d111      	bne.n	8018a82 <__swbuf_r+0x9a>
 8018a5e:	0030      	movs	r0, r6
 8018a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a62:	4b0a      	ldr	r3, [pc, #40]	; (8018a8c <__swbuf_r+0xa4>)
 8018a64:	429c      	cmp	r4, r3
 8018a66:	d101      	bne.n	8018a6c <__swbuf_r+0x84>
 8018a68:	68ac      	ldr	r4, [r5, #8]
 8018a6a:	e7cc      	b.n	8018a06 <__swbuf_r+0x1e>
 8018a6c:	4b08      	ldr	r3, [pc, #32]	; (8018a90 <__swbuf_r+0xa8>)
 8018a6e:	429c      	cmp	r4, r3
 8018a70:	d1c9      	bne.n	8018a06 <__swbuf_r+0x1e>
 8018a72:	68ec      	ldr	r4, [r5, #12]
 8018a74:	e7c7      	b.n	8018a06 <__swbuf_r+0x1e>
 8018a76:	0021      	movs	r1, r4
 8018a78:	0028      	movs	r0, r5
 8018a7a:	f000 f81f 	bl	8018abc <__swsetup_r>
 8018a7e:	2800      	cmp	r0, #0
 8018a80:	d0c9      	beq.n	8018a16 <__swbuf_r+0x2e>
 8018a82:	2601      	movs	r6, #1
 8018a84:	4276      	negs	r6, r6
 8018a86:	e7ea      	b.n	8018a5e <__swbuf_r+0x76>
 8018a88:	0801d3bc 	.word	0x0801d3bc
 8018a8c:	0801d3dc 	.word	0x0801d3dc
 8018a90:	0801d39c 	.word	0x0801d39c

08018a94 <_write_r>:
 8018a94:	b570      	push	{r4, r5, r6, lr}
 8018a96:	0004      	movs	r4, r0
 8018a98:	0008      	movs	r0, r1
 8018a9a:	0011      	movs	r1, r2
 8018a9c:	001a      	movs	r2, r3
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	4d05      	ldr	r5, [pc, #20]	; (8018ab8 <_write_r+0x24>)
 8018aa2:	602b      	str	r3, [r5, #0]
 8018aa4:	f7eb fa17 	bl	8003ed6 <_write>
 8018aa8:	1c43      	adds	r3, r0, #1
 8018aaa:	d103      	bne.n	8018ab4 <_write_r+0x20>
 8018aac:	682b      	ldr	r3, [r5, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d000      	beq.n	8018ab4 <_write_r+0x20>
 8018ab2:	6023      	str	r3, [r4, #0]
 8018ab4:	bd70      	pop	{r4, r5, r6, pc}
 8018ab6:	46c0      	nop			; (mov r8, r8)
 8018ab8:	200019f4 	.word	0x200019f4

08018abc <__swsetup_r>:
 8018abc:	4b37      	ldr	r3, [pc, #220]	; (8018b9c <__swsetup_r+0xe0>)
 8018abe:	b570      	push	{r4, r5, r6, lr}
 8018ac0:	681d      	ldr	r5, [r3, #0]
 8018ac2:	0006      	movs	r6, r0
 8018ac4:	000c      	movs	r4, r1
 8018ac6:	2d00      	cmp	r5, #0
 8018ac8:	d005      	beq.n	8018ad6 <__swsetup_r+0x1a>
 8018aca:	69ab      	ldr	r3, [r5, #24]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d102      	bne.n	8018ad6 <__swsetup_r+0x1a>
 8018ad0:	0028      	movs	r0, r5
 8018ad2:	f001 f86f 	bl	8019bb4 <__sinit>
 8018ad6:	4b32      	ldr	r3, [pc, #200]	; (8018ba0 <__swsetup_r+0xe4>)
 8018ad8:	429c      	cmp	r4, r3
 8018ada:	d10f      	bne.n	8018afc <__swsetup_r+0x40>
 8018adc:	686c      	ldr	r4, [r5, #4]
 8018ade:	230c      	movs	r3, #12
 8018ae0:	5ee2      	ldrsh	r2, [r4, r3]
 8018ae2:	b293      	uxth	r3, r2
 8018ae4:	0711      	lsls	r1, r2, #28
 8018ae6:	d42d      	bmi.n	8018b44 <__swsetup_r+0x88>
 8018ae8:	06d9      	lsls	r1, r3, #27
 8018aea:	d411      	bmi.n	8018b10 <__swsetup_r+0x54>
 8018aec:	2309      	movs	r3, #9
 8018aee:	2001      	movs	r0, #1
 8018af0:	6033      	str	r3, [r6, #0]
 8018af2:	3337      	adds	r3, #55	; 0x37
 8018af4:	4313      	orrs	r3, r2
 8018af6:	81a3      	strh	r3, [r4, #12]
 8018af8:	4240      	negs	r0, r0
 8018afa:	bd70      	pop	{r4, r5, r6, pc}
 8018afc:	4b29      	ldr	r3, [pc, #164]	; (8018ba4 <__swsetup_r+0xe8>)
 8018afe:	429c      	cmp	r4, r3
 8018b00:	d101      	bne.n	8018b06 <__swsetup_r+0x4a>
 8018b02:	68ac      	ldr	r4, [r5, #8]
 8018b04:	e7eb      	b.n	8018ade <__swsetup_r+0x22>
 8018b06:	4b28      	ldr	r3, [pc, #160]	; (8018ba8 <__swsetup_r+0xec>)
 8018b08:	429c      	cmp	r4, r3
 8018b0a:	d1e8      	bne.n	8018ade <__swsetup_r+0x22>
 8018b0c:	68ec      	ldr	r4, [r5, #12]
 8018b0e:	e7e6      	b.n	8018ade <__swsetup_r+0x22>
 8018b10:	075b      	lsls	r3, r3, #29
 8018b12:	d513      	bpl.n	8018b3c <__swsetup_r+0x80>
 8018b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b16:	2900      	cmp	r1, #0
 8018b18:	d008      	beq.n	8018b2c <__swsetup_r+0x70>
 8018b1a:	0023      	movs	r3, r4
 8018b1c:	3344      	adds	r3, #68	; 0x44
 8018b1e:	4299      	cmp	r1, r3
 8018b20:	d002      	beq.n	8018b28 <__swsetup_r+0x6c>
 8018b22:	0030      	movs	r0, r6
 8018b24:	f7fd fe90 	bl	8016848 <_free_r>
 8018b28:	2300      	movs	r3, #0
 8018b2a:	6363      	str	r3, [r4, #52]	; 0x34
 8018b2c:	2224      	movs	r2, #36	; 0x24
 8018b2e:	89a3      	ldrh	r3, [r4, #12]
 8018b30:	4393      	bics	r3, r2
 8018b32:	81a3      	strh	r3, [r4, #12]
 8018b34:	2300      	movs	r3, #0
 8018b36:	6063      	str	r3, [r4, #4]
 8018b38:	6923      	ldr	r3, [r4, #16]
 8018b3a:	6023      	str	r3, [r4, #0]
 8018b3c:	2308      	movs	r3, #8
 8018b3e:	89a2      	ldrh	r2, [r4, #12]
 8018b40:	4313      	orrs	r3, r2
 8018b42:	81a3      	strh	r3, [r4, #12]
 8018b44:	6923      	ldr	r3, [r4, #16]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d10b      	bne.n	8018b62 <__swsetup_r+0xa6>
 8018b4a:	21a0      	movs	r1, #160	; 0xa0
 8018b4c:	2280      	movs	r2, #128	; 0x80
 8018b4e:	89a3      	ldrh	r3, [r4, #12]
 8018b50:	0089      	lsls	r1, r1, #2
 8018b52:	0092      	lsls	r2, r2, #2
 8018b54:	400b      	ands	r3, r1
 8018b56:	4293      	cmp	r3, r2
 8018b58:	d003      	beq.n	8018b62 <__swsetup_r+0xa6>
 8018b5a:	0021      	movs	r1, r4
 8018b5c:	0030      	movs	r0, r6
 8018b5e:	f001 fcdd 	bl	801a51c <__smakebuf_r>
 8018b62:	220c      	movs	r2, #12
 8018b64:	5ea3      	ldrsh	r3, [r4, r2]
 8018b66:	2001      	movs	r0, #1
 8018b68:	001a      	movs	r2, r3
 8018b6a:	b299      	uxth	r1, r3
 8018b6c:	4002      	ands	r2, r0
 8018b6e:	4203      	tst	r3, r0
 8018b70:	d00f      	beq.n	8018b92 <__swsetup_r+0xd6>
 8018b72:	2200      	movs	r2, #0
 8018b74:	60a2      	str	r2, [r4, #8]
 8018b76:	6962      	ldr	r2, [r4, #20]
 8018b78:	4252      	negs	r2, r2
 8018b7a:	61a2      	str	r2, [r4, #24]
 8018b7c:	2000      	movs	r0, #0
 8018b7e:	6922      	ldr	r2, [r4, #16]
 8018b80:	4282      	cmp	r2, r0
 8018b82:	d1ba      	bne.n	8018afa <__swsetup_r+0x3e>
 8018b84:	060a      	lsls	r2, r1, #24
 8018b86:	d5b8      	bpl.n	8018afa <__swsetup_r+0x3e>
 8018b88:	2240      	movs	r2, #64	; 0x40
 8018b8a:	4313      	orrs	r3, r2
 8018b8c:	81a3      	strh	r3, [r4, #12]
 8018b8e:	3801      	subs	r0, #1
 8018b90:	e7b3      	b.n	8018afa <__swsetup_r+0x3e>
 8018b92:	0788      	lsls	r0, r1, #30
 8018b94:	d400      	bmi.n	8018b98 <__swsetup_r+0xdc>
 8018b96:	6962      	ldr	r2, [r4, #20]
 8018b98:	60a2      	str	r2, [r4, #8]
 8018b9a:	e7ef      	b.n	8018b7c <__swsetup_r+0xc0>
 8018b9c:	20000254 	.word	0x20000254
 8018ba0:	0801d3bc 	.word	0x0801d3bc
 8018ba4:	0801d3dc 	.word	0x0801d3dc
 8018ba8:	0801d39c 	.word	0x0801d39c

08018bac <abort>:
 8018bac:	2006      	movs	r0, #6
 8018bae:	b510      	push	{r4, lr}
 8018bb0:	f002 fff4 	bl	801bb9c <raise>
 8018bb4:	2001      	movs	r0, #1
 8018bb6:	f7eb fd91 	bl	80046dc <_exit>
	...

08018bbc <_close_r>:
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	b570      	push	{r4, r5, r6, lr}
 8018bc0:	4d06      	ldr	r5, [pc, #24]	; (8018bdc <_close_r+0x20>)
 8018bc2:	0004      	movs	r4, r0
 8018bc4:	0008      	movs	r0, r1
 8018bc6:	602b      	str	r3, [r5, #0]
 8018bc8:	f7eb fd94 	bl	80046f4 <_close>
 8018bcc:	1c43      	adds	r3, r0, #1
 8018bce:	d103      	bne.n	8018bd8 <_close_r+0x1c>
 8018bd0:	682b      	ldr	r3, [r5, #0]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d000      	beq.n	8018bd8 <_close_r+0x1c>
 8018bd6:	6023      	str	r3, [r4, #0]
 8018bd8:	bd70      	pop	{r4, r5, r6, pc}
 8018bda:	46c0      	nop			; (mov r8, r8)
 8018bdc:	200019f4 	.word	0x200019f4

08018be0 <quorem>:
 8018be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018be2:	0006      	movs	r6, r0
 8018be4:	690b      	ldr	r3, [r1, #16]
 8018be6:	6932      	ldr	r2, [r6, #16]
 8018be8:	b087      	sub	sp, #28
 8018bea:	2000      	movs	r0, #0
 8018bec:	9103      	str	r1, [sp, #12]
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	db65      	blt.n	8018cbe <quorem+0xde>
 8018bf2:	3b01      	subs	r3, #1
 8018bf4:	009c      	lsls	r4, r3, #2
 8018bf6:	9300      	str	r3, [sp, #0]
 8018bf8:	000b      	movs	r3, r1
 8018bfa:	3314      	adds	r3, #20
 8018bfc:	9305      	str	r3, [sp, #20]
 8018bfe:	191b      	adds	r3, r3, r4
 8018c00:	9304      	str	r3, [sp, #16]
 8018c02:	0033      	movs	r3, r6
 8018c04:	3314      	adds	r3, #20
 8018c06:	9302      	str	r3, [sp, #8]
 8018c08:	191c      	adds	r4, r3, r4
 8018c0a:	9b04      	ldr	r3, [sp, #16]
 8018c0c:	6827      	ldr	r7, [r4, #0]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	0038      	movs	r0, r7
 8018c12:	1c5d      	adds	r5, r3, #1
 8018c14:	0029      	movs	r1, r5
 8018c16:	9301      	str	r3, [sp, #4]
 8018c18:	f7e7 fa9c 	bl	8000154 <__udivsi3>
 8018c1c:	9001      	str	r0, [sp, #4]
 8018c1e:	42af      	cmp	r7, r5
 8018c20:	d324      	bcc.n	8018c6c <quorem+0x8c>
 8018c22:	2500      	movs	r5, #0
 8018c24:	46ac      	mov	ip, r5
 8018c26:	9802      	ldr	r0, [sp, #8]
 8018c28:	9f05      	ldr	r7, [sp, #20]
 8018c2a:	cf08      	ldmia	r7!, {r3}
 8018c2c:	9a01      	ldr	r2, [sp, #4]
 8018c2e:	b299      	uxth	r1, r3
 8018c30:	4351      	muls	r1, r2
 8018c32:	0c1b      	lsrs	r3, r3, #16
 8018c34:	4353      	muls	r3, r2
 8018c36:	1949      	adds	r1, r1, r5
 8018c38:	0c0a      	lsrs	r2, r1, #16
 8018c3a:	189b      	adds	r3, r3, r2
 8018c3c:	6802      	ldr	r2, [r0, #0]
 8018c3e:	b289      	uxth	r1, r1
 8018c40:	b292      	uxth	r2, r2
 8018c42:	4462      	add	r2, ip
 8018c44:	1a52      	subs	r2, r2, r1
 8018c46:	6801      	ldr	r1, [r0, #0]
 8018c48:	0c1d      	lsrs	r5, r3, #16
 8018c4a:	0c09      	lsrs	r1, r1, #16
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	1acb      	subs	r3, r1, r3
 8018c50:	1411      	asrs	r1, r2, #16
 8018c52:	185b      	adds	r3, r3, r1
 8018c54:	1419      	asrs	r1, r3, #16
 8018c56:	b292      	uxth	r2, r2
 8018c58:	041b      	lsls	r3, r3, #16
 8018c5a:	431a      	orrs	r2, r3
 8018c5c:	9b04      	ldr	r3, [sp, #16]
 8018c5e:	468c      	mov	ip, r1
 8018c60:	c004      	stmia	r0!, {r2}
 8018c62:	42bb      	cmp	r3, r7
 8018c64:	d2e1      	bcs.n	8018c2a <quorem+0x4a>
 8018c66:	6823      	ldr	r3, [r4, #0]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d030      	beq.n	8018cce <quorem+0xee>
 8018c6c:	0030      	movs	r0, r6
 8018c6e:	9903      	ldr	r1, [sp, #12]
 8018c70:	f001 ffa8 	bl	801abc4 <__mcmp>
 8018c74:	2800      	cmp	r0, #0
 8018c76:	db21      	blt.n	8018cbc <quorem+0xdc>
 8018c78:	0030      	movs	r0, r6
 8018c7a:	2400      	movs	r4, #0
 8018c7c:	9b01      	ldr	r3, [sp, #4]
 8018c7e:	9903      	ldr	r1, [sp, #12]
 8018c80:	3301      	adds	r3, #1
 8018c82:	9301      	str	r3, [sp, #4]
 8018c84:	3014      	adds	r0, #20
 8018c86:	3114      	adds	r1, #20
 8018c88:	6803      	ldr	r3, [r0, #0]
 8018c8a:	c920      	ldmia	r1!, {r5}
 8018c8c:	b29a      	uxth	r2, r3
 8018c8e:	1914      	adds	r4, r2, r4
 8018c90:	b2aa      	uxth	r2, r5
 8018c92:	1aa2      	subs	r2, r4, r2
 8018c94:	0c1b      	lsrs	r3, r3, #16
 8018c96:	0c2d      	lsrs	r5, r5, #16
 8018c98:	1414      	asrs	r4, r2, #16
 8018c9a:	1b5b      	subs	r3, r3, r5
 8018c9c:	191b      	adds	r3, r3, r4
 8018c9e:	141c      	asrs	r4, r3, #16
 8018ca0:	b292      	uxth	r2, r2
 8018ca2:	041b      	lsls	r3, r3, #16
 8018ca4:	4313      	orrs	r3, r2
 8018ca6:	c008      	stmia	r0!, {r3}
 8018ca8:	9b04      	ldr	r3, [sp, #16]
 8018caa:	428b      	cmp	r3, r1
 8018cac:	d2ec      	bcs.n	8018c88 <quorem+0xa8>
 8018cae:	9b00      	ldr	r3, [sp, #0]
 8018cb0:	9a02      	ldr	r2, [sp, #8]
 8018cb2:	009b      	lsls	r3, r3, #2
 8018cb4:	18d3      	adds	r3, r2, r3
 8018cb6:	681a      	ldr	r2, [r3, #0]
 8018cb8:	2a00      	cmp	r2, #0
 8018cba:	d015      	beq.n	8018ce8 <quorem+0x108>
 8018cbc:	9801      	ldr	r0, [sp, #4]
 8018cbe:	b007      	add	sp, #28
 8018cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cc2:	6823      	ldr	r3, [r4, #0]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d106      	bne.n	8018cd6 <quorem+0xf6>
 8018cc8:	9b00      	ldr	r3, [sp, #0]
 8018cca:	3b01      	subs	r3, #1
 8018ccc:	9300      	str	r3, [sp, #0]
 8018cce:	9b02      	ldr	r3, [sp, #8]
 8018cd0:	3c04      	subs	r4, #4
 8018cd2:	42a3      	cmp	r3, r4
 8018cd4:	d3f5      	bcc.n	8018cc2 <quorem+0xe2>
 8018cd6:	9b00      	ldr	r3, [sp, #0]
 8018cd8:	6133      	str	r3, [r6, #16]
 8018cda:	e7c7      	b.n	8018c6c <quorem+0x8c>
 8018cdc:	681a      	ldr	r2, [r3, #0]
 8018cde:	2a00      	cmp	r2, #0
 8018ce0:	d106      	bne.n	8018cf0 <quorem+0x110>
 8018ce2:	9a00      	ldr	r2, [sp, #0]
 8018ce4:	3a01      	subs	r2, #1
 8018ce6:	9200      	str	r2, [sp, #0]
 8018ce8:	9a02      	ldr	r2, [sp, #8]
 8018cea:	3b04      	subs	r3, #4
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d3f5      	bcc.n	8018cdc <quorem+0xfc>
 8018cf0:	9b00      	ldr	r3, [sp, #0]
 8018cf2:	6133      	str	r3, [r6, #16]
 8018cf4:	e7e2      	b.n	8018cbc <quorem+0xdc>
	...

08018cf8 <_dtoa_r>:
 8018cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cfa:	b09d      	sub	sp, #116	; 0x74
 8018cfc:	9202      	str	r2, [sp, #8]
 8018cfe:	9303      	str	r3, [sp, #12]
 8018d00:	9b02      	ldr	r3, [sp, #8]
 8018d02:	9c03      	ldr	r4, [sp, #12]
 8018d04:	9308      	str	r3, [sp, #32]
 8018d06:	9409      	str	r4, [sp, #36]	; 0x24
 8018d08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018d0a:	0007      	movs	r7, r0
 8018d0c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8018d0e:	2c00      	cmp	r4, #0
 8018d10:	d10e      	bne.n	8018d30 <_dtoa_r+0x38>
 8018d12:	2010      	movs	r0, #16
 8018d14:	f7fd fd64 	bl	80167e0 <malloc>
 8018d18:	1e02      	subs	r2, r0, #0
 8018d1a:	6278      	str	r0, [r7, #36]	; 0x24
 8018d1c:	d104      	bne.n	8018d28 <_dtoa_r+0x30>
 8018d1e:	21ea      	movs	r1, #234	; 0xea
 8018d20:	4bc7      	ldr	r3, [pc, #796]	; (8019040 <_dtoa_r+0x348>)
 8018d22:	48c8      	ldr	r0, [pc, #800]	; (8019044 <_dtoa_r+0x34c>)
 8018d24:	f7fd fce6 	bl	80166f4 <__assert_func>
 8018d28:	6044      	str	r4, [r0, #4]
 8018d2a:	6084      	str	r4, [r0, #8]
 8018d2c:	6004      	str	r4, [r0, #0]
 8018d2e:	60c4      	str	r4, [r0, #12]
 8018d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d32:	6819      	ldr	r1, [r3, #0]
 8018d34:	2900      	cmp	r1, #0
 8018d36:	d00a      	beq.n	8018d4e <_dtoa_r+0x56>
 8018d38:	685a      	ldr	r2, [r3, #4]
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	4093      	lsls	r3, r2
 8018d3e:	604a      	str	r2, [r1, #4]
 8018d40:	608b      	str	r3, [r1, #8]
 8018d42:	0038      	movs	r0, r7
 8018d44:	f001 fcb2 	bl	801a6ac <_Bfree>
 8018d48:	2200      	movs	r2, #0
 8018d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d4c:	601a      	str	r2, [r3, #0]
 8018d4e:	9b03      	ldr	r3, [sp, #12]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	da20      	bge.n	8018d96 <_dtoa_r+0x9e>
 8018d54:	2301      	movs	r3, #1
 8018d56:	602b      	str	r3, [r5, #0]
 8018d58:	9b03      	ldr	r3, [sp, #12]
 8018d5a:	005b      	lsls	r3, r3, #1
 8018d5c:	085b      	lsrs	r3, r3, #1
 8018d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8018d60:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018d62:	4bb9      	ldr	r3, [pc, #740]	; (8019048 <_dtoa_r+0x350>)
 8018d64:	4ab8      	ldr	r2, [pc, #736]	; (8019048 <_dtoa_r+0x350>)
 8018d66:	402b      	ands	r3, r5
 8018d68:	4293      	cmp	r3, r2
 8018d6a:	d117      	bne.n	8018d9c <_dtoa_r+0xa4>
 8018d6c:	4bb7      	ldr	r3, [pc, #732]	; (801904c <_dtoa_r+0x354>)
 8018d6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018d70:	0328      	lsls	r0, r5, #12
 8018d72:	6013      	str	r3, [r2, #0]
 8018d74:	9b02      	ldr	r3, [sp, #8]
 8018d76:	0b00      	lsrs	r0, r0, #12
 8018d78:	4318      	orrs	r0, r3
 8018d7a:	d101      	bne.n	8018d80 <_dtoa_r+0x88>
 8018d7c:	f000 fdbf 	bl	80198fe <_dtoa_r+0xc06>
 8018d80:	48b3      	ldr	r0, [pc, #716]	; (8019050 <_dtoa_r+0x358>)
 8018d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018d84:	9006      	str	r0, [sp, #24]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d002      	beq.n	8018d90 <_dtoa_r+0x98>
 8018d8a:	4bb2      	ldr	r3, [pc, #712]	; (8019054 <_dtoa_r+0x35c>)
 8018d8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018d8e:	6013      	str	r3, [r2, #0]
 8018d90:	9806      	ldr	r0, [sp, #24]
 8018d92:	b01d      	add	sp, #116	; 0x74
 8018d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d96:	2300      	movs	r3, #0
 8018d98:	602b      	str	r3, [r5, #0]
 8018d9a:	e7e1      	b.n	8018d60 <_dtoa_r+0x68>
 8018d9c:	9b08      	ldr	r3, [sp, #32]
 8018d9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018da0:	9312      	str	r3, [sp, #72]	; 0x48
 8018da2:	9413      	str	r4, [sp, #76]	; 0x4c
 8018da4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018da6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018da8:	2200      	movs	r2, #0
 8018daa:	2300      	movs	r3, #0
 8018dac:	f7e7 fb58 	bl	8000460 <__aeabi_dcmpeq>
 8018db0:	1e04      	subs	r4, r0, #0
 8018db2:	d009      	beq.n	8018dc8 <_dtoa_r+0xd0>
 8018db4:	2301      	movs	r3, #1
 8018db6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018db8:	6013      	str	r3, [r2, #0]
 8018dba:	4ba7      	ldr	r3, [pc, #668]	; (8019058 <_dtoa_r+0x360>)
 8018dbc:	9306      	str	r3, [sp, #24]
 8018dbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d0e5      	beq.n	8018d90 <_dtoa_r+0x98>
 8018dc4:	4ba5      	ldr	r3, [pc, #660]	; (801905c <_dtoa_r+0x364>)
 8018dc6:	e7e1      	b.n	8018d8c <_dtoa_r+0x94>
 8018dc8:	ab1a      	add	r3, sp, #104	; 0x68
 8018dca:	9301      	str	r3, [sp, #4]
 8018dcc:	ab1b      	add	r3, sp, #108	; 0x6c
 8018dce:	9300      	str	r3, [sp, #0]
 8018dd0:	0038      	movs	r0, r7
 8018dd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018dd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018dd6:	f002 f81d 	bl	801ae14 <__d2b>
 8018dda:	006e      	lsls	r6, r5, #1
 8018ddc:	9005      	str	r0, [sp, #20]
 8018dde:	0d76      	lsrs	r6, r6, #21
 8018de0:	d100      	bne.n	8018de4 <_dtoa_r+0xec>
 8018de2:	e07c      	b.n	8018ede <_dtoa_r+0x1e6>
 8018de4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018de6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018de8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018dea:	4a9d      	ldr	r2, [pc, #628]	; (8019060 <_dtoa_r+0x368>)
 8018dec:	031b      	lsls	r3, r3, #12
 8018dee:	0b1b      	lsrs	r3, r3, #12
 8018df0:	431a      	orrs	r2, r3
 8018df2:	0011      	movs	r1, r2
 8018df4:	4b9b      	ldr	r3, [pc, #620]	; (8019064 <_dtoa_r+0x36c>)
 8018df6:	9418      	str	r4, [sp, #96]	; 0x60
 8018df8:	18f6      	adds	r6, r6, r3
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	4b9a      	ldr	r3, [pc, #616]	; (8019068 <_dtoa_r+0x370>)
 8018dfe:	f7e8 fdcf 	bl	80019a0 <__aeabi_dsub>
 8018e02:	4a9a      	ldr	r2, [pc, #616]	; (801906c <_dtoa_r+0x374>)
 8018e04:	4b9a      	ldr	r3, [pc, #616]	; (8019070 <_dtoa_r+0x378>)
 8018e06:	f7e8 fb5f 	bl	80014c8 <__aeabi_dmul>
 8018e0a:	4a9a      	ldr	r2, [pc, #616]	; (8019074 <_dtoa_r+0x37c>)
 8018e0c:	4b9a      	ldr	r3, [pc, #616]	; (8019078 <_dtoa_r+0x380>)
 8018e0e:	f7e7 fc1d 	bl	800064c <__aeabi_dadd>
 8018e12:	0004      	movs	r4, r0
 8018e14:	0030      	movs	r0, r6
 8018e16:	000d      	movs	r5, r1
 8018e18:	f7e9 f9a8 	bl	800216c <__aeabi_i2d>
 8018e1c:	4a97      	ldr	r2, [pc, #604]	; (801907c <_dtoa_r+0x384>)
 8018e1e:	4b98      	ldr	r3, [pc, #608]	; (8019080 <_dtoa_r+0x388>)
 8018e20:	f7e8 fb52 	bl	80014c8 <__aeabi_dmul>
 8018e24:	0002      	movs	r2, r0
 8018e26:	000b      	movs	r3, r1
 8018e28:	0020      	movs	r0, r4
 8018e2a:	0029      	movs	r1, r5
 8018e2c:	f7e7 fc0e 	bl	800064c <__aeabi_dadd>
 8018e30:	0004      	movs	r4, r0
 8018e32:	000d      	movs	r5, r1
 8018e34:	f7e9 f964 	bl	8002100 <__aeabi_d2iz>
 8018e38:	2200      	movs	r2, #0
 8018e3a:	9002      	str	r0, [sp, #8]
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	0020      	movs	r0, r4
 8018e40:	0029      	movs	r1, r5
 8018e42:	f7e7 fb13 	bl	800046c <__aeabi_dcmplt>
 8018e46:	2800      	cmp	r0, #0
 8018e48:	d00b      	beq.n	8018e62 <_dtoa_r+0x16a>
 8018e4a:	9802      	ldr	r0, [sp, #8]
 8018e4c:	f7e9 f98e 	bl	800216c <__aeabi_i2d>
 8018e50:	002b      	movs	r3, r5
 8018e52:	0022      	movs	r2, r4
 8018e54:	f7e7 fb04 	bl	8000460 <__aeabi_dcmpeq>
 8018e58:	4243      	negs	r3, r0
 8018e5a:	4158      	adcs	r0, r3
 8018e5c:	9b02      	ldr	r3, [sp, #8]
 8018e5e:	1a1b      	subs	r3, r3, r0
 8018e60:	9302      	str	r3, [sp, #8]
 8018e62:	2301      	movs	r3, #1
 8018e64:	9316      	str	r3, [sp, #88]	; 0x58
 8018e66:	9b02      	ldr	r3, [sp, #8]
 8018e68:	2b16      	cmp	r3, #22
 8018e6a:	d80f      	bhi.n	8018e8c <_dtoa_r+0x194>
 8018e6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018e6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018e70:	00da      	lsls	r2, r3, #3
 8018e72:	4b84      	ldr	r3, [pc, #528]	; (8019084 <_dtoa_r+0x38c>)
 8018e74:	189b      	adds	r3, r3, r2
 8018e76:	681a      	ldr	r2, [r3, #0]
 8018e78:	685b      	ldr	r3, [r3, #4]
 8018e7a:	f7e7 faf7 	bl	800046c <__aeabi_dcmplt>
 8018e7e:	2800      	cmp	r0, #0
 8018e80:	d049      	beq.n	8018f16 <_dtoa_r+0x21e>
 8018e82:	9b02      	ldr	r3, [sp, #8]
 8018e84:	3b01      	subs	r3, #1
 8018e86:	9302      	str	r3, [sp, #8]
 8018e88:	2300      	movs	r3, #0
 8018e8a:	9316      	str	r3, [sp, #88]	; 0x58
 8018e8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018e8e:	1b9e      	subs	r6, r3, r6
 8018e90:	2300      	movs	r3, #0
 8018e92:	930a      	str	r3, [sp, #40]	; 0x28
 8018e94:	0033      	movs	r3, r6
 8018e96:	3b01      	subs	r3, #1
 8018e98:	930d      	str	r3, [sp, #52]	; 0x34
 8018e9a:	d504      	bpl.n	8018ea6 <_dtoa_r+0x1ae>
 8018e9c:	2301      	movs	r3, #1
 8018e9e:	1b9b      	subs	r3, r3, r6
 8018ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	930d      	str	r3, [sp, #52]	; 0x34
 8018ea6:	9b02      	ldr	r3, [sp, #8]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	db36      	blt.n	8018f1a <_dtoa_r+0x222>
 8018eac:	9a02      	ldr	r2, [sp, #8]
 8018eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018eb0:	4694      	mov	ip, r2
 8018eb2:	4463      	add	r3, ip
 8018eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	9215      	str	r2, [sp, #84]	; 0x54
 8018eba:	930e      	str	r3, [sp, #56]	; 0x38
 8018ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018ebe:	2401      	movs	r4, #1
 8018ec0:	2b09      	cmp	r3, #9
 8018ec2:	d864      	bhi.n	8018f8e <_dtoa_r+0x296>
 8018ec4:	2b05      	cmp	r3, #5
 8018ec6:	dd02      	ble.n	8018ece <_dtoa_r+0x1d6>
 8018ec8:	2400      	movs	r4, #0
 8018eca:	3b04      	subs	r3, #4
 8018ecc:	9322      	str	r3, [sp, #136]	; 0x88
 8018ece:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018ed0:	1e98      	subs	r0, r3, #2
 8018ed2:	2803      	cmp	r0, #3
 8018ed4:	d864      	bhi.n	8018fa0 <_dtoa_r+0x2a8>
 8018ed6:	f7e7 f929 	bl	800012c <__gnu_thumb1_case_uqi>
 8018eda:	3829      	.short	0x3829
 8018edc:	5836      	.short	0x5836
 8018ede:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018ee0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018ee2:	189e      	adds	r6, r3, r2
 8018ee4:	4b68      	ldr	r3, [pc, #416]	; (8019088 <_dtoa_r+0x390>)
 8018ee6:	18f2      	adds	r2, r6, r3
 8018ee8:	2a20      	cmp	r2, #32
 8018eea:	dd0f      	ble.n	8018f0c <_dtoa_r+0x214>
 8018eec:	2340      	movs	r3, #64	; 0x40
 8018eee:	1a9b      	subs	r3, r3, r2
 8018ef0:	409d      	lsls	r5, r3
 8018ef2:	4b66      	ldr	r3, [pc, #408]	; (801908c <_dtoa_r+0x394>)
 8018ef4:	9802      	ldr	r0, [sp, #8]
 8018ef6:	18f3      	adds	r3, r6, r3
 8018ef8:	40d8      	lsrs	r0, r3
 8018efa:	4328      	orrs	r0, r5
 8018efc:	f7e9 f966 	bl	80021cc <__aeabi_ui2d>
 8018f00:	2301      	movs	r3, #1
 8018f02:	4c63      	ldr	r4, [pc, #396]	; (8019090 <_dtoa_r+0x398>)
 8018f04:	3e01      	subs	r6, #1
 8018f06:	1909      	adds	r1, r1, r4
 8018f08:	9318      	str	r3, [sp, #96]	; 0x60
 8018f0a:	e776      	b.n	8018dfa <_dtoa_r+0x102>
 8018f0c:	2320      	movs	r3, #32
 8018f0e:	9802      	ldr	r0, [sp, #8]
 8018f10:	1a9b      	subs	r3, r3, r2
 8018f12:	4098      	lsls	r0, r3
 8018f14:	e7f2      	b.n	8018efc <_dtoa_r+0x204>
 8018f16:	9016      	str	r0, [sp, #88]	; 0x58
 8018f18:	e7b8      	b.n	8018e8c <_dtoa_r+0x194>
 8018f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f1c:	9a02      	ldr	r2, [sp, #8]
 8018f1e:	1a9b      	subs	r3, r3, r2
 8018f20:	930a      	str	r3, [sp, #40]	; 0x28
 8018f22:	4253      	negs	r3, r2
 8018f24:	930e      	str	r3, [sp, #56]	; 0x38
 8018f26:	2300      	movs	r3, #0
 8018f28:	9315      	str	r3, [sp, #84]	; 0x54
 8018f2a:	e7c7      	b.n	8018ebc <_dtoa_r+0x1c4>
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018f30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018f32:	930c      	str	r3, [sp, #48]	; 0x30
 8018f34:	9307      	str	r3, [sp, #28]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	dc13      	bgt.n	8018f62 <_dtoa_r+0x26a>
 8018f3a:	2301      	movs	r3, #1
 8018f3c:	001a      	movs	r2, r3
 8018f3e:	930c      	str	r3, [sp, #48]	; 0x30
 8018f40:	9307      	str	r3, [sp, #28]
 8018f42:	9223      	str	r2, [sp, #140]	; 0x8c
 8018f44:	e00d      	b.n	8018f62 <_dtoa_r+0x26a>
 8018f46:	2301      	movs	r3, #1
 8018f48:	e7f1      	b.n	8018f2e <_dtoa_r+0x236>
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018f50:	4694      	mov	ip, r2
 8018f52:	9b02      	ldr	r3, [sp, #8]
 8018f54:	4463      	add	r3, ip
 8018f56:	930c      	str	r3, [sp, #48]	; 0x30
 8018f58:	3301      	adds	r3, #1
 8018f5a:	9307      	str	r3, [sp, #28]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	dc00      	bgt.n	8018f62 <_dtoa_r+0x26a>
 8018f60:	2301      	movs	r3, #1
 8018f62:	2200      	movs	r2, #0
 8018f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f66:	6042      	str	r2, [r0, #4]
 8018f68:	3204      	adds	r2, #4
 8018f6a:	0015      	movs	r5, r2
 8018f6c:	3514      	adds	r5, #20
 8018f6e:	6841      	ldr	r1, [r0, #4]
 8018f70:	429d      	cmp	r5, r3
 8018f72:	d919      	bls.n	8018fa8 <_dtoa_r+0x2b0>
 8018f74:	0038      	movs	r0, r7
 8018f76:	f001 fb55 	bl	801a624 <_Balloc>
 8018f7a:	9006      	str	r0, [sp, #24]
 8018f7c:	2800      	cmp	r0, #0
 8018f7e:	d117      	bne.n	8018fb0 <_dtoa_r+0x2b8>
 8018f80:	21d5      	movs	r1, #213	; 0xd5
 8018f82:	0002      	movs	r2, r0
 8018f84:	4b43      	ldr	r3, [pc, #268]	; (8019094 <_dtoa_r+0x39c>)
 8018f86:	0049      	lsls	r1, r1, #1
 8018f88:	e6cb      	b.n	8018d22 <_dtoa_r+0x2a>
 8018f8a:	2301      	movs	r3, #1
 8018f8c:	e7de      	b.n	8018f4c <_dtoa_r+0x254>
 8018f8e:	2300      	movs	r3, #0
 8018f90:	940f      	str	r4, [sp, #60]	; 0x3c
 8018f92:	9322      	str	r3, [sp, #136]	; 0x88
 8018f94:	3b01      	subs	r3, #1
 8018f96:	930c      	str	r3, [sp, #48]	; 0x30
 8018f98:	9307      	str	r3, [sp, #28]
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	3313      	adds	r3, #19
 8018f9e:	e7d0      	b.n	8018f42 <_dtoa_r+0x24a>
 8018fa0:	2301      	movs	r3, #1
 8018fa2:	930f      	str	r3, [sp, #60]	; 0x3c
 8018fa4:	3b02      	subs	r3, #2
 8018fa6:	e7f6      	b.n	8018f96 <_dtoa_r+0x29e>
 8018fa8:	3101      	adds	r1, #1
 8018faa:	6041      	str	r1, [r0, #4]
 8018fac:	0052      	lsls	r2, r2, #1
 8018fae:	e7dc      	b.n	8018f6a <_dtoa_r+0x272>
 8018fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fb2:	9a06      	ldr	r2, [sp, #24]
 8018fb4:	601a      	str	r2, [r3, #0]
 8018fb6:	9b07      	ldr	r3, [sp, #28]
 8018fb8:	2b0e      	cmp	r3, #14
 8018fba:	d900      	bls.n	8018fbe <_dtoa_r+0x2c6>
 8018fbc:	e0eb      	b.n	8019196 <_dtoa_r+0x49e>
 8018fbe:	2c00      	cmp	r4, #0
 8018fc0:	d100      	bne.n	8018fc4 <_dtoa_r+0x2cc>
 8018fc2:	e0e8      	b.n	8019196 <_dtoa_r+0x49e>
 8018fc4:	9b02      	ldr	r3, [sp, #8]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	dd68      	ble.n	801909c <_dtoa_r+0x3a4>
 8018fca:	001a      	movs	r2, r3
 8018fcc:	210f      	movs	r1, #15
 8018fce:	4b2d      	ldr	r3, [pc, #180]	; (8019084 <_dtoa_r+0x38c>)
 8018fd0:	400a      	ands	r2, r1
 8018fd2:	00d2      	lsls	r2, r2, #3
 8018fd4:	189b      	adds	r3, r3, r2
 8018fd6:	681d      	ldr	r5, [r3, #0]
 8018fd8:	685e      	ldr	r6, [r3, #4]
 8018fda:	9b02      	ldr	r3, [sp, #8]
 8018fdc:	111c      	asrs	r4, r3, #4
 8018fde:	2302      	movs	r3, #2
 8018fe0:	9310      	str	r3, [sp, #64]	; 0x40
 8018fe2:	9b02      	ldr	r3, [sp, #8]
 8018fe4:	05db      	lsls	r3, r3, #23
 8018fe6:	d50b      	bpl.n	8019000 <_dtoa_r+0x308>
 8018fe8:	4b2b      	ldr	r3, [pc, #172]	; (8019098 <_dtoa_r+0x3a0>)
 8018fea:	400c      	ands	r4, r1
 8018fec:	6a1a      	ldr	r2, [r3, #32]
 8018fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ff0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018ff2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018ff4:	f7e7 fe66 	bl	8000cc4 <__aeabi_ddiv>
 8018ff8:	2303      	movs	r3, #3
 8018ffa:	9008      	str	r0, [sp, #32]
 8018ffc:	9109      	str	r1, [sp, #36]	; 0x24
 8018ffe:	9310      	str	r3, [sp, #64]	; 0x40
 8019000:	4b25      	ldr	r3, [pc, #148]	; (8019098 <_dtoa_r+0x3a0>)
 8019002:	9314      	str	r3, [sp, #80]	; 0x50
 8019004:	2c00      	cmp	r4, #0
 8019006:	d108      	bne.n	801901a <_dtoa_r+0x322>
 8019008:	9808      	ldr	r0, [sp, #32]
 801900a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801900c:	002a      	movs	r2, r5
 801900e:	0033      	movs	r3, r6
 8019010:	f7e7 fe58 	bl	8000cc4 <__aeabi_ddiv>
 8019014:	9008      	str	r0, [sp, #32]
 8019016:	9109      	str	r1, [sp, #36]	; 0x24
 8019018:	e05c      	b.n	80190d4 <_dtoa_r+0x3dc>
 801901a:	2301      	movs	r3, #1
 801901c:	421c      	tst	r4, r3
 801901e:	d00b      	beq.n	8019038 <_dtoa_r+0x340>
 8019020:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019022:	0028      	movs	r0, r5
 8019024:	3301      	adds	r3, #1
 8019026:	9310      	str	r3, [sp, #64]	; 0x40
 8019028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801902a:	0031      	movs	r1, r6
 801902c:	681a      	ldr	r2, [r3, #0]
 801902e:	685b      	ldr	r3, [r3, #4]
 8019030:	f7e8 fa4a 	bl	80014c8 <__aeabi_dmul>
 8019034:	0005      	movs	r5, r0
 8019036:	000e      	movs	r6, r1
 8019038:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801903a:	1064      	asrs	r4, r4, #1
 801903c:	3308      	adds	r3, #8
 801903e:	e7e0      	b.n	8019002 <_dtoa_r+0x30a>
 8019040:	0801d316 	.word	0x0801d316
 8019044:	0801d32d 	.word	0x0801d32d
 8019048:	7ff00000 	.word	0x7ff00000
 801904c:	0000270f 	.word	0x0000270f
 8019050:	0801d312 	.word	0x0801d312
 8019054:	0801d315 	.word	0x0801d315
 8019058:	0801d5d8 	.word	0x0801d5d8
 801905c:	0801d5d9 	.word	0x0801d5d9
 8019060:	3ff00000 	.word	0x3ff00000
 8019064:	fffffc01 	.word	0xfffffc01
 8019068:	3ff80000 	.word	0x3ff80000
 801906c:	636f4361 	.word	0x636f4361
 8019070:	3fd287a7 	.word	0x3fd287a7
 8019074:	8b60c8b3 	.word	0x8b60c8b3
 8019078:	3fc68a28 	.word	0x3fc68a28
 801907c:	509f79fb 	.word	0x509f79fb
 8019080:	3fd34413 	.word	0x3fd34413
 8019084:	0801d500 	.word	0x0801d500
 8019088:	00000432 	.word	0x00000432
 801908c:	00000412 	.word	0x00000412
 8019090:	fe100000 	.word	0xfe100000
 8019094:	0801d388 	.word	0x0801d388
 8019098:	0801d4d8 	.word	0x0801d4d8
 801909c:	2302      	movs	r3, #2
 801909e:	9310      	str	r3, [sp, #64]	; 0x40
 80190a0:	9b02      	ldr	r3, [sp, #8]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d016      	beq.n	80190d4 <_dtoa_r+0x3dc>
 80190a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80190a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80190aa:	425c      	negs	r4, r3
 80190ac:	230f      	movs	r3, #15
 80190ae:	4ab6      	ldr	r2, [pc, #728]	; (8019388 <_dtoa_r+0x690>)
 80190b0:	4023      	ands	r3, r4
 80190b2:	00db      	lsls	r3, r3, #3
 80190b4:	18d3      	adds	r3, r2, r3
 80190b6:	681a      	ldr	r2, [r3, #0]
 80190b8:	685b      	ldr	r3, [r3, #4]
 80190ba:	f7e8 fa05 	bl	80014c8 <__aeabi_dmul>
 80190be:	2601      	movs	r6, #1
 80190c0:	2300      	movs	r3, #0
 80190c2:	9008      	str	r0, [sp, #32]
 80190c4:	9109      	str	r1, [sp, #36]	; 0x24
 80190c6:	4db1      	ldr	r5, [pc, #708]	; (801938c <_dtoa_r+0x694>)
 80190c8:	1124      	asrs	r4, r4, #4
 80190ca:	2c00      	cmp	r4, #0
 80190cc:	d000      	beq.n	80190d0 <_dtoa_r+0x3d8>
 80190ce:	e094      	b.n	80191fa <_dtoa_r+0x502>
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d19f      	bne.n	8019014 <_dtoa_r+0x31c>
 80190d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d100      	bne.n	80190dc <_dtoa_r+0x3e4>
 80190da:	e09b      	b.n	8019214 <_dtoa_r+0x51c>
 80190dc:	9c08      	ldr	r4, [sp, #32]
 80190de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80190e0:	2200      	movs	r2, #0
 80190e2:	0020      	movs	r0, r4
 80190e4:	0029      	movs	r1, r5
 80190e6:	4baa      	ldr	r3, [pc, #680]	; (8019390 <_dtoa_r+0x698>)
 80190e8:	f7e7 f9c0 	bl	800046c <__aeabi_dcmplt>
 80190ec:	2800      	cmp	r0, #0
 80190ee:	d100      	bne.n	80190f2 <_dtoa_r+0x3fa>
 80190f0:	e090      	b.n	8019214 <_dtoa_r+0x51c>
 80190f2:	9b07      	ldr	r3, [sp, #28]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d100      	bne.n	80190fa <_dtoa_r+0x402>
 80190f8:	e08c      	b.n	8019214 <_dtoa_r+0x51c>
 80190fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	dd46      	ble.n	801918e <_dtoa_r+0x496>
 8019100:	9b02      	ldr	r3, [sp, #8]
 8019102:	2200      	movs	r2, #0
 8019104:	0020      	movs	r0, r4
 8019106:	0029      	movs	r1, r5
 8019108:	1e5e      	subs	r6, r3, #1
 801910a:	4ba2      	ldr	r3, [pc, #648]	; (8019394 <_dtoa_r+0x69c>)
 801910c:	f7e8 f9dc 	bl	80014c8 <__aeabi_dmul>
 8019110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019112:	9008      	str	r0, [sp, #32]
 8019114:	9109      	str	r1, [sp, #36]	; 0x24
 8019116:	3301      	adds	r3, #1
 8019118:	9310      	str	r3, [sp, #64]	; 0x40
 801911a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801911c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801911e:	9c08      	ldr	r4, [sp, #32]
 8019120:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019122:	9314      	str	r3, [sp, #80]	; 0x50
 8019124:	f7e9 f822 	bl	800216c <__aeabi_i2d>
 8019128:	0022      	movs	r2, r4
 801912a:	002b      	movs	r3, r5
 801912c:	f7e8 f9cc 	bl	80014c8 <__aeabi_dmul>
 8019130:	2200      	movs	r2, #0
 8019132:	4b99      	ldr	r3, [pc, #612]	; (8019398 <_dtoa_r+0x6a0>)
 8019134:	f7e7 fa8a 	bl	800064c <__aeabi_dadd>
 8019138:	9010      	str	r0, [sp, #64]	; 0x40
 801913a:	9111      	str	r1, [sp, #68]	; 0x44
 801913c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801913e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019140:	9208      	str	r2, [sp, #32]
 8019142:	9309      	str	r3, [sp, #36]	; 0x24
 8019144:	4a95      	ldr	r2, [pc, #596]	; (801939c <_dtoa_r+0x6a4>)
 8019146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019148:	4694      	mov	ip, r2
 801914a:	4463      	add	r3, ip
 801914c:	9317      	str	r3, [sp, #92]	; 0x5c
 801914e:	9309      	str	r3, [sp, #36]	; 0x24
 8019150:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019152:	2b00      	cmp	r3, #0
 8019154:	d161      	bne.n	801921a <_dtoa_r+0x522>
 8019156:	2200      	movs	r2, #0
 8019158:	0020      	movs	r0, r4
 801915a:	0029      	movs	r1, r5
 801915c:	4b90      	ldr	r3, [pc, #576]	; (80193a0 <_dtoa_r+0x6a8>)
 801915e:	f7e8 fc1f 	bl	80019a0 <__aeabi_dsub>
 8019162:	9a08      	ldr	r2, [sp, #32]
 8019164:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019166:	0004      	movs	r4, r0
 8019168:	000d      	movs	r5, r1
 801916a:	f7e7 f993 	bl	8000494 <__aeabi_dcmpgt>
 801916e:	2800      	cmp	r0, #0
 8019170:	d000      	beq.n	8019174 <_dtoa_r+0x47c>
 8019172:	e2af      	b.n	80196d4 <_dtoa_r+0x9dc>
 8019174:	488b      	ldr	r0, [pc, #556]	; (80193a4 <_dtoa_r+0x6ac>)
 8019176:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019178:	4684      	mov	ip, r0
 801917a:	4461      	add	r1, ip
 801917c:	000b      	movs	r3, r1
 801917e:	0020      	movs	r0, r4
 8019180:	0029      	movs	r1, r5
 8019182:	9a08      	ldr	r2, [sp, #32]
 8019184:	f7e7 f972 	bl	800046c <__aeabi_dcmplt>
 8019188:	2800      	cmp	r0, #0
 801918a:	d000      	beq.n	801918e <_dtoa_r+0x496>
 801918c:	e29f      	b.n	80196ce <_dtoa_r+0x9d6>
 801918e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019190:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019192:	9308      	str	r3, [sp, #32]
 8019194:	9409      	str	r4, [sp, #36]	; 0x24
 8019196:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019198:	2b00      	cmp	r3, #0
 801919a:	da00      	bge.n	801919e <_dtoa_r+0x4a6>
 801919c:	e172      	b.n	8019484 <_dtoa_r+0x78c>
 801919e:	9a02      	ldr	r2, [sp, #8]
 80191a0:	2a0e      	cmp	r2, #14
 80191a2:	dd00      	ble.n	80191a6 <_dtoa_r+0x4ae>
 80191a4:	e16e      	b.n	8019484 <_dtoa_r+0x78c>
 80191a6:	4b78      	ldr	r3, [pc, #480]	; (8019388 <_dtoa_r+0x690>)
 80191a8:	00d2      	lsls	r2, r2, #3
 80191aa:	189b      	adds	r3, r3, r2
 80191ac:	685c      	ldr	r4, [r3, #4]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	930a      	str	r3, [sp, #40]	; 0x28
 80191b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80191b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	db00      	blt.n	80191bc <_dtoa_r+0x4c4>
 80191ba:	e0f7      	b.n	80193ac <_dtoa_r+0x6b4>
 80191bc:	9b07      	ldr	r3, [sp, #28]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	dd00      	ble.n	80191c4 <_dtoa_r+0x4cc>
 80191c2:	e0f3      	b.n	80193ac <_dtoa_r+0x6b4>
 80191c4:	d000      	beq.n	80191c8 <_dtoa_r+0x4d0>
 80191c6:	e282      	b.n	80196ce <_dtoa_r+0x9d6>
 80191c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80191ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80191cc:	2200      	movs	r2, #0
 80191ce:	4b74      	ldr	r3, [pc, #464]	; (80193a0 <_dtoa_r+0x6a8>)
 80191d0:	f7e8 f97a 	bl	80014c8 <__aeabi_dmul>
 80191d4:	9a08      	ldr	r2, [sp, #32]
 80191d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191d8:	f7e7 f966 	bl	80004a8 <__aeabi_dcmpge>
 80191dc:	9e07      	ldr	r6, [sp, #28]
 80191de:	0035      	movs	r5, r6
 80191e0:	2800      	cmp	r0, #0
 80191e2:	d000      	beq.n	80191e6 <_dtoa_r+0x4ee>
 80191e4:	e259      	b.n	801969a <_dtoa_r+0x9a2>
 80191e6:	9b06      	ldr	r3, [sp, #24]
 80191e8:	9a06      	ldr	r2, [sp, #24]
 80191ea:	3301      	adds	r3, #1
 80191ec:	9308      	str	r3, [sp, #32]
 80191ee:	2331      	movs	r3, #49	; 0x31
 80191f0:	7013      	strb	r3, [r2, #0]
 80191f2:	9b02      	ldr	r3, [sp, #8]
 80191f4:	3301      	adds	r3, #1
 80191f6:	9302      	str	r3, [sp, #8]
 80191f8:	e254      	b.n	80196a4 <_dtoa_r+0x9ac>
 80191fa:	4234      	tst	r4, r6
 80191fc:	d007      	beq.n	801920e <_dtoa_r+0x516>
 80191fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019200:	3301      	adds	r3, #1
 8019202:	9310      	str	r3, [sp, #64]	; 0x40
 8019204:	682a      	ldr	r2, [r5, #0]
 8019206:	686b      	ldr	r3, [r5, #4]
 8019208:	f7e8 f95e 	bl	80014c8 <__aeabi_dmul>
 801920c:	0033      	movs	r3, r6
 801920e:	1064      	asrs	r4, r4, #1
 8019210:	3508      	adds	r5, #8
 8019212:	e75a      	b.n	80190ca <_dtoa_r+0x3d2>
 8019214:	9e02      	ldr	r6, [sp, #8]
 8019216:	9b07      	ldr	r3, [sp, #28]
 8019218:	e780      	b.n	801911c <_dtoa_r+0x424>
 801921a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801921c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801921e:	1e5a      	subs	r2, r3, #1
 8019220:	4b59      	ldr	r3, [pc, #356]	; (8019388 <_dtoa_r+0x690>)
 8019222:	00d2      	lsls	r2, r2, #3
 8019224:	189b      	adds	r3, r3, r2
 8019226:	681a      	ldr	r2, [r3, #0]
 8019228:	685b      	ldr	r3, [r3, #4]
 801922a:	2900      	cmp	r1, #0
 801922c:	d051      	beq.n	80192d2 <_dtoa_r+0x5da>
 801922e:	2000      	movs	r0, #0
 8019230:	495d      	ldr	r1, [pc, #372]	; (80193a8 <_dtoa_r+0x6b0>)
 8019232:	f7e7 fd47 	bl	8000cc4 <__aeabi_ddiv>
 8019236:	9a08      	ldr	r2, [sp, #32]
 8019238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801923a:	f7e8 fbb1 	bl	80019a0 <__aeabi_dsub>
 801923e:	9a06      	ldr	r2, [sp, #24]
 8019240:	9b06      	ldr	r3, [sp, #24]
 8019242:	4694      	mov	ip, r2
 8019244:	9317      	str	r3, [sp, #92]	; 0x5c
 8019246:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019248:	9010      	str	r0, [sp, #64]	; 0x40
 801924a:	9111      	str	r1, [sp, #68]	; 0x44
 801924c:	4463      	add	r3, ip
 801924e:	9319      	str	r3, [sp, #100]	; 0x64
 8019250:	0029      	movs	r1, r5
 8019252:	0020      	movs	r0, r4
 8019254:	f7e8 ff54 	bl	8002100 <__aeabi_d2iz>
 8019258:	9014      	str	r0, [sp, #80]	; 0x50
 801925a:	f7e8 ff87 	bl	800216c <__aeabi_i2d>
 801925e:	0002      	movs	r2, r0
 8019260:	000b      	movs	r3, r1
 8019262:	0020      	movs	r0, r4
 8019264:	0029      	movs	r1, r5
 8019266:	f7e8 fb9b 	bl	80019a0 <__aeabi_dsub>
 801926a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801926c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801926e:	3301      	adds	r3, #1
 8019270:	9308      	str	r3, [sp, #32]
 8019272:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019274:	0004      	movs	r4, r0
 8019276:	3330      	adds	r3, #48	; 0x30
 8019278:	7013      	strb	r3, [r2, #0]
 801927a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801927c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801927e:	000d      	movs	r5, r1
 8019280:	f7e7 f8f4 	bl	800046c <__aeabi_dcmplt>
 8019284:	2800      	cmp	r0, #0
 8019286:	d175      	bne.n	8019374 <_dtoa_r+0x67c>
 8019288:	0022      	movs	r2, r4
 801928a:	002b      	movs	r3, r5
 801928c:	2000      	movs	r0, #0
 801928e:	4940      	ldr	r1, [pc, #256]	; (8019390 <_dtoa_r+0x698>)
 8019290:	f7e8 fb86 	bl	80019a0 <__aeabi_dsub>
 8019294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019298:	f7e7 f8e8 	bl	800046c <__aeabi_dcmplt>
 801929c:	2800      	cmp	r0, #0
 801929e:	d000      	beq.n	80192a2 <_dtoa_r+0x5aa>
 80192a0:	e0d2      	b.n	8019448 <_dtoa_r+0x750>
 80192a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80192a4:	9a08      	ldr	r2, [sp, #32]
 80192a6:	4293      	cmp	r3, r2
 80192a8:	d100      	bne.n	80192ac <_dtoa_r+0x5b4>
 80192aa:	e770      	b.n	801918e <_dtoa_r+0x496>
 80192ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80192ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80192b0:	2200      	movs	r2, #0
 80192b2:	4b38      	ldr	r3, [pc, #224]	; (8019394 <_dtoa_r+0x69c>)
 80192b4:	f7e8 f908 	bl	80014c8 <__aeabi_dmul>
 80192b8:	4b36      	ldr	r3, [pc, #216]	; (8019394 <_dtoa_r+0x69c>)
 80192ba:	9010      	str	r0, [sp, #64]	; 0x40
 80192bc:	9111      	str	r1, [sp, #68]	; 0x44
 80192be:	2200      	movs	r2, #0
 80192c0:	0020      	movs	r0, r4
 80192c2:	0029      	movs	r1, r5
 80192c4:	f7e8 f900 	bl	80014c8 <__aeabi_dmul>
 80192c8:	9b08      	ldr	r3, [sp, #32]
 80192ca:	0004      	movs	r4, r0
 80192cc:	000d      	movs	r5, r1
 80192ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80192d0:	e7be      	b.n	8019250 <_dtoa_r+0x558>
 80192d2:	9808      	ldr	r0, [sp, #32]
 80192d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80192d6:	f7e8 f8f7 	bl	80014c8 <__aeabi_dmul>
 80192da:	9a06      	ldr	r2, [sp, #24]
 80192dc:	9b06      	ldr	r3, [sp, #24]
 80192de:	4694      	mov	ip, r2
 80192e0:	9308      	str	r3, [sp, #32]
 80192e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80192e4:	9010      	str	r0, [sp, #64]	; 0x40
 80192e6:	9111      	str	r1, [sp, #68]	; 0x44
 80192e8:	4463      	add	r3, ip
 80192ea:	9319      	str	r3, [sp, #100]	; 0x64
 80192ec:	0029      	movs	r1, r5
 80192ee:	0020      	movs	r0, r4
 80192f0:	f7e8 ff06 	bl	8002100 <__aeabi_d2iz>
 80192f4:	9017      	str	r0, [sp, #92]	; 0x5c
 80192f6:	f7e8 ff39 	bl	800216c <__aeabi_i2d>
 80192fa:	0002      	movs	r2, r0
 80192fc:	000b      	movs	r3, r1
 80192fe:	0020      	movs	r0, r4
 8019300:	0029      	movs	r1, r5
 8019302:	f7e8 fb4d 	bl	80019a0 <__aeabi_dsub>
 8019306:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019308:	9a08      	ldr	r2, [sp, #32]
 801930a:	3330      	adds	r3, #48	; 0x30
 801930c:	7013      	strb	r3, [r2, #0]
 801930e:	0013      	movs	r3, r2
 8019310:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019312:	3301      	adds	r3, #1
 8019314:	0004      	movs	r4, r0
 8019316:	000d      	movs	r5, r1
 8019318:	9308      	str	r3, [sp, #32]
 801931a:	4293      	cmp	r3, r2
 801931c:	d12c      	bne.n	8019378 <_dtoa_r+0x680>
 801931e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019320:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019322:	9a06      	ldr	r2, [sp, #24]
 8019324:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019326:	4694      	mov	ip, r2
 8019328:	4463      	add	r3, ip
 801932a:	2200      	movs	r2, #0
 801932c:	9308      	str	r3, [sp, #32]
 801932e:	4b1e      	ldr	r3, [pc, #120]	; (80193a8 <_dtoa_r+0x6b0>)
 8019330:	f7e7 f98c 	bl	800064c <__aeabi_dadd>
 8019334:	0002      	movs	r2, r0
 8019336:	000b      	movs	r3, r1
 8019338:	0020      	movs	r0, r4
 801933a:	0029      	movs	r1, r5
 801933c:	f7e7 f8aa 	bl	8000494 <__aeabi_dcmpgt>
 8019340:	2800      	cmp	r0, #0
 8019342:	d000      	beq.n	8019346 <_dtoa_r+0x64e>
 8019344:	e080      	b.n	8019448 <_dtoa_r+0x750>
 8019346:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801934a:	2000      	movs	r0, #0
 801934c:	4916      	ldr	r1, [pc, #88]	; (80193a8 <_dtoa_r+0x6b0>)
 801934e:	f7e8 fb27 	bl	80019a0 <__aeabi_dsub>
 8019352:	0002      	movs	r2, r0
 8019354:	000b      	movs	r3, r1
 8019356:	0020      	movs	r0, r4
 8019358:	0029      	movs	r1, r5
 801935a:	f7e7 f887 	bl	800046c <__aeabi_dcmplt>
 801935e:	2800      	cmp	r0, #0
 8019360:	d100      	bne.n	8019364 <_dtoa_r+0x66c>
 8019362:	e714      	b.n	801918e <_dtoa_r+0x496>
 8019364:	9b08      	ldr	r3, [sp, #32]
 8019366:	001a      	movs	r2, r3
 8019368:	3a01      	subs	r2, #1
 801936a:	9208      	str	r2, [sp, #32]
 801936c:	7812      	ldrb	r2, [r2, #0]
 801936e:	2a30      	cmp	r2, #48	; 0x30
 8019370:	d0f8      	beq.n	8019364 <_dtoa_r+0x66c>
 8019372:	9308      	str	r3, [sp, #32]
 8019374:	9602      	str	r6, [sp, #8]
 8019376:	e055      	b.n	8019424 <_dtoa_r+0x72c>
 8019378:	2200      	movs	r2, #0
 801937a:	4b06      	ldr	r3, [pc, #24]	; (8019394 <_dtoa_r+0x69c>)
 801937c:	f7e8 f8a4 	bl	80014c8 <__aeabi_dmul>
 8019380:	0004      	movs	r4, r0
 8019382:	000d      	movs	r5, r1
 8019384:	e7b2      	b.n	80192ec <_dtoa_r+0x5f4>
 8019386:	46c0      	nop			; (mov r8, r8)
 8019388:	0801d500 	.word	0x0801d500
 801938c:	0801d4d8 	.word	0x0801d4d8
 8019390:	3ff00000 	.word	0x3ff00000
 8019394:	40240000 	.word	0x40240000
 8019398:	401c0000 	.word	0x401c0000
 801939c:	fcc00000 	.word	0xfcc00000
 80193a0:	40140000 	.word	0x40140000
 80193a4:	7cc00000 	.word	0x7cc00000
 80193a8:	3fe00000 	.word	0x3fe00000
 80193ac:	9b07      	ldr	r3, [sp, #28]
 80193ae:	9e06      	ldr	r6, [sp, #24]
 80193b0:	3b01      	subs	r3, #1
 80193b2:	199b      	adds	r3, r3, r6
 80193b4:	930c      	str	r3, [sp, #48]	; 0x30
 80193b6:	9c08      	ldr	r4, [sp, #32]
 80193b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80193ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80193bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193be:	0020      	movs	r0, r4
 80193c0:	0029      	movs	r1, r5
 80193c2:	f7e7 fc7f 	bl	8000cc4 <__aeabi_ddiv>
 80193c6:	f7e8 fe9b 	bl	8002100 <__aeabi_d2iz>
 80193ca:	9007      	str	r0, [sp, #28]
 80193cc:	f7e8 fece 	bl	800216c <__aeabi_i2d>
 80193d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80193d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193d4:	f7e8 f878 	bl	80014c8 <__aeabi_dmul>
 80193d8:	0002      	movs	r2, r0
 80193da:	000b      	movs	r3, r1
 80193dc:	0020      	movs	r0, r4
 80193de:	0029      	movs	r1, r5
 80193e0:	f7e8 fade 	bl	80019a0 <__aeabi_dsub>
 80193e4:	0033      	movs	r3, r6
 80193e6:	9a07      	ldr	r2, [sp, #28]
 80193e8:	3601      	adds	r6, #1
 80193ea:	3230      	adds	r2, #48	; 0x30
 80193ec:	701a      	strb	r2, [r3, #0]
 80193ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193f0:	9608      	str	r6, [sp, #32]
 80193f2:	429a      	cmp	r2, r3
 80193f4:	d139      	bne.n	801946a <_dtoa_r+0x772>
 80193f6:	0002      	movs	r2, r0
 80193f8:	000b      	movs	r3, r1
 80193fa:	f7e7 f927 	bl	800064c <__aeabi_dadd>
 80193fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019402:	0004      	movs	r4, r0
 8019404:	000d      	movs	r5, r1
 8019406:	f7e7 f845 	bl	8000494 <__aeabi_dcmpgt>
 801940a:	2800      	cmp	r0, #0
 801940c:	d11b      	bne.n	8019446 <_dtoa_r+0x74e>
 801940e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019412:	0020      	movs	r0, r4
 8019414:	0029      	movs	r1, r5
 8019416:	f7e7 f823 	bl	8000460 <__aeabi_dcmpeq>
 801941a:	2800      	cmp	r0, #0
 801941c:	d002      	beq.n	8019424 <_dtoa_r+0x72c>
 801941e:	9b07      	ldr	r3, [sp, #28]
 8019420:	07db      	lsls	r3, r3, #31
 8019422:	d410      	bmi.n	8019446 <_dtoa_r+0x74e>
 8019424:	0038      	movs	r0, r7
 8019426:	9905      	ldr	r1, [sp, #20]
 8019428:	f001 f940 	bl	801a6ac <_Bfree>
 801942c:	2300      	movs	r3, #0
 801942e:	9a08      	ldr	r2, [sp, #32]
 8019430:	9802      	ldr	r0, [sp, #8]
 8019432:	7013      	strb	r3, [r2, #0]
 8019434:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019436:	3001      	adds	r0, #1
 8019438:	6018      	str	r0, [r3, #0]
 801943a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801943c:	2b00      	cmp	r3, #0
 801943e:	d100      	bne.n	8019442 <_dtoa_r+0x74a>
 8019440:	e4a6      	b.n	8018d90 <_dtoa_r+0x98>
 8019442:	601a      	str	r2, [r3, #0]
 8019444:	e4a4      	b.n	8018d90 <_dtoa_r+0x98>
 8019446:	9e02      	ldr	r6, [sp, #8]
 8019448:	9b08      	ldr	r3, [sp, #32]
 801944a:	9308      	str	r3, [sp, #32]
 801944c:	3b01      	subs	r3, #1
 801944e:	781a      	ldrb	r2, [r3, #0]
 8019450:	2a39      	cmp	r2, #57	; 0x39
 8019452:	d106      	bne.n	8019462 <_dtoa_r+0x76a>
 8019454:	9a06      	ldr	r2, [sp, #24]
 8019456:	429a      	cmp	r2, r3
 8019458:	d1f7      	bne.n	801944a <_dtoa_r+0x752>
 801945a:	2230      	movs	r2, #48	; 0x30
 801945c:	9906      	ldr	r1, [sp, #24]
 801945e:	3601      	adds	r6, #1
 8019460:	700a      	strb	r2, [r1, #0]
 8019462:	781a      	ldrb	r2, [r3, #0]
 8019464:	3201      	adds	r2, #1
 8019466:	701a      	strb	r2, [r3, #0]
 8019468:	e784      	b.n	8019374 <_dtoa_r+0x67c>
 801946a:	2200      	movs	r2, #0
 801946c:	4baa      	ldr	r3, [pc, #680]	; (8019718 <_dtoa_r+0xa20>)
 801946e:	f7e8 f82b 	bl	80014c8 <__aeabi_dmul>
 8019472:	2200      	movs	r2, #0
 8019474:	2300      	movs	r3, #0
 8019476:	0004      	movs	r4, r0
 8019478:	000d      	movs	r5, r1
 801947a:	f7e6 fff1 	bl	8000460 <__aeabi_dcmpeq>
 801947e:	2800      	cmp	r0, #0
 8019480:	d09b      	beq.n	80193ba <_dtoa_r+0x6c2>
 8019482:	e7cf      	b.n	8019424 <_dtoa_r+0x72c>
 8019484:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019486:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019488:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801948a:	2d00      	cmp	r5, #0
 801948c:	d012      	beq.n	80194b4 <_dtoa_r+0x7bc>
 801948e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019490:	2a01      	cmp	r2, #1
 8019492:	dc66      	bgt.n	8019562 <_dtoa_r+0x86a>
 8019494:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019496:	2a00      	cmp	r2, #0
 8019498:	d05d      	beq.n	8019556 <_dtoa_r+0x85e>
 801949a:	4aa0      	ldr	r2, [pc, #640]	; (801971c <_dtoa_r+0xa24>)
 801949c:	189b      	adds	r3, r3, r2
 801949e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80194a0:	2101      	movs	r1, #1
 80194a2:	18d2      	adds	r2, r2, r3
 80194a4:	920a      	str	r2, [sp, #40]	; 0x28
 80194a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80194a8:	0038      	movs	r0, r7
 80194aa:	18d3      	adds	r3, r2, r3
 80194ac:	930d      	str	r3, [sp, #52]	; 0x34
 80194ae:	f001 f9f9 	bl	801a8a4 <__i2b>
 80194b2:	0005      	movs	r5, r0
 80194b4:	2c00      	cmp	r4, #0
 80194b6:	dd0e      	ble.n	80194d6 <_dtoa_r+0x7de>
 80194b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	dd0b      	ble.n	80194d6 <_dtoa_r+0x7de>
 80194be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80194c0:	0023      	movs	r3, r4
 80194c2:	4294      	cmp	r4, r2
 80194c4:	dd00      	ble.n	80194c8 <_dtoa_r+0x7d0>
 80194c6:	0013      	movs	r3, r2
 80194c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80194ca:	1ae4      	subs	r4, r4, r3
 80194cc:	1ad2      	subs	r2, r2, r3
 80194ce:	920a      	str	r2, [sp, #40]	; 0x28
 80194d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80194d2:	1ad3      	subs	r3, r2, r3
 80194d4:	930d      	str	r3, [sp, #52]	; 0x34
 80194d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d01f      	beq.n	801951c <_dtoa_r+0x824>
 80194dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d054      	beq.n	801958c <_dtoa_r+0x894>
 80194e2:	2e00      	cmp	r6, #0
 80194e4:	dd11      	ble.n	801950a <_dtoa_r+0x812>
 80194e6:	0029      	movs	r1, r5
 80194e8:	0032      	movs	r2, r6
 80194ea:	0038      	movs	r0, r7
 80194ec:	f001 faa0 	bl	801aa30 <__pow5mult>
 80194f0:	9a05      	ldr	r2, [sp, #20]
 80194f2:	0001      	movs	r1, r0
 80194f4:	0005      	movs	r5, r0
 80194f6:	0038      	movs	r0, r7
 80194f8:	f001 f9ea 	bl	801a8d0 <__multiply>
 80194fc:	9905      	ldr	r1, [sp, #20]
 80194fe:	9014      	str	r0, [sp, #80]	; 0x50
 8019500:	0038      	movs	r0, r7
 8019502:	f001 f8d3 	bl	801a6ac <_Bfree>
 8019506:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019508:	9305      	str	r3, [sp, #20]
 801950a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801950c:	1b9a      	subs	r2, r3, r6
 801950e:	42b3      	cmp	r3, r6
 8019510:	d004      	beq.n	801951c <_dtoa_r+0x824>
 8019512:	0038      	movs	r0, r7
 8019514:	9905      	ldr	r1, [sp, #20]
 8019516:	f001 fa8b 	bl	801aa30 <__pow5mult>
 801951a:	9005      	str	r0, [sp, #20]
 801951c:	2101      	movs	r1, #1
 801951e:	0038      	movs	r0, r7
 8019520:	f001 f9c0 	bl	801a8a4 <__i2b>
 8019524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019526:	0006      	movs	r6, r0
 8019528:	2b00      	cmp	r3, #0
 801952a:	dd31      	ble.n	8019590 <_dtoa_r+0x898>
 801952c:	001a      	movs	r2, r3
 801952e:	0001      	movs	r1, r0
 8019530:	0038      	movs	r0, r7
 8019532:	f001 fa7d 	bl	801aa30 <__pow5mult>
 8019536:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019538:	0006      	movs	r6, r0
 801953a:	2b01      	cmp	r3, #1
 801953c:	dd2d      	ble.n	801959a <_dtoa_r+0x8a2>
 801953e:	2300      	movs	r3, #0
 8019540:	930e      	str	r3, [sp, #56]	; 0x38
 8019542:	6933      	ldr	r3, [r6, #16]
 8019544:	3303      	adds	r3, #3
 8019546:	009b      	lsls	r3, r3, #2
 8019548:	18f3      	adds	r3, r6, r3
 801954a:	6858      	ldr	r0, [r3, #4]
 801954c:	f001 f962 	bl	801a814 <__hi0bits>
 8019550:	2320      	movs	r3, #32
 8019552:	1a18      	subs	r0, r3, r0
 8019554:	e039      	b.n	80195ca <_dtoa_r+0x8d2>
 8019556:	2336      	movs	r3, #54	; 0x36
 8019558:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801955a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801955c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801955e:	1a9b      	subs	r3, r3, r2
 8019560:	e79d      	b.n	801949e <_dtoa_r+0x7a6>
 8019562:	9b07      	ldr	r3, [sp, #28]
 8019564:	1e5e      	subs	r6, r3, #1
 8019566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019568:	42b3      	cmp	r3, r6
 801956a:	db07      	blt.n	801957c <_dtoa_r+0x884>
 801956c:	1b9e      	subs	r6, r3, r6
 801956e:	9b07      	ldr	r3, [sp, #28]
 8019570:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019572:	2b00      	cmp	r3, #0
 8019574:	da93      	bge.n	801949e <_dtoa_r+0x7a6>
 8019576:	1ae4      	subs	r4, r4, r3
 8019578:	2300      	movs	r3, #0
 801957a:	e790      	b.n	801949e <_dtoa_r+0x7a6>
 801957c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801957e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019580:	1af3      	subs	r3, r6, r3
 8019582:	18d3      	adds	r3, r2, r3
 8019584:	960e      	str	r6, [sp, #56]	; 0x38
 8019586:	9315      	str	r3, [sp, #84]	; 0x54
 8019588:	2600      	movs	r6, #0
 801958a:	e7f0      	b.n	801956e <_dtoa_r+0x876>
 801958c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801958e:	e7c0      	b.n	8019512 <_dtoa_r+0x81a>
 8019590:	2300      	movs	r3, #0
 8019592:	930e      	str	r3, [sp, #56]	; 0x38
 8019594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019596:	2b01      	cmp	r3, #1
 8019598:	dc13      	bgt.n	80195c2 <_dtoa_r+0x8ca>
 801959a:	2300      	movs	r3, #0
 801959c:	930e      	str	r3, [sp, #56]	; 0x38
 801959e:	9b08      	ldr	r3, [sp, #32]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d10e      	bne.n	80195c2 <_dtoa_r+0x8ca>
 80195a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195a6:	031b      	lsls	r3, r3, #12
 80195a8:	d10b      	bne.n	80195c2 <_dtoa_r+0x8ca>
 80195aa:	4b5d      	ldr	r3, [pc, #372]	; (8019720 <_dtoa_r+0xa28>)
 80195ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80195ae:	4213      	tst	r3, r2
 80195b0:	d007      	beq.n	80195c2 <_dtoa_r+0x8ca>
 80195b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195b4:	3301      	adds	r3, #1
 80195b6:	930a      	str	r3, [sp, #40]	; 0x28
 80195b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195ba:	3301      	adds	r3, #1
 80195bc:	930d      	str	r3, [sp, #52]	; 0x34
 80195be:	2301      	movs	r3, #1
 80195c0:	930e      	str	r3, [sp, #56]	; 0x38
 80195c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80195c4:	2001      	movs	r0, #1
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d1bb      	bne.n	8019542 <_dtoa_r+0x84a>
 80195ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195cc:	221f      	movs	r2, #31
 80195ce:	1818      	adds	r0, r3, r0
 80195d0:	0003      	movs	r3, r0
 80195d2:	4013      	ands	r3, r2
 80195d4:	4210      	tst	r0, r2
 80195d6:	d046      	beq.n	8019666 <_dtoa_r+0x96e>
 80195d8:	3201      	adds	r2, #1
 80195da:	1ad2      	subs	r2, r2, r3
 80195dc:	2a04      	cmp	r2, #4
 80195de:	dd3f      	ble.n	8019660 <_dtoa_r+0x968>
 80195e0:	221c      	movs	r2, #28
 80195e2:	1ad3      	subs	r3, r2, r3
 80195e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80195e6:	18e4      	adds	r4, r4, r3
 80195e8:	18d2      	adds	r2, r2, r3
 80195ea:	920a      	str	r2, [sp, #40]	; 0x28
 80195ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80195ee:	18d3      	adds	r3, r2, r3
 80195f0:	930d      	str	r3, [sp, #52]	; 0x34
 80195f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	dd05      	ble.n	8019604 <_dtoa_r+0x90c>
 80195f8:	001a      	movs	r2, r3
 80195fa:	0038      	movs	r0, r7
 80195fc:	9905      	ldr	r1, [sp, #20]
 80195fe:	f001 fa73 	bl	801aae8 <__lshift>
 8019602:	9005      	str	r0, [sp, #20]
 8019604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019606:	2b00      	cmp	r3, #0
 8019608:	dd05      	ble.n	8019616 <_dtoa_r+0x91e>
 801960a:	0031      	movs	r1, r6
 801960c:	001a      	movs	r2, r3
 801960e:	0038      	movs	r0, r7
 8019610:	f001 fa6a 	bl	801aae8 <__lshift>
 8019614:	0006      	movs	r6, r0
 8019616:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019618:	2b00      	cmp	r3, #0
 801961a:	d026      	beq.n	801966a <_dtoa_r+0x972>
 801961c:	0031      	movs	r1, r6
 801961e:	9805      	ldr	r0, [sp, #20]
 8019620:	f001 fad0 	bl	801abc4 <__mcmp>
 8019624:	2800      	cmp	r0, #0
 8019626:	da20      	bge.n	801966a <_dtoa_r+0x972>
 8019628:	9b02      	ldr	r3, [sp, #8]
 801962a:	220a      	movs	r2, #10
 801962c:	3b01      	subs	r3, #1
 801962e:	9302      	str	r3, [sp, #8]
 8019630:	0038      	movs	r0, r7
 8019632:	2300      	movs	r3, #0
 8019634:	9905      	ldr	r1, [sp, #20]
 8019636:	f001 f85d 	bl	801a6f4 <__multadd>
 801963a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801963c:	9005      	str	r0, [sp, #20]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d100      	bne.n	8019644 <_dtoa_r+0x94c>
 8019642:	e166      	b.n	8019912 <_dtoa_r+0xc1a>
 8019644:	2300      	movs	r3, #0
 8019646:	0029      	movs	r1, r5
 8019648:	220a      	movs	r2, #10
 801964a:	0038      	movs	r0, r7
 801964c:	f001 f852 	bl	801a6f4 <__multadd>
 8019650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019652:	0005      	movs	r5, r0
 8019654:	2b00      	cmp	r3, #0
 8019656:	dc47      	bgt.n	80196e8 <_dtoa_r+0x9f0>
 8019658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801965a:	2b02      	cmp	r3, #2
 801965c:	dc0d      	bgt.n	801967a <_dtoa_r+0x982>
 801965e:	e043      	b.n	80196e8 <_dtoa_r+0x9f0>
 8019660:	2a04      	cmp	r2, #4
 8019662:	d0c6      	beq.n	80195f2 <_dtoa_r+0x8fa>
 8019664:	0013      	movs	r3, r2
 8019666:	331c      	adds	r3, #28
 8019668:	e7bc      	b.n	80195e4 <_dtoa_r+0x8ec>
 801966a:	9b07      	ldr	r3, [sp, #28]
 801966c:	2b00      	cmp	r3, #0
 801966e:	dc35      	bgt.n	80196dc <_dtoa_r+0x9e4>
 8019670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019672:	2b02      	cmp	r3, #2
 8019674:	dd32      	ble.n	80196dc <_dtoa_r+0x9e4>
 8019676:	9b07      	ldr	r3, [sp, #28]
 8019678:	930c      	str	r3, [sp, #48]	; 0x30
 801967a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801967c:	2b00      	cmp	r3, #0
 801967e:	d10c      	bne.n	801969a <_dtoa_r+0x9a2>
 8019680:	0031      	movs	r1, r6
 8019682:	2205      	movs	r2, #5
 8019684:	0038      	movs	r0, r7
 8019686:	f001 f835 	bl	801a6f4 <__multadd>
 801968a:	0006      	movs	r6, r0
 801968c:	0001      	movs	r1, r0
 801968e:	9805      	ldr	r0, [sp, #20]
 8019690:	f001 fa98 	bl	801abc4 <__mcmp>
 8019694:	2800      	cmp	r0, #0
 8019696:	dd00      	ble.n	801969a <_dtoa_r+0x9a2>
 8019698:	e5a5      	b.n	80191e6 <_dtoa_r+0x4ee>
 801969a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801969c:	43db      	mvns	r3, r3
 801969e:	9302      	str	r3, [sp, #8]
 80196a0:	9b06      	ldr	r3, [sp, #24]
 80196a2:	9308      	str	r3, [sp, #32]
 80196a4:	2400      	movs	r4, #0
 80196a6:	0031      	movs	r1, r6
 80196a8:	0038      	movs	r0, r7
 80196aa:	f000 ffff 	bl	801a6ac <_Bfree>
 80196ae:	2d00      	cmp	r5, #0
 80196b0:	d100      	bne.n	80196b4 <_dtoa_r+0x9bc>
 80196b2:	e6b7      	b.n	8019424 <_dtoa_r+0x72c>
 80196b4:	2c00      	cmp	r4, #0
 80196b6:	d005      	beq.n	80196c4 <_dtoa_r+0x9cc>
 80196b8:	42ac      	cmp	r4, r5
 80196ba:	d003      	beq.n	80196c4 <_dtoa_r+0x9cc>
 80196bc:	0021      	movs	r1, r4
 80196be:	0038      	movs	r0, r7
 80196c0:	f000 fff4 	bl	801a6ac <_Bfree>
 80196c4:	0029      	movs	r1, r5
 80196c6:	0038      	movs	r0, r7
 80196c8:	f000 fff0 	bl	801a6ac <_Bfree>
 80196cc:	e6aa      	b.n	8019424 <_dtoa_r+0x72c>
 80196ce:	2600      	movs	r6, #0
 80196d0:	0035      	movs	r5, r6
 80196d2:	e7e2      	b.n	801969a <_dtoa_r+0x9a2>
 80196d4:	9602      	str	r6, [sp, #8]
 80196d6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80196d8:	0035      	movs	r5, r6
 80196da:	e584      	b.n	80191e6 <_dtoa_r+0x4ee>
 80196dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d100      	bne.n	80196e4 <_dtoa_r+0x9ec>
 80196e2:	e0ce      	b.n	8019882 <_dtoa_r+0xb8a>
 80196e4:	9b07      	ldr	r3, [sp, #28]
 80196e6:	930c      	str	r3, [sp, #48]	; 0x30
 80196e8:	2c00      	cmp	r4, #0
 80196ea:	dd05      	ble.n	80196f8 <_dtoa_r+0xa00>
 80196ec:	0029      	movs	r1, r5
 80196ee:	0022      	movs	r2, r4
 80196f0:	0038      	movs	r0, r7
 80196f2:	f001 f9f9 	bl	801aae8 <__lshift>
 80196f6:	0005      	movs	r5, r0
 80196f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196fa:	0028      	movs	r0, r5
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d022      	beq.n	8019746 <_dtoa_r+0xa4e>
 8019700:	0038      	movs	r0, r7
 8019702:	6869      	ldr	r1, [r5, #4]
 8019704:	f000 ff8e 	bl	801a624 <_Balloc>
 8019708:	1e04      	subs	r4, r0, #0
 801970a:	d10f      	bne.n	801972c <_dtoa_r+0xa34>
 801970c:	0002      	movs	r2, r0
 801970e:	4b05      	ldr	r3, [pc, #20]	; (8019724 <_dtoa_r+0xa2c>)
 8019710:	4905      	ldr	r1, [pc, #20]	; (8019728 <_dtoa_r+0xa30>)
 8019712:	f7ff fb06 	bl	8018d22 <_dtoa_r+0x2a>
 8019716:	46c0      	nop			; (mov r8, r8)
 8019718:	40240000 	.word	0x40240000
 801971c:	00000433 	.word	0x00000433
 8019720:	7ff00000 	.word	0x7ff00000
 8019724:	0801d388 	.word	0x0801d388
 8019728:	000002ea 	.word	0x000002ea
 801972c:	0029      	movs	r1, r5
 801972e:	692b      	ldr	r3, [r5, #16]
 8019730:	310c      	adds	r1, #12
 8019732:	1c9a      	adds	r2, r3, #2
 8019734:	0092      	lsls	r2, r2, #2
 8019736:	300c      	adds	r0, #12
 8019738:	f7fd f874 	bl	8016824 <memcpy>
 801973c:	2201      	movs	r2, #1
 801973e:	0021      	movs	r1, r4
 8019740:	0038      	movs	r0, r7
 8019742:	f001 f9d1 	bl	801aae8 <__lshift>
 8019746:	9b06      	ldr	r3, [sp, #24]
 8019748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801974a:	930a      	str	r3, [sp, #40]	; 0x28
 801974c:	3b01      	subs	r3, #1
 801974e:	189b      	adds	r3, r3, r2
 8019750:	2201      	movs	r2, #1
 8019752:	002c      	movs	r4, r5
 8019754:	0005      	movs	r5, r0
 8019756:	9314      	str	r3, [sp, #80]	; 0x50
 8019758:	9b08      	ldr	r3, [sp, #32]
 801975a:	4013      	ands	r3, r2
 801975c:	930f      	str	r3, [sp, #60]	; 0x3c
 801975e:	0031      	movs	r1, r6
 8019760:	9805      	ldr	r0, [sp, #20]
 8019762:	f7ff fa3d 	bl	8018be0 <quorem>
 8019766:	0003      	movs	r3, r0
 8019768:	0021      	movs	r1, r4
 801976a:	3330      	adds	r3, #48	; 0x30
 801976c:	900d      	str	r0, [sp, #52]	; 0x34
 801976e:	9805      	ldr	r0, [sp, #20]
 8019770:	9307      	str	r3, [sp, #28]
 8019772:	f001 fa27 	bl	801abc4 <__mcmp>
 8019776:	002a      	movs	r2, r5
 8019778:	900e      	str	r0, [sp, #56]	; 0x38
 801977a:	0031      	movs	r1, r6
 801977c:	0038      	movs	r0, r7
 801977e:	f001 fa3d 	bl	801abfc <__mdiff>
 8019782:	68c3      	ldr	r3, [r0, #12]
 8019784:	9008      	str	r0, [sp, #32]
 8019786:	9310      	str	r3, [sp, #64]	; 0x40
 8019788:	2301      	movs	r3, #1
 801978a:	930c      	str	r3, [sp, #48]	; 0x30
 801978c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801978e:	2b00      	cmp	r3, #0
 8019790:	d104      	bne.n	801979c <_dtoa_r+0xaa4>
 8019792:	0001      	movs	r1, r0
 8019794:	9805      	ldr	r0, [sp, #20]
 8019796:	f001 fa15 	bl	801abc4 <__mcmp>
 801979a:	900c      	str	r0, [sp, #48]	; 0x30
 801979c:	0038      	movs	r0, r7
 801979e:	9908      	ldr	r1, [sp, #32]
 80197a0:	f000 ff84 	bl	801a6ac <_Bfree>
 80197a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80197a8:	3301      	adds	r3, #1
 80197aa:	9308      	str	r3, [sp, #32]
 80197ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80197ae:	4313      	orrs	r3, r2
 80197b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80197b2:	4313      	orrs	r3, r2
 80197b4:	d10c      	bne.n	80197d0 <_dtoa_r+0xad8>
 80197b6:	9b07      	ldr	r3, [sp, #28]
 80197b8:	2b39      	cmp	r3, #57	; 0x39
 80197ba:	d026      	beq.n	801980a <_dtoa_r+0xb12>
 80197bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197be:	2b00      	cmp	r3, #0
 80197c0:	dd02      	ble.n	80197c8 <_dtoa_r+0xad0>
 80197c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197c4:	3331      	adds	r3, #49	; 0x31
 80197c6:	9307      	str	r3, [sp, #28]
 80197c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197ca:	9a07      	ldr	r2, [sp, #28]
 80197cc:	701a      	strb	r2, [r3, #0]
 80197ce:	e76a      	b.n	80196a6 <_dtoa_r+0x9ae>
 80197d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	db04      	blt.n	80197e0 <_dtoa_r+0xae8>
 80197d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80197d8:	4313      	orrs	r3, r2
 80197da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80197dc:	4313      	orrs	r3, r2
 80197de:	d11f      	bne.n	8019820 <_dtoa_r+0xb28>
 80197e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	ddf0      	ble.n	80197c8 <_dtoa_r+0xad0>
 80197e6:	9905      	ldr	r1, [sp, #20]
 80197e8:	2201      	movs	r2, #1
 80197ea:	0038      	movs	r0, r7
 80197ec:	f001 f97c 	bl	801aae8 <__lshift>
 80197f0:	0031      	movs	r1, r6
 80197f2:	9005      	str	r0, [sp, #20]
 80197f4:	f001 f9e6 	bl	801abc4 <__mcmp>
 80197f8:	2800      	cmp	r0, #0
 80197fa:	dc03      	bgt.n	8019804 <_dtoa_r+0xb0c>
 80197fc:	d1e4      	bne.n	80197c8 <_dtoa_r+0xad0>
 80197fe:	9b07      	ldr	r3, [sp, #28]
 8019800:	07db      	lsls	r3, r3, #31
 8019802:	d5e1      	bpl.n	80197c8 <_dtoa_r+0xad0>
 8019804:	9b07      	ldr	r3, [sp, #28]
 8019806:	2b39      	cmp	r3, #57	; 0x39
 8019808:	d1db      	bne.n	80197c2 <_dtoa_r+0xaca>
 801980a:	2339      	movs	r3, #57	; 0x39
 801980c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801980e:	7013      	strb	r3, [r2, #0]
 8019810:	9b08      	ldr	r3, [sp, #32]
 8019812:	9308      	str	r3, [sp, #32]
 8019814:	3b01      	subs	r3, #1
 8019816:	781a      	ldrb	r2, [r3, #0]
 8019818:	2a39      	cmp	r2, #57	; 0x39
 801981a:	d068      	beq.n	80198ee <_dtoa_r+0xbf6>
 801981c:	3201      	adds	r2, #1
 801981e:	e7d5      	b.n	80197cc <_dtoa_r+0xad4>
 8019820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019822:	2b00      	cmp	r3, #0
 8019824:	dd07      	ble.n	8019836 <_dtoa_r+0xb3e>
 8019826:	9b07      	ldr	r3, [sp, #28]
 8019828:	2b39      	cmp	r3, #57	; 0x39
 801982a:	d0ee      	beq.n	801980a <_dtoa_r+0xb12>
 801982c:	9b07      	ldr	r3, [sp, #28]
 801982e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019830:	3301      	adds	r3, #1
 8019832:	7013      	strb	r3, [r2, #0]
 8019834:	e737      	b.n	80196a6 <_dtoa_r+0x9ae>
 8019836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019838:	9a07      	ldr	r2, [sp, #28]
 801983a:	701a      	strb	r2, [r3, #0]
 801983c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801983e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019840:	4293      	cmp	r3, r2
 8019842:	d03e      	beq.n	80198c2 <_dtoa_r+0xbca>
 8019844:	2300      	movs	r3, #0
 8019846:	220a      	movs	r2, #10
 8019848:	9905      	ldr	r1, [sp, #20]
 801984a:	0038      	movs	r0, r7
 801984c:	f000 ff52 	bl	801a6f4 <__multadd>
 8019850:	2300      	movs	r3, #0
 8019852:	9005      	str	r0, [sp, #20]
 8019854:	220a      	movs	r2, #10
 8019856:	0021      	movs	r1, r4
 8019858:	0038      	movs	r0, r7
 801985a:	42ac      	cmp	r4, r5
 801985c:	d106      	bne.n	801986c <_dtoa_r+0xb74>
 801985e:	f000 ff49 	bl	801a6f4 <__multadd>
 8019862:	0004      	movs	r4, r0
 8019864:	0005      	movs	r5, r0
 8019866:	9b08      	ldr	r3, [sp, #32]
 8019868:	930a      	str	r3, [sp, #40]	; 0x28
 801986a:	e778      	b.n	801975e <_dtoa_r+0xa66>
 801986c:	f000 ff42 	bl	801a6f4 <__multadd>
 8019870:	0029      	movs	r1, r5
 8019872:	0004      	movs	r4, r0
 8019874:	2300      	movs	r3, #0
 8019876:	220a      	movs	r2, #10
 8019878:	0038      	movs	r0, r7
 801987a:	f000 ff3b 	bl	801a6f4 <__multadd>
 801987e:	0005      	movs	r5, r0
 8019880:	e7f1      	b.n	8019866 <_dtoa_r+0xb6e>
 8019882:	9b07      	ldr	r3, [sp, #28]
 8019884:	930c      	str	r3, [sp, #48]	; 0x30
 8019886:	2400      	movs	r4, #0
 8019888:	0031      	movs	r1, r6
 801988a:	9805      	ldr	r0, [sp, #20]
 801988c:	f7ff f9a8 	bl	8018be0 <quorem>
 8019890:	9b06      	ldr	r3, [sp, #24]
 8019892:	3030      	adds	r0, #48	; 0x30
 8019894:	5518      	strb	r0, [r3, r4]
 8019896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019898:	3401      	adds	r4, #1
 801989a:	9007      	str	r0, [sp, #28]
 801989c:	42a3      	cmp	r3, r4
 801989e:	dd07      	ble.n	80198b0 <_dtoa_r+0xbb8>
 80198a0:	2300      	movs	r3, #0
 80198a2:	220a      	movs	r2, #10
 80198a4:	0038      	movs	r0, r7
 80198a6:	9905      	ldr	r1, [sp, #20]
 80198a8:	f000 ff24 	bl	801a6f4 <__multadd>
 80198ac:	9005      	str	r0, [sp, #20]
 80198ae:	e7eb      	b.n	8019888 <_dtoa_r+0xb90>
 80198b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80198b2:	2001      	movs	r0, #1
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	dd00      	ble.n	80198ba <_dtoa_r+0xbc2>
 80198b8:	0018      	movs	r0, r3
 80198ba:	2400      	movs	r4, #0
 80198bc:	9b06      	ldr	r3, [sp, #24]
 80198be:	181b      	adds	r3, r3, r0
 80198c0:	9308      	str	r3, [sp, #32]
 80198c2:	9905      	ldr	r1, [sp, #20]
 80198c4:	2201      	movs	r2, #1
 80198c6:	0038      	movs	r0, r7
 80198c8:	f001 f90e 	bl	801aae8 <__lshift>
 80198cc:	0031      	movs	r1, r6
 80198ce:	9005      	str	r0, [sp, #20]
 80198d0:	f001 f978 	bl	801abc4 <__mcmp>
 80198d4:	2800      	cmp	r0, #0
 80198d6:	dc9b      	bgt.n	8019810 <_dtoa_r+0xb18>
 80198d8:	d102      	bne.n	80198e0 <_dtoa_r+0xbe8>
 80198da:	9b07      	ldr	r3, [sp, #28]
 80198dc:	07db      	lsls	r3, r3, #31
 80198de:	d497      	bmi.n	8019810 <_dtoa_r+0xb18>
 80198e0:	9b08      	ldr	r3, [sp, #32]
 80198e2:	9308      	str	r3, [sp, #32]
 80198e4:	3b01      	subs	r3, #1
 80198e6:	781a      	ldrb	r2, [r3, #0]
 80198e8:	2a30      	cmp	r2, #48	; 0x30
 80198ea:	d0fa      	beq.n	80198e2 <_dtoa_r+0xbea>
 80198ec:	e6db      	b.n	80196a6 <_dtoa_r+0x9ae>
 80198ee:	9a06      	ldr	r2, [sp, #24]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d18e      	bne.n	8019812 <_dtoa_r+0xb1a>
 80198f4:	9b02      	ldr	r3, [sp, #8]
 80198f6:	3301      	adds	r3, #1
 80198f8:	9302      	str	r3, [sp, #8]
 80198fa:	2331      	movs	r3, #49	; 0x31
 80198fc:	e799      	b.n	8019832 <_dtoa_r+0xb3a>
 80198fe:	4b09      	ldr	r3, [pc, #36]	; (8019924 <_dtoa_r+0xc2c>)
 8019900:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019902:	9306      	str	r3, [sp, #24]
 8019904:	4b08      	ldr	r3, [pc, #32]	; (8019928 <_dtoa_r+0xc30>)
 8019906:	2a00      	cmp	r2, #0
 8019908:	d001      	beq.n	801990e <_dtoa_r+0xc16>
 801990a:	f7ff fa3f 	bl	8018d8c <_dtoa_r+0x94>
 801990e:	f7ff fa3f 	bl	8018d90 <_dtoa_r+0x98>
 8019912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019914:	2b00      	cmp	r3, #0
 8019916:	dcb6      	bgt.n	8019886 <_dtoa_r+0xb8e>
 8019918:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801991a:	2b02      	cmp	r3, #2
 801991c:	dd00      	ble.n	8019920 <_dtoa_r+0xc28>
 801991e:	e6ac      	b.n	801967a <_dtoa_r+0x982>
 8019920:	e7b1      	b.n	8019886 <_dtoa_r+0xb8e>
 8019922:	46c0      	nop			; (mov r8, r8)
 8019924:	0801d309 	.word	0x0801d309
 8019928:	0801d311 	.word	0x0801d311

0801992c <__sflush_r>:
 801992c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801992e:	898b      	ldrh	r3, [r1, #12]
 8019930:	0005      	movs	r5, r0
 8019932:	000c      	movs	r4, r1
 8019934:	071a      	lsls	r2, r3, #28
 8019936:	d45f      	bmi.n	80199f8 <__sflush_r+0xcc>
 8019938:	684a      	ldr	r2, [r1, #4]
 801993a:	2a00      	cmp	r2, #0
 801993c:	dc04      	bgt.n	8019948 <__sflush_r+0x1c>
 801993e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8019940:	2a00      	cmp	r2, #0
 8019942:	dc01      	bgt.n	8019948 <__sflush_r+0x1c>
 8019944:	2000      	movs	r0, #0
 8019946:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019948:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801994a:	2f00      	cmp	r7, #0
 801994c:	d0fa      	beq.n	8019944 <__sflush_r+0x18>
 801994e:	2200      	movs	r2, #0
 8019950:	2180      	movs	r1, #128	; 0x80
 8019952:	682e      	ldr	r6, [r5, #0]
 8019954:	602a      	str	r2, [r5, #0]
 8019956:	001a      	movs	r2, r3
 8019958:	0149      	lsls	r1, r1, #5
 801995a:	400a      	ands	r2, r1
 801995c:	420b      	tst	r3, r1
 801995e:	d034      	beq.n	80199ca <__sflush_r+0x9e>
 8019960:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019962:	89a3      	ldrh	r3, [r4, #12]
 8019964:	075b      	lsls	r3, r3, #29
 8019966:	d506      	bpl.n	8019976 <__sflush_r+0x4a>
 8019968:	6863      	ldr	r3, [r4, #4]
 801996a:	1ac0      	subs	r0, r0, r3
 801996c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801996e:	2b00      	cmp	r3, #0
 8019970:	d001      	beq.n	8019976 <__sflush_r+0x4a>
 8019972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019974:	1ac0      	subs	r0, r0, r3
 8019976:	0002      	movs	r2, r0
 8019978:	6a21      	ldr	r1, [r4, #32]
 801997a:	2300      	movs	r3, #0
 801997c:	0028      	movs	r0, r5
 801997e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8019980:	47b8      	blx	r7
 8019982:	89a1      	ldrh	r1, [r4, #12]
 8019984:	1c43      	adds	r3, r0, #1
 8019986:	d106      	bne.n	8019996 <__sflush_r+0x6a>
 8019988:	682b      	ldr	r3, [r5, #0]
 801998a:	2b1d      	cmp	r3, #29
 801998c:	d831      	bhi.n	80199f2 <__sflush_r+0xc6>
 801998e:	4a2c      	ldr	r2, [pc, #176]	; (8019a40 <__sflush_r+0x114>)
 8019990:	40da      	lsrs	r2, r3
 8019992:	07d3      	lsls	r3, r2, #31
 8019994:	d52d      	bpl.n	80199f2 <__sflush_r+0xc6>
 8019996:	2300      	movs	r3, #0
 8019998:	6063      	str	r3, [r4, #4]
 801999a:	6923      	ldr	r3, [r4, #16]
 801999c:	6023      	str	r3, [r4, #0]
 801999e:	04cb      	lsls	r3, r1, #19
 80199a0:	d505      	bpl.n	80199ae <__sflush_r+0x82>
 80199a2:	1c43      	adds	r3, r0, #1
 80199a4:	d102      	bne.n	80199ac <__sflush_r+0x80>
 80199a6:	682b      	ldr	r3, [r5, #0]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d100      	bne.n	80199ae <__sflush_r+0x82>
 80199ac:	6560      	str	r0, [r4, #84]	; 0x54
 80199ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80199b0:	602e      	str	r6, [r5, #0]
 80199b2:	2900      	cmp	r1, #0
 80199b4:	d0c6      	beq.n	8019944 <__sflush_r+0x18>
 80199b6:	0023      	movs	r3, r4
 80199b8:	3344      	adds	r3, #68	; 0x44
 80199ba:	4299      	cmp	r1, r3
 80199bc:	d002      	beq.n	80199c4 <__sflush_r+0x98>
 80199be:	0028      	movs	r0, r5
 80199c0:	f7fc ff42 	bl	8016848 <_free_r>
 80199c4:	2000      	movs	r0, #0
 80199c6:	6360      	str	r0, [r4, #52]	; 0x34
 80199c8:	e7bd      	b.n	8019946 <__sflush_r+0x1a>
 80199ca:	2301      	movs	r3, #1
 80199cc:	0028      	movs	r0, r5
 80199ce:	6a21      	ldr	r1, [r4, #32]
 80199d0:	47b8      	blx	r7
 80199d2:	1c43      	adds	r3, r0, #1
 80199d4:	d1c5      	bne.n	8019962 <__sflush_r+0x36>
 80199d6:	682b      	ldr	r3, [r5, #0]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d0c2      	beq.n	8019962 <__sflush_r+0x36>
 80199dc:	2b1d      	cmp	r3, #29
 80199de:	d001      	beq.n	80199e4 <__sflush_r+0xb8>
 80199e0:	2b16      	cmp	r3, #22
 80199e2:	d101      	bne.n	80199e8 <__sflush_r+0xbc>
 80199e4:	602e      	str	r6, [r5, #0]
 80199e6:	e7ad      	b.n	8019944 <__sflush_r+0x18>
 80199e8:	2340      	movs	r3, #64	; 0x40
 80199ea:	89a2      	ldrh	r2, [r4, #12]
 80199ec:	4313      	orrs	r3, r2
 80199ee:	81a3      	strh	r3, [r4, #12]
 80199f0:	e7a9      	b.n	8019946 <__sflush_r+0x1a>
 80199f2:	2340      	movs	r3, #64	; 0x40
 80199f4:	430b      	orrs	r3, r1
 80199f6:	e7fa      	b.n	80199ee <__sflush_r+0xc2>
 80199f8:	690f      	ldr	r7, [r1, #16]
 80199fa:	2f00      	cmp	r7, #0
 80199fc:	d0a2      	beq.n	8019944 <__sflush_r+0x18>
 80199fe:	680a      	ldr	r2, [r1, #0]
 8019a00:	600f      	str	r7, [r1, #0]
 8019a02:	1bd2      	subs	r2, r2, r7
 8019a04:	9201      	str	r2, [sp, #4]
 8019a06:	2200      	movs	r2, #0
 8019a08:	079b      	lsls	r3, r3, #30
 8019a0a:	d100      	bne.n	8019a0e <__sflush_r+0xe2>
 8019a0c:	694a      	ldr	r2, [r1, #20]
 8019a0e:	60a2      	str	r2, [r4, #8]
 8019a10:	9b01      	ldr	r3, [sp, #4]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	dc00      	bgt.n	8019a18 <__sflush_r+0xec>
 8019a16:	e795      	b.n	8019944 <__sflush_r+0x18>
 8019a18:	003a      	movs	r2, r7
 8019a1a:	0028      	movs	r0, r5
 8019a1c:	9b01      	ldr	r3, [sp, #4]
 8019a1e:	6a21      	ldr	r1, [r4, #32]
 8019a20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a22:	47b0      	blx	r6
 8019a24:	2800      	cmp	r0, #0
 8019a26:	dc06      	bgt.n	8019a36 <__sflush_r+0x10a>
 8019a28:	2340      	movs	r3, #64	; 0x40
 8019a2a:	2001      	movs	r0, #1
 8019a2c:	89a2      	ldrh	r2, [r4, #12]
 8019a2e:	4240      	negs	r0, r0
 8019a30:	4313      	orrs	r3, r2
 8019a32:	81a3      	strh	r3, [r4, #12]
 8019a34:	e787      	b.n	8019946 <__sflush_r+0x1a>
 8019a36:	9b01      	ldr	r3, [sp, #4]
 8019a38:	183f      	adds	r7, r7, r0
 8019a3a:	1a1b      	subs	r3, r3, r0
 8019a3c:	9301      	str	r3, [sp, #4]
 8019a3e:	e7e7      	b.n	8019a10 <__sflush_r+0xe4>
 8019a40:	20400001 	.word	0x20400001

08019a44 <_fflush_r>:
 8019a44:	690b      	ldr	r3, [r1, #16]
 8019a46:	b570      	push	{r4, r5, r6, lr}
 8019a48:	0005      	movs	r5, r0
 8019a4a:	000c      	movs	r4, r1
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d102      	bne.n	8019a56 <_fflush_r+0x12>
 8019a50:	2500      	movs	r5, #0
 8019a52:	0028      	movs	r0, r5
 8019a54:	bd70      	pop	{r4, r5, r6, pc}
 8019a56:	2800      	cmp	r0, #0
 8019a58:	d004      	beq.n	8019a64 <_fflush_r+0x20>
 8019a5a:	6983      	ldr	r3, [r0, #24]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d101      	bne.n	8019a64 <_fflush_r+0x20>
 8019a60:	f000 f8a8 	bl	8019bb4 <__sinit>
 8019a64:	4b14      	ldr	r3, [pc, #80]	; (8019ab8 <_fflush_r+0x74>)
 8019a66:	429c      	cmp	r4, r3
 8019a68:	d11b      	bne.n	8019aa2 <_fflush_r+0x5e>
 8019a6a:	686c      	ldr	r4, [r5, #4]
 8019a6c:	220c      	movs	r2, #12
 8019a6e:	5ea3      	ldrsh	r3, [r4, r2]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d0ed      	beq.n	8019a50 <_fflush_r+0xc>
 8019a74:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019a76:	07d2      	lsls	r2, r2, #31
 8019a78:	d404      	bmi.n	8019a84 <_fflush_r+0x40>
 8019a7a:	059b      	lsls	r3, r3, #22
 8019a7c:	d402      	bmi.n	8019a84 <_fflush_r+0x40>
 8019a7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a80:	f000 fd0d 	bl	801a49e <__retarget_lock_acquire_recursive>
 8019a84:	0028      	movs	r0, r5
 8019a86:	0021      	movs	r1, r4
 8019a88:	f7ff ff50 	bl	801992c <__sflush_r>
 8019a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a8e:	0005      	movs	r5, r0
 8019a90:	07db      	lsls	r3, r3, #31
 8019a92:	d4de      	bmi.n	8019a52 <_fflush_r+0xe>
 8019a94:	89a3      	ldrh	r3, [r4, #12]
 8019a96:	059b      	lsls	r3, r3, #22
 8019a98:	d4db      	bmi.n	8019a52 <_fflush_r+0xe>
 8019a9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a9c:	f000 fd00 	bl	801a4a0 <__retarget_lock_release_recursive>
 8019aa0:	e7d7      	b.n	8019a52 <_fflush_r+0xe>
 8019aa2:	4b06      	ldr	r3, [pc, #24]	; (8019abc <_fflush_r+0x78>)
 8019aa4:	429c      	cmp	r4, r3
 8019aa6:	d101      	bne.n	8019aac <_fflush_r+0x68>
 8019aa8:	68ac      	ldr	r4, [r5, #8]
 8019aaa:	e7df      	b.n	8019a6c <_fflush_r+0x28>
 8019aac:	4b04      	ldr	r3, [pc, #16]	; (8019ac0 <_fflush_r+0x7c>)
 8019aae:	429c      	cmp	r4, r3
 8019ab0:	d1dc      	bne.n	8019a6c <_fflush_r+0x28>
 8019ab2:	68ec      	ldr	r4, [r5, #12]
 8019ab4:	e7da      	b.n	8019a6c <_fflush_r+0x28>
 8019ab6:	46c0      	nop			; (mov r8, r8)
 8019ab8:	0801d3bc 	.word	0x0801d3bc
 8019abc:	0801d3dc 	.word	0x0801d3dc
 8019ac0:	0801d39c 	.word	0x0801d39c

08019ac4 <fflush>:
 8019ac4:	0001      	movs	r1, r0
 8019ac6:	b510      	push	{r4, lr}
 8019ac8:	2800      	cmp	r0, #0
 8019aca:	d105      	bne.n	8019ad8 <fflush+0x14>
 8019acc:	4b05      	ldr	r3, [pc, #20]	; (8019ae4 <fflush+0x20>)
 8019ace:	4906      	ldr	r1, [pc, #24]	; (8019ae8 <fflush+0x24>)
 8019ad0:	6818      	ldr	r0, [r3, #0]
 8019ad2:	f000 f90a 	bl	8019cea <_fwalk_reent>
 8019ad6:	bd10      	pop	{r4, pc}
 8019ad8:	4b04      	ldr	r3, [pc, #16]	; (8019aec <fflush+0x28>)
 8019ada:	6818      	ldr	r0, [r3, #0]
 8019adc:	f7ff ffb2 	bl	8019a44 <_fflush_r>
 8019ae0:	e7f9      	b.n	8019ad6 <fflush+0x12>
 8019ae2:	46c0      	nop			; (mov r8, r8)
 8019ae4:	0801d170 	.word	0x0801d170
 8019ae8:	08019a45 	.word	0x08019a45
 8019aec:	20000254 	.word	0x20000254

08019af0 <std>:
 8019af0:	2300      	movs	r3, #0
 8019af2:	b510      	push	{r4, lr}
 8019af4:	0004      	movs	r4, r0
 8019af6:	6003      	str	r3, [r0, #0]
 8019af8:	6043      	str	r3, [r0, #4]
 8019afa:	6083      	str	r3, [r0, #8]
 8019afc:	8181      	strh	r1, [r0, #12]
 8019afe:	6643      	str	r3, [r0, #100]	; 0x64
 8019b00:	0019      	movs	r1, r3
 8019b02:	81c2      	strh	r2, [r0, #14]
 8019b04:	6103      	str	r3, [r0, #16]
 8019b06:	6143      	str	r3, [r0, #20]
 8019b08:	6183      	str	r3, [r0, #24]
 8019b0a:	2208      	movs	r2, #8
 8019b0c:	305c      	adds	r0, #92	; 0x5c
 8019b0e:	f7fc fe92 	bl	8016836 <memset>
 8019b12:	4b05      	ldr	r3, [pc, #20]	; (8019b28 <std+0x38>)
 8019b14:	6224      	str	r4, [r4, #32]
 8019b16:	6263      	str	r3, [r4, #36]	; 0x24
 8019b18:	4b04      	ldr	r3, [pc, #16]	; (8019b2c <std+0x3c>)
 8019b1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8019b1c:	4b04      	ldr	r3, [pc, #16]	; (8019b30 <std+0x40>)
 8019b1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019b20:	4b04      	ldr	r3, [pc, #16]	; (8019b34 <std+0x44>)
 8019b22:	6323      	str	r3, [r4, #48]	; 0x30
 8019b24:	bd10      	pop	{r4, pc}
 8019b26:	46c0      	nop			; (mov r8, r8)
 8019b28:	080179ad 	.word	0x080179ad
 8019b2c:	080179d9 	.word	0x080179d9
 8019b30:	08017a11 	.word	0x08017a11
 8019b34:	08017a3d 	.word	0x08017a3d

08019b38 <_cleanup_r>:
 8019b38:	b510      	push	{r4, lr}
 8019b3a:	4902      	ldr	r1, [pc, #8]	; (8019b44 <_cleanup_r+0xc>)
 8019b3c:	f000 f8d5 	bl	8019cea <_fwalk_reent>
 8019b40:	bd10      	pop	{r4, pc}
 8019b42:	46c0      	nop			; (mov r8, r8)
 8019b44:	08019a45 	.word	0x08019a45

08019b48 <__sfmoreglue>:
 8019b48:	b570      	push	{r4, r5, r6, lr}
 8019b4a:	2568      	movs	r5, #104	; 0x68
 8019b4c:	1e4a      	subs	r2, r1, #1
 8019b4e:	4355      	muls	r5, r2
 8019b50:	000e      	movs	r6, r1
 8019b52:	0029      	movs	r1, r5
 8019b54:	3174      	adds	r1, #116	; 0x74
 8019b56:	f7fc fee3 	bl	8016920 <_malloc_r>
 8019b5a:	1e04      	subs	r4, r0, #0
 8019b5c:	d008      	beq.n	8019b70 <__sfmoreglue+0x28>
 8019b5e:	2100      	movs	r1, #0
 8019b60:	002a      	movs	r2, r5
 8019b62:	6001      	str	r1, [r0, #0]
 8019b64:	6046      	str	r6, [r0, #4]
 8019b66:	300c      	adds	r0, #12
 8019b68:	60a0      	str	r0, [r4, #8]
 8019b6a:	3268      	adds	r2, #104	; 0x68
 8019b6c:	f7fc fe63 	bl	8016836 <memset>
 8019b70:	0020      	movs	r0, r4
 8019b72:	bd70      	pop	{r4, r5, r6, pc}

08019b74 <__sfp_lock_acquire>:
 8019b74:	b510      	push	{r4, lr}
 8019b76:	4802      	ldr	r0, [pc, #8]	; (8019b80 <__sfp_lock_acquire+0xc>)
 8019b78:	f000 fc91 	bl	801a49e <__retarget_lock_acquire_recursive>
 8019b7c:	bd10      	pop	{r4, pc}
 8019b7e:	46c0      	nop			; (mov r8, r8)
 8019b80:	200019f1 	.word	0x200019f1

08019b84 <__sfp_lock_release>:
 8019b84:	b510      	push	{r4, lr}
 8019b86:	4802      	ldr	r0, [pc, #8]	; (8019b90 <__sfp_lock_release+0xc>)
 8019b88:	f000 fc8a 	bl	801a4a0 <__retarget_lock_release_recursive>
 8019b8c:	bd10      	pop	{r4, pc}
 8019b8e:	46c0      	nop			; (mov r8, r8)
 8019b90:	200019f1 	.word	0x200019f1

08019b94 <__sinit_lock_acquire>:
 8019b94:	b510      	push	{r4, lr}
 8019b96:	4802      	ldr	r0, [pc, #8]	; (8019ba0 <__sinit_lock_acquire+0xc>)
 8019b98:	f000 fc81 	bl	801a49e <__retarget_lock_acquire_recursive>
 8019b9c:	bd10      	pop	{r4, pc}
 8019b9e:	46c0      	nop			; (mov r8, r8)
 8019ba0:	200019f2 	.word	0x200019f2

08019ba4 <__sinit_lock_release>:
 8019ba4:	b510      	push	{r4, lr}
 8019ba6:	4802      	ldr	r0, [pc, #8]	; (8019bb0 <__sinit_lock_release+0xc>)
 8019ba8:	f000 fc7a 	bl	801a4a0 <__retarget_lock_release_recursive>
 8019bac:	bd10      	pop	{r4, pc}
 8019bae:	46c0      	nop			; (mov r8, r8)
 8019bb0:	200019f2 	.word	0x200019f2

08019bb4 <__sinit>:
 8019bb4:	b513      	push	{r0, r1, r4, lr}
 8019bb6:	0004      	movs	r4, r0
 8019bb8:	f7ff ffec 	bl	8019b94 <__sinit_lock_acquire>
 8019bbc:	69a3      	ldr	r3, [r4, #24]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d002      	beq.n	8019bc8 <__sinit+0x14>
 8019bc2:	f7ff ffef 	bl	8019ba4 <__sinit_lock_release>
 8019bc6:	bd13      	pop	{r0, r1, r4, pc}
 8019bc8:	64a3      	str	r3, [r4, #72]	; 0x48
 8019bca:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8019bce:	4b13      	ldr	r3, [pc, #76]	; (8019c1c <__sinit+0x68>)
 8019bd0:	4a13      	ldr	r2, [pc, #76]	; (8019c20 <__sinit+0x6c>)
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8019bd6:	9301      	str	r3, [sp, #4]
 8019bd8:	42a3      	cmp	r3, r4
 8019bda:	d101      	bne.n	8019be0 <__sinit+0x2c>
 8019bdc:	2301      	movs	r3, #1
 8019bde:	61a3      	str	r3, [r4, #24]
 8019be0:	0020      	movs	r0, r4
 8019be2:	f000 f81f 	bl	8019c24 <__sfp>
 8019be6:	6060      	str	r0, [r4, #4]
 8019be8:	0020      	movs	r0, r4
 8019bea:	f000 f81b 	bl	8019c24 <__sfp>
 8019bee:	60a0      	str	r0, [r4, #8]
 8019bf0:	0020      	movs	r0, r4
 8019bf2:	f000 f817 	bl	8019c24 <__sfp>
 8019bf6:	2200      	movs	r2, #0
 8019bf8:	2104      	movs	r1, #4
 8019bfa:	60e0      	str	r0, [r4, #12]
 8019bfc:	6860      	ldr	r0, [r4, #4]
 8019bfe:	f7ff ff77 	bl	8019af0 <std>
 8019c02:	2201      	movs	r2, #1
 8019c04:	2109      	movs	r1, #9
 8019c06:	68a0      	ldr	r0, [r4, #8]
 8019c08:	f7ff ff72 	bl	8019af0 <std>
 8019c0c:	2202      	movs	r2, #2
 8019c0e:	2112      	movs	r1, #18
 8019c10:	68e0      	ldr	r0, [r4, #12]
 8019c12:	f7ff ff6d 	bl	8019af0 <std>
 8019c16:	2301      	movs	r3, #1
 8019c18:	61a3      	str	r3, [r4, #24]
 8019c1a:	e7d2      	b.n	8019bc2 <__sinit+0xe>
 8019c1c:	0801d170 	.word	0x0801d170
 8019c20:	08019b39 	.word	0x08019b39

08019c24 <__sfp>:
 8019c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c26:	0007      	movs	r7, r0
 8019c28:	f7ff ffa4 	bl	8019b74 <__sfp_lock_acquire>
 8019c2c:	4b1f      	ldr	r3, [pc, #124]	; (8019cac <__sfp+0x88>)
 8019c2e:	681e      	ldr	r6, [r3, #0]
 8019c30:	69b3      	ldr	r3, [r6, #24]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d102      	bne.n	8019c3c <__sfp+0x18>
 8019c36:	0030      	movs	r0, r6
 8019c38:	f7ff ffbc 	bl	8019bb4 <__sinit>
 8019c3c:	3648      	adds	r6, #72	; 0x48
 8019c3e:	68b4      	ldr	r4, [r6, #8]
 8019c40:	6873      	ldr	r3, [r6, #4]
 8019c42:	3b01      	subs	r3, #1
 8019c44:	d504      	bpl.n	8019c50 <__sfp+0x2c>
 8019c46:	6833      	ldr	r3, [r6, #0]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d022      	beq.n	8019c92 <__sfp+0x6e>
 8019c4c:	6836      	ldr	r6, [r6, #0]
 8019c4e:	e7f6      	b.n	8019c3e <__sfp+0x1a>
 8019c50:	220c      	movs	r2, #12
 8019c52:	5ea5      	ldrsh	r5, [r4, r2]
 8019c54:	2d00      	cmp	r5, #0
 8019c56:	d11a      	bne.n	8019c8e <__sfp+0x6a>
 8019c58:	0020      	movs	r0, r4
 8019c5a:	4b15      	ldr	r3, [pc, #84]	; (8019cb0 <__sfp+0x8c>)
 8019c5c:	3058      	adds	r0, #88	; 0x58
 8019c5e:	60e3      	str	r3, [r4, #12]
 8019c60:	6665      	str	r5, [r4, #100]	; 0x64
 8019c62:	f000 fc1b 	bl	801a49c <__retarget_lock_init_recursive>
 8019c66:	f7ff ff8d 	bl	8019b84 <__sfp_lock_release>
 8019c6a:	0020      	movs	r0, r4
 8019c6c:	2208      	movs	r2, #8
 8019c6e:	0029      	movs	r1, r5
 8019c70:	6025      	str	r5, [r4, #0]
 8019c72:	60a5      	str	r5, [r4, #8]
 8019c74:	6065      	str	r5, [r4, #4]
 8019c76:	6125      	str	r5, [r4, #16]
 8019c78:	6165      	str	r5, [r4, #20]
 8019c7a:	61a5      	str	r5, [r4, #24]
 8019c7c:	305c      	adds	r0, #92	; 0x5c
 8019c7e:	f7fc fdda 	bl	8016836 <memset>
 8019c82:	6365      	str	r5, [r4, #52]	; 0x34
 8019c84:	63a5      	str	r5, [r4, #56]	; 0x38
 8019c86:	64a5      	str	r5, [r4, #72]	; 0x48
 8019c88:	64e5      	str	r5, [r4, #76]	; 0x4c
 8019c8a:	0020      	movs	r0, r4
 8019c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c8e:	3468      	adds	r4, #104	; 0x68
 8019c90:	e7d7      	b.n	8019c42 <__sfp+0x1e>
 8019c92:	2104      	movs	r1, #4
 8019c94:	0038      	movs	r0, r7
 8019c96:	f7ff ff57 	bl	8019b48 <__sfmoreglue>
 8019c9a:	1e04      	subs	r4, r0, #0
 8019c9c:	6030      	str	r0, [r6, #0]
 8019c9e:	d1d5      	bne.n	8019c4c <__sfp+0x28>
 8019ca0:	f7ff ff70 	bl	8019b84 <__sfp_lock_release>
 8019ca4:	230c      	movs	r3, #12
 8019ca6:	603b      	str	r3, [r7, #0]
 8019ca8:	e7ef      	b.n	8019c8a <__sfp+0x66>
 8019caa:	46c0      	nop			; (mov r8, r8)
 8019cac:	0801d170 	.word	0x0801d170
 8019cb0:	ffff0001 	.word	0xffff0001

08019cb4 <_fwalk>:
 8019cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019cb6:	3048      	adds	r0, #72	; 0x48
 8019cb8:	0004      	movs	r4, r0
 8019cba:	2600      	movs	r6, #0
 8019cbc:	9101      	str	r1, [sp, #4]
 8019cbe:	68a5      	ldr	r5, [r4, #8]
 8019cc0:	6867      	ldr	r7, [r4, #4]
 8019cc2:	3f01      	subs	r7, #1
 8019cc4:	d504      	bpl.n	8019cd0 <_fwalk+0x1c>
 8019cc6:	6824      	ldr	r4, [r4, #0]
 8019cc8:	2c00      	cmp	r4, #0
 8019cca:	d1f8      	bne.n	8019cbe <_fwalk+0xa>
 8019ccc:	0030      	movs	r0, r6
 8019cce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019cd0:	89ab      	ldrh	r3, [r5, #12]
 8019cd2:	2b01      	cmp	r3, #1
 8019cd4:	d907      	bls.n	8019ce6 <_fwalk+0x32>
 8019cd6:	220e      	movs	r2, #14
 8019cd8:	5eab      	ldrsh	r3, [r5, r2]
 8019cda:	3301      	adds	r3, #1
 8019cdc:	d003      	beq.n	8019ce6 <_fwalk+0x32>
 8019cde:	0028      	movs	r0, r5
 8019ce0:	9b01      	ldr	r3, [sp, #4]
 8019ce2:	4798      	blx	r3
 8019ce4:	4306      	orrs	r6, r0
 8019ce6:	3568      	adds	r5, #104	; 0x68
 8019ce8:	e7eb      	b.n	8019cc2 <_fwalk+0xe>

08019cea <_fwalk_reent>:
 8019cea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019cec:	0004      	movs	r4, r0
 8019cee:	0006      	movs	r6, r0
 8019cf0:	2700      	movs	r7, #0
 8019cf2:	9101      	str	r1, [sp, #4]
 8019cf4:	3448      	adds	r4, #72	; 0x48
 8019cf6:	6863      	ldr	r3, [r4, #4]
 8019cf8:	68a5      	ldr	r5, [r4, #8]
 8019cfa:	9300      	str	r3, [sp, #0]
 8019cfc:	9b00      	ldr	r3, [sp, #0]
 8019cfe:	3b01      	subs	r3, #1
 8019d00:	9300      	str	r3, [sp, #0]
 8019d02:	d504      	bpl.n	8019d0e <_fwalk_reent+0x24>
 8019d04:	6824      	ldr	r4, [r4, #0]
 8019d06:	2c00      	cmp	r4, #0
 8019d08:	d1f5      	bne.n	8019cf6 <_fwalk_reent+0xc>
 8019d0a:	0038      	movs	r0, r7
 8019d0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019d0e:	89ab      	ldrh	r3, [r5, #12]
 8019d10:	2b01      	cmp	r3, #1
 8019d12:	d908      	bls.n	8019d26 <_fwalk_reent+0x3c>
 8019d14:	220e      	movs	r2, #14
 8019d16:	5eab      	ldrsh	r3, [r5, r2]
 8019d18:	3301      	adds	r3, #1
 8019d1a:	d004      	beq.n	8019d26 <_fwalk_reent+0x3c>
 8019d1c:	0029      	movs	r1, r5
 8019d1e:	0030      	movs	r0, r6
 8019d20:	9b01      	ldr	r3, [sp, #4]
 8019d22:	4798      	blx	r3
 8019d24:	4307      	orrs	r7, r0
 8019d26:	3568      	adds	r5, #104	; 0x68
 8019d28:	e7e8      	b.n	8019cfc <_fwalk_reent+0x12>

08019d2a <rshift>:
 8019d2a:	0002      	movs	r2, r0
 8019d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d2e:	6904      	ldr	r4, [r0, #16]
 8019d30:	3214      	adds	r2, #20
 8019d32:	0013      	movs	r3, r2
 8019d34:	b085      	sub	sp, #20
 8019d36:	114f      	asrs	r7, r1, #5
 8019d38:	42bc      	cmp	r4, r7
 8019d3a:	dd31      	ble.n	8019da0 <rshift+0x76>
 8019d3c:	00bb      	lsls	r3, r7, #2
 8019d3e:	18d3      	adds	r3, r2, r3
 8019d40:	261f      	movs	r6, #31
 8019d42:	9301      	str	r3, [sp, #4]
 8019d44:	000b      	movs	r3, r1
 8019d46:	00a5      	lsls	r5, r4, #2
 8019d48:	4033      	ands	r3, r6
 8019d4a:	1955      	adds	r5, r2, r5
 8019d4c:	9302      	str	r3, [sp, #8]
 8019d4e:	4231      	tst	r1, r6
 8019d50:	d10c      	bne.n	8019d6c <rshift+0x42>
 8019d52:	0016      	movs	r6, r2
 8019d54:	9901      	ldr	r1, [sp, #4]
 8019d56:	428d      	cmp	r5, r1
 8019d58:	d838      	bhi.n	8019dcc <rshift+0xa2>
 8019d5a:	9901      	ldr	r1, [sp, #4]
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	3903      	subs	r1, #3
 8019d60:	428d      	cmp	r5, r1
 8019d62:	d301      	bcc.n	8019d68 <rshift+0x3e>
 8019d64:	1be3      	subs	r3, r4, r7
 8019d66:	009b      	lsls	r3, r3, #2
 8019d68:	18d3      	adds	r3, r2, r3
 8019d6a:	e019      	b.n	8019da0 <rshift+0x76>
 8019d6c:	2120      	movs	r1, #32
 8019d6e:	9b02      	ldr	r3, [sp, #8]
 8019d70:	9e01      	ldr	r6, [sp, #4]
 8019d72:	1acb      	subs	r3, r1, r3
 8019d74:	9303      	str	r3, [sp, #12]
 8019d76:	ce02      	ldmia	r6!, {r1}
 8019d78:	9b02      	ldr	r3, [sp, #8]
 8019d7a:	4694      	mov	ip, r2
 8019d7c:	40d9      	lsrs	r1, r3
 8019d7e:	9100      	str	r1, [sp, #0]
 8019d80:	42b5      	cmp	r5, r6
 8019d82:	d816      	bhi.n	8019db2 <rshift+0x88>
 8019d84:	9e01      	ldr	r6, [sp, #4]
 8019d86:	2300      	movs	r3, #0
 8019d88:	3601      	adds	r6, #1
 8019d8a:	42b5      	cmp	r5, r6
 8019d8c:	d302      	bcc.n	8019d94 <rshift+0x6a>
 8019d8e:	1be3      	subs	r3, r4, r7
 8019d90:	009b      	lsls	r3, r3, #2
 8019d92:	3b04      	subs	r3, #4
 8019d94:	9900      	ldr	r1, [sp, #0]
 8019d96:	18d3      	adds	r3, r2, r3
 8019d98:	6019      	str	r1, [r3, #0]
 8019d9a:	2900      	cmp	r1, #0
 8019d9c:	d000      	beq.n	8019da0 <rshift+0x76>
 8019d9e:	3304      	adds	r3, #4
 8019da0:	1a99      	subs	r1, r3, r2
 8019da2:	1089      	asrs	r1, r1, #2
 8019da4:	6101      	str	r1, [r0, #16]
 8019da6:	4293      	cmp	r3, r2
 8019da8:	d101      	bne.n	8019dae <rshift+0x84>
 8019daa:	2300      	movs	r3, #0
 8019dac:	6143      	str	r3, [r0, #20]
 8019dae:	b005      	add	sp, #20
 8019db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019db2:	6833      	ldr	r3, [r6, #0]
 8019db4:	9903      	ldr	r1, [sp, #12]
 8019db6:	408b      	lsls	r3, r1
 8019db8:	9900      	ldr	r1, [sp, #0]
 8019dba:	4319      	orrs	r1, r3
 8019dbc:	4663      	mov	r3, ip
 8019dbe:	c302      	stmia	r3!, {r1}
 8019dc0:	469c      	mov	ip, r3
 8019dc2:	ce02      	ldmia	r6!, {r1}
 8019dc4:	9b02      	ldr	r3, [sp, #8]
 8019dc6:	40d9      	lsrs	r1, r3
 8019dc8:	9100      	str	r1, [sp, #0]
 8019dca:	e7d9      	b.n	8019d80 <rshift+0x56>
 8019dcc:	c908      	ldmia	r1!, {r3}
 8019dce:	c608      	stmia	r6!, {r3}
 8019dd0:	e7c1      	b.n	8019d56 <rshift+0x2c>

08019dd2 <__hexdig_fun>:
 8019dd2:	0002      	movs	r2, r0
 8019dd4:	3a30      	subs	r2, #48	; 0x30
 8019dd6:	0003      	movs	r3, r0
 8019dd8:	2a09      	cmp	r2, #9
 8019dda:	d802      	bhi.n	8019de2 <__hexdig_fun+0x10>
 8019ddc:	3b20      	subs	r3, #32
 8019dde:	b2d8      	uxtb	r0, r3
 8019de0:	4770      	bx	lr
 8019de2:	0002      	movs	r2, r0
 8019de4:	3a61      	subs	r2, #97	; 0x61
 8019de6:	2a05      	cmp	r2, #5
 8019de8:	d801      	bhi.n	8019dee <__hexdig_fun+0x1c>
 8019dea:	3b47      	subs	r3, #71	; 0x47
 8019dec:	e7f7      	b.n	8019dde <__hexdig_fun+0xc>
 8019dee:	001a      	movs	r2, r3
 8019df0:	3a41      	subs	r2, #65	; 0x41
 8019df2:	2000      	movs	r0, #0
 8019df4:	2a05      	cmp	r2, #5
 8019df6:	d8f3      	bhi.n	8019de0 <__hexdig_fun+0xe>
 8019df8:	3b27      	subs	r3, #39	; 0x27
 8019dfa:	e7f0      	b.n	8019dde <__hexdig_fun+0xc>

08019dfc <__gethex>:
 8019dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dfe:	b08d      	sub	sp, #52	; 0x34
 8019e00:	930a      	str	r3, [sp, #40]	; 0x28
 8019e02:	4bbf      	ldr	r3, [pc, #764]	; (801a100 <__gethex+0x304>)
 8019e04:	9005      	str	r0, [sp, #20]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	9109      	str	r1, [sp, #36]	; 0x24
 8019e0a:	0018      	movs	r0, r3
 8019e0c:	9202      	str	r2, [sp, #8]
 8019e0e:	9307      	str	r3, [sp, #28]
 8019e10:	f7e6 f984 	bl	800011c <strlen>
 8019e14:	2202      	movs	r2, #2
 8019e16:	9b07      	ldr	r3, [sp, #28]
 8019e18:	4252      	negs	r2, r2
 8019e1a:	181b      	adds	r3, r3, r0
 8019e1c:	3b01      	subs	r3, #1
 8019e1e:	781b      	ldrb	r3, [r3, #0]
 8019e20:	9003      	str	r0, [sp, #12]
 8019e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8019e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e26:	6819      	ldr	r1, [r3, #0]
 8019e28:	1c8b      	adds	r3, r1, #2
 8019e2a:	1a52      	subs	r2, r2, r1
 8019e2c:	18d1      	adds	r1, r2, r3
 8019e2e:	9301      	str	r3, [sp, #4]
 8019e30:	9108      	str	r1, [sp, #32]
 8019e32:	9901      	ldr	r1, [sp, #4]
 8019e34:	3301      	adds	r3, #1
 8019e36:	7808      	ldrb	r0, [r1, #0]
 8019e38:	2830      	cmp	r0, #48	; 0x30
 8019e3a:	d0f7      	beq.n	8019e2c <__gethex+0x30>
 8019e3c:	f7ff ffc9 	bl	8019dd2 <__hexdig_fun>
 8019e40:	2300      	movs	r3, #0
 8019e42:	001c      	movs	r4, r3
 8019e44:	9304      	str	r3, [sp, #16]
 8019e46:	4298      	cmp	r0, r3
 8019e48:	d11f      	bne.n	8019e8a <__gethex+0x8e>
 8019e4a:	9a03      	ldr	r2, [sp, #12]
 8019e4c:	9907      	ldr	r1, [sp, #28]
 8019e4e:	9801      	ldr	r0, [sp, #4]
 8019e50:	f7fd fe21 	bl	8017a96 <strncmp>
 8019e54:	0007      	movs	r7, r0
 8019e56:	42a0      	cmp	r0, r4
 8019e58:	d000      	beq.n	8019e5c <__gethex+0x60>
 8019e5a:	e06b      	b.n	8019f34 <__gethex+0x138>
 8019e5c:	9b01      	ldr	r3, [sp, #4]
 8019e5e:	9a03      	ldr	r2, [sp, #12]
 8019e60:	5c98      	ldrb	r0, [r3, r2]
 8019e62:	189d      	adds	r5, r3, r2
 8019e64:	f7ff ffb5 	bl	8019dd2 <__hexdig_fun>
 8019e68:	2301      	movs	r3, #1
 8019e6a:	9304      	str	r3, [sp, #16]
 8019e6c:	42a0      	cmp	r0, r4
 8019e6e:	d030      	beq.n	8019ed2 <__gethex+0xd6>
 8019e70:	9501      	str	r5, [sp, #4]
 8019e72:	9b01      	ldr	r3, [sp, #4]
 8019e74:	7818      	ldrb	r0, [r3, #0]
 8019e76:	2830      	cmp	r0, #48	; 0x30
 8019e78:	d009      	beq.n	8019e8e <__gethex+0x92>
 8019e7a:	f7ff ffaa 	bl	8019dd2 <__hexdig_fun>
 8019e7e:	4242      	negs	r2, r0
 8019e80:	4142      	adcs	r2, r0
 8019e82:	2301      	movs	r3, #1
 8019e84:	002c      	movs	r4, r5
 8019e86:	9204      	str	r2, [sp, #16]
 8019e88:	9308      	str	r3, [sp, #32]
 8019e8a:	9d01      	ldr	r5, [sp, #4]
 8019e8c:	e004      	b.n	8019e98 <__gethex+0x9c>
 8019e8e:	9b01      	ldr	r3, [sp, #4]
 8019e90:	3301      	adds	r3, #1
 8019e92:	9301      	str	r3, [sp, #4]
 8019e94:	e7ed      	b.n	8019e72 <__gethex+0x76>
 8019e96:	3501      	adds	r5, #1
 8019e98:	7828      	ldrb	r0, [r5, #0]
 8019e9a:	f7ff ff9a 	bl	8019dd2 <__hexdig_fun>
 8019e9e:	1e07      	subs	r7, r0, #0
 8019ea0:	d1f9      	bne.n	8019e96 <__gethex+0x9a>
 8019ea2:	0028      	movs	r0, r5
 8019ea4:	9a03      	ldr	r2, [sp, #12]
 8019ea6:	9907      	ldr	r1, [sp, #28]
 8019ea8:	f7fd fdf5 	bl	8017a96 <strncmp>
 8019eac:	2800      	cmp	r0, #0
 8019eae:	d10e      	bne.n	8019ece <__gethex+0xd2>
 8019eb0:	2c00      	cmp	r4, #0
 8019eb2:	d107      	bne.n	8019ec4 <__gethex+0xc8>
 8019eb4:	9b03      	ldr	r3, [sp, #12]
 8019eb6:	18ed      	adds	r5, r5, r3
 8019eb8:	002c      	movs	r4, r5
 8019eba:	7828      	ldrb	r0, [r5, #0]
 8019ebc:	f7ff ff89 	bl	8019dd2 <__hexdig_fun>
 8019ec0:	2800      	cmp	r0, #0
 8019ec2:	d102      	bne.n	8019eca <__gethex+0xce>
 8019ec4:	1b64      	subs	r4, r4, r5
 8019ec6:	00a7      	lsls	r7, r4, #2
 8019ec8:	e003      	b.n	8019ed2 <__gethex+0xd6>
 8019eca:	3501      	adds	r5, #1
 8019ecc:	e7f5      	b.n	8019eba <__gethex+0xbe>
 8019ece:	2c00      	cmp	r4, #0
 8019ed0:	d1f8      	bne.n	8019ec4 <__gethex+0xc8>
 8019ed2:	2220      	movs	r2, #32
 8019ed4:	782b      	ldrb	r3, [r5, #0]
 8019ed6:	002e      	movs	r6, r5
 8019ed8:	4393      	bics	r3, r2
 8019eda:	2b50      	cmp	r3, #80	; 0x50
 8019edc:	d11d      	bne.n	8019f1a <__gethex+0x11e>
 8019ede:	786b      	ldrb	r3, [r5, #1]
 8019ee0:	2b2b      	cmp	r3, #43	; 0x2b
 8019ee2:	d02c      	beq.n	8019f3e <__gethex+0x142>
 8019ee4:	2b2d      	cmp	r3, #45	; 0x2d
 8019ee6:	d02e      	beq.n	8019f46 <__gethex+0x14a>
 8019ee8:	2300      	movs	r3, #0
 8019eea:	1c6e      	adds	r6, r5, #1
 8019eec:	9306      	str	r3, [sp, #24]
 8019eee:	7830      	ldrb	r0, [r6, #0]
 8019ef0:	f7ff ff6f 	bl	8019dd2 <__hexdig_fun>
 8019ef4:	1e43      	subs	r3, r0, #1
 8019ef6:	b2db      	uxtb	r3, r3
 8019ef8:	2b18      	cmp	r3, #24
 8019efa:	d82b      	bhi.n	8019f54 <__gethex+0x158>
 8019efc:	3810      	subs	r0, #16
 8019efe:	0004      	movs	r4, r0
 8019f00:	7870      	ldrb	r0, [r6, #1]
 8019f02:	f7ff ff66 	bl	8019dd2 <__hexdig_fun>
 8019f06:	1e43      	subs	r3, r0, #1
 8019f08:	b2db      	uxtb	r3, r3
 8019f0a:	3601      	adds	r6, #1
 8019f0c:	2b18      	cmp	r3, #24
 8019f0e:	d91c      	bls.n	8019f4a <__gethex+0x14e>
 8019f10:	9b06      	ldr	r3, [sp, #24]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d000      	beq.n	8019f18 <__gethex+0x11c>
 8019f16:	4264      	negs	r4, r4
 8019f18:	193f      	adds	r7, r7, r4
 8019f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f1c:	601e      	str	r6, [r3, #0]
 8019f1e:	9b04      	ldr	r3, [sp, #16]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d019      	beq.n	8019f58 <__gethex+0x15c>
 8019f24:	2600      	movs	r6, #0
 8019f26:	9b08      	ldr	r3, [sp, #32]
 8019f28:	42b3      	cmp	r3, r6
 8019f2a:	d100      	bne.n	8019f2e <__gethex+0x132>
 8019f2c:	3606      	adds	r6, #6
 8019f2e:	0030      	movs	r0, r6
 8019f30:	b00d      	add	sp, #52	; 0x34
 8019f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f34:	2301      	movs	r3, #1
 8019f36:	2700      	movs	r7, #0
 8019f38:	9d01      	ldr	r5, [sp, #4]
 8019f3a:	9304      	str	r3, [sp, #16]
 8019f3c:	e7c9      	b.n	8019ed2 <__gethex+0xd6>
 8019f3e:	2300      	movs	r3, #0
 8019f40:	9306      	str	r3, [sp, #24]
 8019f42:	1cae      	adds	r6, r5, #2
 8019f44:	e7d3      	b.n	8019eee <__gethex+0xf2>
 8019f46:	2301      	movs	r3, #1
 8019f48:	e7fa      	b.n	8019f40 <__gethex+0x144>
 8019f4a:	230a      	movs	r3, #10
 8019f4c:	435c      	muls	r4, r3
 8019f4e:	1824      	adds	r4, r4, r0
 8019f50:	3c10      	subs	r4, #16
 8019f52:	e7d5      	b.n	8019f00 <__gethex+0x104>
 8019f54:	002e      	movs	r6, r5
 8019f56:	e7e0      	b.n	8019f1a <__gethex+0x11e>
 8019f58:	9b01      	ldr	r3, [sp, #4]
 8019f5a:	9904      	ldr	r1, [sp, #16]
 8019f5c:	1aeb      	subs	r3, r5, r3
 8019f5e:	3b01      	subs	r3, #1
 8019f60:	2b07      	cmp	r3, #7
 8019f62:	dc0a      	bgt.n	8019f7a <__gethex+0x17e>
 8019f64:	9805      	ldr	r0, [sp, #20]
 8019f66:	f000 fb5d 	bl	801a624 <_Balloc>
 8019f6a:	1e04      	subs	r4, r0, #0
 8019f6c:	d108      	bne.n	8019f80 <__gethex+0x184>
 8019f6e:	0002      	movs	r2, r0
 8019f70:	21de      	movs	r1, #222	; 0xde
 8019f72:	4b64      	ldr	r3, [pc, #400]	; (801a104 <__gethex+0x308>)
 8019f74:	4864      	ldr	r0, [pc, #400]	; (801a108 <__gethex+0x30c>)
 8019f76:	f7fc fbbd 	bl	80166f4 <__assert_func>
 8019f7a:	3101      	adds	r1, #1
 8019f7c:	105b      	asrs	r3, r3, #1
 8019f7e:	e7ef      	b.n	8019f60 <__gethex+0x164>
 8019f80:	0003      	movs	r3, r0
 8019f82:	3314      	adds	r3, #20
 8019f84:	9304      	str	r3, [sp, #16]
 8019f86:	9309      	str	r3, [sp, #36]	; 0x24
 8019f88:	2300      	movs	r3, #0
 8019f8a:	001e      	movs	r6, r3
 8019f8c:	9306      	str	r3, [sp, #24]
 8019f8e:	9b01      	ldr	r3, [sp, #4]
 8019f90:	42ab      	cmp	r3, r5
 8019f92:	d340      	bcc.n	801a016 <__gethex+0x21a>
 8019f94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019f96:	9b04      	ldr	r3, [sp, #16]
 8019f98:	c540      	stmia	r5!, {r6}
 8019f9a:	1aed      	subs	r5, r5, r3
 8019f9c:	10ad      	asrs	r5, r5, #2
 8019f9e:	0030      	movs	r0, r6
 8019fa0:	6125      	str	r5, [r4, #16]
 8019fa2:	f000 fc37 	bl	801a814 <__hi0bits>
 8019fa6:	9b02      	ldr	r3, [sp, #8]
 8019fa8:	016d      	lsls	r5, r5, #5
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	1a2e      	subs	r6, r5, r0
 8019fae:	9301      	str	r3, [sp, #4]
 8019fb0:	429e      	cmp	r6, r3
 8019fb2:	dd5a      	ble.n	801a06a <__gethex+0x26e>
 8019fb4:	1af6      	subs	r6, r6, r3
 8019fb6:	0031      	movs	r1, r6
 8019fb8:	0020      	movs	r0, r4
 8019fba:	f000 ffd9 	bl	801af70 <__any_on>
 8019fbe:	1e05      	subs	r5, r0, #0
 8019fc0:	d016      	beq.n	8019ff0 <__gethex+0x1f4>
 8019fc2:	2501      	movs	r5, #1
 8019fc4:	211f      	movs	r1, #31
 8019fc6:	0028      	movs	r0, r5
 8019fc8:	1e73      	subs	r3, r6, #1
 8019fca:	4019      	ands	r1, r3
 8019fcc:	4088      	lsls	r0, r1
 8019fce:	0001      	movs	r1, r0
 8019fd0:	115a      	asrs	r2, r3, #5
 8019fd2:	9804      	ldr	r0, [sp, #16]
 8019fd4:	0092      	lsls	r2, r2, #2
 8019fd6:	5812      	ldr	r2, [r2, r0]
 8019fd8:	420a      	tst	r2, r1
 8019fda:	d009      	beq.n	8019ff0 <__gethex+0x1f4>
 8019fdc:	42ab      	cmp	r3, r5
 8019fde:	dd06      	ble.n	8019fee <__gethex+0x1f2>
 8019fe0:	0020      	movs	r0, r4
 8019fe2:	1eb1      	subs	r1, r6, #2
 8019fe4:	f000 ffc4 	bl	801af70 <__any_on>
 8019fe8:	3502      	adds	r5, #2
 8019fea:	2800      	cmp	r0, #0
 8019fec:	d100      	bne.n	8019ff0 <__gethex+0x1f4>
 8019fee:	2502      	movs	r5, #2
 8019ff0:	0031      	movs	r1, r6
 8019ff2:	0020      	movs	r0, r4
 8019ff4:	f7ff fe99 	bl	8019d2a <rshift>
 8019ff8:	19bf      	adds	r7, r7, r6
 8019ffa:	9b02      	ldr	r3, [sp, #8]
 8019ffc:	689b      	ldr	r3, [r3, #8]
 8019ffe:	9303      	str	r3, [sp, #12]
 801a000:	42bb      	cmp	r3, r7
 801a002:	da42      	bge.n	801a08a <__gethex+0x28e>
 801a004:	0021      	movs	r1, r4
 801a006:	9805      	ldr	r0, [sp, #20]
 801a008:	f000 fb50 	bl	801a6ac <_Bfree>
 801a00c:	2300      	movs	r3, #0
 801a00e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a010:	26a3      	movs	r6, #163	; 0xa3
 801a012:	6013      	str	r3, [r2, #0]
 801a014:	e78b      	b.n	8019f2e <__gethex+0x132>
 801a016:	1e6b      	subs	r3, r5, #1
 801a018:	9308      	str	r3, [sp, #32]
 801a01a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a01c:	781b      	ldrb	r3, [r3, #0]
 801a01e:	4293      	cmp	r3, r2
 801a020:	d014      	beq.n	801a04c <__gethex+0x250>
 801a022:	9b06      	ldr	r3, [sp, #24]
 801a024:	2b20      	cmp	r3, #32
 801a026:	d104      	bne.n	801a032 <__gethex+0x236>
 801a028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a02a:	c340      	stmia	r3!, {r6}
 801a02c:	2600      	movs	r6, #0
 801a02e:	9309      	str	r3, [sp, #36]	; 0x24
 801a030:	9606      	str	r6, [sp, #24]
 801a032:	9b08      	ldr	r3, [sp, #32]
 801a034:	7818      	ldrb	r0, [r3, #0]
 801a036:	f7ff fecc 	bl	8019dd2 <__hexdig_fun>
 801a03a:	230f      	movs	r3, #15
 801a03c:	4018      	ands	r0, r3
 801a03e:	9b06      	ldr	r3, [sp, #24]
 801a040:	9d08      	ldr	r5, [sp, #32]
 801a042:	4098      	lsls	r0, r3
 801a044:	3304      	adds	r3, #4
 801a046:	4306      	orrs	r6, r0
 801a048:	9306      	str	r3, [sp, #24]
 801a04a:	e7a0      	b.n	8019f8e <__gethex+0x192>
 801a04c:	2301      	movs	r3, #1
 801a04e:	9a03      	ldr	r2, [sp, #12]
 801a050:	1a9d      	subs	r5, r3, r2
 801a052:	9b08      	ldr	r3, [sp, #32]
 801a054:	195d      	adds	r5, r3, r5
 801a056:	9b01      	ldr	r3, [sp, #4]
 801a058:	429d      	cmp	r5, r3
 801a05a:	d3e2      	bcc.n	801a022 <__gethex+0x226>
 801a05c:	0028      	movs	r0, r5
 801a05e:	9907      	ldr	r1, [sp, #28]
 801a060:	f7fd fd19 	bl	8017a96 <strncmp>
 801a064:	2800      	cmp	r0, #0
 801a066:	d1dc      	bne.n	801a022 <__gethex+0x226>
 801a068:	e791      	b.n	8019f8e <__gethex+0x192>
 801a06a:	9b01      	ldr	r3, [sp, #4]
 801a06c:	2500      	movs	r5, #0
 801a06e:	429e      	cmp	r6, r3
 801a070:	dac3      	bge.n	8019ffa <__gethex+0x1fe>
 801a072:	1b9e      	subs	r6, r3, r6
 801a074:	0021      	movs	r1, r4
 801a076:	0032      	movs	r2, r6
 801a078:	9805      	ldr	r0, [sp, #20]
 801a07a:	f000 fd35 	bl	801aae8 <__lshift>
 801a07e:	0003      	movs	r3, r0
 801a080:	3314      	adds	r3, #20
 801a082:	0004      	movs	r4, r0
 801a084:	1bbf      	subs	r7, r7, r6
 801a086:	9304      	str	r3, [sp, #16]
 801a088:	e7b7      	b.n	8019ffa <__gethex+0x1fe>
 801a08a:	9b02      	ldr	r3, [sp, #8]
 801a08c:	685e      	ldr	r6, [r3, #4]
 801a08e:	42be      	cmp	r6, r7
 801a090:	dd71      	ble.n	801a176 <__gethex+0x37a>
 801a092:	9b01      	ldr	r3, [sp, #4]
 801a094:	1bf6      	subs	r6, r6, r7
 801a096:	42b3      	cmp	r3, r6
 801a098:	dc38      	bgt.n	801a10c <__gethex+0x310>
 801a09a:	9b02      	ldr	r3, [sp, #8]
 801a09c:	68db      	ldr	r3, [r3, #12]
 801a09e:	2b02      	cmp	r3, #2
 801a0a0:	d026      	beq.n	801a0f0 <__gethex+0x2f4>
 801a0a2:	2b03      	cmp	r3, #3
 801a0a4:	d028      	beq.n	801a0f8 <__gethex+0x2fc>
 801a0a6:	2b01      	cmp	r3, #1
 801a0a8:	d119      	bne.n	801a0de <__gethex+0x2e2>
 801a0aa:	9b01      	ldr	r3, [sp, #4]
 801a0ac:	42b3      	cmp	r3, r6
 801a0ae:	d116      	bne.n	801a0de <__gethex+0x2e2>
 801a0b0:	2b01      	cmp	r3, #1
 801a0b2:	d10d      	bne.n	801a0d0 <__gethex+0x2d4>
 801a0b4:	9b02      	ldr	r3, [sp, #8]
 801a0b6:	2662      	movs	r6, #98	; 0x62
 801a0b8:	685b      	ldr	r3, [r3, #4]
 801a0ba:	9301      	str	r3, [sp, #4]
 801a0bc:	9a01      	ldr	r2, [sp, #4]
 801a0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0c0:	601a      	str	r2, [r3, #0]
 801a0c2:	2301      	movs	r3, #1
 801a0c4:	9a04      	ldr	r2, [sp, #16]
 801a0c6:	6123      	str	r3, [r4, #16]
 801a0c8:	6013      	str	r3, [r2, #0]
 801a0ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a0cc:	601c      	str	r4, [r3, #0]
 801a0ce:	e72e      	b.n	8019f2e <__gethex+0x132>
 801a0d0:	9901      	ldr	r1, [sp, #4]
 801a0d2:	0020      	movs	r0, r4
 801a0d4:	3901      	subs	r1, #1
 801a0d6:	f000 ff4b 	bl	801af70 <__any_on>
 801a0da:	2800      	cmp	r0, #0
 801a0dc:	d1ea      	bne.n	801a0b4 <__gethex+0x2b8>
 801a0de:	0021      	movs	r1, r4
 801a0e0:	9805      	ldr	r0, [sp, #20]
 801a0e2:	f000 fae3 	bl	801a6ac <_Bfree>
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0ea:	2650      	movs	r6, #80	; 0x50
 801a0ec:	6013      	str	r3, [r2, #0]
 801a0ee:	e71e      	b.n	8019f2e <__gethex+0x132>
 801a0f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d1f3      	bne.n	801a0de <__gethex+0x2e2>
 801a0f6:	e7dd      	b.n	801a0b4 <__gethex+0x2b8>
 801a0f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d1da      	bne.n	801a0b4 <__gethex+0x2b8>
 801a0fe:	e7ee      	b.n	801a0de <__gethex+0x2e2>
 801a100:	0801d464 	.word	0x0801d464
 801a104:	0801d388 	.word	0x0801d388
 801a108:	0801d3fc 	.word	0x0801d3fc
 801a10c:	1e77      	subs	r7, r6, #1
 801a10e:	2d00      	cmp	r5, #0
 801a110:	d12f      	bne.n	801a172 <__gethex+0x376>
 801a112:	2f00      	cmp	r7, #0
 801a114:	d004      	beq.n	801a120 <__gethex+0x324>
 801a116:	0039      	movs	r1, r7
 801a118:	0020      	movs	r0, r4
 801a11a:	f000 ff29 	bl	801af70 <__any_on>
 801a11e:	0005      	movs	r5, r0
 801a120:	231f      	movs	r3, #31
 801a122:	117a      	asrs	r2, r7, #5
 801a124:	401f      	ands	r7, r3
 801a126:	3b1e      	subs	r3, #30
 801a128:	40bb      	lsls	r3, r7
 801a12a:	9904      	ldr	r1, [sp, #16]
 801a12c:	0092      	lsls	r2, r2, #2
 801a12e:	5852      	ldr	r2, [r2, r1]
 801a130:	421a      	tst	r2, r3
 801a132:	d001      	beq.n	801a138 <__gethex+0x33c>
 801a134:	2302      	movs	r3, #2
 801a136:	431d      	orrs	r5, r3
 801a138:	9b01      	ldr	r3, [sp, #4]
 801a13a:	0031      	movs	r1, r6
 801a13c:	1b9b      	subs	r3, r3, r6
 801a13e:	2602      	movs	r6, #2
 801a140:	0020      	movs	r0, r4
 801a142:	9301      	str	r3, [sp, #4]
 801a144:	f7ff fdf1 	bl	8019d2a <rshift>
 801a148:	9b02      	ldr	r3, [sp, #8]
 801a14a:	685f      	ldr	r7, [r3, #4]
 801a14c:	2d00      	cmp	r5, #0
 801a14e:	d041      	beq.n	801a1d4 <__gethex+0x3d8>
 801a150:	9b02      	ldr	r3, [sp, #8]
 801a152:	68db      	ldr	r3, [r3, #12]
 801a154:	2b02      	cmp	r3, #2
 801a156:	d010      	beq.n	801a17a <__gethex+0x37e>
 801a158:	2b03      	cmp	r3, #3
 801a15a:	d012      	beq.n	801a182 <__gethex+0x386>
 801a15c:	2b01      	cmp	r3, #1
 801a15e:	d106      	bne.n	801a16e <__gethex+0x372>
 801a160:	07aa      	lsls	r2, r5, #30
 801a162:	d504      	bpl.n	801a16e <__gethex+0x372>
 801a164:	9a04      	ldr	r2, [sp, #16]
 801a166:	6810      	ldr	r0, [r2, #0]
 801a168:	4305      	orrs	r5, r0
 801a16a:	421d      	tst	r5, r3
 801a16c:	d10c      	bne.n	801a188 <__gethex+0x38c>
 801a16e:	2310      	movs	r3, #16
 801a170:	e02f      	b.n	801a1d2 <__gethex+0x3d6>
 801a172:	2501      	movs	r5, #1
 801a174:	e7d4      	b.n	801a120 <__gethex+0x324>
 801a176:	2601      	movs	r6, #1
 801a178:	e7e8      	b.n	801a14c <__gethex+0x350>
 801a17a:	2301      	movs	r3, #1
 801a17c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a17e:	1a9b      	subs	r3, r3, r2
 801a180:	9313      	str	r3, [sp, #76]	; 0x4c
 801a182:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a184:	2b00      	cmp	r3, #0
 801a186:	d0f2      	beq.n	801a16e <__gethex+0x372>
 801a188:	6923      	ldr	r3, [r4, #16]
 801a18a:	2000      	movs	r0, #0
 801a18c:	9303      	str	r3, [sp, #12]
 801a18e:	009b      	lsls	r3, r3, #2
 801a190:	9304      	str	r3, [sp, #16]
 801a192:	0023      	movs	r3, r4
 801a194:	9a04      	ldr	r2, [sp, #16]
 801a196:	3314      	adds	r3, #20
 801a198:	1899      	adds	r1, r3, r2
 801a19a:	681a      	ldr	r2, [r3, #0]
 801a19c:	1c55      	adds	r5, r2, #1
 801a19e:	d01e      	beq.n	801a1de <__gethex+0x3e2>
 801a1a0:	3201      	adds	r2, #1
 801a1a2:	601a      	str	r2, [r3, #0]
 801a1a4:	0023      	movs	r3, r4
 801a1a6:	3314      	adds	r3, #20
 801a1a8:	2e02      	cmp	r6, #2
 801a1aa:	d140      	bne.n	801a22e <__gethex+0x432>
 801a1ac:	9a02      	ldr	r2, [sp, #8]
 801a1ae:	9901      	ldr	r1, [sp, #4]
 801a1b0:	6812      	ldr	r2, [r2, #0]
 801a1b2:	3a01      	subs	r2, #1
 801a1b4:	428a      	cmp	r2, r1
 801a1b6:	d10b      	bne.n	801a1d0 <__gethex+0x3d4>
 801a1b8:	114a      	asrs	r2, r1, #5
 801a1ba:	211f      	movs	r1, #31
 801a1bc:	9801      	ldr	r0, [sp, #4]
 801a1be:	0092      	lsls	r2, r2, #2
 801a1c0:	4001      	ands	r1, r0
 801a1c2:	2001      	movs	r0, #1
 801a1c4:	0005      	movs	r5, r0
 801a1c6:	408d      	lsls	r5, r1
 801a1c8:	58d3      	ldr	r3, [r2, r3]
 801a1ca:	422b      	tst	r3, r5
 801a1cc:	d000      	beq.n	801a1d0 <__gethex+0x3d4>
 801a1ce:	2601      	movs	r6, #1
 801a1d0:	2320      	movs	r3, #32
 801a1d2:	431e      	orrs	r6, r3
 801a1d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a1d6:	601c      	str	r4, [r3, #0]
 801a1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1da:	601f      	str	r7, [r3, #0]
 801a1dc:	e6a7      	b.n	8019f2e <__gethex+0x132>
 801a1de:	c301      	stmia	r3!, {r0}
 801a1e0:	4299      	cmp	r1, r3
 801a1e2:	d8da      	bhi.n	801a19a <__gethex+0x39e>
 801a1e4:	9b03      	ldr	r3, [sp, #12]
 801a1e6:	68a2      	ldr	r2, [r4, #8]
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	db17      	blt.n	801a21c <__gethex+0x420>
 801a1ec:	6863      	ldr	r3, [r4, #4]
 801a1ee:	9805      	ldr	r0, [sp, #20]
 801a1f0:	1c59      	adds	r1, r3, #1
 801a1f2:	f000 fa17 	bl	801a624 <_Balloc>
 801a1f6:	1e05      	subs	r5, r0, #0
 801a1f8:	d103      	bne.n	801a202 <__gethex+0x406>
 801a1fa:	0002      	movs	r2, r0
 801a1fc:	2184      	movs	r1, #132	; 0x84
 801a1fe:	4b1c      	ldr	r3, [pc, #112]	; (801a270 <__gethex+0x474>)
 801a200:	e6b8      	b.n	8019f74 <__gethex+0x178>
 801a202:	0021      	movs	r1, r4
 801a204:	6923      	ldr	r3, [r4, #16]
 801a206:	310c      	adds	r1, #12
 801a208:	1c9a      	adds	r2, r3, #2
 801a20a:	0092      	lsls	r2, r2, #2
 801a20c:	300c      	adds	r0, #12
 801a20e:	f7fc fb09 	bl	8016824 <memcpy>
 801a212:	0021      	movs	r1, r4
 801a214:	9805      	ldr	r0, [sp, #20]
 801a216:	f000 fa49 	bl	801a6ac <_Bfree>
 801a21a:	002c      	movs	r4, r5
 801a21c:	6923      	ldr	r3, [r4, #16]
 801a21e:	1c5a      	adds	r2, r3, #1
 801a220:	6122      	str	r2, [r4, #16]
 801a222:	2201      	movs	r2, #1
 801a224:	3304      	adds	r3, #4
 801a226:	009b      	lsls	r3, r3, #2
 801a228:	18e3      	adds	r3, r4, r3
 801a22a:	605a      	str	r2, [r3, #4]
 801a22c:	e7ba      	b.n	801a1a4 <__gethex+0x3a8>
 801a22e:	6922      	ldr	r2, [r4, #16]
 801a230:	9903      	ldr	r1, [sp, #12]
 801a232:	428a      	cmp	r2, r1
 801a234:	dd09      	ble.n	801a24a <__gethex+0x44e>
 801a236:	2101      	movs	r1, #1
 801a238:	0020      	movs	r0, r4
 801a23a:	f7ff fd76 	bl	8019d2a <rshift>
 801a23e:	9b02      	ldr	r3, [sp, #8]
 801a240:	3701      	adds	r7, #1
 801a242:	689b      	ldr	r3, [r3, #8]
 801a244:	42bb      	cmp	r3, r7
 801a246:	dac2      	bge.n	801a1ce <__gethex+0x3d2>
 801a248:	e6dc      	b.n	801a004 <__gethex+0x208>
 801a24a:	221f      	movs	r2, #31
 801a24c:	9d01      	ldr	r5, [sp, #4]
 801a24e:	9901      	ldr	r1, [sp, #4]
 801a250:	2601      	movs	r6, #1
 801a252:	4015      	ands	r5, r2
 801a254:	4211      	tst	r1, r2
 801a256:	d0bb      	beq.n	801a1d0 <__gethex+0x3d4>
 801a258:	9a04      	ldr	r2, [sp, #16]
 801a25a:	189b      	adds	r3, r3, r2
 801a25c:	3b04      	subs	r3, #4
 801a25e:	6818      	ldr	r0, [r3, #0]
 801a260:	f000 fad8 	bl	801a814 <__hi0bits>
 801a264:	2320      	movs	r3, #32
 801a266:	1b5d      	subs	r5, r3, r5
 801a268:	42a8      	cmp	r0, r5
 801a26a:	dbe4      	blt.n	801a236 <__gethex+0x43a>
 801a26c:	e7b0      	b.n	801a1d0 <__gethex+0x3d4>
 801a26e:	46c0      	nop			; (mov r8, r8)
 801a270:	0801d388 	.word	0x0801d388

0801a274 <L_shift>:
 801a274:	2308      	movs	r3, #8
 801a276:	b570      	push	{r4, r5, r6, lr}
 801a278:	2520      	movs	r5, #32
 801a27a:	1a9a      	subs	r2, r3, r2
 801a27c:	0092      	lsls	r2, r2, #2
 801a27e:	1aad      	subs	r5, r5, r2
 801a280:	6843      	ldr	r3, [r0, #4]
 801a282:	6806      	ldr	r6, [r0, #0]
 801a284:	001c      	movs	r4, r3
 801a286:	40ac      	lsls	r4, r5
 801a288:	40d3      	lsrs	r3, r2
 801a28a:	4334      	orrs	r4, r6
 801a28c:	6004      	str	r4, [r0, #0]
 801a28e:	6043      	str	r3, [r0, #4]
 801a290:	3004      	adds	r0, #4
 801a292:	4288      	cmp	r0, r1
 801a294:	d3f4      	bcc.n	801a280 <L_shift+0xc>
 801a296:	bd70      	pop	{r4, r5, r6, pc}

0801a298 <__match>:
 801a298:	b530      	push	{r4, r5, lr}
 801a29a:	6803      	ldr	r3, [r0, #0]
 801a29c:	780c      	ldrb	r4, [r1, #0]
 801a29e:	3301      	adds	r3, #1
 801a2a0:	2c00      	cmp	r4, #0
 801a2a2:	d102      	bne.n	801a2aa <__match+0x12>
 801a2a4:	6003      	str	r3, [r0, #0]
 801a2a6:	2001      	movs	r0, #1
 801a2a8:	bd30      	pop	{r4, r5, pc}
 801a2aa:	781a      	ldrb	r2, [r3, #0]
 801a2ac:	0015      	movs	r5, r2
 801a2ae:	3d41      	subs	r5, #65	; 0x41
 801a2b0:	2d19      	cmp	r5, #25
 801a2b2:	d800      	bhi.n	801a2b6 <__match+0x1e>
 801a2b4:	3220      	adds	r2, #32
 801a2b6:	3101      	adds	r1, #1
 801a2b8:	42a2      	cmp	r2, r4
 801a2ba:	d0ef      	beq.n	801a29c <__match+0x4>
 801a2bc:	2000      	movs	r0, #0
 801a2be:	e7f3      	b.n	801a2a8 <__match+0x10>

0801a2c0 <__hexnan>:
 801a2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2c2:	680b      	ldr	r3, [r1, #0]
 801a2c4:	b08b      	sub	sp, #44	; 0x2c
 801a2c6:	9201      	str	r2, [sp, #4]
 801a2c8:	9901      	ldr	r1, [sp, #4]
 801a2ca:	115a      	asrs	r2, r3, #5
 801a2cc:	0092      	lsls	r2, r2, #2
 801a2ce:	188a      	adds	r2, r1, r2
 801a2d0:	9202      	str	r2, [sp, #8]
 801a2d2:	0019      	movs	r1, r3
 801a2d4:	221f      	movs	r2, #31
 801a2d6:	4011      	ands	r1, r2
 801a2d8:	9008      	str	r0, [sp, #32]
 801a2da:	9106      	str	r1, [sp, #24]
 801a2dc:	4213      	tst	r3, r2
 801a2de:	d002      	beq.n	801a2e6 <__hexnan+0x26>
 801a2e0:	9b02      	ldr	r3, [sp, #8]
 801a2e2:	3304      	adds	r3, #4
 801a2e4:	9302      	str	r3, [sp, #8]
 801a2e6:	9b02      	ldr	r3, [sp, #8]
 801a2e8:	2500      	movs	r5, #0
 801a2ea:	1f1e      	subs	r6, r3, #4
 801a2ec:	0037      	movs	r7, r6
 801a2ee:	0034      	movs	r4, r6
 801a2f0:	9b08      	ldr	r3, [sp, #32]
 801a2f2:	6035      	str	r5, [r6, #0]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	9507      	str	r5, [sp, #28]
 801a2f8:	9305      	str	r3, [sp, #20]
 801a2fa:	9503      	str	r5, [sp, #12]
 801a2fc:	9b05      	ldr	r3, [sp, #20]
 801a2fe:	3301      	adds	r3, #1
 801a300:	9309      	str	r3, [sp, #36]	; 0x24
 801a302:	9b05      	ldr	r3, [sp, #20]
 801a304:	785b      	ldrb	r3, [r3, #1]
 801a306:	9304      	str	r3, [sp, #16]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d028      	beq.n	801a35e <__hexnan+0x9e>
 801a30c:	9804      	ldr	r0, [sp, #16]
 801a30e:	f7ff fd60 	bl	8019dd2 <__hexdig_fun>
 801a312:	2800      	cmp	r0, #0
 801a314:	d154      	bne.n	801a3c0 <__hexnan+0x100>
 801a316:	9b04      	ldr	r3, [sp, #16]
 801a318:	2b20      	cmp	r3, #32
 801a31a:	d819      	bhi.n	801a350 <__hexnan+0x90>
 801a31c:	9b03      	ldr	r3, [sp, #12]
 801a31e:	9a07      	ldr	r2, [sp, #28]
 801a320:	4293      	cmp	r3, r2
 801a322:	dd12      	ble.n	801a34a <__hexnan+0x8a>
 801a324:	42bc      	cmp	r4, r7
 801a326:	d206      	bcs.n	801a336 <__hexnan+0x76>
 801a328:	2d07      	cmp	r5, #7
 801a32a:	dc04      	bgt.n	801a336 <__hexnan+0x76>
 801a32c:	002a      	movs	r2, r5
 801a32e:	0039      	movs	r1, r7
 801a330:	0020      	movs	r0, r4
 801a332:	f7ff ff9f 	bl	801a274 <L_shift>
 801a336:	9b01      	ldr	r3, [sp, #4]
 801a338:	2508      	movs	r5, #8
 801a33a:	429c      	cmp	r4, r3
 801a33c:	d905      	bls.n	801a34a <__hexnan+0x8a>
 801a33e:	1f27      	subs	r7, r4, #4
 801a340:	2500      	movs	r5, #0
 801a342:	003c      	movs	r4, r7
 801a344:	9b03      	ldr	r3, [sp, #12]
 801a346:	603d      	str	r5, [r7, #0]
 801a348:	9307      	str	r3, [sp, #28]
 801a34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a34c:	9305      	str	r3, [sp, #20]
 801a34e:	e7d5      	b.n	801a2fc <__hexnan+0x3c>
 801a350:	9b04      	ldr	r3, [sp, #16]
 801a352:	2b29      	cmp	r3, #41	; 0x29
 801a354:	d159      	bne.n	801a40a <__hexnan+0x14a>
 801a356:	9b05      	ldr	r3, [sp, #20]
 801a358:	9a08      	ldr	r2, [sp, #32]
 801a35a:	3302      	adds	r3, #2
 801a35c:	6013      	str	r3, [r2, #0]
 801a35e:	9b03      	ldr	r3, [sp, #12]
 801a360:	2b00      	cmp	r3, #0
 801a362:	d052      	beq.n	801a40a <__hexnan+0x14a>
 801a364:	42bc      	cmp	r4, r7
 801a366:	d206      	bcs.n	801a376 <__hexnan+0xb6>
 801a368:	2d07      	cmp	r5, #7
 801a36a:	dc04      	bgt.n	801a376 <__hexnan+0xb6>
 801a36c:	002a      	movs	r2, r5
 801a36e:	0039      	movs	r1, r7
 801a370:	0020      	movs	r0, r4
 801a372:	f7ff ff7f 	bl	801a274 <L_shift>
 801a376:	9b01      	ldr	r3, [sp, #4]
 801a378:	429c      	cmp	r4, r3
 801a37a:	d935      	bls.n	801a3e8 <__hexnan+0x128>
 801a37c:	001a      	movs	r2, r3
 801a37e:	0023      	movs	r3, r4
 801a380:	cb02      	ldmia	r3!, {r1}
 801a382:	c202      	stmia	r2!, {r1}
 801a384:	429e      	cmp	r6, r3
 801a386:	d2fb      	bcs.n	801a380 <__hexnan+0xc0>
 801a388:	9b02      	ldr	r3, [sp, #8]
 801a38a:	1c61      	adds	r1, r4, #1
 801a38c:	1eda      	subs	r2, r3, #3
 801a38e:	2304      	movs	r3, #4
 801a390:	4291      	cmp	r1, r2
 801a392:	d805      	bhi.n	801a3a0 <__hexnan+0xe0>
 801a394:	9b02      	ldr	r3, [sp, #8]
 801a396:	3b04      	subs	r3, #4
 801a398:	1b1b      	subs	r3, r3, r4
 801a39a:	089b      	lsrs	r3, r3, #2
 801a39c:	3301      	adds	r3, #1
 801a39e:	009b      	lsls	r3, r3, #2
 801a3a0:	9a01      	ldr	r2, [sp, #4]
 801a3a2:	18d3      	adds	r3, r2, r3
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	c304      	stmia	r3!, {r2}
 801a3a8:	429e      	cmp	r6, r3
 801a3aa:	d2fc      	bcs.n	801a3a6 <__hexnan+0xe6>
 801a3ac:	6833      	ldr	r3, [r6, #0]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d104      	bne.n	801a3bc <__hexnan+0xfc>
 801a3b2:	9b01      	ldr	r3, [sp, #4]
 801a3b4:	429e      	cmp	r6, r3
 801a3b6:	d126      	bne.n	801a406 <__hexnan+0x146>
 801a3b8:	2301      	movs	r3, #1
 801a3ba:	6033      	str	r3, [r6, #0]
 801a3bc:	2005      	movs	r0, #5
 801a3be:	e025      	b.n	801a40c <__hexnan+0x14c>
 801a3c0:	9b03      	ldr	r3, [sp, #12]
 801a3c2:	3501      	adds	r5, #1
 801a3c4:	3301      	adds	r3, #1
 801a3c6:	9303      	str	r3, [sp, #12]
 801a3c8:	2d08      	cmp	r5, #8
 801a3ca:	dd06      	ble.n	801a3da <__hexnan+0x11a>
 801a3cc:	9b01      	ldr	r3, [sp, #4]
 801a3ce:	429c      	cmp	r4, r3
 801a3d0:	d9bb      	bls.n	801a34a <__hexnan+0x8a>
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	2501      	movs	r5, #1
 801a3d6:	3c04      	subs	r4, #4
 801a3d8:	6023      	str	r3, [r4, #0]
 801a3da:	220f      	movs	r2, #15
 801a3dc:	6823      	ldr	r3, [r4, #0]
 801a3de:	4010      	ands	r0, r2
 801a3e0:	011b      	lsls	r3, r3, #4
 801a3e2:	4318      	orrs	r0, r3
 801a3e4:	6020      	str	r0, [r4, #0]
 801a3e6:	e7b0      	b.n	801a34a <__hexnan+0x8a>
 801a3e8:	9b06      	ldr	r3, [sp, #24]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d0de      	beq.n	801a3ac <__hexnan+0xec>
 801a3ee:	2120      	movs	r1, #32
 801a3f0:	9a06      	ldr	r2, [sp, #24]
 801a3f2:	9b02      	ldr	r3, [sp, #8]
 801a3f4:	1a89      	subs	r1, r1, r2
 801a3f6:	2201      	movs	r2, #1
 801a3f8:	4252      	negs	r2, r2
 801a3fa:	40ca      	lsrs	r2, r1
 801a3fc:	3b04      	subs	r3, #4
 801a3fe:	6819      	ldr	r1, [r3, #0]
 801a400:	400a      	ands	r2, r1
 801a402:	601a      	str	r2, [r3, #0]
 801a404:	e7d2      	b.n	801a3ac <__hexnan+0xec>
 801a406:	3e04      	subs	r6, #4
 801a408:	e7d0      	b.n	801a3ac <__hexnan+0xec>
 801a40a:	2004      	movs	r0, #4
 801a40c:	b00b      	add	sp, #44	; 0x2c
 801a40e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a410 <_getc_r>:
 801a410:	b570      	push	{r4, r5, r6, lr}
 801a412:	0005      	movs	r5, r0
 801a414:	000c      	movs	r4, r1
 801a416:	2800      	cmp	r0, #0
 801a418:	d004      	beq.n	801a424 <_getc_r+0x14>
 801a41a:	6983      	ldr	r3, [r0, #24]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d101      	bne.n	801a424 <_getc_r+0x14>
 801a420:	f7ff fbc8 	bl	8019bb4 <__sinit>
 801a424:	4b18      	ldr	r3, [pc, #96]	; (801a488 <_getc_r+0x78>)
 801a426:	429c      	cmp	r4, r3
 801a428:	d11e      	bne.n	801a468 <_getc_r+0x58>
 801a42a:	686c      	ldr	r4, [r5, #4]
 801a42c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a42e:	07db      	lsls	r3, r3, #31
 801a430:	d405      	bmi.n	801a43e <_getc_r+0x2e>
 801a432:	89a3      	ldrh	r3, [r4, #12]
 801a434:	059b      	lsls	r3, r3, #22
 801a436:	d402      	bmi.n	801a43e <_getc_r+0x2e>
 801a438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a43a:	f000 f830 	bl	801a49e <__retarget_lock_acquire_recursive>
 801a43e:	6863      	ldr	r3, [r4, #4]
 801a440:	3b01      	subs	r3, #1
 801a442:	6063      	str	r3, [r4, #4]
 801a444:	2b00      	cmp	r3, #0
 801a446:	da19      	bge.n	801a47c <_getc_r+0x6c>
 801a448:	0028      	movs	r0, r5
 801a44a:	0021      	movs	r1, r4
 801a44c:	f001 fb0a 	bl	801ba64 <__srget_r>
 801a450:	0005      	movs	r5, r0
 801a452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a454:	07db      	lsls	r3, r3, #31
 801a456:	d405      	bmi.n	801a464 <_getc_r+0x54>
 801a458:	89a3      	ldrh	r3, [r4, #12]
 801a45a:	059b      	lsls	r3, r3, #22
 801a45c:	d402      	bmi.n	801a464 <_getc_r+0x54>
 801a45e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a460:	f000 f81e 	bl	801a4a0 <__retarget_lock_release_recursive>
 801a464:	0028      	movs	r0, r5
 801a466:	bd70      	pop	{r4, r5, r6, pc}
 801a468:	4b08      	ldr	r3, [pc, #32]	; (801a48c <_getc_r+0x7c>)
 801a46a:	429c      	cmp	r4, r3
 801a46c:	d101      	bne.n	801a472 <_getc_r+0x62>
 801a46e:	68ac      	ldr	r4, [r5, #8]
 801a470:	e7dc      	b.n	801a42c <_getc_r+0x1c>
 801a472:	4b07      	ldr	r3, [pc, #28]	; (801a490 <_getc_r+0x80>)
 801a474:	429c      	cmp	r4, r3
 801a476:	d1d9      	bne.n	801a42c <_getc_r+0x1c>
 801a478:	68ec      	ldr	r4, [r5, #12]
 801a47a:	e7d7      	b.n	801a42c <_getc_r+0x1c>
 801a47c:	6823      	ldr	r3, [r4, #0]
 801a47e:	1c5a      	adds	r2, r3, #1
 801a480:	6022      	str	r2, [r4, #0]
 801a482:	781d      	ldrb	r5, [r3, #0]
 801a484:	e7e5      	b.n	801a452 <_getc_r+0x42>
 801a486:	46c0      	nop			; (mov r8, r8)
 801a488:	0801d3bc 	.word	0x0801d3bc
 801a48c:	0801d3dc 	.word	0x0801d3dc
 801a490:	0801d39c 	.word	0x0801d39c

0801a494 <_localeconv_r>:
 801a494:	4800      	ldr	r0, [pc, #0]	; (801a498 <_localeconv_r+0x4>)
 801a496:	4770      	bx	lr
 801a498:	200003ac 	.word	0x200003ac

0801a49c <__retarget_lock_init_recursive>:
 801a49c:	4770      	bx	lr

0801a49e <__retarget_lock_acquire_recursive>:
 801a49e:	4770      	bx	lr

0801a4a0 <__retarget_lock_release_recursive>:
 801a4a0:	4770      	bx	lr
	...

0801a4a4 <_lseek_r>:
 801a4a4:	b570      	push	{r4, r5, r6, lr}
 801a4a6:	0004      	movs	r4, r0
 801a4a8:	0008      	movs	r0, r1
 801a4aa:	0011      	movs	r1, r2
 801a4ac:	001a      	movs	r2, r3
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	4d05      	ldr	r5, [pc, #20]	; (801a4c8 <_lseek_r+0x24>)
 801a4b2:	602b      	str	r3, [r5, #0]
 801a4b4:	f7ea f93f 	bl	8004736 <_lseek>
 801a4b8:	1c43      	adds	r3, r0, #1
 801a4ba:	d103      	bne.n	801a4c4 <_lseek_r+0x20>
 801a4bc:	682b      	ldr	r3, [r5, #0]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d000      	beq.n	801a4c4 <_lseek_r+0x20>
 801a4c2:	6023      	str	r3, [r4, #0]
 801a4c4:	bd70      	pop	{r4, r5, r6, pc}
 801a4c6:	46c0      	nop			; (mov r8, r8)
 801a4c8:	200019f4 	.word	0x200019f4

0801a4cc <__swhatbuf_r>:
 801a4cc:	b570      	push	{r4, r5, r6, lr}
 801a4ce:	000e      	movs	r6, r1
 801a4d0:	001d      	movs	r5, r3
 801a4d2:	230e      	movs	r3, #14
 801a4d4:	5ec9      	ldrsh	r1, [r1, r3]
 801a4d6:	0014      	movs	r4, r2
 801a4d8:	b096      	sub	sp, #88	; 0x58
 801a4da:	2900      	cmp	r1, #0
 801a4dc:	da08      	bge.n	801a4f0 <__swhatbuf_r+0x24>
 801a4de:	220c      	movs	r2, #12
 801a4e0:	5eb3      	ldrsh	r3, [r6, r2]
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	602a      	str	r2, [r5, #0]
 801a4e6:	061b      	lsls	r3, r3, #24
 801a4e8:	d411      	bmi.n	801a50e <__swhatbuf_r+0x42>
 801a4ea:	2380      	movs	r3, #128	; 0x80
 801a4ec:	00db      	lsls	r3, r3, #3
 801a4ee:	e00f      	b.n	801a510 <__swhatbuf_r+0x44>
 801a4f0:	466a      	mov	r2, sp
 801a4f2:	f001 fbbf 	bl	801bc74 <_fstat_r>
 801a4f6:	2800      	cmp	r0, #0
 801a4f8:	dbf1      	blt.n	801a4de <__swhatbuf_r+0x12>
 801a4fa:	23f0      	movs	r3, #240	; 0xf0
 801a4fc:	9901      	ldr	r1, [sp, #4]
 801a4fe:	021b      	lsls	r3, r3, #8
 801a500:	4019      	ands	r1, r3
 801a502:	4b05      	ldr	r3, [pc, #20]	; (801a518 <__swhatbuf_r+0x4c>)
 801a504:	18c9      	adds	r1, r1, r3
 801a506:	424b      	negs	r3, r1
 801a508:	4159      	adcs	r1, r3
 801a50a:	6029      	str	r1, [r5, #0]
 801a50c:	e7ed      	b.n	801a4ea <__swhatbuf_r+0x1e>
 801a50e:	2340      	movs	r3, #64	; 0x40
 801a510:	2000      	movs	r0, #0
 801a512:	6023      	str	r3, [r4, #0]
 801a514:	b016      	add	sp, #88	; 0x58
 801a516:	bd70      	pop	{r4, r5, r6, pc}
 801a518:	ffffe000 	.word	0xffffe000

0801a51c <__smakebuf_r>:
 801a51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a51e:	2602      	movs	r6, #2
 801a520:	898b      	ldrh	r3, [r1, #12]
 801a522:	0005      	movs	r5, r0
 801a524:	000c      	movs	r4, r1
 801a526:	4233      	tst	r3, r6
 801a528:	d006      	beq.n	801a538 <__smakebuf_r+0x1c>
 801a52a:	0023      	movs	r3, r4
 801a52c:	3347      	adds	r3, #71	; 0x47
 801a52e:	6023      	str	r3, [r4, #0]
 801a530:	6123      	str	r3, [r4, #16]
 801a532:	2301      	movs	r3, #1
 801a534:	6163      	str	r3, [r4, #20]
 801a536:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801a538:	466a      	mov	r2, sp
 801a53a:	ab01      	add	r3, sp, #4
 801a53c:	f7ff ffc6 	bl	801a4cc <__swhatbuf_r>
 801a540:	9900      	ldr	r1, [sp, #0]
 801a542:	0007      	movs	r7, r0
 801a544:	0028      	movs	r0, r5
 801a546:	f7fc f9eb 	bl	8016920 <_malloc_r>
 801a54a:	2800      	cmp	r0, #0
 801a54c:	d108      	bne.n	801a560 <__smakebuf_r+0x44>
 801a54e:	220c      	movs	r2, #12
 801a550:	5ea3      	ldrsh	r3, [r4, r2]
 801a552:	059a      	lsls	r2, r3, #22
 801a554:	d4ef      	bmi.n	801a536 <__smakebuf_r+0x1a>
 801a556:	2203      	movs	r2, #3
 801a558:	4393      	bics	r3, r2
 801a55a:	431e      	orrs	r6, r3
 801a55c:	81a6      	strh	r6, [r4, #12]
 801a55e:	e7e4      	b.n	801a52a <__smakebuf_r+0xe>
 801a560:	4b0f      	ldr	r3, [pc, #60]	; (801a5a0 <__smakebuf_r+0x84>)
 801a562:	62ab      	str	r3, [r5, #40]	; 0x28
 801a564:	2380      	movs	r3, #128	; 0x80
 801a566:	89a2      	ldrh	r2, [r4, #12]
 801a568:	6020      	str	r0, [r4, #0]
 801a56a:	4313      	orrs	r3, r2
 801a56c:	81a3      	strh	r3, [r4, #12]
 801a56e:	9b00      	ldr	r3, [sp, #0]
 801a570:	6120      	str	r0, [r4, #16]
 801a572:	6163      	str	r3, [r4, #20]
 801a574:	9b01      	ldr	r3, [sp, #4]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d00d      	beq.n	801a596 <__smakebuf_r+0x7a>
 801a57a:	0028      	movs	r0, r5
 801a57c:	230e      	movs	r3, #14
 801a57e:	5ee1      	ldrsh	r1, [r4, r3]
 801a580:	f001 fb8a 	bl	801bc98 <_isatty_r>
 801a584:	2800      	cmp	r0, #0
 801a586:	d006      	beq.n	801a596 <__smakebuf_r+0x7a>
 801a588:	2203      	movs	r2, #3
 801a58a:	89a3      	ldrh	r3, [r4, #12]
 801a58c:	4393      	bics	r3, r2
 801a58e:	001a      	movs	r2, r3
 801a590:	2301      	movs	r3, #1
 801a592:	4313      	orrs	r3, r2
 801a594:	81a3      	strh	r3, [r4, #12]
 801a596:	89a0      	ldrh	r0, [r4, #12]
 801a598:	4307      	orrs	r7, r0
 801a59a:	81a7      	strh	r7, [r4, #12]
 801a59c:	e7cb      	b.n	801a536 <__smakebuf_r+0x1a>
 801a59e:	46c0      	nop			; (mov r8, r8)
 801a5a0:	08019b39 	.word	0x08019b39

0801a5a4 <__ascii_mbtowc>:
 801a5a4:	b082      	sub	sp, #8
 801a5a6:	2900      	cmp	r1, #0
 801a5a8:	d100      	bne.n	801a5ac <__ascii_mbtowc+0x8>
 801a5aa:	a901      	add	r1, sp, #4
 801a5ac:	1e10      	subs	r0, r2, #0
 801a5ae:	d006      	beq.n	801a5be <__ascii_mbtowc+0x1a>
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d006      	beq.n	801a5c2 <__ascii_mbtowc+0x1e>
 801a5b4:	7813      	ldrb	r3, [r2, #0]
 801a5b6:	600b      	str	r3, [r1, #0]
 801a5b8:	7810      	ldrb	r0, [r2, #0]
 801a5ba:	1e43      	subs	r3, r0, #1
 801a5bc:	4198      	sbcs	r0, r3
 801a5be:	b002      	add	sp, #8
 801a5c0:	4770      	bx	lr
 801a5c2:	2002      	movs	r0, #2
 801a5c4:	4240      	negs	r0, r0
 801a5c6:	e7fa      	b.n	801a5be <__ascii_mbtowc+0x1a>

0801a5c8 <memchr>:
 801a5c8:	b2c9      	uxtb	r1, r1
 801a5ca:	1882      	adds	r2, r0, r2
 801a5cc:	4290      	cmp	r0, r2
 801a5ce:	d101      	bne.n	801a5d4 <memchr+0xc>
 801a5d0:	2000      	movs	r0, #0
 801a5d2:	4770      	bx	lr
 801a5d4:	7803      	ldrb	r3, [r0, #0]
 801a5d6:	428b      	cmp	r3, r1
 801a5d8:	d0fb      	beq.n	801a5d2 <memchr+0xa>
 801a5da:	3001      	adds	r0, #1
 801a5dc:	e7f6      	b.n	801a5cc <memchr+0x4>

0801a5de <memmove>:
 801a5de:	b510      	push	{r4, lr}
 801a5e0:	4288      	cmp	r0, r1
 801a5e2:	d902      	bls.n	801a5ea <memmove+0xc>
 801a5e4:	188b      	adds	r3, r1, r2
 801a5e6:	4298      	cmp	r0, r3
 801a5e8:	d303      	bcc.n	801a5f2 <memmove+0x14>
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	e007      	b.n	801a5fe <memmove+0x20>
 801a5ee:	5c8b      	ldrb	r3, [r1, r2]
 801a5f0:	5483      	strb	r3, [r0, r2]
 801a5f2:	3a01      	subs	r2, #1
 801a5f4:	d2fb      	bcs.n	801a5ee <memmove+0x10>
 801a5f6:	bd10      	pop	{r4, pc}
 801a5f8:	5ccc      	ldrb	r4, [r1, r3]
 801a5fa:	54c4      	strb	r4, [r0, r3]
 801a5fc:	3301      	adds	r3, #1
 801a5fe:	429a      	cmp	r2, r3
 801a600:	d1fa      	bne.n	801a5f8 <memmove+0x1a>
 801a602:	e7f8      	b.n	801a5f6 <memmove+0x18>

0801a604 <__malloc_lock>:
 801a604:	b510      	push	{r4, lr}
 801a606:	4802      	ldr	r0, [pc, #8]	; (801a610 <__malloc_lock+0xc>)
 801a608:	f7ff ff49 	bl	801a49e <__retarget_lock_acquire_recursive>
 801a60c:	bd10      	pop	{r4, pc}
 801a60e:	46c0      	nop			; (mov r8, r8)
 801a610:	200019f0 	.word	0x200019f0

0801a614 <__malloc_unlock>:
 801a614:	b510      	push	{r4, lr}
 801a616:	4802      	ldr	r0, [pc, #8]	; (801a620 <__malloc_unlock+0xc>)
 801a618:	f7ff ff42 	bl	801a4a0 <__retarget_lock_release_recursive>
 801a61c:	bd10      	pop	{r4, pc}
 801a61e:	46c0      	nop			; (mov r8, r8)
 801a620:	200019f0 	.word	0x200019f0

0801a624 <_Balloc>:
 801a624:	b570      	push	{r4, r5, r6, lr}
 801a626:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a628:	0006      	movs	r6, r0
 801a62a:	000c      	movs	r4, r1
 801a62c:	2d00      	cmp	r5, #0
 801a62e:	d10e      	bne.n	801a64e <_Balloc+0x2a>
 801a630:	2010      	movs	r0, #16
 801a632:	f7fc f8d5 	bl	80167e0 <malloc>
 801a636:	1e02      	subs	r2, r0, #0
 801a638:	6270      	str	r0, [r6, #36]	; 0x24
 801a63a:	d104      	bne.n	801a646 <_Balloc+0x22>
 801a63c:	2166      	movs	r1, #102	; 0x66
 801a63e:	4b19      	ldr	r3, [pc, #100]	; (801a6a4 <_Balloc+0x80>)
 801a640:	4819      	ldr	r0, [pc, #100]	; (801a6a8 <_Balloc+0x84>)
 801a642:	f7fc f857 	bl	80166f4 <__assert_func>
 801a646:	6045      	str	r5, [r0, #4]
 801a648:	6085      	str	r5, [r0, #8]
 801a64a:	6005      	str	r5, [r0, #0]
 801a64c:	60c5      	str	r5, [r0, #12]
 801a64e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 801a650:	68eb      	ldr	r3, [r5, #12]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d013      	beq.n	801a67e <_Balloc+0x5a>
 801a656:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a658:	00a2      	lsls	r2, r4, #2
 801a65a:	68db      	ldr	r3, [r3, #12]
 801a65c:	189b      	adds	r3, r3, r2
 801a65e:	6818      	ldr	r0, [r3, #0]
 801a660:	2800      	cmp	r0, #0
 801a662:	d118      	bne.n	801a696 <_Balloc+0x72>
 801a664:	2101      	movs	r1, #1
 801a666:	000d      	movs	r5, r1
 801a668:	40a5      	lsls	r5, r4
 801a66a:	1d6a      	adds	r2, r5, #5
 801a66c:	0030      	movs	r0, r6
 801a66e:	0092      	lsls	r2, r2, #2
 801a670:	f000 fca1 	bl	801afb6 <_calloc_r>
 801a674:	2800      	cmp	r0, #0
 801a676:	d00c      	beq.n	801a692 <_Balloc+0x6e>
 801a678:	6044      	str	r4, [r0, #4]
 801a67a:	6085      	str	r5, [r0, #8]
 801a67c:	e00d      	b.n	801a69a <_Balloc+0x76>
 801a67e:	2221      	movs	r2, #33	; 0x21
 801a680:	2104      	movs	r1, #4
 801a682:	0030      	movs	r0, r6
 801a684:	f000 fc97 	bl	801afb6 <_calloc_r>
 801a688:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a68a:	60e8      	str	r0, [r5, #12]
 801a68c:	68db      	ldr	r3, [r3, #12]
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d1e1      	bne.n	801a656 <_Balloc+0x32>
 801a692:	2000      	movs	r0, #0
 801a694:	bd70      	pop	{r4, r5, r6, pc}
 801a696:	6802      	ldr	r2, [r0, #0]
 801a698:	601a      	str	r2, [r3, #0]
 801a69a:	2300      	movs	r3, #0
 801a69c:	6103      	str	r3, [r0, #16]
 801a69e:	60c3      	str	r3, [r0, #12]
 801a6a0:	e7f8      	b.n	801a694 <_Balloc+0x70>
 801a6a2:	46c0      	nop			; (mov r8, r8)
 801a6a4:	0801d316 	.word	0x0801d316
 801a6a8:	0801d478 	.word	0x0801d478

0801a6ac <_Bfree>:
 801a6ac:	b570      	push	{r4, r5, r6, lr}
 801a6ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a6b0:	0005      	movs	r5, r0
 801a6b2:	000c      	movs	r4, r1
 801a6b4:	2e00      	cmp	r6, #0
 801a6b6:	d10e      	bne.n	801a6d6 <_Bfree+0x2a>
 801a6b8:	2010      	movs	r0, #16
 801a6ba:	f7fc f891 	bl	80167e0 <malloc>
 801a6be:	1e02      	subs	r2, r0, #0
 801a6c0:	6268      	str	r0, [r5, #36]	; 0x24
 801a6c2:	d104      	bne.n	801a6ce <_Bfree+0x22>
 801a6c4:	218a      	movs	r1, #138	; 0x8a
 801a6c6:	4b09      	ldr	r3, [pc, #36]	; (801a6ec <_Bfree+0x40>)
 801a6c8:	4809      	ldr	r0, [pc, #36]	; (801a6f0 <_Bfree+0x44>)
 801a6ca:	f7fc f813 	bl	80166f4 <__assert_func>
 801a6ce:	6046      	str	r6, [r0, #4]
 801a6d0:	6086      	str	r6, [r0, #8]
 801a6d2:	6006      	str	r6, [r0, #0]
 801a6d4:	60c6      	str	r6, [r0, #12]
 801a6d6:	2c00      	cmp	r4, #0
 801a6d8:	d007      	beq.n	801a6ea <_Bfree+0x3e>
 801a6da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a6dc:	6862      	ldr	r2, [r4, #4]
 801a6de:	68db      	ldr	r3, [r3, #12]
 801a6e0:	0092      	lsls	r2, r2, #2
 801a6e2:	189b      	adds	r3, r3, r2
 801a6e4:	681a      	ldr	r2, [r3, #0]
 801a6e6:	6022      	str	r2, [r4, #0]
 801a6e8:	601c      	str	r4, [r3, #0]
 801a6ea:	bd70      	pop	{r4, r5, r6, pc}
 801a6ec:	0801d316 	.word	0x0801d316
 801a6f0:	0801d478 	.word	0x0801d478

0801a6f4 <__multadd>:
 801a6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a6f6:	000e      	movs	r6, r1
 801a6f8:	9001      	str	r0, [sp, #4]
 801a6fa:	000c      	movs	r4, r1
 801a6fc:	001d      	movs	r5, r3
 801a6fe:	2000      	movs	r0, #0
 801a700:	690f      	ldr	r7, [r1, #16]
 801a702:	3614      	adds	r6, #20
 801a704:	6833      	ldr	r3, [r6, #0]
 801a706:	3001      	adds	r0, #1
 801a708:	b299      	uxth	r1, r3
 801a70a:	4351      	muls	r1, r2
 801a70c:	0c1b      	lsrs	r3, r3, #16
 801a70e:	4353      	muls	r3, r2
 801a710:	1949      	adds	r1, r1, r5
 801a712:	0c0d      	lsrs	r5, r1, #16
 801a714:	195b      	adds	r3, r3, r5
 801a716:	0c1d      	lsrs	r5, r3, #16
 801a718:	b289      	uxth	r1, r1
 801a71a:	041b      	lsls	r3, r3, #16
 801a71c:	185b      	adds	r3, r3, r1
 801a71e:	c608      	stmia	r6!, {r3}
 801a720:	4287      	cmp	r7, r0
 801a722:	dcef      	bgt.n	801a704 <__multadd+0x10>
 801a724:	2d00      	cmp	r5, #0
 801a726:	d022      	beq.n	801a76e <__multadd+0x7a>
 801a728:	68a3      	ldr	r3, [r4, #8]
 801a72a:	42bb      	cmp	r3, r7
 801a72c:	dc19      	bgt.n	801a762 <__multadd+0x6e>
 801a72e:	6863      	ldr	r3, [r4, #4]
 801a730:	9801      	ldr	r0, [sp, #4]
 801a732:	1c59      	adds	r1, r3, #1
 801a734:	f7ff ff76 	bl	801a624 <_Balloc>
 801a738:	1e06      	subs	r6, r0, #0
 801a73a:	d105      	bne.n	801a748 <__multadd+0x54>
 801a73c:	0002      	movs	r2, r0
 801a73e:	21b5      	movs	r1, #181	; 0xb5
 801a740:	4b0c      	ldr	r3, [pc, #48]	; (801a774 <__multadd+0x80>)
 801a742:	480d      	ldr	r0, [pc, #52]	; (801a778 <__multadd+0x84>)
 801a744:	f7fb ffd6 	bl	80166f4 <__assert_func>
 801a748:	0021      	movs	r1, r4
 801a74a:	6923      	ldr	r3, [r4, #16]
 801a74c:	310c      	adds	r1, #12
 801a74e:	1c9a      	adds	r2, r3, #2
 801a750:	0092      	lsls	r2, r2, #2
 801a752:	300c      	adds	r0, #12
 801a754:	f7fc f866 	bl	8016824 <memcpy>
 801a758:	0021      	movs	r1, r4
 801a75a:	9801      	ldr	r0, [sp, #4]
 801a75c:	f7ff ffa6 	bl	801a6ac <_Bfree>
 801a760:	0034      	movs	r4, r6
 801a762:	1d3b      	adds	r3, r7, #4
 801a764:	009b      	lsls	r3, r3, #2
 801a766:	18e3      	adds	r3, r4, r3
 801a768:	605d      	str	r5, [r3, #4]
 801a76a:	1c7b      	adds	r3, r7, #1
 801a76c:	6123      	str	r3, [r4, #16]
 801a76e:	0020      	movs	r0, r4
 801a770:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a772:	46c0      	nop			; (mov r8, r8)
 801a774:	0801d388 	.word	0x0801d388
 801a778:	0801d478 	.word	0x0801d478

0801a77c <__s2b>:
 801a77c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a77e:	0006      	movs	r6, r0
 801a780:	0018      	movs	r0, r3
 801a782:	000c      	movs	r4, r1
 801a784:	3008      	adds	r0, #8
 801a786:	2109      	movs	r1, #9
 801a788:	9301      	str	r3, [sp, #4]
 801a78a:	0015      	movs	r5, r2
 801a78c:	f7e5 fd6c 	bl	8000268 <__divsi3>
 801a790:	2301      	movs	r3, #1
 801a792:	2100      	movs	r1, #0
 801a794:	4283      	cmp	r3, r0
 801a796:	db0a      	blt.n	801a7ae <__s2b+0x32>
 801a798:	0030      	movs	r0, r6
 801a79a:	f7ff ff43 	bl	801a624 <_Balloc>
 801a79e:	1e01      	subs	r1, r0, #0
 801a7a0:	d108      	bne.n	801a7b4 <__s2b+0x38>
 801a7a2:	0002      	movs	r2, r0
 801a7a4:	4b19      	ldr	r3, [pc, #100]	; (801a80c <__s2b+0x90>)
 801a7a6:	481a      	ldr	r0, [pc, #104]	; (801a810 <__s2b+0x94>)
 801a7a8:	31ce      	adds	r1, #206	; 0xce
 801a7aa:	f7fb ffa3 	bl	80166f4 <__assert_func>
 801a7ae:	005b      	lsls	r3, r3, #1
 801a7b0:	3101      	adds	r1, #1
 801a7b2:	e7ef      	b.n	801a794 <__s2b+0x18>
 801a7b4:	9b08      	ldr	r3, [sp, #32]
 801a7b6:	6143      	str	r3, [r0, #20]
 801a7b8:	2301      	movs	r3, #1
 801a7ba:	6103      	str	r3, [r0, #16]
 801a7bc:	2d09      	cmp	r5, #9
 801a7be:	dd18      	ble.n	801a7f2 <__s2b+0x76>
 801a7c0:	0023      	movs	r3, r4
 801a7c2:	3309      	adds	r3, #9
 801a7c4:	001f      	movs	r7, r3
 801a7c6:	9300      	str	r3, [sp, #0]
 801a7c8:	1964      	adds	r4, r4, r5
 801a7ca:	783b      	ldrb	r3, [r7, #0]
 801a7cc:	220a      	movs	r2, #10
 801a7ce:	0030      	movs	r0, r6
 801a7d0:	3b30      	subs	r3, #48	; 0x30
 801a7d2:	f7ff ff8f 	bl	801a6f4 <__multadd>
 801a7d6:	3701      	adds	r7, #1
 801a7d8:	0001      	movs	r1, r0
 801a7da:	42a7      	cmp	r7, r4
 801a7dc:	d1f5      	bne.n	801a7ca <__s2b+0x4e>
 801a7de:	002c      	movs	r4, r5
 801a7e0:	9b00      	ldr	r3, [sp, #0]
 801a7e2:	3c08      	subs	r4, #8
 801a7e4:	191c      	adds	r4, r3, r4
 801a7e6:	002f      	movs	r7, r5
 801a7e8:	9b01      	ldr	r3, [sp, #4]
 801a7ea:	429f      	cmp	r7, r3
 801a7ec:	db04      	blt.n	801a7f8 <__s2b+0x7c>
 801a7ee:	0008      	movs	r0, r1
 801a7f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a7f2:	2509      	movs	r5, #9
 801a7f4:	340a      	adds	r4, #10
 801a7f6:	e7f6      	b.n	801a7e6 <__s2b+0x6a>
 801a7f8:	1b63      	subs	r3, r4, r5
 801a7fa:	5ddb      	ldrb	r3, [r3, r7]
 801a7fc:	220a      	movs	r2, #10
 801a7fe:	0030      	movs	r0, r6
 801a800:	3b30      	subs	r3, #48	; 0x30
 801a802:	f7ff ff77 	bl	801a6f4 <__multadd>
 801a806:	3701      	adds	r7, #1
 801a808:	0001      	movs	r1, r0
 801a80a:	e7ed      	b.n	801a7e8 <__s2b+0x6c>
 801a80c:	0801d388 	.word	0x0801d388
 801a810:	0801d478 	.word	0x0801d478

0801a814 <__hi0bits>:
 801a814:	0003      	movs	r3, r0
 801a816:	0c02      	lsrs	r2, r0, #16
 801a818:	2000      	movs	r0, #0
 801a81a:	4282      	cmp	r2, r0
 801a81c:	d101      	bne.n	801a822 <__hi0bits+0xe>
 801a81e:	041b      	lsls	r3, r3, #16
 801a820:	3010      	adds	r0, #16
 801a822:	0e1a      	lsrs	r2, r3, #24
 801a824:	d101      	bne.n	801a82a <__hi0bits+0x16>
 801a826:	3008      	adds	r0, #8
 801a828:	021b      	lsls	r3, r3, #8
 801a82a:	0f1a      	lsrs	r2, r3, #28
 801a82c:	d101      	bne.n	801a832 <__hi0bits+0x1e>
 801a82e:	3004      	adds	r0, #4
 801a830:	011b      	lsls	r3, r3, #4
 801a832:	0f9a      	lsrs	r2, r3, #30
 801a834:	d101      	bne.n	801a83a <__hi0bits+0x26>
 801a836:	3002      	adds	r0, #2
 801a838:	009b      	lsls	r3, r3, #2
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	db03      	blt.n	801a846 <__hi0bits+0x32>
 801a83e:	3001      	adds	r0, #1
 801a840:	005b      	lsls	r3, r3, #1
 801a842:	d400      	bmi.n	801a846 <__hi0bits+0x32>
 801a844:	2020      	movs	r0, #32
 801a846:	4770      	bx	lr

0801a848 <__lo0bits>:
 801a848:	6803      	ldr	r3, [r0, #0]
 801a84a:	0002      	movs	r2, r0
 801a84c:	2107      	movs	r1, #7
 801a84e:	0018      	movs	r0, r3
 801a850:	4008      	ands	r0, r1
 801a852:	420b      	tst	r3, r1
 801a854:	d00d      	beq.n	801a872 <__lo0bits+0x2a>
 801a856:	3906      	subs	r1, #6
 801a858:	2000      	movs	r0, #0
 801a85a:	420b      	tst	r3, r1
 801a85c:	d105      	bne.n	801a86a <__lo0bits+0x22>
 801a85e:	3002      	adds	r0, #2
 801a860:	4203      	tst	r3, r0
 801a862:	d003      	beq.n	801a86c <__lo0bits+0x24>
 801a864:	40cb      	lsrs	r3, r1
 801a866:	0008      	movs	r0, r1
 801a868:	6013      	str	r3, [r2, #0]
 801a86a:	4770      	bx	lr
 801a86c:	089b      	lsrs	r3, r3, #2
 801a86e:	6013      	str	r3, [r2, #0]
 801a870:	e7fb      	b.n	801a86a <__lo0bits+0x22>
 801a872:	b299      	uxth	r1, r3
 801a874:	2900      	cmp	r1, #0
 801a876:	d101      	bne.n	801a87c <__lo0bits+0x34>
 801a878:	2010      	movs	r0, #16
 801a87a:	0c1b      	lsrs	r3, r3, #16
 801a87c:	b2d9      	uxtb	r1, r3
 801a87e:	2900      	cmp	r1, #0
 801a880:	d101      	bne.n	801a886 <__lo0bits+0x3e>
 801a882:	3008      	adds	r0, #8
 801a884:	0a1b      	lsrs	r3, r3, #8
 801a886:	0719      	lsls	r1, r3, #28
 801a888:	d101      	bne.n	801a88e <__lo0bits+0x46>
 801a88a:	3004      	adds	r0, #4
 801a88c:	091b      	lsrs	r3, r3, #4
 801a88e:	0799      	lsls	r1, r3, #30
 801a890:	d101      	bne.n	801a896 <__lo0bits+0x4e>
 801a892:	3002      	adds	r0, #2
 801a894:	089b      	lsrs	r3, r3, #2
 801a896:	07d9      	lsls	r1, r3, #31
 801a898:	d4e9      	bmi.n	801a86e <__lo0bits+0x26>
 801a89a:	3001      	adds	r0, #1
 801a89c:	085b      	lsrs	r3, r3, #1
 801a89e:	d1e6      	bne.n	801a86e <__lo0bits+0x26>
 801a8a0:	2020      	movs	r0, #32
 801a8a2:	e7e2      	b.n	801a86a <__lo0bits+0x22>

0801a8a4 <__i2b>:
 801a8a4:	b510      	push	{r4, lr}
 801a8a6:	000c      	movs	r4, r1
 801a8a8:	2101      	movs	r1, #1
 801a8aa:	f7ff febb 	bl	801a624 <_Balloc>
 801a8ae:	2800      	cmp	r0, #0
 801a8b0:	d106      	bne.n	801a8c0 <__i2b+0x1c>
 801a8b2:	21a0      	movs	r1, #160	; 0xa0
 801a8b4:	0002      	movs	r2, r0
 801a8b6:	4b04      	ldr	r3, [pc, #16]	; (801a8c8 <__i2b+0x24>)
 801a8b8:	4804      	ldr	r0, [pc, #16]	; (801a8cc <__i2b+0x28>)
 801a8ba:	0049      	lsls	r1, r1, #1
 801a8bc:	f7fb ff1a 	bl	80166f4 <__assert_func>
 801a8c0:	2301      	movs	r3, #1
 801a8c2:	6144      	str	r4, [r0, #20]
 801a8c4:	6103      	str	r3, [r0, #16]
 801a8c6:	bd10      	pop	{r4, pc}
 801a8c8:	0801d388 	.word	0x0801d388
 801a8cc:	0801d478 	.word	0x0801d478

0801a8d0 <__multiply>:
 801a8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8d2:	690b      	ldr	r3, [r1, #16]
 801a8d4:	0014      	movs	r4, r2
 801a8d6:	6912      	ldr	r2, [r2, #16]
 801a8d8:	000d      	movs	r5, r1
 801a8da:	b089      	sub	sp, #36	; 0x24
 801a8dc:	4293      	cmp	r3, r2
 801a8de:	da01      	bge.n	801a8e4 <__multiply+0x14>
 801a8e0:	0025      	movs	r5, r4
 801a8e2:	000c      	movs	r4, r1
 801a8e4:	692f      	ldr	r7, [r5, #16]
 801a8e6:	6926      	ldr	r6, [r4, #16]
 801a8e8:	6869      	ldr	r1, [r5, #4]
 801a8ea:	19bb      	adds	r3, r7, r6
 801a8ec:	9302      	str	r3, [sp, #8]
 801a8ee:	68ab      	ldr	r3, [r5, #8]
 801a8f0:	19ba      	adds	r2, r7, r6
 801a8f2:	4293      	cmp	r3, r2
 801a8f4:	da00      	bge.n	801a8f8 <__multiply+0x28>
 801a8f6:	3101      	adds	r1, #1
 801a8f8:	f7ff fe94 	bl	801a624 <_Balloc>
 801a8fc:	9001      	str	r0, [sp, #4]
 801a8fe:	2800      	cmp	r0, #0
 801a900:	d106      	bne.n	801a910 <__multiply+0x40>
 801a902:	215e      	movs	r1, #94	; 0x5e
 801a904:	0002      	movs	r2, r0
 801a906:	4b48      	ldr	r3, [pc, #288]	; (801aa28 <__multiply+0x158>)
 801a908:	4848      	ldr	r0, [pc, #288]	; (801aa2c <__multiply+0x15c>)
 801a90a:	31ff      	adds	r1, #255	; 0xff
 801a90c:	f7fb fef2 	bl	80166f4 <__assert_func>
 801a910:	9b01      	ldr	r3, [sp, #4]
 801a912:	2200      	movs	r2, #0
 801a914:	3314      	adds	r3, #20
 801a916:	469c      	mov	ip, r3
 801a918:	19bb      	adds	r3, r7, r6
 801a91a:	009b      	lsls	r3, r3, #2
 801a91c:	4463      	add	r3, ip
 801a91e:	9303      	str	r3, [sp, #12]
 801a920:	4663      	mov	r3, ip
 801a922:	9903      	ldr	r1, [sp, #12]
 801a924:	428b      	cmp	r3, r1
 801a926:	d32c      	bcc.n	801a982 <__multiply+0xb2>
 801a928:	002b      	movs	r3, r5
 801a92a:	0022      	movs	r2, r4
 801a92c:	3314      	adds	r3, #20
 801a92e:	00bf      	lsls	r7, r7, #2
 801a930:	3214      	adds	r2, #20
 801a932:	9306      	str	r3, [sp, #24]
 801a934:	00b6      	lsls	r6, r6, #2
 801a936:	19db      	adds	r3, r3, r7
 801a938:	9304      	str	r3, [sp, #16]
 801a93a:	1993      	adds	r3, r2, r6
 801a93c:	9307      	str	r3, [sp, #28]
 801a93e:	2304      	movs	r3, #4
 801a940:	9305      	str	r3, [sp, #20]
 801a942:	002b      	movs	r3, r5
 801a944:	9904      	ldr	r1, [sp, #16]
 801a946:	3315      	adds	r3, #21
 801a948:	9200      	str	r2, [sp, #0]
 801a94a:	4299      	cmp	r1, r3
 801a94c:	d305      	bcc.n	801a95a <__multiply+0x8a>
 801a94e:	1b4b      	subs	r3, r1, r5
 801a950:	3b15      	subs	r3, #21
 801a952:	089b      	lsrs	r3, r3, #2
 801a954:	3301      	adds	r3, #1
 801a956:	009b      	lsls	r3, r3, #2
 801a958:	9305      	str	r3, [sp, #20]
 801a95a:	9b07      	ldr	r3, [sp, #28]
 801a95c:	9a00      	ldr	r2, [sp, #0]
 801a95e:	429a      	cmp	r2, r3
 801a960:	d311      	bcc.n	801a986 <__multiply+0xb6>
 801a962:	9b02      	ldr	r3, [sp, #8]
 801a964:	2b00      	cmp	r3, #0
 801a966:	dd06      	ble.n	801a976 <__multiply+0xa6>
 801a968:	9b03      	ldr	r3, [sp, #12]
 801a96a:	3b04      	subs	r3, #4
 801a96c:	9303      	str	r3, [sp, #12]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	9300      	str	r3, [sp, #0]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d053      	beq.n	801aa1e <__multiply+0x14e>
 801a976:	9b01      	ldr	r3, [sp, #4]
 801a978:	9a02      	ldr	r2, [sp, #8]
 801a97a:	0018      	movs	r0, r3
 801a97c:	611a      	str	r2, [r3, #16]
 801a97e:	b009      	add	sp, #36	; 0x24
 801a980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a982:	c304      	stmia	r3!, {r2}
 801a984:	e7cd      	b.n	801a922 <__multiply+0x52>
 801a986:	9b00      	ldr	r3, [sp, #0]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	b298      	uxth	r0, r3
 801a98c:	2800      	cmp	r0, #0
 801a98e:	d01b      	beq.n	801a9c8 <__multiply+0xf8>
 801a990:	4667      	mov	r7, ip
 801a992:	2400      	movs	r4, #0
 801a994:	9e06      	ldr	r6, [sp, #24]
 801a996:	ce02      	ldmia	r6!, {r1}
 801a998:	683a      	ldr	r2, [r7, #0]
 801a99a:	b28b      	uxth	r3, r1
 801a99c:	4343      	muls	r3, r0
 801a99e:	b292      	uxth	r2, r2
 801a9a0:	189b      	adds	r3, r3, r2
 801a9a2:	191b      	adds	r3, r3, r4
 801a9a4:	0c0c      	lsrs	r4, r1, #16
 801a9a6:	4344      	muls	r4, r0
 801a9a8:	683a      	ldr	r2, [r7, #0]
 801a9aa:	0c11      	lsrs	r1, r2, #16
 801a9ac:	1861      	adds	r1, r4, r1
 801a9ae:	0c1c      	lsrs	r4, r3, #16
 801a9b0:	1909      	adds	r1, r1, r4
 801a9b2:	0c0c      	lsrs	r4, r1, #16
 801a9b4:	b29b      	uxth	r3, r3
 801a9b6:	0409      	lsls	r1, r1, #16
 801a9b8:	430b      	orrs	r3, r1
 801a9ba:	c708      	stmia	r7!, {r3}
 801a9bc:	9b04      	ldr	r3, [sp, #16]
 801a9be:	42b3      	cmp	r3, r6
 801a9c0:	d8e9      	bhi.n	801a996 <__multiply+0xc6>
 801a9c2:	4663      	mov	r3, ip
 801a9c4:	9a05      	ldr	r2, [sp, #20]
 801a9c6:	509c      	str	r4, [r3, r2]
 801a9c8:	9b00      	ldr	r3, [sp, #0]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	0c1e      	lsrs	r6, r3, #16
 801a9ce:	d020      	beq.n	801aa12 <__multiply+0x142>
 801a9d0:	4663      	mov	r3, ip
 801a9d2:	002c      	movs	r4, r5
 801a9d4:	4660      	mov	r0, ip
 801a9d6:	2700      	movs	r7, #0
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	3414      	adds	r4, #20
 801a9dc:	6822      	ldr	r2, [r4, #0]
 801a9de:	b29b      	uxth	r3, r3
 801a9e0:	b291      	uxth	r1, r2
 801a9e2:	4371      	muls	r1, r6
 801a9e4:	6802      	ldr	r2, [r0, #0]
 801a9e6:	0c12      	lsrs	r2, r2, #16
 801a9e8:	1889      	adds	r1, r1, r2
 801a9ea:	19cf      	adds	r7, r1, r7
 801a9ec:	0439      	lsls	r1, r7, #16
 801a9ee:	430b      	orrs	r3, r1
 801a9f0:	6003      	str	r3, [r0, #0]
 801a9f2:	cc02      	ldmia	r4!, {r1}
 801a9f4:	6843      	ldr	r3, [r0, #4]
 801a9f6:	0c09      	lsrs	r1, r1, #16
 801a9f8:	4371      	muls	r1, r6
 801a9fa:	b29b      	uxth	r3, r3
 801a9fc:	0c3f      	lsrs	r7, r7, #16
 801a9fe:	18cb      	adds	r3, r1, r3
 801aa00:	9a04      	ldr	r2, [sp, #16]
 801aa02:	19db      	adds	r3, r3, r7
 801aa04:	0c1f      	lsrs	r7, r3, #16
 801aa06:	3004      	adds	r0, #4
 801aa08:	42a2      	cmp	r2, r4
 801aa0a:	d8e7      	bhi.n	801a9dc <__multiply+0x10c>
 801aa0c:	4662      	mov	r2, ip
 801aa0e:	9905      	ldr	r1, [sp, #20]
 801aa10:	5053      	str	r3, [r2, r1]
 801aa12:	9b00      	ldr	r3, [sp, #0]
 801aa14:	3304      	adds	r3, #4
 801aa16:	9300      	str	r3, [sp, #0]
 801aa18:	2304      	movs	r3, #4
 801aa1a:	449c      	add	ip, r3
 801aa1c:	e79d      	b.n	801a95a <__multiply+0x8a>
 801aa1e:	9b02      	ldr	r3, [sp, #8]
 801aa20:	3b01      	subs	r3, #1
 801aa22:	9302      	str	r3, [sp, #8]
 801aa24:	e79d      	b.n	801a962 <__multiply+0x92>
 801aa26:	46c0      	nop			; (mov r8, r8)
 801aa28:	0801d388 	.word	0x0801d388
 801aa2c:	0801d478 	.word	0x0801d478

0801aa30 <__pow5mult>:
 801aa30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aa32:	2303      	movs	r3, #3
 801aa34:	0015      	movs	r5, r2
 801aa36:	0007      	movs	r7, r0
 801aa38:	000e      	movs	r6, r1
 801aa3a:	401a      	ands	r2, r3
 801aa3c:	421d      	tst	r5, r3
 801aa3e:	d008      	beq.n	801aa52 <__pow5mult+0x22>
 801aa40:	4925      	ldr	r1, [pc, #148]	; (801aad8 <__pow5mult+0xa8>)
 801aa42:	3a01      	subs	r2, #1
 801aa44:	0092      	lsls	r2, r2, #2
 801aa46:	5852      	ldr	r2, [r2, r1]
 801aa48:	2300      	movs	r3, #0
 801aa4a:	0031      	movs	r1, r6
 801aa4c:	f7ff fe52 	bl	801a6f4 <__multadd>
 801aa50:	0006      	movs	r6, r0
 801aa52:	10ad      	asrs	r5, r5, #2
 801aa54:	d03d      	beq.n	801aad2 <__pow5mult+0xa2>
 801aa56:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801aa58:	2c00      	cmp	r4, #0
 801aa5a:	d10f      	bne.n	801aa7c <__pow5mult+0x4c>
 801aa5c:	2010      	movs	r0, #16
 801aa5e:	f7fb febf 	bl	80167e0 <malloc>
 801aa62:	1e02      	subs	r2, r0, #0
 801aa64:	6278      	str	r0, [r7, #36]	; 0x24
 801aa66:	d105      	bne.n	801aa74 <__pow5mult+0x44>
 801aa68:	21d7      	movs	r1, #215	; 0xd7
 801aa6a:	4b1c      	ldr	r3, [pc, #112]	; (801aadc <__pow5mult+0xac>)
 801aa6c:	481c      	ldr	r0, [pc, #112]	; (801aae0 <__pow5mult+0xb0>)
 801aa6e:	0049      	lsls	r1, r1, #1
 801aa70:	f7fb fe40 	bl	80166f4 <__assert_func>
 801aa74:	6044      	str	r4, [r0, #4]
 801aa76:	6084      	str	r4, [r0, #8]
 801aa78:	6004      	str	r4, [r0, #0]
 801aa7a:	60c4      	str	r4, [r0, #12]
 801aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa7e:	689c      	ldr	r4, [r3, #8]
 801aa80:	9301      	str	r3, [sp, #4]
 801aa82:	2c00      	cmp	r4, #0
 801aa84:	d108      	bne.n	801aa98 <__pow5mult+0x68>
 801aa86:	0038      	movs	r0, r7
 801aa88:	4916      	ldr	r1, [pc, #88]	; (801aae4 <__pow5mult+0xb4>)
 801aa8a:	f7ff ff0b 	bl	801a8a4 <__i2b>
 801aa8e:	9b01      	ldr	r3, [sp, #4]
 801aa90:	0004      	movs	r4, r0
 801aa92:	6098      	str	r0, [r3, #8]
 801aa94:	2300      	movs	r3, #0
 801aa96:	6003      	str	r3, [r0, #0]
 801aa98:	2301      	movs	r3, #1
 801aa9a:	421d      	tst	r5, r3
 801aa9c:	d00a      	beq.n	801aab4 <__pow5mult+0x84>
 801aa9e:	0031      	movs	r1, r6
 801aaa0:	0022      	movs	r2, r4
 801aaa2:	0038      	movs	r0, r7
 801aaa4:	f7ff ff14 	bl	801a8d0 <__multiply>
 801aaa8:	0031      	movs	r1, r6
 801aaaa:	9001      	str	r0, [sp, #4]
 801aaac:	0038      	movs	r0, r7
 801aaae:	f7ff fdfd 	bl	801a6ac <_Bfree>
 801aab2:	9e01      	ldr	r6, [sp, #4]
 801aab4:	106d      	asrs	r5, r5, #1
 801aab6:	d00c      	beq.n	801aad2 <__pow5mult+0xa2>
 801aab8:	6820      	ldr	r0, [r4, #0]
 801aaba:	2800      	cmp	r0, #0
 801aabc:	d107      	bne.n	801aace <__pow5mult+0x9e>
 801aabe:	0022      	movs	r2, r4
 801aac0:	0021      	movs	r1, r4
 801aac2:	0038      	movs	r0, r7
 801aac4:	f7ff ff04 	bl	801a8d0 <__multiply>
 801aac8:	2300      	movs	r3, #0
 801aaca:	6020      	str	r0, [r4, #0]
 801aacc:	6003      	str	r3, [r0, #0]
 801aace:	0004      	movs	r4, r0
 801aad0:	e7e2      	b.n	801aa98 <__pow5mult+0x68>
 801aad2:	0030      	movs	r0, r6
 801aad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801aad6:	46c0      	nop			; (mov r8, r8)
 801aad8:	0801d5c8 	.word	0x0801d5c8
 801aadc:	0801d316 	.word	0x0801d316
 801aae0:	0801d478 	.word	0x0801d478
 801aae4:	00000271 	.word	0x00000271

0801aae8 <__lshift>:
 801aae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaea:	000c      	movs	r4, r1
 801aaec:	0017      	movs	r7, r2
 801aaee:	6923      	ldr	r3, [r4, #16]
 801aaf0:	1155      	asrs	r5, r2, #5
 801aaf2:	b087      	sub	sp, #28
 801aaf4:	18eb      	adds	r3, r5, r3
 801aaf6:	9302      	str	r3, [sp, #8]
 801aaf8:	3301      	adds	r3, #1
 801aafa:	9301      	str	r3, [sp, #4]
 801aafc:	6849      	ldr	r1, [r1, #4]
 801aafe:	68a3      	ldr	r3, [r4, #8]
 801ab00:	9004      	str	r0, [sp, #16]
 801ab02:	9a01      	ldr	r2, [sp, #4]
 801ab04:	4293      	cmp	r3, r2
 801ab06:	db10      	blt.n	801ab2a <__lshift+0x42>
 801ab08:	9804      	ldr	r0, [sp, #16]
 801ab0a:	f7ff fd8b 	bl	801a624 <_Balloc>
 801ab0e:	2300      	movs	r3, #0
 801ab10:	0002      	movs	r2, r0
 801ab12:	0006      	movs	r6, r0
 801ab14:	0019      	movs	r1, r3
 801ab16:	3214      	adds	r2, #20
 801ab18:	4298      	cmp	r0, r3
 801ab1a:	d10c      	bne.n	801ab36 <__lshift+0x4e>
 801ab1c:	21da      	movs	r1, #218	; 0xda
 801ab1e:	0002      	movs	r2, r0
 801ab20:	4b26      	ldr	r3, [pc, #152]	; (801abbc <__lshift+0xd4>)
 801ab22:	4827      	ldr	r0, [pc, #156]	; (801abc0 <__lshift+0xd8>)
 801ab24:	31ff      	adds	r1, #255	; 0xff
 801ab26:	f7fb fde5 	bl	80166f4 <__assert_func>
 801ab2a:	3101      	adds	r1, #1
 801ab2c:	005b      	lsls	r3, r3, #1
 801ab2e:	e7e8      	b.n	801ab02 <__lshift+0x1a>
 801ab30:	0098      	lsls	r0, r3, #2
 801ab32:	5011      	str	r1, [r2, r0]
 801ab34:	3301      	adds	r3, #1
 801ab36:	42ab      	cmp	r3, r5
 801ab38:	dbfa      	blt.n	801ab30 <__lshift+0x48>
 801ab3a:	43eb      	mvns	r3, r5
 801ab3c:	17db      	asrs	r3, r3, #31
 801ab3e:	401d      	ands	r5, r3
 801ab40:	211f      	movs	r1, #31
 801ab42:	0023      	movs	r3, r4
 801ab44:	0038      	movs	r0, r7
 801ab46:	00ad      	lsls	r5, r5, #2
 801ab48:	1955      	adds	r5, r2, r5
 801ab4a:	6922      	ldr	r2, [r4, #16]
 801ab4c:	3314      	adds	r3, #20
 801ab4e:	0092      	lsls	r2, r2, #2
 801ab50:	4008      	ands	r0, r1
 801ab52:	4684      	mov	ip, r0
 801ab54:	189a      	adds	r2, r3, r2
 801ab56:	420f      	tst	r7, r1
 801ab58:	d02a      	beq.n	801abb0 <__lshift+0xc8>
 801ab5a:	3101      	adds	r1, #1
 801ab5c:	1a09      	subs	r1, r1, r0
 801ab5e:	9105      	str	r1, [sp, #20]
 801ab60:	2100      	movs	r1, #0
 801ab62:	9503      	str	r5, [sp, #12]
 801ab64:	4667      	mov	r7, ip
 801ab66:	6818      	ldr	r0, [r3, #0]
 801ab68:	40b8      	lsls	r0, r7
 801ab6a:	4301      	orrs	r1, r0
 801ab6c:	9803      	ldr	r0, [sp, #12]
 801ab6e:	c002      	stmia	r0!, {r1}
 801ab70:	cb02      	ldmia	r3!, {r1}
 801ab72:	9003      	str	r0, [sp, #12]
 801ab74:	9805      	ldr	r0, [sp, #20]
 801ab76:	40c1      	lsrs	r1, r0
 801ab78:	429a      	cmp	r2, r3
 801ab7a:	d8f3      	bhi.n	801ab64 <__lshift+0x7c>
 801ab7c:	0020      	movs	r0, r4
 801ab7e:	3015      	adds	r0, #21
 801ab80:	2304      	movs	r3, #4
 801ab82:	4282      	cmp	r2, r0
 801ab84:	d304      	bcc.n	801ab90 <__lshift+0xa8>
 801ab86:	1b13      	subs	r3, r2, r4
 801ab88:	3b15      	subs	r3, #21
 801ab8a:	089b      	lsrs	r3, r3, #2
 801ab8c:	3301      	adds	r3, #1
 801ab8e:	009b      	lsls	r3, r3, #2
 801ab90:	50e9      	str	r1, [r5, r3]
 801ab92:	2900      	cmp	r1, #0
 801ab94:	d002      	beq.n	801ab9c <__lshift+0xb4>
 801ab96:	9b02      	ldr	r3, [sp, #8]
 801ab98:	3302      	adds	r3, #2
 801ab9a:	9301      	str	r3, [sp, #4]
 801ab9c:	9b01      	ldr	r3, [sp, #4]
 801ab9e:	9804      	ldr	r0, [sp, #16]
 801aba0:	3b01      	subs	r3, #1
 801aba2:	0021      	movs	r1, r4
 801aba4:	6133      	str	r3, [r6, #16]
 801aba6:	f7ff fd81 	bl	801a6ac <_Bfree>
 801abaa:	0030      	movs	r0, r6
 801abac:	b007      	add	sp, #28
 801abae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abb0:	cb02      	ldmia	r3!, {r1}
 801abb2:	c502      	stmia	r5!, {r1}
 801abb4:	429a      	cmp	r2, r3
 801abb6:	d8fb      	bhi.n	801abb0 <__lshift+0xc8>
 801abb8:	e7f0      	b.n	801ab9c <__lshift+0xb4>
 801abba:	46c0      	nop			; (mov r8, r8)
 801abbc:	0801d388 	.word	0x0801d388
 801abc0:	0801d478 	.word	0x0801d478

0801abc4 <__mcmp>:
 801abc4:	6902      	ldr	r2, [r0, #16]
 801abc6:	690b      	ldr	r3, [r1, #16]
 801abc8:	b530      	push	{r4, r5, lr}
 801abca:	0004      	movs	r4, r0
 801abcc:	1ad0      	subs	r0, r2, r3
 801abce:	429a      	cmp	r2, r3
 801abd0:	d10d      	bne.n	801abee <__mcmp+0x2a>
 801abd2:	009b      	lsls	r3, r3, #2
 801abd4:	3414      	adds	r4, #20
 801abd6:	3114      	adds	r1, #20
 801abd8:	18e2      	adds	r2, r4, r3
 801abda:	18c9      	adds	r1, r1, r3
 801abdc:	3a04      	subs	r2, #4
 801abde:	3904      	subs	r1, #4
 801abe0:	6815      	ldr	r5, [r2, #0]
 801abe2:	680b      	ldr	r3, [r1, #0]
 801abe4:	429d      	cmp	r5, r3
 801abe6:	d003      	beq.n	801abf0 <__mcmp+0x2c>
 801abe8:	2001      	movs	r0, #1
 801abea:	429d      	cmp	r5, r3
 801abec:	d303      	bcc.n	801abf6 <__mcmp+0x32>
 801abee:	bd30      	pop	{r4, r5, pc}
 801abf0:	4294      	cmp	r4, r2
 801abf2:	d3f3      	bcc.n	801abdc <__mcmp+0x18>
 801abf4:	e7fb      	b.n	801abee <__mcmp+0x2a>
 801abf6:	4240      	negs	r0, r0
 801abf8:	e7f9      	b.n	801abee <__mcmp+0x2a>
	...

0801abfc <__mdiff>:
 801abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abfe:	000e      	movs	r6, r1
 801ac00:	0007      	movs	r7, r0
 801ac02:	0011      	movs	r1, r2
 801ac04:	0030      	movs	r0, r6
 801ac06:	b087      	sub	sp, #28
 801ac08:	0014      	movs	r4, r2
 801ac0a:	f7ff ffdb 	bl	801abc4 <__mcmp>
 801ac0e:	1e05      	subs	r5, r0, #0
 801ac10:	d110      	bne.n	801ac34 <__mdiff+0x38>
 801ac12:	0001      	movs	r1, r0
 801ac14:	0038      	movs	r0, r7
 801ac16:	f7ff fd05 	bl	801a624 <_Balloc>
 801ac1a:	1e02      	subs	r2, r0, #0
 801ac1c:	d104      	bne.n	801ac28 <__mdiff+0x2c>
 801ac1e:	4b40      	ldr	r3, [pc, #256]	; (801ad20 <__mdiff+0x124>)
 801ac20:	4940      	ldr	r1, [pc, #256]	; (801ad24 <__mdiff+0x128>)
 801ac22:	4841      	ldr	r0, [pc, #260]	; (801ad28 <__mdiff+0x12c>)
 801ac24:	f7fb fd66 	bl	80166f4 <__assert_func>
 801ac28:	2301      	movs	r3, #1
 801ac2a:	6145      	str	r5, [r0, #20]
 801ac2c:	6103      	str	r3, [r0, #16]
 801ac2e:	0010      	movs	r0, r2
 801ac30:	b007      	add	sp, #28
 801ac32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac34:	2301      	movs	r3, #1
 801ac36:	9301      	str	r3, [sp, #4]
 801ac38:	2800      	cmp	r0, #0
 801ac3a:	db04      	blt.n	801ac46 <__mdiff+0x4a>
 801ac3c:	0023      	movs	r3, r4
 801ac3e:	0034      	movs	r4, r6
 801ac40:	001e      	movs	r6, r3
 801ac42:	2300      	movs	r3, #0
 801ac44:	9301      	str	r3, [sp, #4]
 801ac46:	0038      	movs	r0, r7
 801ac48:	6861      	ldr	r1, [r4, #4]
 801ac4a:	f7ff fceb 	bl	801a624 <_Balloc>
 801ac4e:	1e02      	subs	r2, r0, #0
 801ac50:	d103      	bne.n	801ac5a <__mdiff+0x5e>
 801ac52:	2190      	movs	r1, #144	; 0x90
 801ac54:	4b32      	ldr	r3, [pc, #200]	; (801ad20 <__mdiff+0x124>)
 801ac56:	0089      	lsls	r1, r1, #2
 801ac58:	e7e3      	b.n	801ac22 <__mdiff+0x26>
 801ac5a:	9b01      	ldr	r3, [sp, #4]
 801ac5c:	2700      	movs	r7, #0
 801ac5e:	60c3      	str	r3, [r0, #12]
 801ac60:	6920      	ldr	r0, [r4, #16]
 801ac62:	3414      	adds	r4, #20
 801ac64:	9401      	str	r4, [sp, #4]
 801ac66:	9b01      	ldr	r3, [sp, #4]
 801ac68:	0084      	lsls	r4, r0, #2
 801ac6a:	191b      	adds	r3, r3, r4
 801ac6c:	0034      	movs	r4, r6
 801ac6e:	9302      	str	r3, [sp, #8]
 801ac70:	6933      	ldr	r3, [r6, #16]
 801ac72:	3414      	adds	r4, #20
 801ac74:	0099      	lsls	r1, r3, #2
 801ac76:	1863      	adds	r3, r4, r1
 801ac78:	9303      	str	r3, [sp, #12]
 801ac7a:	0013      	movs	r3, r2
 801ac7c:	3314      	adds	r3, #20
 801ac7e:	469c      	mov	ip, r3
 801ac80:	9305      	str	r3, [sp, #20]
 801ac82:	9b01      	ldr	r3, [sp, #4]
 801ac84:	9304      	str	r3, [sp, #16]
 801ac86:	9b04      	ldr	r3, [sp, #16]
 801ac88:	cc02      	ldmia	r4!, {r1}
 801ac8a:	cb20      	ldmia	r3!, {r5}
 801ac8c:	9304      	str	r3, [sp, #16]
 801ac8e:	b2ab      	uxth	r3, r5
 801ac90:	19df      	adds	r7, r3, r7
 801ac92:	b28b      	uxth	r3, r1
 801ac94:	1afb      	subs	r3, r7, r3
 801ac96:	0c09      	lsrs	r1, r1, #16
 801ac98:	0c2d      	lsrs	r5, r5, #16
 801ac9a:	1a6d      	subs	r5, r5, r1
 801ac9c:	1419      	asrs	r1, r3, #16
 801ac9e:	186d      	adds	r5, r5, r1
 801aca0:	4661      	mov	r1, ip
 801aca2:	142f      	asrs	r7, r5, #16
 801aca4:	b29b      	uxth	r3, r3
 801aca6:	042d      	lsls	r5, r5, #16
 801aca8:	432b      	orrs	r3, r5
 801acaa:	c108      	stmia	r1!, {r3}
 801acac:	9b03      	ldr	r3, [sp, #12]
 801acae:	468c      	mov	ip, r1
 801acb0:	42a3      	cmp	r3, r4
 801acb2:	d8e8      	bhi.n	801ac86 <__mdiff+0x8a>
 801acb4:	0031      	movs	r1, r6
 801acb6:	9c03      	ldr	r4, [sp, #12]
 801acb8:	3115      	adds	r1, #21
 801acba:	2304      	movs	r3, #4
 801acbc:	428c      	cmp	r4, r1
 801acbe:	d304      	bcc.n	801acca <__mdiff+0xce>
 801acc0:	1ba3      	subs	r3, r4, r6
 801acc2:	3b15      	subs	r3, #21
 801acc4:	089b      	lsrs	r3, r3, #2
 801acc6:	3301      	adds	r3, #1
 801acc8:	009b      	lsls	r3, r3, #2
 801acca:	9901      	ldr	r1, [sp, #4]
 801accc:	18cc      	adds	r4, r1, r3
 801acce:	9905      	ldr	r1, [sp, #20]
 801acd0:	0026      	movs	r6, r4
 801acd2:	18cb      	adds	r3, r1, r3
 801acd4:	469c      	mov	ip, r3
 801acd6:	9902      	ldr	r1, [sp, #8]
 801acd8:	428e      	cmp	r6, r1
 801acda:	d310      	bcc.n	801acfe <__mdiff+0x102>
 801acdc:	9e02      	ldr	r6, [sp, #8]
 801acde:	1ee1      	subs	r1, r4, #3
 801ace0:	2500      	movs	r5, #0
 801ace2:	428e      	cmp	r6, r1
 801ace4:	d304      	bcc.n	801acf0 <__mdiff+0xf4>
 801ace6:	0031      	movs	r1, r6
 801ace8:	3103      	adds	r1, #3
 801acea:	1b0c      	subs	r4, r1, r4
 801acec:	08a4      	lsrs	r4, r4, #2
 801acee:	00a5      	lsls	r5, r4, #2
 801acf0:	195b      	adds	r3, r3, r5
 801acf2:	3b04      	subs	r3, #4
 801acf4:	6819      	ldr	r1, [r3, #0]
 801acf6:	2900      	cmp	r1, #0
 801acf8:	d00f      	beq.n	801ad1a <__mdiff+0x11e>
 801acfa:	6110      	str	r0, [r2, #16]
 801acfc:	e797      	b.n	801ac2e <__mdiff+0x32>
 801acfe:	ce02      	ldmia	r6!, {r1}
 801ad00:	b28d      	uxth	r5, r1
 801ad02:	19ed      	adds	r5, r5, r7
 801ad04:	0c0f      	lsrs	r7, r1, #16
 801ad06:	1429      	asrs	r1, r5, #16
 801ad08:	1879      	adds	r1, r7, r1
 801ad0a:	140f      	asrs	r7, r1, #16
 801ad0c:	b2ad      	uxth	r5, r5
 801ad0e:	0409      	lsls	r1, r1, #16
 801ad10:	430d      	orrs	r5, r1
 801ad12:	4661      	mov	r1, ip
 801ad14:	c120      	stmia	r1!, {r5}
 801ad16:	468c      	mov	ip, r1
 801ad18:	e7dd      	b.n	801acd6 <__mdiff+0xda>
 801ad1a:	3801      	subs	r0, #1
 801ad1c:	e7e9      	b.n	801acf2 <__mdiff+0xf6>
 801ad1e:	46c0      	nop			; (mov r8, r8)
 801ad20:	0801d388 	.word	0x0801d388
 801ad24:	00000232 	.word	0x00000232
 801ad28:	0801d478 	.word	0x0801d478

0801ad2c <__ulp>:
 801ad2c:	4b0f      	ldr	r3, [pc, #60]	; (801ad6c <__ulp+0x40>)
 801ad2e:	4019      	ands	r1, r3
 801ad30:	4b0f      	ldr	r3, [pc, #60]	; (801ad70 <__ulp+0x44>)
 801ad32:	18c9      	adds	r1, r1, r3
 801ad34:	2900      	cmp	r1, #0
 801ad36:	dd04      	ble.n	801ad42 <__ulp+0x16>
 801ad38:	2200      	movs	r2, #0
 801ad3a:	000b      	movs	r3, r1
 801ad3c:	0010      	movs	r0, r2
 801ad3e:	0019      	movs	r1, r3
 801ad40:	4770      	bx	lr
 801ad42:	4249      	negs	r1, r1
 801ad44:	2200      	movs	r2, #0
 801ad46:	2300      	movs	r3, #0
 801ad48:	1509      	asrs	r1, r1, #20
 801ad4a:	2913      	cmp	r1, #19
 801ad4c:	dc04      	bgt.n	801ad58 <__ulp+0x2c>
 801ad4e:	2080      	movs	r0, #128	; 0x80
 801ad50:	0300      	lsls	r0, r0, #12
 801ad52:	4108      	asrs	r0, r1
 801ad54:	0003      	movs	r3, r0
 801ad56:	e7f1      	b.n	801ad3c <__ulp+0x10>
 801ad58:	3914      	subs	r1, #20
 801ad5a:	2001      	movs	r0, #1
 801ad5c:	291e      	cmp	r1, #30
 801ad5e:	dc02      	bgt.n	801ad66 <__ulp+0x3a>
 801ad60:	2080      	movs	r0, #128	; 0x80
 801ad62:	0600      	lsls	r0, r0, #24
 801ad64:	40c8      	lsrs	r0, r1
 801ad66:	0002      	movs	r2, r0
 801ad68:	e7e8      	b.n	801ad3c <__ulp+0x10>
 801ad6a:	46c0      	nop			; (mov r8, r8)
 801ad6c:	7ff00000 	.word	0x7ff00000
 801ad70:	fcc00000 	.word	0xfcc00000

0801ad74 <__b2d>:
 801ad74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad76:	0006      	movs	r6, r0
 801ad78:	6903      	ldr	r3, [r0, #16]
 801ad7a:	3614      	adds	r6, #20
 801ad7c:	009b      	lsls	r3, r3, #2
 801ad7e:	18f3      	adds	r3, r6, r3
 801ad80:	1f1d      	subs	r5, r3, #4
 801ad82:	682c      	ldr	r4, [r5, #0]
 801ad84:	000f      	movs	r7, r1
 801ad86:	0020      	movs	r0, r4
 801ad88:	9301      	str	r3, [sp, #4]
 801ad8a:	f7ff fd43 	bl	801a814 <__hi0bits>
 801ad8e:	2320      	movs	r3, #32
 801ad90:	1a1b      	subs	r3, r3, r0
 801ad92:	491f      	ldr	r1, [pc, #124]	; (801ae10 <__b2d+0x9c>)
 801ad94:	603b      	str	r3, [r7, #0]
 801ad96:	280a      	cmp	r0, #10
 801ad98:	dc16      	bgt.n	801adc8 <__b2d+0x54>
 801ad9a:	230b      	movs	r3, #11
 801ad9c:	0027      	movs	r7, r4
 801ad9e:	1a1b      	subs	r3, r3, r0
 801ada0:	40df      	lsrs	r7, r3
 801ada2:	4339      	orrs	r1, r7
 801ada4:	469c      	mov	ip, r3
 801ada6:	000b      	movs	r3, r1
 801ada8:	2100      	movs	r1, #0
 801adaa:	42ae      	cmp	r6, r5
 801adac:	d202      	bcs.n	801adb4 <__b2d+0x40>
 801adae:	9901      	ldr	r1, [sp, #4]
 801adb0:	3908      	subs	r1, #8
 801adb2:	6809      	ldr	r1, [r1, #0]
 801adb4:	3015      	adds	r0, #21
 801adb6:	4084      	lsls	r4, r0
 801adb8:	4660      	mov	r0, ip
 801adba:	40c1      	lsrs	r1, r0
 801adbc:	430c      	orrs	r4, r1
 801adbe:	0022      	movs	r2, r4
 801adc0:	0010      	movs	r0, r2
 801adc2:	0019      	movs	r1, r3
 801adc4:	b003      	add	sp, #12
 801adc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adc8:	2700      	movs	r7, #0
 801adca:	42ae      	cmp	r6, r5
 801adcc:	d202      	bcs.n	801add4 <__b2d+0x60>
 801adce:	9d01      	ldr	r5, [sp, #4]
 801add0:	3d08      	subs	r5, #8
 801add2:	682f      	ldr	r7, [r5, #0]
 801add4:	230b      	movs	r3, #11
 801add6:	425b      	negs	r3, r3
 801add8:	469c      	mov	ip, r3
 801adda:	4484      	add	ip, r0
 801addc:	280b      	cmp	r0, #11
 801adde:	d013      	beq.n	801ae08 <__b2d+0x94>
 801ade0:	4663      	mov	r3, ip
 801ade2:	2020      	movs	r0, #32
 801ade4:	409c      	lsls	r4, r3
 801ade6:	1ac0      	subs	r0, r0, r3
 801ade8:	003b      	movs	r3, r7
 801adea:	40c3      	lsrs	r3, r0
 801adec:	431c      	orrs	r4, r3
 801adee:	4321      	orrs	r1, r4
 801adf0:	000b      	movs	r3, r1
 801adf2:	2100      	movs	r1, #0
 801adf4:	42b5      	cmp	r5, r6
 801adf6:	d901      	bls.n	801adfc <__b2d+0x88>
 801adf8:	3d04      	subs	r5, #4
 801adfa:	6829      	ldr	r1, [r5, #0]
 801adfc:	4664      	mov	r4, ip
 801adfe:	40c1      	lsrs	r1, r0
 801ae00:	40a7      	lsls	r7, r4
 801ae02:	430f      	orrs	r7, r1
 801ae04:	003a      	movs	r2, r7
 801ae06:	e7db      	b.n	801adc0 <__b2d+0x4c>
 801ae08:	4321      	orrs	r1, r4
 801ae0a:	000b      	movs	r3, r1
 801ae0c:	e7fa      	b.n	801ae04 <__b2d+0x90>
 801ae0e:	46c0      	nop			; (mov r8, r8)
 801ae10:	3ff00000 	.word	0x3ff00000

0801ae14 <__d2b>:
 801ae14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae16:	2101      	movs	r1, #1
 801ae18:	0014      	movs	r4, r2
 801ae1a:	001e      	movs	r6, r3
 801ae1c:	9f08      	ldr	r7, [sp, #32]
 801ae1e:	f7ff fc01 	bl	801a624 <_Balloc>
 801ae22:	1e05      	subs	r5, r0, #0
 801ae24:	d105      	bne.n	801ae32 <__d2b+0x1e>
 801ae26:	0002      	movs	r2, r0
 801ae28:	4b26      	ldr	r3, [pc, #152]	; (801aec4 <__d2b+0xb0>)
 801ae2a:	4927      	ldr	r1, [pc, #156]	; (801aec8 <__d2b+0xb4>)
 801ae2c:	4827      	ldr	r0, [pc, #156]	; (801aecc <__d2b+0xb8>)
 801ae2e:	f7fb fc61 	bl	80166f4 <__assert_func>
 801ae32:	0333      	lsls	r3, r6, #12
 801ae34:	0076      	lsls	r6, r6, #1
 801ae36:	0b1b      	lsrs	r3, r3, #12
 801ae38:	0d76      	lsrs	r6, r6, #21
 801ae3a:	d124      	bne.n	801ae86 <__d2b+0x72>
 801ae3c:	9301      	str	r3, [sp, #4]
 801ae3e:	2c00      	cmp	r4, #0
 801ae40:	d027      	beq.n	801ae92 <__d2b+0x7e>
 801ae42:	4668      	mov	r0, sp
 801ae44:	9400      	str	r4, [sp, #0]
 801ae46:	f7ff fcff 	bl	801a848 <__lo0bits>
 801ae4a:	9c00      	ldr	r4, [sp, #0]
 801ae4c:	2800      	cmp	r0, #0
 801ae4e:	d01e      	beq.n	801ae8e <__d2b+0x7a>
 801ae50:	9b01      	ldr	r3, [sp, #4]
 801ae52:	2120      	movs	r1, #32
 801ae54:	001a      	movs	r2, r3
 801ae56:	1a09      	subs	r1, r1, r0
 801ae58:	408a      	lsls	r2, r1
 801ae5a:	40c3      	lsrs	r3, r0
 801ae5c:	4322      	orrs	r2, r4
 801ae5e:	616a      	str	r2, [r5, #20]
 801ae60:	9301      	str	r3, [sp, #4]
 801ae62:	9c01      	ldr	r4, [sp, #4]
 801ae64:	61ac      	str	r4, [r5, #24]
 801ae66:	1e63      	subs	r3, r4, #1
 801ae68:	419c      	sbcs	r4, r3
 801ae6a:	3401      	adds	r4, #1
 801ae6c:	612c      	str	r4, [r5, #16]
 801ae6e:	2e00      	cmp	r6, #0
 801ae70:	d018      	beq.n	801aea4 <__d2b+0x90>
 801ae72:	4b17      	ldr	r3, [pc, #92]	; (801aed0 <__d2b+0xbc>)
 801ae74:	18f6      	adds	r6, r6, r3
 801ae76:	2335      	movs	r3, #53	; 0x35
 801ae78:	1836      	adds	r6, r6, r0
 801ae7a:	1a18      	subs	r0, r3, r0
 801ae7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae7e:	603e      	str	r6, [r7, #0]
 801ae80:	6018      	str	r0, [r3, #0]
 801ae82:	0028      	movs	r0, r5
 801ae84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ae86:	2280      	movs	r2, #128	; 0x80
 801ae88:	0352      	lsls	r2, r2, #13
 801ae8a:	4313      	orrs	r3, r2
 801ae8c:	e7d6      	b.n	801ae3c <__d2b+0x28>
 801ae8e:	616c      	str	r4, [r5, #20]
 801ae90:	e7e7      	b.n	801ae62 <__d2b+0x4e>
 801ae92:	a801      	add	r0, sp, #4
 801ae94:	f7ff fcd8 	bl	801a848 <__lo0bits>
 801ae98:	2401      	movs	r4, #1
 801ae9a:	9b01      	ldr	r3, [sp, #4]
 801ae9c:	612c      	str	r4, [r5, #16]
 801ae9e:	616b      	str	r3, [r5, #20]
 801aea0:	3020      	adds	r0, #32
 801aea2:	e7e4      	b.n	801ae6e <__d2b+0x5a>
 801aea4:	4b0b      	ldr	r3, [pc, #44]	; (801aed4 <__d2b+0xc0>)
 801aea6:	18c0      	adds	r0, r0, r3
 801aea8:	4b0b      	ldr	r3, [pc, #44]	; (801aed8 <__d2b+0xc4>)
 801aeaa:	6038      	str	r0, [r7, #0]
 801aeac:	18e3      	adds	r3, r4, r3
 801aeae:	009b      	lsls	r3, r3, #2
 801aeb0:	18eb      	adds	r3, r5, r3
 801aeb2:	6958      	ldr	r0, [r3, #20]
 801aeb4:	f7ff fcae 	bl	801a814 <__hi0bits>
 801aeb8:	0164      	lsls	r4, r4, #5
 801aeba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aebc:	1a24      	subs	r4, r4, r0
 801aebe:	601c      	str	r4, [r3, #0]
 801aec0:	e7df      	b.n	801ae82 <__d2b+0x6e>
 801aec2:	46c0      	nop			; (mov r8, r8)
 801aec4:	0801d388 	.word	0x0801d388
 801aec8:	0000030a 	.word	0x0000030a
 801aecc:	0801d478 	.word	0x0801d478
 801aed0:	fffffbcd 	.word	0xfffffbcd
 801aed4:	fffffbce 	.word	0xfffffbce
 801aed8:	3fffffff 	.word	0x3fffffff

0801aedc <__ratio>:
 801aedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aede:	b087      	sub	sp, #28
 801aee0:	000f      	movs	r7, r1
 801aee2:	a904      	add	r1, sp, #16
 801aee4:	0006      	movs	r6, r0
 801aee6:	f7ff ff45 	bl	801ad74 <__b2d>
 801aeea:	9000      	str	r0, [sp, #0]
 801aeec:	9101      	str	r1, [sp, #4]
 801aeee:	9c00      	ldr	r4, [sp, #0]
 801aef0:	9d01      	ldr	r5, [sp, #4]
 801aef2:	0038      	movs	r0, r7
 801aef4:	a905      	add	r1, sp, #20
 801aef6:	f7ff ff3d 	bl	801ad74 <__b2d>
 801aefa:	9002      	str	r0, [sp, #8]
 801aefc:	9103      	str	r1, [sp, #12]
 801aefe:	9a02      	ldr	r2, [sp, #8]
 801af00:	9b03      	ldr	r3, [sp, #12]
 801af02:	6931      	ldr	r1, [r6, #16]
 801af04:	6938      	ldr	r0, [r7, #16]
 801af06:	9e05      	ldr	r6, [sp, #20]
 801af08:	1a08      	subs	r0, r1, r0
 801af0a:	9904      	ldr	r1, [sp, #16]
 801af0c:	0140      	lsls	r0, r0, #5
 801af0e:	1b89      	subs	r1, r1, r6
 801af10:	1841      	adds	r1, r0, r1
 801af12:	0508      	lsls	r0, r1, #20
 801af14:	2900      	cmp	r1, #0
 801af16:	dd07      	ble.n	801af28 <__ratio+0x4c>
 801af18:	9901      	ldr	r1, [sp, #4]
 801af1a:	1845      	adds	r5, r0, r1
 801af1c:	0020      	movs	r0, r4
 801af1e:	0029      	movs	r1, r5
 801af20:	f7e5 fed0 	bl	8000cc4 <__aeabi_ddiv>
 801af24:	b007      	add	sp, #28
 801af26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af28:	9903      	ldr	r1, [sp, #12]
 801af2a:	1a0b      	subs	r3, r1, r0
 801af2c:	e7f6      	b.n	801af1c <__ratio+0x40>

0801af2e <__copybits>:
 801af2e:	b570      	push	{r4, r5, r6, lr}
 801af30:	0014      	movs	r4, r2
 801af32:	0005      	movs	r5, r0
 801af34:	3901      	subs	r1, #1
 801af36:	6913      	ldr	r3, [r2, #16]
 801af38:	1149      	asrs	r1, r1, #5
 801af3a:	3101      	adds	r1, #1
 801af3c:	0089      	lsls	r1, r1, #2
 801af3e:	3414      	adds	r4, #20
 801af40:	009b      	lsls	r3, r3, #2
 801af42:	1841      	adds	r1, r0, r1
 801af44:	18e3      	adds	r3, r4, r3
 801af46:	42a3      	cmp	r3, r4
 801af48:	d80d      	bhi.n	801af66 <__copybits+0x38>
 801af4a:	0014      	movs	r4, r2
 801af4c:	3411      	adds	r4, #17
 801af4e:	2500      	movs	r5, #0
 801af50:	429c      	cmp	r4, r3
 801af52:	d803      	bhi.n	801af5c <__copybits+0x2e>
 801af54:	1a9b      	subs	r3, r3, r2
 801af56:	3b11      	subs	r3, #17
 801af58:	089b      	lsrs	r3, r3, #2
 801af5a:	009d      	lsls	r5, r3, #2
 801af5c:	2300      	movs	r3, #0
 801af5e:	1940      	adds	r0, r0, r5
 801af60:	4281      	cmp	r1, r0
 801af62:	d803      	bhi.n	801af6c <__copybits+0x3e>
 801af64:	bd70      	pop	{r4, r5, r6, pc}
 801af66:	cc40      	ldmia	r4!, {r6}
 801af68:	c540      	stmia	r5!, {r6}
 801af6a:	e7ec      	b.n	801af46 <__copybits+0x18>
 801af6c:	c008      	stmia	r0!, {r3}
 801af6e:	e7f7      	b.n	801af60 <__copybits+0x32>

0801af70 <__any_on>:
 801af70:	0002      	movs	r2, r0
 801af72:	6900      	ldr	r0, [r0, #16]
 801af74:	b510      	push	{r4, lr}
 801af76:	3214      	adds	r2, #20
 801af78:	114b      	asrs	r3, r1, #5
 801af7a:	4298      	cmp	r0, r3
 801af7c:	db13      	blt.n	801afa6 <__any_on+0x36>
 801af7e:	dd0c      	ble.n	801af9a <__any_on+0x2a>
 801af80:	241f      	movs	r4, #31
 801af82:	0008      	movs	r0, r1
 801af84:	4020      	ands	r0, r4
 801af86:	4221      	tst	r1, r4
 801af88:	d007      	beq.n	801af9a <__any_on+0x2a>
 801af8a:	0099      	lsls	r1, r3, #2
 801af8c:	588c      	ldr	r4, [r1, r2]
 801af8e:	0021      	movs	r1, r4
 801af90:	40c1      	lsrs	r1, r0
 801af92:	4081      	lsls	r1, r0
 801af94:	2001      	movs	r0, #1
 801af96:	428c      	cmp	r4, r1
 801af98:	d104      	bne.n	801afa4 <__any_on+0x34>
 801af9a:	009b      	lsls	r3, r3, #2
 801af9c:	18d3      	adds	r3, r2, r3
 801af9e:	4293      	cmp	r3, r2
 801afa0:	d803      	bhi.n	801afaa <__any_on+0x3a>
 801afa2:	2000      	movs	r0, #0
 801afa4:	bd10      	pop	{r4, pc}
 801afa6:	0003      	movs	r3, r0
 801afa8:	e7f7      	b.n	801af9a <__any_on+0x2a>
 801afaa:	3b04      	subs	r3, #4
 801afac:	6819      	ldr	r1, [r3, #0]
 801afae:	2900      	cmp	r1, #0
 801afb0:	d0f5      	beq.n	801af9e <__any_on+0x2e>
 801afb2:	2001      	movs	r0, #1
 801afb4:	e7f6      	b.n	801afa4 <__any_on+0x34>

0801afb6 <_calloc_r>:
 801afb6:	b570      	push	{r4, r5, r6, lr}
 801afb8:	0c13      	lsrs	r3, r2, #16
 801afba:	0c0d      	lsrs	r5, r1, #16
 801afbc:	d11e      	bne.n	801affc <_calloc_r+0x46>
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d10c      	bne.n	801afdc <_calloc_r+0x26>
 801afc2:	b289      	uxth	r1, r1
 801afc4:	b294      	uxth	r4, r2
 801afc6:	434c      	muls	r4, r1
 801afc8:	0021      	movs	r1, r4
 801afca:	f7fb fca9 	bl	8016920 <_malloc_r>
 801afce:	1e05      	subs	r5, r0, #0
 801afd0:	d01b      	beq.n	801b00a <_calloc_r+0x54>
 801afd2:	0022      	movs	r2, r4
 801afd4:	2100      	movs	r1, #0
 801afd6:	f7fb fc2e 	bl	8016836 <memset>
 801afda:	e016      	b.n	801b00a <_calloc_r+0x54>
 801afdc:	1c1d      	adds	r5, r3, #0
 801afde:	1c0b      	adds	r3, r1, #0
 801afe0:	b292      	uxth	r2, r2
 801afe2:	b289      	uxth	r1, r1
 801afe4:	b29c      	uxth	r4, r3
 801afe6:	4351      	muls	r1, r2
 801afe8:	b2ab      	uxth	r3, r5
 801afea:	4363      	muls	r3, r4
 801afec:	0c0c      	lsrs	r4, r1, #16
 801afee:	191c      	adds	r4, r3, r4
 801aff0:	0c22      	lsrs	r2, r4, #16
 801aff2:	d107      	bne.n	801b004 <_calloc_r+0x4e>
 801aff4:	0424      	lsls	r4, r4, #16
 801aff6:	b289      	uxth	r1, r1
 801aff8:	430c      	orrs	r4, r1
 801affa:	e7e5      	b.n	801afc8 <_calloc_r+0x12>
 801affc:	2b00      	cmp	r3, #0
 801affe:	d101      	bne.n	801b004 <_calloc_r+0x4e>
 801b000:	1c13      	adds	r3, r2, #0
 801b002:	e7ed      	b.n	801afe0 <_calloc_r+0x2a>
 801b004:	230c      	movs	r3, #12
 801b006:	2500      	movs	r5, #0
 801b008:	6003      	str	r3, [r0, #0]
 801b00a:	0028      	movs	r0, r5
 801b00c:	bd70      	pop	{r4, r5, r6, pc}

0801b00e <_realloc_r>:
 801b00e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b010:	0007      	movs	r7, r0
 801b012:	000e      	movs	r6, r1
 801b014:	0014      	movs	r4, r2
 801b016:	2900      	cmp	r1, #0
 801b018:	d105      	bne.n	801b026 <_realloc_r+0x18>
 801b01a:	0011      	movs	r1, r2
 801b01c:	f7fb fc80 	bl	8016920 <_malloc_r>
 801b020:	0005      	movs	r5, r0
 801b022:	0028      	movs	r0, r5
 801b024:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b026:	2a00      	cmp	r2, #0
 801b028:	d103      	bne.n	801b032 <_realloc_r+0x24>
 801b02a:	f7fb fc0d 	bl	8016848 <_free_r>
 801b02e:	0025      	movs	r5, r4
 801b030:	e7f7      	b.n	801b022 <_realloc_r+0x14>
 801b032:	f000 fe43 	bl	801bcbc <_malloc_usable_size_r>
 801b036:	9001      	str	r0, [sp, #4]
 801b038:	4284      	cmp	r4, r0
 801b03a:	d803      	bhi.n	801b044 <_realloc_r+0x36>
 801b03c:	0035      	movs	r5, r6
 801b03e:	0843      	lsrs	r3, r0, #1
 801b040:	42a3      	cmp	r3, r4
 801b042:	d3ee      	bcc.n	801b022 <_realloc_r+0x14>
 801b044:	0021      	movs	r1, r4
 801b046:	0038      	movs	r0, r7
 801b048:	f7fb fc6a 	bl	8016920 <_malloc_r>
 801b04c:	1e05      	subs	r5, r0, #0
 801b04e:	d0e8      	beq.n	801b022 <_realloc_r+0x14>
 801b050:	9b01      	ldr	r3, [sp, #4]
 801b052:	0022      	movs	r2, r4
 801b054:	429c      	cmp	r4, r3
 801b056:	d900      	bls.n	801b05a <_realloc_r+0x4c>
 801b058:	001a      	movs	r2, r3
 801b05a:	0031      	movs	r1, r6
 801b05c:	0028      	movs	r0, r5
 801b05e:	f7fb fbe1 	bl	8016824 <memcpy>
 801b062:	0031      	movs	r1, r6
 801b064:	0038      	movs	r0, r7
 801b066:	f7fb fbef 	bl	8016848 <_free_r>
 801b06a:	e7da      	b.n	801b022 <_realloc_r+0x14>

0801b06c <__ssputs_r>:
 801b06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b06e:	688e      	ldr	r6, [r1, #8]
 801b070:	b085      	sub	sp, #20
 801b072:	0007      	movs	r7, r0
 801b074:	000c      	movs	r4, r1
 801b076:	9203      	str	r2, [sp, #12]
 801b078:	9301      	str	r3, [sp, #4]
 801b07a:	429e      	cmp	r6, r3
 801b07c:	d83c      	bhi.n	801b0f8 <__ssputs_r+0x8c>
 801b07e:	2390      	movs	r3, #144	; 0x90
 801b080:	898a      	ldrh	r2, [r1, #12]
 801b082:	00db      	lsls	r3, r3, #3
 801b084:	421a      	tst	r2, r3
 801b086:	d034      	beq.n	801b0f2 <__ssputs_r+0x86>
 801b088:	6909      	ldr	r1, [r1, #16]
 801b08a:	6823      	ldr	r3, [r4, #0]
 801b08c:	6960      	ldr	r0, [r4, #20]
 801b08e:	1a5b      	subs	r3, r3, r1
 801b090:	9302      	str	r3, [sp, #8]
 801b092:	2303      	movs	r3, #3
 801b094:	4343      	muls	r3, r0
 801b096:	0fdd      	lsrs	r5, r3, #31
 801b098:	18ed      	adds	r5, r5, r3
 801b09a:	9b01      	ldr	r3, [sp, #4]
 801b09c:	9802      	ldr	r0, [sp, #8]
 801b09e:	3301      	adds	r3, #1
 801b0a0:	181b      	adds	r3, r3, r0
 801b0a2:	106d      	asrs	r5, r5, #1
 801b0a4:	42ab      	cmp	r3, r5
 801b0a6:	d900      	bls.n	801b0aa <__ssputs_r+0x3e>
 801b0a8:	001d      	movs	r5, r3
 801b0aa:	0553      	lsls	r3, r2, #21
 801b0ac:	d532      	bpl.n	801b114 <__ssputs_r+0xa8>
 801b0ae:	0029      	movs	r1, r5
 801b0b0:	0038      	movs	r0, r7
 801b0b2:	f7fb fc35 	bl	8016920 <_malloc_r>
 801b0b6:	1e06      	subs	r6, r0, #0
 801b0b8:	d109      	bne.n	801b0ce <__ssputs_r+0x62>
 801b0ba:	230c      	movs	r3, #12
 801b0bc:	603b      	str	r3, [r7, #0]
 801b0be:	2340      	movs	r3, #64	; 0x40
 801b0c0:	2001      	movs	r0, #1
 801b0c2:	89a2      	ldrh	r2, [r4, #12]
 801b0c4:	4240      	negs	r0, r0
 801b0c6:	4313      	orrs	r3, r2
 801b0c8:	81a3      	strh	r3, [r4, #12]
 801b0ca:	b005      	add	sp, #20
 801b0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0ce:	9a02      	ldr	r2, [sp, #8]
 801b0d0:	6921      	ldr	r1, [r4, #16]
 801b0d2:	f7fb fba7 	bl	8016824 <memcpy>
 801b0d6:	89a3      	ldrh	r3, [r4, #12]
 801b0d8:	4a14      	ldr	r2, [pc, #80]	; (801b12c <__ssputs_r+0xc0>)
 801b0da:	401a      	ands	r2, r3
 801b0dc:	2380      	movs	r3, #128	; 0x80
 801b0de:	4313      	orrs	r3, r2
 801b0e0:	81a3      	strh	r3, [r4, #12]
 801b0e2:	9b02      	ldr	r3, [sp, #8]
 801b0e4:	6126      	str	r6, [r4, #16]
 801b0e6:	18f6      	adds	r6, r6, r3
 801b0e8:	6026      	str	r6, [r4, #0]
 801b0ea:	6165      	str	r5, [r4, #20]
 801b0ec:	9e01      	ldr	r6, [sp, #4]
 801b0ee:	1aed      	subs	r5, r5, r3
 801b0f0:	60a5      	str	r5, [r4, #8]
 801b0f2:	9b01      	ldr	r3, [sp, #4]
 801b0f4:	429e      	cmp	r6, r3
 801b0f6:	d900      	bls.n	801b0fa <__ssputs_r+0x8e>
 801b0f8:	9e01      	ldr	r6, [sp, #4]
 801b0fa:	0032      	movs	r2, r6
 801b0fc:	9903      	ldr	r1, [sp, #12]
 801b0fe:	6820      	ldr	r0, [r4, #0]
 801b100:	f7ff fa6d 	bl	801a5de <memmove>
 801b104:	68a3      	ldr	r3, [r4, #8]
 801b106:	2000      	movs	r0, #0
 801b108:	1b9b      	subs	r3, r3, r6
 801b10a:	60a3      	str	r3, [r4, #8]
 801b10c:	6823      	ldr	r3, [r4, #0]
 801b10e:	199e      	adds	r6, r3, r6
 801b110:	6026      	str	r6, [r4, #0]
 801b112:	e7da      	b.n	801b0ca <__ssputs_r+0x5e>
 801b114:	002a      	movs	r2, r5
 801b116:	0038      	movs	r0, r7
 801b118:	f7ff ff79 	bl	801b00e <_realloc_r>
 801b11c:	1e06      	subs	r6, r0, #0
 801b11e:	d1e0      	bne.n	801b0e2 <__ssputs_r+0x76>
 801b120:	0038      	movs	r0, r7
 801b122:	6921      	ldr	r1, [r4, #16]
 801b124:	f7fb fb90 	bl	8016848 <_free_r>
 801b128:	e7c7      	b.n	801b0ba <__ssputs_r+0x4e>
 801b12a:	46c0      	nop			; (mov r8, r8)
 801b12c:	fffffb7f 	.word	0xfffffb7f

0801b130 <_svfiprintf_r>:
 801b130:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b132:	b0a1      	sub	sp, #132	; 0x84
 801b134:	9003      	str	r0, [sp, #12]
 801b136:	001d      	movs	r5, r3
 801b138:	898b      	ldrh	r3, [r1, #12]
 801b13a:	000f      	movs	r7, r1
 801b13c:	0016      	movs	r6, r2
 801b13e:	061b      	lsls	r3, r3, #24
 801b140:	d511      	bpl.n	801b166 <_svfiprintf_r+0x36>
 801b142:	690b      	ldr	r3, [r1, #16]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d10e      	bne.n	801b166 <_svfiprintf_r+0x36>
 801b148:	2140      	movs	r1, #64	; 0x40
 801b14a:	f7fb fbe9 	bl	8016920 <_malloc_r>
 801b14e:	6038      	str	r0, [r7, #0]
 801b150:	6138      	str	r0, [r7, #16]
 801b152:	2800      	cmp	r0, #0
 801b154:	d105      	bne.n	801b162 <_svfiprintf_r+0x32>
 801b156:	230c      	movs	r3, #12
 801b158:	9a03      	ldr	r2, [sp, #12]
 801b15a:	3801      	subs	r0, #1
 801b15c:	6013      	str	r3, [r2, #0]
 801b15e:	b021      	add	sp, #132	; 0x84
 801b160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b162:	2340      	movs	r3, #64	; 0x40
 801b164:	617b      	str	r3, [r7, #20]
 801b166:	2300      	movs	r3, #0
 801b168:	ac08      	add	r4, sp, #32
 801b16a:	6163      	str	r3, [r4, #20]
 801b16c:	3320      	adds	r3, #32
 801b16e:	7663      	strb	r3, [r4, #25]
 801b170:	3310      	adds	r3, #16
 801b172:	76a3      	strb	r3, [r4, #26]
 801b174:	9507      	str	r5, [sp, #28]
 801b176:	0035      	movs	r5, r6
 801b178:	782b      	ldrb	r3, [r5, #0]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d001      	beq.n	801b182 <_svfiprintf_r+0x52>
 801b17e:	2b25      	cmp	r3, #37	; 0x25
 801b180:	d147      	bne.n	801b212 <_svfiprintf_r+0xe2>
 801b182:	1bab      	subs	r3, r5, r6
 801b184:	9305      	str	r3, [sp, #20]
 801b186:	42b5      	cmp	r5, r6
 801b188:	d00c      	beq.n	801b1a4 <_svfiprintf_r+0x74>
 801b18a:	0032      	movs	r2, r6
 801b18c:	0039      	movs	r1, r7
 801b18e:	9803      	ldr	r0, [sp, #12]
 801b190:	f7ff ff6c 	bl	801b06c <__ssputs_r>
 801b194:	1c43      	adds	r3, r0, #1
 801b196:	d100      	bne.n	801b19a <_svfiprintf_r+0x6a>
 801b198:	e0ae      	b.n	801b2f8 <_svfiprintf_r+0x1c8>
 801b19a:	6962      	ldr	r2, [r4, #20]
 801b19c:	9b05      	ldr	r3, [sp, #20]
 801b19e:	4694      	mov	ip, r2
 801b1a0:	4463      	add	r3, ip
 801b1a2:	6163      	str	r3, [r4, #20]
 801b1a4:	782b      	ldrb	r3, [r5, #0]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d100      	bne.n	801b1ac <_svfiprintf_r+0x7c>
 801b1aa:	e0a5      	b.n	801b2f8 <_svfiprintf_r+0x1c8>
 801b1ac:	2201      	movs	r2, #1
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	4252      	negs	r2, r2
 801b1b2:	6062      	str	r2, [r4, #4]
 801b1b4:	a904      	add	r1, sp, #16
 801b1b6:	3254      	adds	r2, #84	; 0x54
 801b1b8:	1852      	adds	r2, r2, r1
 801b1ba:	1c6e      	adds	r6, r5, #1
 801b1bc:	6023      	str	r3, [r4, #0]
 801b1be:	60e3      	str	r3, [r4, #12]
 801b1c0:	60a3      	str	r3, [r4, #8]
 801b1c2:	7013      	strb	r3, [r2, #0]
 801b1c4:	65a3      	str	r3, [r4, #88]	; 0x58
 801b1c6:	2205      	movs	r2, #5
 801b1c8:	7831      	ldrb	r1, [r6, #0]
 801b1ca:	4854      	ldr	r0, [pc, #336]	; (801b31c <_svfiprintf_r+0x1ec>)
 801b1cc:	f7ff f9fc 	bl	801a5c8 <memchr>
 801b1d0:	1c75      	adds	r5, r6, #1
 801b1d2:	2800      	cmp	r0, #0
 801b1d4:	d11f      	bne.n	801b216 <_svfiprintf_r+0xe6>
 801b1d6:	6822      	ldr	r2, [r4, #0]
 801b1d8:	06d3      	lsls	r3, r2, #27
 801b1da:	d504      	bpl.n	801b1e6 <_svfiprintf_r+0xb6>
 801b1dc:	2353      	movs	r3, #83	; 0x53
 801b1de:	a904      	add	r1, sp, #16
 801b1e0:	185b      	adds	r3, r3, r1
 801b1e2:	2120      	movs	r1, #32
 801b1e4:	7019      	strb	r1, [r3, #0]
 801b1e6:	0713      	lsls	r3, r2, #28
 801b1e8:	d504      	bpl.n	801b1f4 <_svfiprintf_r+0xc4>
 801b1ea:	2353      	movs	r3, #83	; 0x53
 801b1ec:	a904      	add	r1, sp, #16
 801b1ee:	185b      	adds	r3, r3, r1
 801b1f0:	212b      	movs	r1, #43	; 0x2b
 801b1f2:	7019      	strb	r1, [r3, #0]
 801b1f4:	7833      	ldrb	r3, [r6, #0]
 801b1f6:	2b2a      	cmp	r3, #42	; 0x2a
 801b1f8:	d016      	beq.n	801b228 <_svfiprintf_r+0xf8>
 801b1fa:	0035      	movs	r5, r6
 801b1fc:	2100      	movs	r1, #0
 801b1fe:	200a      	movs	r0, #10
 801b200:	68e3      	ldr	r3, [r4, #12]
 801b202:	782a      	ldrb	r2, [r5, #0]
 801b204:	1c6e      	adds	r6, r5, #1
 801b206:	3a30      	subs	r2, #48	; 0x30
 801b208:	2a09      	cmp	r2, #9
 801b20a:	d94e      	bls.n	801b2aa <_svfiprintf_r+0x17a>
 801b20c:	2900      	cmp	r1, #0
 801b20e:	d111      	bne.n	801b234 <_svfiprintf_r+0x104>
 801b210:	e017      	b.n	801b242 <_svfiprintf_r+0x112>
 801b212:	3501      	adds	r5, #1
 801b214:	e7b0      	b.n	801b178 <_svfiprintf_r+0x48>
 801b216:	4b41      	ldr	r3, [pc, #260]	; (801b31c <_svfiprintf_r+0x1ec>)
 801b218:	6822      	ldr	r2, [r4, #0]
 801b21a:	1ac0      	subs	r0, r0, r3
 801b21c:	2301      	movs	r3, #1
 801b21e:	4083      	lsls	r3, r0
 801b220:	4313      	orrs	r3, r2
 801b222:	002e      	movs	r6, r5
 801b224:	6023      	str	r3, [r4, #0]
 801b226:	e7ce      	b.n	801b1c6 <_svfiprintf_r+0x96>
 801b228:	9b07      	ldr	r3, [sp, #28]
 801b22a:	1d19      	adds	r1, r3, #4
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	9107      	str	r1, [sp, #28]
 801b230:	2b00      	cmp	r3, #0
 801b232:	db01      	blt.n	801b238 <_svfiprintf_r+0x108>
 801b234:	930b      	str	r3, [sp, #44]	; 0x2c
 801b236:	e004      	b.n	801b242 <_svfiprintf_r+0x112>
 801b238:	425b      	negs	r3, r3
 801b23a:	60e3      	str	r3, [r4, #12]
 801b23c:	2302      	movs	r3, #2
 801b23e:	4313      	orrs	r3, r2
 801b240:	6023      	str	r3, [r4, #0]
 801b242:	782b      	ldrb	r3, [r5, #0]
 801b244:	2b2e      	cmp	r3, #46	; 0x2e
 801b246:	d10a      	bne.n	801b25e <_svfiprintf_r+0x12e>
 801b248:	786b      	ldrb	r3, [r5, #1]
 801b24a:	2b2a      	cmp	r3, #42	; 0x2a
 801b24c:	d135      	bne.n	801b2ba <_svfiprintf_r+0x18a>
 801b24e:	9b07      	ldr	r3, [sp, #28]
 801b250:	3502      	adds	r5, #2
 801b252:	1d1a      	adds	r2, r3, #4
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	9207      	str	r2, [sp, #28]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	db2b      	blt.n	801b2b4 <_svfiprintf_r+0x184>
 801b25c:	9309      	str	r3, [sp, #36]	; 0x24
 801b25e:	4e30      	ldr	r6, [pc, #192]	; (801b320 <_svfiprintf_r+0x1f0>)
 801b260:	2203      	movs	r2, #3
 801b262:	0030      	movs	r0, r6
 801b264:	7829      	ldrb	r1, [r5, #0]
 801b266:	f7ff f9af 	bl	801a5c8 <memchr>
 801b26a:	2800      	cmp	r0, #0
 801b26c:	d006      	beq.n	801b27c <_svfiprintf_r+0x14c>
 801b26e:	2340      	movs	r3, #64	; 0x40
 801b270:	1b80      	subs	r0, r0, r6
 801b272:	4083      	lsls	r3, r0
 801b274:	6822      	ldr	r2, [r4, #0]
 801b276:	3501      	adds	r5, #1
 801b278:	4313      	orrs	r3, r2
 801b27a:	6023      	str	r3, [r4, #0]
 801b27c:	7829      	ldrb	r1, [r5, #0]
 801b27e:	2206      	movs	r2, #6
 801b280:	4828      	ldr	r0, [pc, #160]	; (801b324 <_svfiprintf_r+0x1f4>)
 801b282:	1c6e      	adds	r6, r5, #1
 801b284:	7621      	strb	r1, [r4, #24]
 801b286:	f7ff f99f 	bl	801a5c8 <memchr>
 801b28a:	2800      	cmp	r0, #0
 801b28c:	d03c      	beq.n	801b308 <_svfiprintf_r+0x1d8>
 801b28e:	4b26      	ldr	r3, [pc, #152]	; (801b328 <_svfiprintf_r+0x1f8>)
 801b290:	2b00      	cmp	r3, #0
 801b292:	d125      	bne.n	801b2e0 <_svfiprintf_r+0x1b0>
 801b294:	2207      	movs	r2, #7
 801b296:	9b07      	ldr	r3, [sp, #28]
 801b298:	3307      	adds	r3, #7
 801b29a:	4393      	bics	r3, r2
 801b29c:	3308      	adds	r3, #8
 801b29e:	9307      	str	r3, [sp, #28]
 801b2a0:	6963      	ldr	r3, [r4, #20]
 801b2a2:	9a04      	ldr	r2, [sp, #16]
 801b2a4:	189b      	adds	r3, r3, r2
 801b2a6:	6163      	str	r3, [r4, #20]
 801b2a8:	e765      	b.n	801b176 <_svfiprintf_r+0x46>
 801b2aa:	4343      	muls	r3, r0
 801b2ac:	0035      	movs	r5, r6
 801b2ae:	2101      	movs	r1, #1
 801b2b0:	189b      	adds	r3, r3, r2
 801b2b2:	e7a6      	b.n	801b202 <_svfiprintf_r+0xd2>
 801b2b4:	2301      	movs	r3, #1
 801b2b6:	425b      	negs	r3, r3
 801b2b8:	e7d0      	b.n	801b25c <_svfiprintf_r+0x12c>
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	200a      	movs	r0, #10
 801b2be:	001a      	movs	r2, r3
 801b2c0:	3501      	adds	r5, #1
 801b2c2:	6063      	str	r3, [r4, #4]
 801b2c4:	7829      	ldrb	r1, [r5, #0]
 801b2c6:	1c6e      	adds	r6, r5, #1
 801b2c8:	3930      	subs	r1, #48	; 0x30
 801b2ca:	2909      	cmp	r1, #9
 801b2cc:	d903      	bls.n	801b2d6 <_svfiprintf_r+0x1a6>
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d0c5      	beq.n	801b25e <_svfiprintf_r+0x12e>
 801b2d2:	9209      	str	r2, [sp, #36]	; 0x24
 801b2d4:	e7c3      	b.n	801b25e <_svfiprintf_r+0x12e>
 801b2d6:	4342      	muls	r2, r0
 801b2d8:	0035      	movs	r5, r6
 801b2da:	2301      	movs	r3, #1
 801b2dc:	1852      	adds	r2, r2, r1
 801b2de:	e7f1      	b.n	801b2c4 <_svfiprintf_r+0x194>
 801b2e0:	ab07      	add	r3, sp, #28
 801b2e2:	9300      	str	r3, [sp, #0]
 801b2e4:	003a      	movs	r2, r7
 801b2e6:	0021      	movs	r1, r4
 801b2e8:	4b10      	ldr	r3, [pc, #64]	; (801b32c <_svfiprintf_r+0x1fc>)
 801b2ea:	9803      	ldr	r0, [sp, #12]
 801b2ec:	f7fb fd9a 	bl	8016e24 <_printf_float>
 801b2f0:	9004      	str	r0, [sp, #16]
 801b2f2:	9b04      	ldr	r3, [sp, #16]
 801b2f4:	3301      	adds	r3, #1
 801b2f6:	d1d3      	bne.n	801b2a0 <_svfiprintf_r+0x170>
 801b2f8:	89bb      	ldrh	r3, [r7, #12]
 801b2fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b2fc:	065b      	lsls	r3, r3, #25
 801b2fe:	d400      	bmi.n	801b302 <_svfiprintf_r+0x1d2>
 801b300:	e72d      	b.n	801b15e <_svfiprintf_r+0x2e>
 801b302:	2001      	movs	r0, #1
 801b304:	4240      	negs	r0, r0
 801b306:	e72a      	b.n	801b15e <_svfiprintf_r+0x2e>
 801b308:	ab07      	add	r3, sp, #28
 801b30a:	9300      	str	r3, [sp, #0]
 801b30c:	003a      	movs	r2, r7
 801b30e:	0021      	movs	r1, r4
 801b310:	4b06      	ldr	r3, [pc, #24]	; (801b32c <_svfiprintf_r+0x1fc>)
 801b312:	9803      	ldr	r0, [sp, #12]
 801b314:	f7fc f838 	bl	8017388 <_printf_i>
 801b318:	e7ea      	b.n	801b2f0 <_svfiprintf_r+0x1c0>
 801b31a:	46c0      	nop			; (mov r8, r8)
 801b31c:	0801d174 	.word	0x0801d174
 801b320:	0801d17a 	.word	0x0801d17a
 801b324:	0801d17e 	.word	0x0801d17e
 801b328:	08016e25 	.word	0x08016e25
 801b32c:	0801b06d 	.word	0x0801b06d

0801b330 <_sungetc_r>:
 801b330:	b570      	push	{r4, r5, r6, lr}
 801b332:	0014      	movs	r4, r2
 801b334:	1c4b      	adds	r3, r1, #1
 801b336:	d103      	bne.n	801b340 <_sungetc_r+0x10>
 801b338:	2501      	movs	r5, #1
 801b33a:	426d      	negs	r5, r5
 801b33c:	0028      	movs	r0, r5
 801b33e:	bd70      	pop	{r4, r5, r6, pc}
 801b340:	8993      	ldrh	r3, [r2, #12]
 801b342:	2220      	movs	r2, #32
 801b344:	4393      	bics	r3, r2
 801b346:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801b348:	81a3      	strh	r3, [r4, #12]
 801b34a:	b2ce      	uxtb	r6, r1
 801b34c:	6863      	ldr	r3, [r4, #4]
 801b34e:	b2cd      	uxtb	r5, r1
 801b350:	2a00      	cmp	r2, #0
 801b352:	d010      	beq.n	801b376 <_sungetc_r+0x46>
 801b354:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801b356:	429a      	cmp	r2, r3
 801b358:	dd07      	ble.n	801b36a <_sungetc_r+0x3a>
 801b35a:	6823      	ldr	r3, [r4, #0]
 801b35c:	3b01      	subs	r3, #1
 801b35e:	6023      	str	r3, [r4, #0]
 801b360:	701e      	strb	r6, [r3, #0]
 801b362:	6863      	ldr	r3, [r4, #4]
 801b364:	3301      	adds	r3, #1
 801b366:	6063      	str	r3, [r4, #4]
 801b368:	e7e8      	b.n	801b33c <_sungetc_r+0xc>
 801b36a:	0021      	movs	r1, r4
 801b36c:	f000 fc36 	bl	801bbdc <__submore>
 801b370:	2800      	cmp	r0, #0
 801b372:	d0f2      	beq.n	801b35a <_sungetc_r+0x2a>
 801b374:	e7e0      	b.n	801b338 <_sungetc_r+0x8>
 801b376:	6921      	ldr	r1, [r4, #16]
 801b378:	6822      	ldr	r2, [r4, #0]
 801b37a:	2900      	cmp	r1, #0
 801b37c:	d007      	beq.n	801b38e <_sungetc_r+0x5e>
 801b37e:	4291      	cmp	r1, r2
 801b380:	d205      	bcs.n	801b38e <_sungetc_r+0x5e>
 801b382:	1e51      	subs	r1, r2, #1
 801b384:	7808      	ldrb	r0, [r1, #0]
 801b386:	42a8      	cmp	r0, r5
 801b388:	d101      	bne.n	801b38e <_sungetc_r+0x5e>
 801b38a:	6021      	str	r1, [r4, #0]
 801b38c:	e7ea      	b.n	801b364 <_sungetc_r+0x34>
 801b38e:	6423      	str	r3, [r4, #64]	; 0x40
 801b390:	0023      	movs	r3, r4
 801b392:	3344      	adds	r3, #68	; 0x44
 801b394:	6363      	str	r3, [r4, #52]	; 0x34
 801b396:	2303      	movs	r3, #3
 801b398:	63a3      	str	r3, [r4, #56]	; 0x38
 801b39a:	0023      	movs	r3, r4
 801b39c:	3346      	adds	r3, #70	; 0x46
 801b39e:	63e2      	str	r2, [r4, #60]	; 0x3c
 801b3a0:	701e      	strb	r6, [r3, #0]
 801b3a2:	6023      	str	r3, [r4, #0]
 801b3a4:	2301      	movs	r3, #1
 801b3a6:	e7de      	b.n	801b366 <_sungetc_r+0x36>

0801b3a8 <__ssrefill_r>:
 801b3a8:	b510      	push	{r4, lr}
 801b3aa:	000c      	movs	r4, r1
 801b3ac:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b3ae:	2900      	cmp	r1, #0
 801b3b0:	d00e      	beq.n	801b3d0 <__ssrefill_r+0x28>
 801b3b2:	0023      	movs	r3, r4
 801b3b4:	3344      	adds	r3, #68	; 0x44
 801b3b6:	4299      	cmp	r1, r3
 801b3b8:	d001      	beq.n	801b3be <__ssrefill_r+0x16>
 801b3ba:	f7fb fa45 	bl	8016848 <_free_r>
 801b3be:	2000      	movs	r0, #0
 801b3c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b3c2:	6360      	str	r0, [r4, #52]	; 0x34
 801b3c4:	6063      	str	r3, [r4, #4]
 801b3c6:	4283      	cmp	r3, r0
 801b3c8:	d002      	beq.n	801b3d0 <__ssrefill_r+0x28>
 801b3ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b3cc:	6023      	str	r3, [r4, #0]
 801b3ce:	bd10      	pop	{r4, pc}
 801b3d0:	6923      	ldr	r3, [r4, #16]
 801b3d2:	2001      	movs	r0, #1
 801b3d4:	6023      	str	r3, [r4, #0]
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	89a2      	ldrh	r2, [r4, #12]
 801b3da:	6063      	str	r3, [r4, #4]
 801b3dc:	3320      	adds	r3, #32
 801b3de:	4313      	orrs	r3, r2
 801b3e0:	81a3      	strh	r3, [r4, #12]
 801b3e2:	4240      	negs	r0, r0
 801b3e4:	e7f3      	b.n	801b3ce <__ssrefill_r+0x26>
	...

0801b3e8 <__ssvfiscanf_r>:
 801b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3ea:	4cb8      	ldr	r4, [pc, #736]	; (801b6cc <__ssvfiscanf_r+0x2e4>)
 801b3ec:	0006      	movs	r6, r0
 801b3ee:	44a5      	add	sp, r4
 801b3f0:	000c      	movs	r4, r1
 801b3f2:	2100      	movs	r1, #0
 801b3f4:	9146      	str	r1, [sp, #280]	; 0x118
 801b3f6:	9147      	str	r1, [sp, #284]	; 0x11c
 801b3f8:	a903      	add	r1, sp, #12
 801b3fa:	9148      	str	r1, [sp, #288]	; 0x120
 801b3fc:	21be      	movs	r1, #190	; 0xbe
 801b3fe:	48b4      	ldr	r0, [pc, #720]	; (801b6d0 <__ssvfiscanf_r+0x2e8>)
 801b400:	0049      	lsls	r1, r1, #1
 801b402:	ad43      	add	r5, sp, #268	; 0x10c
 801b404:	5068      	str	r0, [r5, r1]
 801b406:	25c0      	movs	r5, #192	; 0xc0
 801b408:	49b2      	ldr	r1, [pc, #712]	; (801b6d4 <__ssvfiscanf_r+0x2ec>)
 801b40a:	006d      	lsls	r5, r5, #1
 801b40c:	a843      	add	r0, sp, #268	; 0x10c
 801b40e:	5141      	str	r1, [r0, r5]
 801b410:	9302      	str	r3, [sp, #8]
 801b412:	7813      	ldrb	r3, [r2, #0]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d100      	bne.n	801b41a <__ssvfiscanf_r+0x32>
 801b418:	e155      	b.n	801b6c6 <__ssvfiscanf_r+0x2de>
 801b41a:	49af      	ldr	r1, [pc, #700]	; (801b6d8 <__ssvfiscanf_r+0x2f0>)
 801b41c:	2508      	movs	r5, #8
 801b41e:	5cc8      	ldrb	r0, [r1, r3]
 801b420:	2108      	movs	r1, #8
 801b422:	1c57      	adds	r7, r2, #1
 801b424:	4001      	ands	r1, r0
 801b426:	4228      	tst	r0, r5
 801b428:	d020      	beq.n	801b46c <__ssvfiscanf_r+0x84>
 801b42a:	6863      	ldr	r3, [r4, #4]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	dd12      	ble.n	801b456 <__ssvfiscanf_r+0x6e>
 801b430:	6823      	ldr	r3, [r4, #0]
 801b432:	49a9      	ldr	r1, [pc, #676]	; (801b6d8 <__ssvfiscanf_r+0x2f0>)
 801b434:	781a      	ldrb	r2, [r3, #0]
 801b436:	5c8a      	ldrb	r2, [r1, r2]
 801b438:	2108      	movs	r1, #8
 801b43a:	420a      	tst	r2, r1
 801b43c:	d101      	bne.n	801b442 <__ssvfiscanf_r+0x5a>
 801b43e:	003a      	movs	r2, r7
 801b440:	e7e7      	b.n	801b412 <__ssvfiscanf_r+0x2a>
 801b442:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 801b444:	3301      	adds	r3, #1
 801b446:	9200      	str	r2, [sp, #0]
 801b448:	3201      	adds	r2, #1
 801b44a:	9247      	str	r2, [sp, #284]	; 0x11c
 801b44c:	6862      	ldr	r2, [r4, #4]
 801b44e:	6023      	str	r3, [r4, #0]
 801b450:	3a01      	subs	r2, #1
 801b452:	6062      	str	r2, [r4, #4]
 801b454:	e7e9      	b.n	801b42a <__ssvfiscanf_r+0x42>
 801b456:	22c0      	movs	r2, #192	; 0xc0
 801b458:	ab43      	add	r3, sp, #268	; 0x10c
 801b45a:	0052      	lsls	r2, r2, #1
 801b45c:	589b      	ldr	r3, [r3, r2]
 801b45e:	0021      	movs	r1, r4
 801b460:	0030      	movs	r0, r6
 801b462:	9300      	str	r3, [sp, #0]
 801b464:	4798      	blx	r3
 801b466:	2800      	cmp	r0, #0
 801b468:	d0e2      	beq.n	801b430 <__ssvfiscanf_r+0x48>
 801b46a:	e7e8      	b.n	801b43e <__ssvfiscanf_r+0x56>
 801b46c:	001d      	movs	r5, r3
 801b46e:	2b25      	cmp	r3, #37	; 0x25
 801b470:	d164      	bne.n	801b53c <__ssvfiscanf_r+0x154>
 801b472:	9145      	str	r1, [sp, #276]	; 0x114
 801b474:	9143      	str	r1, [sp, #268]	; 0x10c
 801b476:	7853      	ldrb	r3, [r2, #1]
 801b478:	2b2a      	cmp	r3, #42	; 0x2a
 801b47a:	d102      	bne.n	801b482 <__ssvfiscanf_r+0x9a>
 801b47c:	3b1a      	subs	r3, #26
 801b47e:	9343      	str	r3, [sp, #268]	; 0x10c
 801b480:	1c97      	adds	r7, r2, #2
 801b482:	003d      	movs	r5, r7
 801b484:	220a      	movs	r2, #10
 801b486:	7829      	ldrb	r1, [r5, #0]
 801b488:	1c6b      	adds	r3, r5, #1
 801b48a:	9300      	str	r3, [sp, #0]
 801b48c:	000b      	movs	r3, r1
 801b48e:	3b30      	subs	r3, #48	; 0x30
 801b490:	2b09      	cmp	r3, #9
 801b492:	d91f      	bls.n	801b4d4 <__ssvfiscanf_r+0xec>
 801b494:	4f91      	ldr	r7, [pc, #580]	; (801b6dc <__ssvfiscanf_r+0x2f4>)
 801b496:	2203      	movs	r2, #3
 801b498:	0038      	movs	r0, r7
 801b49a:	f7ff f895 	bl	801a5c8 <memchr>
 801b49e:	2800      	cmp	r0, #0
 801b4a0:	d007      	beq.n	801b4b2 <__ssvfiscanf_r+0xca>
 801b4a2:	2301      	movs	r3, #1
 801b4a4:	1bc0      	subs	r0, r0, r7
 801b4a6:	4083      	lsls	r3, r0
 801b4a8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 801b4aa:	9d00      	ldr	r5, [sp, #0]
 801b4ac:	4313      	orrs	r3, r2
 801b4ae:	9201      	str	r2, [sp, #4]
 801b4b0:	9343      	str	r3, [sp, #268]	; 0x10c
 801b4b2:	1c6f      	adds	r7, r5, #1
 801b4b4:	782d      	ldrb	r5, [r5, #0]
 801b4b6:	2d78      	cmp	r5, #120	; 0x78
 801b4b8:	d807      	bhi.n	801b4ca <__ssvfiscanf_r+0xe2>
 801b4ba:	2d57      	cmp	r5, #87	; 0x57
 801b4bc:	d812      	bhi.n	801b4e4 <__ssvfiscanf_r+0xfc>
 801b4be:	2d25      	cmp	r5, #37	; 0x25
 801b4c0:	d03c      	beq.n	801b53c <__ssvfiscanf_r+0x154>
 801b4c2:	d836      	bhi.n	801b532 <__ssvfiscanf_r+0x14a>
 801b4c4:	2d00      	cmp	r5, #0
 801b4c6:	d100      	bne.n	801b4ca <__ssvfiscanf_r+0xe2>
 801b4c8:	e0fa      	b.n	801b6c0 <__ssvfiscanf_r+0x2d8>
 801b4ca:	2303      	movs	r3, #3
 801b4cc:	9349      	str	r3, [sp, #292]	; 0x124
 801b4ce:	3307      	adds	r3, #7
 801b4d0:	9344      	str	r3, [sp, #272]	; 0x110
 801b4d2:	e06d      	b.n	801b5b0 <__ssvfiscanf_r+0x1c8>
 801b4d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801b4d6:	9d00      	ldr	r5, [sp, #0]
 801b4d8:	9301      	str	r3, [sp, #4]
 801b4da:	4353      	muls	r3, r2
 801b4dc:	3b30      	subs	r3, #48	; 0x30
 801b4de:	185b      	adds	r3, r3, r1
 801b4e0:	9345      	str	r3, [sp, #276]	; 0x114
 801b4e2:	e7d0      	b.n	801b486 <__ssvfiscanf_r+0x9e>
 801b4e4:	0028      	movs	r0, r5
 801b4e6:	3858      	subs	r0, #88	; 0x58
 801b4e8:	2820      	cmp	r0, #32
 801b4ea:	d8ee      	bhi.n	801b4ca <__ssvfiscanf_r+0xe2>
 801b4ec:	f7e4 fe28 	bl	8000140 <__gnu_thumb1_case_shi>
 801b4f0:	ffed0051 	.word	0xffed0051
 801b4f4:	0087ffed 	.word	0x0087ffed
 801b4f8:	ffedffed 	.word	0xffedffed
 801b4fc:	ffedffed 	.word	0xffedffed
 801b500:	ffedffed 	.word	0xffedffed
 801b504:	0095ffed 	.word	0x0095ffed
 801b508:	0024007d 	.word	0x0024007d
 801b50c:	00240024 	.word	0x00240024
 801b510:	007fffed 	.word	0x007fffed
 801b514:	ffedffed 	.word	0xffedffed
 801b518:	ffedffed 	.word	0xffedffed
 801b51c:	0083009f 	.word	0x0083009f
 801b520:	ffed004b 	.word	0xffed004b
 801b524:	009dffed 	.word	0x009dffed
 801b528:	007dffed 	.word	0x007dffed
 801b52c:	ffedffed 	.word	0xffedffed
 801b530:	0051      	.short	0x0051
 801b532:	3d45      	subs	r5, #69	; 0x45
 801b534:	2d02      	cmp	r5, #2
 801b536:	d8c8      	bhi.n	801b4ca <__ssvfiscanf_r+0xe2>
 801b538:	2305      	movs	r3, #5
 801b53a:	e06c      	b.n	801b616 <__ssvfiscanf_r+0x22e>
 801b53c:	6863      	ldr	r3, [r4, #4]
 801b53e:	2b00      	cmp	r3, #0
 801b540:	dd0e      	ble.n	801b560 <__ssvfiscanf_r+0x178>
 801b542:	6823      	ldr	r3, [r4, #0]
 801b544:	781a      	ldrb	r2, [r3, #0]
 801b546:	42aa      	cmp	r2, r5
 801b548:	d000      	beq.n	801b54c <__ssvfiscanf_r+0x164>
 801b54a:	e0bc      	b.n	801b6c6 <__ssvfiscanf_r+0x2de>
 801b54c:	3301      	adds	r3, #1
 801b54e:	6862      	ldr	r2, [r4, #4]
 801b550:	6023      	str	r3, [r4, #0]
 801b552:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801b554:	3a01      	subs	r2, #1
 801b556:	9300      	str	r3, [sp, #0]
 801b558:	3301      	adds	r3, #1
 801b55a:	6062      	str	r2, [r4, #4]
 801b55c:	9347      	str	r3, [sp, #284]	; 0x11c
 801b55e:	e76e      	b.n	801b43e <__ssvfiscanf_r+0x56>
 801b560:	22c0      	movs	r2, #192	; 0xc0
 801b562:	ab43      	add	r3, sp, #268	; 0x10c
 801b564:	0052      	lsls	r2, r2, #1
 801b566:	589b      	ldr	r3, [r3, r2]
 801b568:	0021      	movs	r1, r4
 801b56a:	0030      	movs	r0, r6
 801b56c:	9300      	str	r3, [sp, #0]
 801b56e:	4798      	blx	r3
 801b570:	2800      	cmp	r0, #0
 801b572:	d0e6      	beq.n	801b542 <__ssvfiscanf_r+0x15a>
 801b574:	9846      	ldr	r0, [sp, #280]	; 0x118
 801b576:	2800      	cmp	r0, #0
 801b578:	d000      	beq.n	801b57c <__ssvfiscanf_r+0x194>
 801b57a:	e09d      	b.n	801b6b8 <__ssvfiscanf_r+0x2d0>
 801b57c:	3801      	subs	r0, #1
 801b57e:	23a5      	movs	r3, #165	; 0xa5
 801b580:	009b      	lsls	r3, r3, #2
 801b582:	449d      	add	sp, r3
 801b584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b586:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b588:	9300      	str	r3, [sp, #0]
 801b58a:	2320      	movs	r3, #32
 801b58c:	9a00      	ldr	r2, [sp, #0]
 801b58e:	4313      	orrs	r3, r2
 801b590:	9343      	str	r3, [sp, #268]	; 0x10c
 801b592:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b594:	9300      	str	r3, [sp, #0]
 801b596:	2380      	movs	r3, #128	; 0x80
 801b598:	9a00      	ldr	r2, [sp, #0]
 801b59a:	009b      	lsls	r3, r3, #2
 801b59c:	4313      	orrs	r3, r2
 801b59e:	9343      	str	r3, [sp, #268]	; 0x10c
 801b5a0:	2310      	movs	r3, #16
 801b5a2:	9344      	str	r3, [sp, #272]	; 0x110
 801b5a4:	236e      	movs	r3, #110	; 0x6e
 801b5a6:	42ab      	cmp	r3, r5
 801b5a8:	41ad      	sbcs	r5, r5
 801b5aa:	426d      	negs	r5, r5
 801b5ac:	3503      	adds	r5, #3
 801b5ae:	9549      	str	r5, [sp, #292]	; 0x124
 801b5b0:	6863      	ldr	r3, [r4, #4]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	dd4a      	ble.n	801b64c <__ssvfiscanf_r+0x264>
 801b5b6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b5b8:	9300      	str	r3, [sp, #0]
 801b5ba:	065b      	lsls	r3, r3, #25
 801b5bc:	d406      	bmi.n	801b5cc <__ssvfiscanf_r+0x1e4>
 801b5be:	6823      	ldr	r3, [r4, #0]
 801b5c0:	4945      	ldr	r1, [pc, #276]	; (801b6d8 <__ssvfiscanf_r+0x2f0>)
 801b5c2:	781a      	ldrb	r2, [r3, #0]
 801b5c4:	5c8a      	ldrb	r2, [r1, r2]
 801b5c6:	2108      	movs	r1, #8
 801b5c8:	420a      	tst	r2, r1
 801b5ca:	d14a      	bne.n	801b662 <__ssvfiscanf_r+0x27a>
 801b5cc:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801b5ce:	2b02      	cmp	r3, #2
 801b5d0:	dc5e      	bgt.n	801b690 <__ssvfiscanf_r+0x2a8>
 801b5d2:	0022      	movs	r2, r4
 801b5d4:	0030      	movs	r0, r6
 801b5d6:	ab02      	add	r3, sp, #8
 801b5d8:	a943      	add	r1, sp, #268	; 0x10c
 801b5da:	f000 f883 	bl	801b6e4 <_scanf_chars>
 801b5de:	2801      	cmp	r0, #1
 801b5e0:	d071      	beq.n	801b6c6 <__ssvfiscanf_r+0x2de>
 801b5e2:	2802      	cmp	r0, #2
 801b5e4:	d000      	beq.n	801b5e8 <__ssvfiscanf_r+0x200>
 801b5e6:	e72a      	b.n	801b43e <__ssvfiscanf_r+0x56>
 801b5e8:	e7c4      	b.n	801b574 <__ssvfiscanf_r+0x18c>
 801b5ea:	230a      	movs	r3, #10
 801b5ec:	e7d9      	b.n	801b5a2 <__ssvfiscanf_r+0x1ba>
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	2503      	movs	r5, #3
 801b5f2:	9344      	str	r3, [sp, #272]	; 0x110
 801b5f4:	e7db      	b.n	801b5ae <__ssvfiscanf_r+0x1c6>
 801b5f6:	2308      	movs	r3, #8
 801b5f8:	2504      	movs	r5, #4
 801b5fa:	9344      	str	r3, [sp, #272]	; 0x110
 801b5fc:	e7d7      	b.n	801b5ae <__ssvfiscanf_r+0x1c6>
 801b5fe:	0039      	movs	r1, r7
 801b600:	a803      	add	r0, sp, #12
 801b602:	f000 fa65 	bl	801bad0 <__sccl>
 801b606:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b608:	0007      	movs	r7, r0
 801b60a:	9300      	str	r3, [sp, #0]
 801b60c:	2340      	movs	r3, #64	; 0x40
 801b60e:	9a00      	ldr	r2, [sp, #0]
 801b610:	4313      	orrs	r3, r2
 801b612:	9343      	str	r3, [sp, #268]	; 0x10c
 801b614:	2301      	movs	r3, #1
 801b616:	9349      	str	r3, [sp, #292]	; 0x124
 801b618:	e7ca      	b.n	801b5b0 <__ssvfiscanf_r+0x1c8>
 801b61a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b61c:	9300      	str	r3, [sp, #0]
 801b61e:	2340      	movs	r3, #64	; 0x40
 801b620:	9a00      	ldr	r2, [sp, #0]
 801b622:	4313      	orrs	r3, r2
 801b624:	9343      	str	r3, [sp, #268]	; 0x10c
 801b626:	2300      	movs	r3, #0
 801b628:	e7f5      	b.n	801b616 <__ssvfiscanf_r+0x22e>
 801b62a:	2302      	movs	r3, #2
 801b62c:	e7f3      	b.n	801b616 <__ssvfiscanf_r+0x22e>
 801b62e:	9843      	ldr	r0, [sp, #268]	; 0x10c
 801b630:	06c3      	lsls	r3, r0, #27
 801b632:	d500      	bpl.n	801b636 <__ssvfiscanf_r+0x24e>
 801b634:	e703      	b.n	801b43e <__ssvfiscanf_r+0x56>
 801b636:	9b02      	ldr	r3, [sp, #8]
 801b638:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 801b63a:	1d19      	adds	r1, r3, #4
 801b63c:	9102      	str	r1, [sp, #8]
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	07c5      	lsls	r5, r0, #31
 801b642:	d501      	bpl.n	801b648 <__ssvfiscanf_r+0x260>
 801b644:	801a      	strh	r2, [r3, #0]
 801b646:	e6fa      	b.n	801b43e <__ssvfiscanf_r+0x56>
 801b648:	601a      	str	r2, [r3, #0]
 801b64a:	e6f8      	b.n	801b43e <__ssvfiscanf_r+0x56>
 801b64c:	22c0      	movs	r2, #192	; 0xc0
 801b64e:	ab43      	add	r3, sp, #268	; 0x10c
 801b650:	0052      	lsls	r2, r2, #1
 801b652:	589b      	ldr	r3, [r3, r2]
 801b654:	0021      	movs	r1, r4
 801b656:	0030      	movs	r0, r6
 801b658:	9300      	str	r3, [sp, #0]
 801b65a:	4798      	blx	r3
 801b65c:	2800      	cmp	r0, #0
 801b65e:	d0aa      	beq.n	801b5b6 <__ssvfiscanf_r+0x1ce>
 801b660:	e788      	b.n	801b574 <__ssvfiscanf_r+0x18c>
 801b662:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 801b664:	9200      	str	r2, [sp, #0]
 801b666:	3201      	adds	r2, #1
 801b668:	9247      	str	r2, [sp, #284]	; 0x11c
 801b66a:	6862      	ldr	r2, [r4, #4]
 801b66c:	3a01      	subs	r2, #1
 801b66e:	6062      	str	r2, [r4, #4]
 801b670:	2a00      	cmp	r2, #0
 801b672:	dd02      	ble.n	801b67a <__ssvfiscanf_r+0x292>
 801b674:	3301      	adds	r3, #1
 801b676:	6023      	str	r3, [r4, #0]
 801b678:	e7a1      	b.n	801b5be <__ssvfiscanf_r+0x1d6>
 801b67a:	22c0      	movs	r2, #192	; 0xc0
 801b67c:	ab43      	add	r3, sp, #268	; 0x10c
 801b67e:	0052      	lsls	r2, r2, #1
 801b680:	589b      	ldr	r3, [r3, r2]
 801b682:	0021      	movs	r1, r4
 801b684:	0030      	movs	r0, r6
 801b686:	9300      	str	r3, [sp, #0]
 801b688:	4798      	blx	r3
 801b68a:	2800      	cmp	r0, #0
 801b68c:	d097      	beq.n	801b5be <__ssvfiscanf_r+0x1d6>
 801b68e:	e771      	b.n	801b574 <__ssvfiscanf_r+0x18c>
 801b690:	2b04      	cmp	r3, #4
 801b692:	dc06      	bgt.n	801b6a2 <__ssvfiscanf_r+0x2ba>
 801b694:	0022      	movs	r2, r4
 801b696:	0030      	movs	r0, r6
 801b698:	ab02      	add	r3, sp, #8
 801b69a:	a943      	add	r1, sp, #268	; 0x10c
 801b69c:	f000 f880 	bl	801b7a0 <_scanf_i>
 801b6a0:	e79d      	b.n	801b5de <__ssvfiscanf_r+0x1f6>
 801b6a2:	4b0f      	ldr	r3, [pc, #60]	; (801b6e0 <__ssvfiscanf_r+0x2f8>)
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d100      	bne.n	801b6aa <__ssvfiscanf_r+0x2c2>
 801b6a8:	e6c9      	b.n	801b43e <__ssvfiscanf_r+0x56>
 801b6aa:	0022      	movs	r2, r4
 801b6ac:	0030      	movs	r0, r6
 801b6ae:	ab02      	add	r3, sp, #8
 801b6b0:	a943      	add	r1, sp, #268	; 0x10c
 801b6b2:	e000      	b.n	801b6b6 <__ssvfiscanf_r+0x2ce>
 801b6b4:	bf00      	nop
 801b6b6:	e792      	b.n	801b5de <__ssvfiscanf_r+0x1f6>
 801b6b8:	89a3      	ldrh	r3, [r4, #12]
 801b6ba:	065b      	lsls	r3, r3, #25
 801b6bc:	d400      	bmi.n	801b6c0 <__ssvfiscanf_r+0x2d8>
 801b6be:	e75e      	b.n	801b57e <__ssvfiscanf_r+0x196>
 801b6c0:	2001      	movs	r0, #1
 801b6c2:	4240      	negs	r0, r0
 801b6c4:	e75b      	b.n	801b57e <__ssvfiscanf_r+0x196>
 801b6c6:	9846      	ldr	r0, [sp, #280]	; 0x118
 801b6c8:	e759      	b.n	801b57e <__ssvfiscanf_r+0x196>
 801b6ca:	46c0      	nop			; (mov r8, r8)
 801b6cc:	fffffd6c 	.word	0xfffffd6c
 801b6d0:	0801b331 	.word	0x0801b331
 801b6d4:	0801b3a9 	.word	0x0801b3a9
 801b6d8:	0801d209 	.word	0x0801d209
 801b6dc:	0801d17a 	.word	0x0801d17a
 801b6e0:	00000000 	.word	0x00000000

0801b6e4 <_scanf_chars>:
 801b6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b6e6:	0015      	movs	r5, r2
 801b6e8:	688a      	ldr	r2, [r1, #8]
 801b6ea:	000c      	movs	r4, r1
 801b6ec:	9001      	str	r0, [sp, #4]
 801b6ee:	2a00      	cmp	r2, #0
 801b6f0:	d105      	bne.n	801b6fe <_scanf_chars+0x1a>
 801b6f2:	6989      	ldr	r1, [r1, #24]
 801b6f4:	3201      	adds	r2, #1
 801b6f6:	2900      	cmp	r1, #0
 801b6f8:	d000      	beq.n	801b6fc <_scanf_chars+0x18>
 801b6fa:	3a02      	subs	r2, #2
 801b6fc:	60a2      	str	r2, [r4, #8]
 801b6fe:	6822      	ldr	r2, [r4, #0]
 801b700:	06d2      	lsls	r2, r2, #27
 801b702:	d403      	bmi.n	801b70c <_scanf_chars+0x28>
 801b704:	681a      	ldr	r2, [r3, #0]
 801b706:	1d11      	adds	r1, r2, #4
 801b708:	6019      	str	r1, [r3, #0]
 801b70a:	6817      	ldr	r7, [r2, #0]
 801b70c:	2600      	movs	r6, #0
 801b70e:	69a0      	ldr	r0, [r4, #24]
 801b710:	2800      	cmp	r0, #0
 801b712:	d013      	beq.n	801b73c <_scanf_chars+0x58>
 801b714:	2801      	cmp	r0, #1
 801b716:	d108      	bne.n	801b72a <_scanf_chars+0x46>
 801b718:	682b      	ldr	r3, [r5, #0]
 801b71a:	6962      	ldr	r2, [r4, #20]
 801b71c:	781b      	ldrb	r3, [r3, #0]
 801b71e:	5cd3      	ldrb	r3, [r2, r3]
 801b720:	2b00      	cmp	r3, #0
 801b722:	d10b      	bne.n	801b73c <_scanf_chars+0x58>
 801b724:	2e00      	cmp	r6, #0
 801b726:	d038      	beq.n	801b79a <_scanf_chars+0xb6>
 801b728:	e026      	b.n	801b778 <_scanf_chars+0x94>
 801b72a:	2802      	cmp	r0, #2
 801b72c:	d124      	bne.n	801b778 <_scanf_chars+0x94>
 801b72e:	682b      	ldr	r3, [r5, #0]
 801b730:	4a1a      	ldr	r2, [pc, #104]	; (801b79c <_scanf_chars+0xb8>)
 801b732:	781b      	ldrb	r3, [r3, #0]
 801b734:	5cd3      	ldrb	r3, [r2, r3]
 801b736:	2208      	movs	r2, #8
 801b738:	4213      	tst	r3, r2
 801b73a:	d11d      	bne.n	801b778 <_scanf_chars+0x94>
 801b73c:	2210      	movs	r2, #16
 801b73e:	6823      	ldr	r3, [r4, #0]
 801b740:	3601      	adds	r6, #1
 801b742:	4213      	tst	r3, r2
 801b744:	d103      	bne.n	801b74e <_scanf_chars+0x6a>
 801b746:	682b      	ldr	r3, [r5, #0]
 801b748:	781b      	ldrb	r3, [r3, #0]
 801b74a:	703b      	strb	r3, [r7, #0]
 801b74c:	3701      	adds	r7, #1
 801b74e:	682a      	ldr	r2, [r5, #0]
 801b750:	686b      	ldr	r3, [r5, #4]
 801b752:	3201      	adds	r2, #1
 801b754:	602a      	str	r2, [r5, #0]
 801b756:	68a2      	ldr	r2, [r4, #8]
 801b758:	3b01      	subs	r3, #1
 801b75a:	3a01      	subs	r2, #1
 801b75c:	606b      	str	r3, [r5, #4]
 801b75e:	60a2      	str	r2, [r4, #8]
 801b760:	2a00      	cmp	r2, #0
 801b762:	d009      	beq.n	801b778 <_scanf_chars+0x94>
 801b764:	2b00      	cmp	r3, #0
 801b766:	dcd2      	bgt.n	801b70e <_scanf_chars+0x2a>
 801b768:	23c0      	movs	r3, #192	; 0xc0
 801b76a:	005b      	lsls	r3, r3, #1
 801b76c:	0029      	movs	r1, r5
 801b76e:	58e3      	ldr	r3, [r4, r3]
 801b770:	9801      	ldr	r0, [sp, #4]
 801b772:	4798      	blx	r3
 801b774:	2800      	cmp	r0, #0
 801b776:	d0ca      	beq.n	801b70e <_scanf_chars+0x2a>
 801b778:	6822      	ldr	r2, [r4, #0]
 801b77a:	2310      	movs	r3, #16
 801b77c:	0011      	movs	r1, r2
 801b77e:	4019      	ands	r1, r3
 801b780:	421a      	tst	r2, r3
 801b782:	d106      	bne.n	801b792 <_scanf_chars+0xae>
 801b784:	68e3      	ldr	r3, [r4, #12]
 801b786:	3301      	adds	r3, #1
 801b788:	60e3      	str	r3, [r4, #12]
 801b78a:	69a3      	ldr	r3, [r4, #24]
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d000      	beq.n	801b792 <_scanf_chars+0xae>
 801b790:	7039      	strb	r1, [r7, #0]
 801b792:	2000      	movs	r0, #0
 801b794:	6923      	ldr	r3, [r4, #16]
 801b796:	199e      	adds	r6, r3, r6
 801b798:	6126      	str	r6, [r4, #16]
 801b79a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b79c:	0801d209 	.word	0x0801d209

0801b7a0 <_scanf_i>:
 801b7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7a2:	000c      	movs	r4, r1
 801b7a4:	b08d      	sub	sp, #52	; 0x34
 801b7a6:	9302      	str	r3, [sp, #8]
 801b7a8:	4b79      	ldr	r3, [pc, #484]	; (801b990 <_scanf_i+0x1f0>)
 801b7aa:	0016      	movs	r6, r2
 801b7ac:	9005      	str	r0, [sp, #20]
 801b7ae:	aa09      	add	r2, sp, #36	; 0x24
 801b7b0:	cb23      	ldmia	r3!, {r0, r1, r5}
 801b7b2:	c223      	stmia	r2!, {r0, r1, r5}
 801b7b4:	4b77      	ldr	r3, [pc, #476]	; (801b994 <_scanf_i+0x1f4>)
 801b7b6:	9306      	str	r3, [sp, #24]
 801b7b8:	69a3      	ldr	r3, [r4, #24]
 801b7ba:	2b03      	cmp	r3, #3
 801b7bc:	d001      	beq.n	801b7c2 <_scanf_i+0x22>
 801b7be:	4b76      	ldr	r3, [pc, #472]	; (801b998 <_scanf_i+0x1f8>)
 801b7c0:	9306      	str	r3, [sp, #24]
 801b7c2:	22ae      	movs	r2, #174	; 0xae
 801b7c4:	2000      	movs	r0, #0
 801b7c6:	68a3      	ldr	r3, [r4, #8]
 801b7c8:	0052      	lsls	r2, r2, #1
 801b7ca:	1e59      	subs	r1, r3, #1
 801b7cc:	9004      	str	r0, [sp, #16]
 801b7ce:	4291      	cmp	r1, r2
 801b7d0:	d905      	bls.n	801b7de <_scanf_i+0x3e>
 801b7d2:	3b5e      	subs	r3, #94	; 0x5e
 801b7d4:	3bff      	subs	r3, #255	; 0xff
 801b7d6:	9304      	str	r3, [sp, #16]
 801b7d8:	235e      	movs	r3, #94	; 0x5e
 801b7da:	33ff      	adds	r3, #255	; 0xff
 801b7dc:	60a3      	str	r3, [r4, #8]
 801b7de:	0023      	movs	r3, r4
 801b7e0:	331c      	adds	r3, #28
 801b7e2:	9301      	str	r3, [sp, #4]
 801b7e4:	23d0      	movs	r3, #208	; 0xd0
 801b7e6:	2700      	movs	r7, #0
 801b7e8:	6822      	ldr	r2, [r4, #0]
 801b7ea:	011b      	lsls	r3, r3, #4
 801b7ec:	4313      	orrs	r3, r2
 801b7ee:	6023      	str	r3, [r4, #0]
 801b7f0:	9b01      	ldr	r3, [sp, #4]
 801b7f2:	9303      	str	r3, [sp, #12]
 801b7f4:	6833      	ldr	r3, [r6, #0]
 801b7f6:	a809      	add	r0, sp, #36	; 0x24
 801b7f8:	7819      	ldrb	r1, [r3, #0]
 801b7fa:	00bb      	lsls	r3, r7, #2
 801b7fc:	2202      	movs	r2, #2
 801b7fe:	5818      	ldr	r0, [r3, r0]
 801b800:	f7fe fee2 	bl	801a5c8 <memchr>
 801b804:	2800      	cmp	r0, #0
 801b806:	d02b      	beq.n	801b860 <_scanf_i+0xc0>
 801b808:	2f01      	cmp	r7, #1
 801b80a:	d162      	bne.n	801b8d2 <_scanf_i+0x132>
 801b80c:	6863      	ldr	r3, [r4, #4]
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d106      	bne.n	801b820 <_scanf_i+0x80>
 801b812:	3308      	adds	r3, #8
 801b814:	6822      	ldr	r2, [r4, #0]
 801b816:	6063      	str	r3, [r4, #4]
 801b818:	33f9      	adds	r3, #249	; 0xf9
 801b81a:	33ff      	adds	r3, #255	; 0xff
 801b81c:	4313      	orrs	r3, r2
 801b81e:	6023      	str	r3, [r4, #0]
 801b820:	4b5e      	ldr	r3, [pc, #376]	; (801b99c <_scanf_i+0x1fc>)
 801b822:	6822      	ldr	r2, [r4, #0]
 801b824:	4013      	ands	r3, r2
 801b826:	6023      	str	r3, [r4, #0]
 801b828:	68a3      	ldr	r3, [r4, #8]
 801b82a:	1e5a      	subs	r2, r3, #1
 801b82c:	60a2      	str	r2, [r4, #8]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d016      	beq.n	801b860 <_scanf_i+0xc0>
 801b832:	6833      	ldr	r3, [r6, #0]
 801b834:	1c5a      	adds	r2, r3, #1
 801b836:	6032      	str	r2, [r6, #0]
 801b838:	781b      	ldrb	r3, [r3, #0]
 801b83a:	9a03      	ldr	r2, [sp, #12]
 801b83c:	7013      	strb	r3, [r2, #0]
 801b83e:	6873      	ldr	r3, [r6, #4]
 801b840:	1c55      	adds	r5, r2, #1
 801b842:	3b01      	subs	r3, #1
 801b844:	6073      	str	r3, [r6, #4]
 801b846:	9503      	str	r5, [sp, #12]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	dc09      	bgt.n	801b860 <_scanf_i+0xc0>
 801b84c:	23c0      	movs	r3, #192	; 0xc0
 801b84e:	005b      	lsls	r3, r3, #1
 801b850:	58e3      	ldr	r3, [r4, r3]
 801b852:	0031      	movs	r1, r6
 801b854:	9805      	ldr	r0, [sp, #20]
 801b856:	9307      	str	r3, [sp, #28]
 801b858:	4798      	blx	r3
 801b85a:	2800      	cmp	r0, #0
 801b85c:	d000      	beq.n	801b860 <_scanf_i+0xc0>
 801b85e:	e081      	b.n	801b964 <_scanf_i+0x1c4>
 801b860:	3701      	adds	r7, #1
 801b862:	2f03      	cmp	r7, #3
 801b864:	d1c6      	bne.n	801b7f4 <_scanf_i+0x54>
 801b866:	6863      	ldr	r3, [r4, #4]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d101      	bne.n	801b870 <_scanf_i+0xd0>
 801b86c:	330a      	adds	r3, #10
 801b86e:	6063      	str	r3, [r4, #4]
 801b870:	2110      	movs	r1, #16
 801b872:	2700      	movs	r7, #0
 801b874:	6863      	ldr	r3, [r4, #4]
 801b876:	6960      	ldr	r0, [r4, #20]
 801b878:	1ac9      	subs	r1, r1, r3
 801b87a:	4b49      	ldr	r3, [pc, #292]	; (801b9a0 <_scanf_i+0x200>)
 801b87c:	18c9      	adds	r1, r1, r3
 801b87e:	f000 f927 	bl	801bad0 <__sccl>
 801b882:	9d03      	ldr	r5, [sp, #12]
 801b884:	68a3      	ldr	r3, [r4, #8]
 801b886:	6822      	ldr	r2, [r4, #0]
 801b888:	9303      	str	r3, [sp, #12]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d041      	beq.n	801b912 <_scanf_i+0x172>
 801b88e:	6831      	ldr	r1, [r6, #0]
 801b890:	6963      	ldr	r3, [r4, #20]
 801b892:	7808      	ldrb	r0, [r1, #0]
 801b894:	5c1b      	ldrb	r3, [r3, r0]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d03b      	beq.n	801b912 <_scanf_i+0x172>
 801b89a:	2830      	cmp	r0, #48	; 0x30
 801b89c:	d129      	bne.n	801b8f2 <_scanf_i+0x152>
 801b89e:	2380      	movs	r3, #128	; 0x80
 801b8a0:	011b      	lsls	r3, r3, #4
 801b8a2:	421a      	tst	r2, r3
 801b8a4:	d025      	beq.n	801b8f2 <_scanf_i+0x152>
 801b8a6:	9b04      	ldr	r3, [sp, #16]
 801b8a8:	3701      	adds	r7, #1
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d005      	beq.n	801b8ba <_scanf_i+0x11a>
 801b8ae:	001a      	movs	r2, r3
 801b8b0:	9b03      	ldr	r3, [sp, #12]
 801b8b2:	3a01      	subs	r2, #1
 801b8b4:	3301      	adds	r3, #1
 801b8b6:	9204      	str	r2, [sp, #16]
 801b8b8:	60a3      	str	r3, [r4, #8]
 801b8ba:	6873      	ldr	r3, [r6, #4]
 801b8bc:	3b01      	subs	r3, #1
 801b8be:	6073      	str	r3, [r6, #4]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	dd1d      	ble.n	801b900 <_scanf_i+0x160>
 801b8c4:	6833      	ldr	r3, [r6, #0]
 801b8c6:	3301      	adds	r3, #1
 801b8c8:	6033      	str	r3, [r6, #0]
 801b8ca:	68a3      	ldr	r3, [r4, #8]
 801b8cc:	3b01      	subs	r3, #1
 801b8ce:	60a3      	str	r3, [r4, #8]
 801b8d0:	e7d8      	b.n	801b884 <_scanf_i+0xe4>
 801b8d2:	2f02      	cmp	r7, #2
 801b8d4:	d1a8      	bne.n	801b828 <_scanf_i+0x88>
 801b8d6:	21c0      	movs	r1, #192	; 0xc0
 801b8d8:	2380      	movs	r3, #128	; 0x80
 801b8da:	6822      	ldr	r2, [r4, #0]
 801b8dc:	00c9      	lsls	r1, r1, #3
 801b8de:	4011      	ands	r1, r2
 801b8e0:	009b      	lsls	r3, r3, #2
 801b8e2:	4299      	cmp	r1, r3
 801b8e4:	d1bf      	bne.n	801b866 <_scanf_i+0xc6>
 801b8e6:	3bf1      	subs	r3, #241	; 0xf1
 801b8e8:	3bff      	subs	r3, #255	; 0xff
 801b8ea:	6063      	str	r3, [r4, #4]
 801b8ec:	33f0      	adds	r3, #240	; 0xf0
 801b8ee:	4313      	orrs	r3, r2
 801b8f0:	e799      	b.n	801b826 <_scanf_i+0x86>
 801b8f2:	4b2c      	ldr	r3, [pc, #176]	; (801b9a4 <_scanf_i+0x204>)
 801b8f4:	4013      	ands	r3, r2
 801b8f6:	6023      	str	r3, [r4, #0]
 801b8f8:	780b      	ldrb	r3, [r1, #0]
 801b8fa:	702b      	strb	r3, [r5, #0]
 801b8fc:	3501      	adds	r5, #1
 801b8fe:	e7dc      	b.n	801b8ba <_scanf_i+0x11a>
 801b900:	23c0      	movs	r3, #192	; 0xc0
 801b902:	005b      	lsls	r3, r3, #1
 801b904:	58e3      	ldr	r3, [r4, r3]
 801b906:	0031      	movs	r1, r6
 801b908:	9805      	ldr	r0, [sp, #20]
 801b90a:	9303      	str	r3, [sp, #12]
 801b90c:	4798      	blx	r3
 801b90e:	2800      	cmp	r0, #0
 801b910:	d0db      	beq.n	801b8ca <_scanf_i+0x12a>
 801b912:	6823      	ldr	r3, [r4, #0]
 801b914:	05db      	lsls	r3, r3, #23
 801b916:	d50e      	bpl.n	801b936 <_scanf_i+0x196>
 801b918:	9b01      	ldr	r3, [sp, #4]
 801b91a:	429d      	cmp	r5, r3
 801b91c:	d907      	bls.n	801b92e <_scanf_i+0x18e>
 801b91e:	23be      	movs	r3, #190	; 0xbe
 801b920:	3d01      	subs	r5, #1
 801b922:	005b      	lsls	r3, r3, #1
 801b924:	0032      	movs	r2, r6
 801b926:	7829      	ldrb	r1, [r5, #0]
 801b928:	58e3      	ldr	r3, [r4, r3]
 801b92a:	9805      	ldr	r0, [sp, #20]
 801b92c:	4798      	blx	r3
 801b92e:	9b01      	ldr	r3, [sp, #4]
 801b930:	2001      	movs	r0, #1
 801b932:	429d      	cmp	r5, r3
 801b934:	d029      	beq.n	801b98a <_scanf_i+0x1ea>
 801b936:	6821      	ldr	r1, [r4, #0]
 801b938:	2310      	movs	r3, #16
 801b93a:	000a      	movs	r2, r1
 801b93c:	401a      	ands	r2, r3
 801b93e:	4219      	tst	r1, r3
 801b940:	d11c      	bne.n	801b97c <_scanf_i+0x1dc>
 801b942:	702a      	strb	r2, [r5, #0]
 801b944:	6863      	ldr	r3, [r4, #4]
 801b946:	9901      	ldr	r1, [sp, #4]
 801b948:	9805      	ldr	r0, [sp, #20]
 801b94a:	9e06      	ldr	r6, [sp, #24]
 801b94c:	47b0      	blx	r6
 801b94e:	9b02      	ldr	r3, [sp, #8]
 801b950:	6821      	ldr	r1, [r4, #0]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	068a      	lsls	r2, r1, #26
 801b956:	d507      	bpl.n	801b968 <_scanf_i+0x1c8>
 801b958:	1d1a      	adds	r2, r3, #4
 801b95a:	9902      	ldr	r1, [sp, #8]
 801b95c:	600a      	str	r2, [r1, #0]
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	6018      	str	r0, [r3, #0]
 801b962:	e008      	b.n	801b976 <_scanf_i+0x1d6>
 801b964:	2700      	movs	r7, #0
 801b966:	e7d4      	b.n	801b912 <_scanf_i+0x172>
 801b968:	1d1a      	adds	r2, r3, #4
 801b96a:	07ce      	lsls	r6, r1, #31
 801b96c:	d5f5      	bpl.n	801b95a <_scanf_i+0x1ba>
 801b96e:	9902      	ldr	r1, [sp, #8]
 801b970:	600a      	str	r2, [r1, #0]
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	8018      	strh	r0, [r3, #0]
 801b976:	68e3      	ldr	r3, [r4, #12]
 801b978:	3301      	adds	r3, #1
 801b97a:	60e3      	str	r3, [r4, #12]
 801b97c:	2000      	movs	r0, #0
 801b97e:	9b01      	ldr	r3, [sp, #4]
 801b980:	1aed      	subs	r5, r5, r3
 801b982:	6923      	ldr	r3, [r4, #16]
 801b984:	19ef      	adds	r7, r5, r7
 801b986:	19df      	adds	r7, r3, r7
 801b988:	6127      	str	r7, [r4, #16]
 801b98a:	b00d      	add	sp, #52	; 0x34
 801b98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b98e:	46c0      	nop			; (mov r8, r8)
 801b990:	0801cd9c 	.word	0x0801cd9c
 801b994:	08018895 	.word	0x08018895
 801b998:	080189c9 	.word	0x080189c9
 801b99c:	fffffaff 	.word	0xfffffaff
 801b9a0:	0801d5dd 	.word	0x0801d5dd
 801b9a4:	fffff6ff 	.word	0xfffff6ff

0801b9a8 <_putc_r>:
 801b9a8:	b570      	push	{r4, r5, r6, lr}
 801b9aa:	0006      	movs	r6, r0
 801b9ac:	000d      	movs	r5, r1
 801b9ae:	0014      	movs	r4, r2
 801b9b0:	2800      	cmp	r0, #0
 801b9b2:	d004      	beq.n	801b9be <_putc_r+0x16>
 801b9b4:	6983      	ldr	r3, [r0, #24]
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d101      	bne.n	801b9be <_putc_r+0x16>
 801b9ba:	f7fe f8fb 	bl	8019bb4 <__sinit>
 801b9be:	4b1c      	ldr	r3, [pc, #112]	; (801ba30 <_putc_r+0x88>)
 801b9c0:	429c      	cmp	r4, r3
 801b9c2:	d124      	bne.n	801ba0e <_putc_r+0x66>
 801b9c4:	6874      	ldr	r4, [r6, #4]
 801b9c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b9c8:	07db      	lsls	r3, r3, #31
 801b9ca:	d405      	bmi.n	801b9d8 <_putc_r+0x30>
 801b9cc:	89a3      	ldrh	r3, [r4, #12]
 801b9ce:	059b      	lsls	r3, r3, #22
 801b9d0:	d402      	bmi.n	801b9d8 <_putc_r+0x30>
 801b9d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9d4:	f7fe fd63 	bl	801a49e <__retarget_lock_acquire_recursive>
 801b9d8:	68a3      	ldr	r3, [r4, #8]
 801b9da:	3b01      	subs	r3, #1
 801b9dc:	60a3      	str	r3, [r4, #8]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	da05      	bge.n	801b9ee <_putc_r+0x46>
 801b9e2:	69a2      	ldr	r2, [r4, #24]
 801b9e4:	4293      	cmp	r3, r2
 801b9e6:	db1c      	blt.n	801ba22 <_putc_r+0x7a>
 801b9e8:	b2eb      	uxtb	r3, r5
 801b9ea:	2b0a      	cmp	r3, #10
 801b9ec:	d019      	beq.n	801ba22 <_putc_r+0x7a>
 801b9ee:	6823      	ldr	r3, [r4, #0]
 801b9f0:	1c5a      	adds	r2, r3, #1
 801b9f2:	6022      	str	r2, [r4, #0]
 801b9f4:	701d      	strb	r5, [r3, #0]
 801b9f6:	b2ed      	uxtb	r5, r5
 801b9f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b9fa:	07db      	lsls	r3, r3, #31
 801b9fc:	d405      	bmi.n	801ba0a <_putc_r+0x62>
 801b9fe:	89a3      	ldrh	r3, [r4, #12]
 801ba00:	059b      	lsls	r3, r3, #22
 801ba02:	d402      	bmi.n	801ba0a <_putc_r+0x62>
 801ba04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba06:	f7fe fd4b 	bl	801a4a0 <__retarget_lock_release_recursive>
 801ba0a:	0028      	movs	r0, r5
 801ba0c:	bd70      	pop	{r4, r5, r6, pc}
 801ba0e:	4b09      	ldr	r3, [pc, #36]	; (801ba34 <_putc_r+0x8c>)
 801ba10:	429c      	cmp	r4, r3
 801ba12:	d101      	bne.n	801ba18 <_putc_r+0x70>
 801ba14:	68b4      	ldr	r4, [r6, #8]
 801ba16:	e7d6      	b.n	801b9c6 <_putc_r+0x1e>
 801ba18:	4b07      	ldr	r3, [pc, #28]	; (801ba38 <_putc_r+0x90>)
 801ba1a:	429c      	cmp	r4, r3
 801ba1c:	d1d3      	bne.n	801b9c6 <_putc_r+0x1e>
 801ba1e:	68f4      	ldr	r4, [r6, #12]
 801ba20:	e7d1      	b.n	801b9c6 <_putc_r+0x1e>
 801ba22:	0029      	movs	r1, r5
 801ba24:	0022      	movs	r2, r4
 801ba26:	0030      	movs	r0, r6
 801ba28:	f7fc ffde 	bl	80189e8 <__swbuf_r>
 801ba2c:	0005      	movs	r5, r0
 801ba2e:	e7e3      	b.n	801b9f8 <_putc_r+0x50>
 801ba30:	0801d3bc 	.word	0x0801d3bc
 801ba34:	0801d3dc 	.word	0x0801d3dc
 801ba38:	0801d39c 	.word	0x0801d39c

0801ba3c <_read_r>:
 801ba3c:	b570      	push	{r4, r5, r6, lr}
 801ba3e:	0004      	movs	r4, r0
 801ba40:	0008      	movs	r0, r1
 801ba42:	0011      	movs	r1, r2
 801ba44:	001a      	movs	r2, r3
 801ba46:	2300      	movs	r3, #0
 801ba48:	4d05      	ldr	r5, [pc, #20]	; (801ba60 <_read_r+0x24>)
 801ba4a:	602b      	str	r3, [r5, #0]
 801ba4c:	f7e8 fa2a 	bl	8003ea4 <_read>
 801ba50:	1c43      	adds	r3, r0, #1
 801ba52:	d103      	bne.n	801ba5c <_read_r+0x20>
 801ba54:	682b      	ldr	r3, [r5, #0]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d000      	beq.n	801ba5c <_read_r+0x20>
 801ba5a:	6023      	str	r3, [r4, #0]
 801ba5c:	bd70      	pop	{r4, r5, r6, pc}
 801ba5e:	46c0      	nop			; (mov r8, r8)
 801ba60:	200019f4 	.word	0x200019f4

0801ba64 <__srget_r>:
 801ba64:	b570      	push	{r4, r5, r6, lr}
 801ba66:	0005      	movs	r5, r0
 801ba68:	000c      	movs	r4, r1
 801ba6a:	2800      	cmp	r0, #0
 801ba6c:	d004      	beq.n	801ba78 <__srget_r+0x14>
 801ba6e:	6983      	ldr	r3, [r0, #24]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d101      	bne.n	801ba78 <__srget_r+0x14>
 801ba74:	f7fe f89e 	bl	8019bb4 <__sinit>
 801ba78:	4b0f      	ldr	r3, [pc, #60]	; (801bab8 <__srget_r+0x54>)
 801ba7a:	429c      	cmp	r4, r3
 801ba7c:	d10e      	bne.n	801ba9c <__srget_r+0x38>
 801ba7e:	686c      	ldr	r4, [r5, #4]
 801ba80:	0021      	movs	r1, r4
 801ba82:	0028      	movs	r0, r5
 801ba84:	f000 f92e 	bl	801bce4 <__srefill_r>
 801ba88:	2800      	cmp	r0, #0
 801ba8a:	d111      	bne.n	801bab0 <__srget_r+0x4c>
 801ba8c:	6863      	ldr	r3, [r4, #4]
 801ba8e:	3b01      	subs	r3, #1
 801ba90:	6063      	str	r3, [r4, #4]
 801ba92:	6823      	ldr	r3, [r4, #0]
 801ba94:	1c5a      	adds	r2, r3, #1
 801ba96:	6022      	str	r2, [r4, #0]
 801ba98:	7818      	ldrb	r0, [r3, #0]
 801ba9a:	bd70      	pop	{r4, r5, r6, pc}
 801ba9c:	4b07      	ldr	r3, [pc, #28]	; (801babc <__srget_r+0x58>)
 801ba9e:	429c      	cmp	r4, r3
 801baa0:	d101      	bne.n	801baa6 <__srget_r+0x42>
 801baa2:	68ac      	ldr	r4, [r5, #8]
 801baa4:	e7ec      	b.n	801ba80 <__srget_r+0x1c>
 801baa6:	4b06      	ldr	r3, [pc, #24]	; (801bac0 <__srget_r+0x5c>)
 801baa8:	429c      	cmp	r4, r3
 801baaa:	d1e9      	bne.n	801ba80 <__srget_r+0x1c>
 801baac:	68ec      	ldr	r4, [r5, #12]
 801baae:	e7e7      	b.n	801ba80 <__srget_r+0x1c>
 801bab0:	2001      	movs	r0, #1
 801bab2:	4240      	negs	r0, r0
 801bab4:	e7f1      	b.n	801ba9a <__srget_r+0x36>
 801bab6:	46c0      	nop			; (mov r8, r8)
 801bab8:	0801d3bc 	.word	0x0801d3bc
 801babc:	0801d3dc 	.word	0x0801d3dc
 801bac0:	0801d39c 	.word	0x0801d39c

0801bac4 <nan>:
 801bac4:	2000      	movs	r0, #0
 801bac6:	4901      	ldr	r1, [pc, #4]	; (801bacc <nan+0x8>)
 801bac8:	4770      	bx	lr
 801baca:	46c0      	nop			; (mov r8, r8)
 801bacc:	7ff80000 	.word	0x7ff80000

0801bad0 <__sccl>:
 801bad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bad2:	780b      	ldrb	r3, [r1, #0]
 801bad4:	0004      	movs	r4, r0
 801bad6:	2b5e      	cmp	r3, #94	; 0x5e
 801bad8:	d00c      	beq.n	801baf4 <__sccl+0x24>
 801bada:	1c48      	adds	r0, r1, #1
 801badc:	2100      	movs	r1, #0
 801bade:	0022      	movs	r2, r4
 801bae0:	1c65      	adds	r5, r4, #1
 801bae2:	35ff      	adds	r5, #255	; 0xff
 801bae4:	7011      	strb	r1, [r2, #0]
 801bae6:	3201      	adds	r2, #1
 801bae8:	42aa      	cmp	r2, r5
 801baea:	d1fb      	bne.n	801bae4 <__sccl+0x14>
 801baec:	2b00      	cmp	r3, #0
 801baee:	d105      	bne.n	801bafc <__sccl+0x2c>
 801baf0:	3801      	subs	r0, #1
 801baf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801baf4:	784b      	ldrb	r3, [r1, #1]
 801baf6:	1c88      	adds	r0, r1, #2
 801baf8:	2101      	movs	r1, #1
 801bafa:	e7f0      	b.n	801bade <__sccl+0xe>
 801bafc:	2201      	movs	r2, #1
 801bafe:	262d      	movs	r6, #45	; 0x2d
 801bb00:	4051      	eors	r1, r2
 801bb02:	0002      	movs	r2, r0
 801bb04:	54e1      	strb	r1, [r4, r3]
 801bb06:	7815      	ldrb	r5, [r2, #0]
 801bb08:	1c50      	adds	r0, r2, #1
 801bb0a:	2d2d      	cmp	r5, #45	; 0x2d
 801bb0c:	d009      	beq.n	801bb22 <__sccl+0x52>
 801bb0e:	2d5d      	cmp	r5, #93	; 0x5d
 801bb10:	d0ef      	beq.n	801baf2 <__sccl+0x22>
 801bb12:	2d00      	cmp	r5, #0
 801bb14:	d101      	bne.n	801bb1a <__sccl+0x4a>
 801bb16:	0010      	movs	r0, r2
 801bb18:	e7eb      	b.n	801baf2 <__sccl+0x22>
 801bb1a:	002b      	movs	r3, r5
 801bb1c:	e7f1      	b.n	801bb02 <__sccl+0x32>
 801bb1e:	0033      	movs	r3, r6
 801bb20:	e7ef      	b.n	801bb02 <__sccl+0x32>
 801bb22:	7855      	ldrb	r5, [r2, #1]
 801bb24:	2d5d      	cmp	r5, #93	; 0x5d
 801bb26:	d0fa      	beq.n	801bb1e <__sccl+0x4e>
 801bb28:	42ab      	cmp	r3, r5
 801bb2a:	dcf8      	bgt.n	801bb1e <__sccl+0x4e>
 801bb2c:	0018      	movs	r0, r3
 801bb2e:	3202      	adds	r2, #2
 801bb30:	3001      	adds	r0, #1
 801bb32:	5421      	strb	r1, [r4, r0]
 801bb34:	4285      	cmp	r5, r0
 801bb36:	dcfb      	bgt.n	801bb30 <__sccl+0x60>
 801bb38:	2000      	movs	r0, #0
 801bb3a:	1c5f      	adds	r7, r3, #1
 801bb3c:	42ab      	cmp	r3, r5
 801bb3e:	da01      	bge.n	801bb44 <__sccl+0x74>
 801bb40:	1ae8      	subs	r0, r5, r3
 801bb42:	3801      	subs	r0, #1
 801bb44:	183b      	adds	r3, r7, r0
 801bb46:	e7de      	b.n	801bb06 <__sccl+0x36>

0801bb48 <_raise_r>:
 801bb48:	b570      	push	{r4, r5, r6, lr}
 801bb4a:	0004      	movs	r4, r0
 801bb4c:	000d      	movs	r5, r1
 801bb4e:	291f      	cmp	r1, #31
 801bb50:	d904      	bls.n	801bb5c <_raise_r+0x14>
 801bb52:	2316      	movs	r3, #22
 801bb54:	6003      	str	r3, [r0, #0]
 801bb56:	2001      	movs	r0, #1
 801bb58:	4240      	negs	r0, r0
 801bb5a:	bd70      	pop	{r4, r5, r6, pc}
 801bb5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d004      	beq.n	801bb6c <_raise_r+0x24>
 801bb62:	008a      	lsls	r2, r1, #2
 801bb64:	189b      	adds	r3, r3, r2
 801bb66:	681a      	ldr	r2, [r3, #0]
 801bb68:	2a00      	cmp	r2, #0
 801bb6a:	d108      	bne.n	801bb7e <_raise_r+0x36>
 801bb6c:	0020      	movs	r0, r4
 801bb6e:	f000 f831 	bl	801bbd4 <_getpid_r>
 801bb72:	002a      	movs	r2, r5
 801bb74:	0001      	movs	r1, r0
 801bb76:	0020      	movs	r0, r4
 801bb78:	f000 f81a 	bl	801bbb0 <_kill_r>
 801bb7c:	e7ed      	b.n	801bb5a <_raise_r+0x12>
 801bb7e:	2000      	movs	r0, #0
 801bb80:	2a01      	cmp	r2, #1
 801bb82:	d0ea      	beq.n	801bb5a <_raise_r+0x12>
 801bb84:	1c51      	adds	r1, r2, #1
 801bb86:	d103      	bne.n	801bb90 <_raise_r+0x48>
 801bb88:	2316      	movs	r3, #22
 801bb8a:	3001      	adds	r0, #1
 801bb8c:	6023      	str	r3, [r4, #0]
 801bb8e:	e7e4      	b.n	801bb5a <_raise_r+0x12>
 801bb90:	2400      	movs	r4, #0
 801bb92:	0028      	movs	r0, r5
 801bb94:	601c      	str	r4, [r3, #0]
 801bb96:	4790      	blx	r2
 801bb98:	0020      	movs	r0, r4
 801bb9a:	e7de      	b.n	801bb5a <_raise_r+0x12>

0801bb9c <raise>:
 801bb9c:	b510      	push	{r4, lr}
 801bb9e:	4b03      	ldr	r3, [pc, #12]	; (801bbac <raise+0x10>)
 801bba0:	0001      	movs	r1, r0
 801bba2:	6818      	ldr	r0, [r3, #0]
 801bba4:	f7ff ffd0 	bl	801bb48 <_raise_r>
 801bba8:	bd10      	pop	{r4, pc}
 801bbaa:	46c0      	nop			; (mov r8, r8)
 801bbac:	20000254 	.word	0x20000254

0801bbb0 <_kill_r>:
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	b570      	push	{r4, r5, r6, lr}
 801bbb4:	4d06      	ldr	r5, [pc, #24]	; (801bbd0 <_kill_r+0x20>)
 801bbb6:	0004      	movs	r4, r0
 801bbb8:	0008      	movs	r0, r1
 801bbba:	0011      	movs	r1, r2
 801bbbc:	602b      	str	r3, [r5, #0]
 801bbbe:	f7e8 fd7d 	bl	80046bc <_kill>
 801bbc2:	1c43      	adds	r3, r0, #1
 801bbc4:	d103      	bne.n	801bbce <_kill_r+0x1e>
 801bbc6:	682b      	ldr	r3, [r5, #0]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d000      	beq.n	801bbce <_kill_r+0x1e>
 801bbcc:	6023      	str	r3, [r4, #0]
 801bbce:	bd70      	pop	{r4, r5, r6, pc}
 801bbd0:	200019f4 	.word	0x200019f4

0801bbd4 <_getpid_r>:
 801bbd4:	b510      	push	{r4, lr}
 801bbd6:	f7e8 fd6b 	bl	80046b0 <_getpid>
 801bbda:	bd10      	pop	{r4, pc}

0801bbdc <__submore>:
 801bbdc:	000b      	movs	r3, r1
 801bbde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bbe0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 801bbe2:	3344      	adds	r3, #68	; 0x44
 801bbe4:	000c      	movs	r4, r1
 801bbe6:	429d      	cmp	r5, r3
 801bbe8:	d11c      	bne.n	801bc24 <__submore+0x48>
 801bbea:	2680      	movs	r6, #128	; 0x80
 801bbec:	00f6      	lsls	r6, r6, #3
 801bbee:	0031      	movs	r1, r6
 801bbf0:	f7fa fe96 	bl	8016920 <_malloc_r>
 801bbf4:	2800      	cmp	r0, #0
 801bbf6:	d102      	bne.n	801bbfe <__submore+0x22>
 801bbf8:	2001      	movs	r0, #1
 801bbfa:	4240      	negs	r0, r0
 801bbfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bbfe:	0023      	movs	r3, r4
 801bc00:	6360      	str	r0, [r4, #52]	; 0x34
 801bc02:	63a6      	str	r6, [r4, #56]	; 0x38
 801bc04:	3346      	adds	r3, #70	; 0x46
 801bc06:	781a      	ldrb	r2, [r3, #0]
 801bc08:	4b10      	ldr	r3, [pc, #64]	; (801bc4c <__submore+0x70>)
 801bc0a:	54c2      	strb	r2, [r0, r3]
 801bc0c:	0023      	movs	r3, r4
 801bc0e:	3345      	adds	r3, #69	; 0x45
 801bc10:	781a      	ldrb	r2, [r3, #0]
 801bc12:	4b0f      	ldr	r3, [pc, #60]	; (801bc50 <__submore+0x74>)
 801bc14:	54c2      	strb	r2, [r0, r3]
 801bc16:	782a      	ldrb	r2, [r5, #0]
 801bc18:	4b0e      	ldr	r3, [pc, #56]	; (801bc54 <__submore+0x78>)
 801bc1a:	54c2      	strb	r2, [r0, r3]
 801bc1c:	18c0      	adds	r0, r0, r3
 801bc1e:	6020      	str	r0, [r4, #0]
 801bc20:	2000      	movs	r0, #0
 801bc22:	e7eb      	b.n	801bbfc <__submore+0x20>
 801bc24:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 801bc26:	0029      	movs	r1, r5
 801bc28:	0073      	lsls	r3, r6, #1
 801bc2a:	001a      	movs	r2, r3
 801bc2c:	9301      	str	r3, [sp, #4]
 801bc2e:	f7ff f9ee 	bl	801b00e <_realloc_r>
 801bc32:	1e05      	subs	r5, r0, #0
 801bc34:	d0e0      	beq.n	801bbf8 <__submore+0x1c>
 801bc36:	1987      	adds	r7, r0, r6
 801bc38:	0001      	movs	r1, r0
 801bc3a:	0032      	movs	r2, r6
 801bc3c:	0038      	movs	r0, r7
 801bc3e:	f7fa fdf1 	bl	8016824 <memcpy>
 801bc42:	9b01      	ldr	r3, [sp, #4]
 801bc44:	6027      	str	r7, [r4, #0]
 801bc46:	6365      	str	r5, [r4, #52]	; 0x34
 801bc48:	63a3      	str	r3, [r4, #56]	; 0x38
 801bc4a:	e7e9      	b.n	801bc20 <__submore+0x44>
 801bc4c:	000003ff 	.word	0x000003ff
 801bc50:	000003fe 	.word	0x000003fe
 801bc54:	000003fd 	.word	0x000003fd

0801bc58 <__ascii_wctomb>:
 801bc58:	0003      	movs	r3, r0
 801bc5a:	1e08      	subs	r0, r1, #0
 801bc5c:	d005      	beq.n	801bc6a <__ascii_wctomb+0x12>
 801bc5e:	2aff      	cmp	r2, #255	; 0xff
 801bc60:	d904      	bls.n	801bc6c <__ascii_wctomb+0x14>
 801bc62:	228a      	movs	r2, #138	; 0x8a
 801bc64:	2001      	movs	r0, #1
 801bc66:	601a      	str	r2, [r3, #0]
 801bc68:	4240      	negs	r0, r0
 801bc6a:	4770      	bx	lr
 801bc6c:	2001      	movs	r0, #1
 801bc6e:	700a      	strb	r2, [r1, #0]
 801bc70:	e7fb      	b.n	801bc6a <__ascii_wctomb+0x12>
	...

0801bc74 <_fstat_r>:
 801bc74:	2300      	movs	r3, #0
 801bc76:	b570      	push	{r4, r5, r6, lr}
 801bc78:	4d06      	ldr	r5, [pc, #24]	; (801bc94 <_fstat_r+0x20>)
 801bc7a:	0004      	movs	r4, r0
 801bc7c:	0008      	movs	r0, r1
 801bc7e:	0011      	movs	r1, r2
 801bc80:	602b      	str	r3, [r5, #0]
 801bc82:	f7e8 fd41 	bl	8004708 <_fstat>
 801bc86:	1c43      	adds	r3, r0, #1
 801bc88:	d103      	bne.n	801bc92 <_fstat_r+0x1e>
 801bc8a:	682b      	ldr	r3, [r5, #0]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d000      	beq.n	801bc92 <_fstat_r+0x1e>
 801bc90:	6023      	str	r3, [r4, #0]
 801bc92:	bd70      	pop	{r4, r5, r6, pc}
 801bc94:	200019f4 	.word	0x200019f4

0801bc98 <_isatty_r>:
 801bc98:	2300      	movs	r3, #0
 801bc9a:	b570      	push	{r4, r5, r6, lr}
 801bc9c:	4d06      	ldr	r5, [pc, #24]	; (801bcb8 <_isatty_r+0x20>)
 801bc9e:	0004      	movs	r4, r0
 801bca0:	0008      	movs	r0, r1
 801bca2:	602b      	str	r3, [r5, #0]
 801bca4:	f7e8 fd3e 	bl	8004724 <_isatty>
 801bca8:	1c43      	adds	r3, r0, #1
 801bcaa:	d103      	bne.n	801bcb4 <_isatty_r+0x1c>
 801bcac:	682b      	ldr	r3, [r5, #0]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d000      	beq.n	801bcb4 <_isatty_r+0x1c>
 801bcb2:	6023      	str	r3, [r4, #0]
 801bcb4:	bd70      	pop	{r4, r5, r6, pc}
 801bcb6:	46c0      	nop			; (mov r8, r8)
 801bcb8:	200019f4 	.word	0x200019f4

0801bcbc <_malloc_usable_size_r>:
 801bcbc:	1f0b      	subs	r3, r1, #4
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	1f18      	subs	r0, r3, #4
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	da01      	bge.n	801bcca <_malloc_usable_size_r+0xe>
 801bcc6:	580b      	ldr	r3, [r1, r0]
 801bcc8:	18c0      	adds	r0, r0, r3
 801bcca:	4770      	bx	lr

0801bccc <lflush>:
 801bccc:	2109      	movs	r1, #9
 801bcce:	b510      	push	{r4, lr}
 801bcd0:	8982      	ldrh	r2, [r0, #12]
 801bcd2:	0003      	movs	r3, r0
 801bcd4:	400a      	ands	r2, r1
 801bcd6:	2000      	movs	r0, #0
 801bcd8:	428a      	cmp	r2, r1
 801bcda:	d102      	bne.n	801bce2 <lflush+0x16>
 801bcdc:	0018      	movs	r0, r3
 801bcde:	f7fd fef1 	bl	8019ac4 <fflush>
 801bce2:	bd10      	pop	{r4, pc}

0801bce4 <__srefill_r>:
 801bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bce6:	0005      	movs	r5, r0
 801bce8:	000c      	movs	r4, r1
 801bcea:	2800      	cmp	r0, #0
 801bcec:	d004      	beq.n	801bcf8 <__srefill_r+0x14>
 801bcee:	6983      	ldr	r3, [r0, #24]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d101      	bne.n	801bcf8 <__srefill_r+0x14>
 801bcf4:	f7fd ff5e 	bl	8019bb4 <__sinit>
 801bcf8:	4b3d      	ldr	r3, [pc, #244]	; (801bdf0 <__srefill_r+0x10c>)
 801bcfa:	429c      	cmp	r4, r3
 801bcfc:	d10a      	bne.n	801bd14 <__srefill_r+0x30>
 801bcfe:	686c      	ldr	r4, [r5, #4]
 801bd00:	2300      	movs	r3, #0
 801bd02:	6063      	str	r3, [r4, #4]
 801bd04:	230c      	movs	r3, #12
 801bd06:	5ee2      	ldrsh	r2, [r4, r3]
 801bd08:	b293      	uxth	r3, r2
 801bd0a:	0691      	lsls	r1, r2, #26
 801bd0c:	d50c      	bpl.n	801bd28 <__srefill_r+0x44>
 801bd0e:	2001      	movs	r0, #1
 801bd10:	4240      	negs	r0, r0
 801bd12:	e069      	b.n	801bde8 <__srefill_r+0x104>
 801bd14:	4b37      	ldr	r3, [pc, #220]	; (801bdf4 <__srefill_r+0x110>)
 801bd16:	429c      	cmp	r4, r3
 801bd18:	d101      	bne.n	801bd1e <__srefill_r+0x3a>
 801bd1a:	68ac      	ldr	r4, [r5, #8]
 801bd1c:	e7f0      	b.n	801bd00 <__srefill_r+0x1c>
 801bd1e:	4b36      	ldr	r3, [pc, #216]	; (801bdf8 <__srefill_r+0x114>)
 801bd20:	429c      	cmp	r4, r3
 801bd22:	d1ed      	bne.n	801bd00 <__srefill_r+0x1c>
 801bd24:	68ec      	ldr	r4, [r5, #12]
 801bd26:	e7eb      	b.n	801bd00 <__srefill_r+0x1c>
 801bd28:	0759      	lsls	r1, r3, #29
 801bd2a:	d44b      	bmi.n	801bdc4 <__srefill_r+0xe0>
 801bd2c:	06d9      	lsls	r1, r3, #27
 801bd2e:	d405      	bmi.n	801bd3c <__srefill_r+0x58>
 801bd30:	2309      	movs	r3, #9
 801bd32:	602b      	str	r3, [r5, #0]
 801bd34:	2340      	movs	r3, #64	; 0x40
 801bd36:	4313      	orrs	r3, r2
 801bd38:	81a3      	strh	r3, [r4, #12]
 801bd3a:	e7e8      	b.n	801bd0e <__srefill_r+0x2a>
 801bd3c:	2608      	movs	r6, #8
 801bd3e:	4233      	tst	r3, r6
 801bd40:	d00a      	beq.n	801bd58 <__srefill_r+0x74>
 801bd42:	0021      	movs	r1, r4
 801bd44:	0028      	movs	r0, r5
 801bd46:	f7fd fe7d 	bl	8019a44 <_fflush_r>
 801bd4a:	2800      	cmp	r0, #0
 801bd4c:	d1df      	bne.n	801bd0e <__srefill_r+0x2a>
 801bd4e:	89a3      	ldrh	r3, [r4, #12]
 801bd50:	60a0      	str	r0, [r4, #8]
 801bd52:	43b3      	bics	r3, r6
 801bd54:	81a3      	strh	r3, [r4, #12]
 801bd56:	61a0      	str	r0, [r4, #24]
 801bd58:	2304      	movs	r3, #4
 801bd5a:	89a2      	ldrh	r2, [r4, #12]
 801bd5c:	4313      	orrs	r3, r2
 801bd5e:	81a3      	strh	r3, [r4, #12]
 801bd60:	6923      	ldr	r3, [r4, #16]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d103      	bne.n	801bd6e <__srefill_r+0x8a>
 801bd66:	0021      	movs	r1, r4
 801bd68:	0028      	movs	r0, r5
 801bd6a:	f7fe fbd7 	bl	801a51c <__smakebuf_r>
 801bd6e:	230c      	movs	r3, #12
 801bd70:	5ee7      	ldrsh	r7, [r4, r3]
 801bd72:	b2be      	uxth	r6, r7
 801bd74:	07bb      	lsls	r3, r7, #30
 801bd76:	d00f      	beq.n	801bd98 <__srefill_r+0xb4>
 801bd78:	2301      	movs	r3, #1
 801bd7a:	81a3      	strh	r3, [r4, #12]
 801bd7c:	4b1f      	ldr	r3, [pc, #124]	; (801bdfc <__srefill_r+0x118>)
 801bd7e:	4920      	ldr	r1, [pc, #128]	; (801be00 <__srefill_r+0x11c>)
 801bd80:	6818      	ldr	r0, [r3, #0]
 801bd82:	f7fd ff97 	bl	8019cb4 <_fwalk>
 801bd86:	2309      	movs	r3, #9
 801bd88:	81a7      	strh	r7, [r4, #12]
 801bd8a:	401e      	ands	r6, r3
 801bd8c:	429e      	cmp	r6, r3
 801bd8e:	d103      	bne.n	801bd98 <__srefill_r+0xb4>
 801bd90:	0021      	movs	r1, r4
 801bd92:	0028      	movs	r0, r5
 801bd94:	f7fd fdca 	bl	801992c <__sflush_r>
 801bd98:	6923      	ldr	r3, [r4, #16]
 801bd9a:	0028      	movs	r0, r5
 801bd9c:	6023      	str	r3, [r4, #0]
 801bd9e:	6922      	ldr	r2, [r4, #16]
 801bda0:	6963      	ldr	r3, [r4, #20]
 801bda2:	6a21      	ldr	r1, [r4, #32]
 801bda4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801bda6:	47a8      	blx	r5
 801bda8:	0003      	movs	r3, r0
 801bdaa:	6060      	str	r0, [r4, #4]
 801bdac:	2000      	movs	r0, #0
 801bdae:	4283      	cmp	r3, r0
 801bdb0:	dc1a      	bgt.n	801bde8 <__srefill_r+0x104>
 801bdb2:	210c      	movs	r1, #12
 801bdb4:	5e62      	ldrsh	r2, [r4, r1]
 801bdb6:	4283      	cmp	r3, r0
 801bdb8:	d117      	bne.n	801bdea <__srefill_r+0x106>
 801bdba:	2320      	movs	r3, #32
 801bdbc:	4313      	orrs	r3, r2
 801bdbe:	81a3      	strh	r3, [r4, #12]
 801bdc0:	3801      	subs	r0, #1
 801bdc2:	e011      	b.n	801bde8 <__srefill_r+0x104>
 801bdc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bdc6:	2900      	cmp	r1, #0
 801bdc8:	d0ca      	beq.n	801bd60 <__srefill_r+0x7c>
 801bdca:	0023      	movs	r3, r4
 801bdcc:	3344      	adds	r3, #68	; 0x44
 801bdce:	4299      	cmp	r1, r3
 801bdd0:	d002      	beq.n	801bdd8 <__srefill_r+0xf4>
 801bdd2:	0028      	movs	r0, r5
 801bdd4:	f7fa fd38 	bl	8016848 <_free_r>
 801bdd8:	2000      	movs	r0, #0
 801bdda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bddc:	6360      	str	r0, [r4, #52]	; 0x34
 801bdde:	6063      	str	r3, [r4, #4]
 801bde0:	4283      	cmp	r3, r0
 801bde2:	d0bd      	beq.n	801bd60 <__srefill_r+0x7c>
 801bde4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bde6:	6023      	str	r3, [r4, #0]
 801bde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdea:	6060      	str	r0, [r4, #4]
 801bdec:	e7a2      	b.n	801bd34 <__srefill_r+0x50>
 801bdee:	46c0      	nop			; (mov r8, r8)
 801bdf0:	0801d3bc 	.word	0x0801d3bc
 801bdf4:	0801d3dc 	.word	0x0801d3dc
 801bdf8:	0801d39c 	.word	0x0801d39c
 801bdfc:	0801d170 	.word	0x0801d170
 801be00:	0801bccd 	.word	0x0801bccd

0801be04 <_init>:
 801be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be06:	46c0      	nop			; (mov r8, r8)
 801be08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be0a:	bc08      	pop	{r3}
 801be0c:	469e      	mov	lr, r3
 801be0e:	4770      	bx	lr

0801be10 <_fini>:
 801be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be12:	46c0      	nop			; (mov r8, r8)
 801be14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be16:	bc08      	pop	{r3}
 801be18:	469e      	mov	lr, r3
 801be1a:	4770      	bx	lr
